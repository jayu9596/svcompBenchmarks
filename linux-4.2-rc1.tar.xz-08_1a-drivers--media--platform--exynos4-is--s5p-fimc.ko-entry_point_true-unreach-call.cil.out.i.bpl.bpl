var $M.0: [ref]i8;

var $M.1: [ref]i32;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]i24;

var $M.7: [ref]i8;

var $M.8: [ref]ref;

var $M.9: [ref]i8;

var $M.12: [ref]ref;

var $M.13: [ref]ref;

var $M.14: [ref]ref;

var $M.15: [ref]ref;

var $M.16: [ref]i24;

var $M.17: [ref]i8;

var $M.18: [ref]i32;

var $M.19: [ref]i32;

var $M.20: [ref]i16;

var $M.21: [ref]i8;

var $M.23: [ref]i8;

var $M.24: [ref]ref;

var $M.25: [ref]i32;

var $M.27: [ref]i8;

var $M.28: [ref]i8;

var $M.29: [ref]i8;

var $M.30: [ref]i8;

var $M.31: [ref]i8;

var $M.32: [ref]ref;

var $M.33: [ref]i32;

var $M.34: [ref]i32;

var $M.35: [ref]i32;

var $M.36: i32;

var $M.37: [ref]i8;

var $M.38: i32;

var $M.39: ref;

var $M.40: ref;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.52: i32;

var $M.53: i32;

var $M.54: i32;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: i32;

var $M.59: i32;

var $M.60: i32;

var $M.61: i32;

var $M.62: i32;

var $M.63: i32;

var $M.64: i32;

var $M.65: i32;

var $M.66: ref;

var $M.67: i32;

var $M.68: i32;

var $M.69: i32;

var $M.70: ref;

var $M.71: ref;

var $M.72: ref;

var $M.73: ref;

var $M.74: ref;

var $M.75: ref;

var $M.76: ref;

var $M.77: i32;

var $M.78: i32;

var $M.79: i32;

var $M.80: i32;

var $M.81: i32;

var $M.82: ref;

var $M.83: ref;

var $M.84: ref;

var $M.85: ref;

var $M.86: ref;

var $M.87: ref;

var $M.88: ref;

var $M.89: ref;

var $M.90: ref;

var $M.91: ref;

var $M.92: ref;

var $M.93: ref;

var $M.94: i32;

var $M.95: i32;

var $M.96: i32;

var $M.97: i32;

var $M.98: i32;

var $M.99: i32;

var $M.100: i32;

var $M.101: ref;

var $M.102: ref;

var $M.103: ref;

var $M.104: ref;

var $M.105: i32;

var $M.106: i32;

var $M.107: i32;

var $M.108: i32;

var $M.109: i32;

var $M.110: i32;

var $M.111: i32;

var $M.112: i32;

var $M.113: i32;

var $M.114: i32;

var $M.116: [ref]i8;

var $M.117: [ref]i8;

var $M.118: [ref]i8;

var $M.119: [ref]ref;

var $M.120: [ref]ref;

var $M.121: [ref]ref;

var $M.122: [ref]ref;

var $M.123: [ref]ref;

var $M.124: [ref]ref;

var $M.125: [ref]ref;

var $M.126: [ref]ref;

var $M.127: [ref]ref;

var $M.128: [ref]i8;

var $M.129: [ref]i32;

var $M.130: [ref]ref;

var $M.131: [ref]ref;

var $M.132: [ref]ref;

var $M.133: [ref]ref;

var $M.134: [ref]ref;

var $M.135: [ref]ref;

var $M.136: [ref]ref;

var $M.137: [ref]ref;

var $M.138: [ref]ref;

var $M.139: [ref]ref;

var $M.140: [ref]ref;

var $M.141: [ref]i8;

var $M.142: [ref]i8;

var $M.170: [ref]i32;

var $M.171: [ref]i8;

var $M.172: [ref]ref;

var $M.173: [ref]i16;

var $M.174: [ref]i16;

var $M.175: [ref]i16;

var $M.176: [ref]i16;

var $M.177: [ref]i8;

var $M.178: [ref]i8;

var $M.202: [ref]i8;

var $M.203: [ref]i8;

var $M.204: [ref]ref;

var $M.205: [ref]i16;

var $M.206: [ref]i16;

var $M.207: [ref]i16;

var $M.208: [ref]i16;

var $M.209: [ref]i16;

var $M.213: [ref]i8;

var $M.214: [ref]i8;

var $M.215: [ref]i8;

var $M.216: [ref]i8;

var $M.217: [ref]i8;

var $M.218: [ref]i8;

var $M.219: [ref]i8;

var $M.220: [ref]i8;

var $M.221: [ref]i8;

var $M.222: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 884810);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const probed_15: ref;

axiom probed_15 == $sub.ref(0, 1028);

const probed_1: ref;

axiom probed_1 == $sub.ref(0, 2056);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 3084);

const fimc_driver_group1: ref;

axiom fimc_driver_group1 == $sub.ref(0, 4116);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 5144);

const fimc_pm_ops_group1: ref;

axiom fimc_pm_ops_group1 == $sub.ref(0, 6176);

const ldv_state_variable_16: ref;

axiom ldv_state_variable_16 == $sub.ref(0, 7204);

const ldv_retval_23: ref;

axiom ldv_retval_23 == $sub.ref(0, 8232);

const ldv_retval_22: ref;

axiom ldv_retval_22 == $sub.ref(0, 9260);

const ldv_retval_21: ref;

axiom ldv_retval_21 == $sub.ref(0, 10288);

const ldv_retval_20: ref;

axiom ldv_retval_20 == $sub.ref(0, 11316);

const ldv_retval_19: ref;

axiom ldv_retval_19 == $sub.ref(0, 12344);

const ldv_retval_18: ref;

axiom ldv_retval_18 == $sub.ref(0, 13372);

const ldv_retval_17: ref;

axiom ldv_retval_17 == $sub.ref(0, 14400);

const ldv_retval_16: ref;

axiom ldv_retval_16 == $sub.ref(0, 15428);

const ldv_retval_15: ref;

axiom ldv_retval_15 == $sub.ref(0, 16456);

const ldv_retval_14: ref;

axiom ldv_retval_14 == $sub.ref(0, 17484);

const ldv_retval_13: ref;

axiom ldv_retval_13 == $sub.ref(0, 18512);

const ldv_retval_12: ref;

axiom ldv_retval_12 == $sub.ref(0, 19540);

const ldv_retval_11: ref;

axiom ldv_retval_11 == $sub.ref(0, 20568);

const ldv_retval_10: ref;

axiom ldv_retval_10 == $sub.ref(0, 21596);

const ldv_retval_9: ref;

axiom ldv_retval_9 == $sub.ref(0, 22624);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 23652);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 24680);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 25708);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 26736);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 27764);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 28792);

const ldv_state_variable_17: ref;

axiom ldv_state_variable_17 == $sub.ref(0, 29820);

const ldv_state_variable_15: ref;

axiom ldv_state_variable_15 == $sub.ref(0, 30848);

const ldv_retval_27: ref;

axiom ldv_retval_27 == $sub.ref(0, 31876);

const ldv_retval_26: ref;

axiom ldv_retval_26 == $sub.ref(0, 32904);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 33932);

const fimc_qops_group1: ref;

axiom fimc_qops_group1 == $sub.ref(0, 34964);

const fimc_qops_group0: ref;

axiom fimc_qops_group0 == $sub.ref(0, 35996);

const fimc_m2m_fops_group0: ref;

axiom fimc_m2m_fops_group0 == $sub.ref(0, 37028);

const fimc_m2m_ioctl_ops_group0: ref;

axiom fimc_m2m_ioctl_ops_group0 == $sub.ref(0, 38060);

const fimc_m2m_ioctl_ops_group2: ref;

axiom fimc_m2m_ioctl_ops_group2 == $sub.ref(0, 39092);

const fimc_m2m_ioctl_ops_group3: ref;

axiom fimc_m2m_ioctl_ops_group3 == $sub.ref(0, 40124);

const fimc_m2m_ioctl_ops_group1: ref;

axiom fimc_m2m_ioctl_ops_group1 == $sub.ref(0, 41156);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 42184);

const ldv_state_variable_13: ref;

axiom ldv_state_variable_13 == $sub.ref(0, 43212);

const ldv_state_variable_12: ref;

axiom ldv_state_variable_12 == $sub.ref(0, 44240);

const ldv_retval_25: ref;

axiom ldv_retval_25 == $sub.ref(0, 45268);

const ldv_state_variable_14: ref;

axiom ldv_state_variable_14 == $sub.ref(0, 46296);

const fimc_subdev_pad_ops_group0: ref;

axiom fimc_subdev_pad_ops_group0 == $sub.ref(0, 47328);

const fimc_subdev_pad_ops_group1: ref;

axiom fimc_subdev_pad_ops_group1 == $sub.ref(0, 48360);

const fimc_subdev_pad_ops_group2: ref;

axiom fimc_subdev_pad_ops_group2 == $sub.ref(0, 49392);

const fimc_subdev_pad_ops_group3: ref;

axiom fimc_subdev_pad_ops_group3 == $sub.ref(0, 50424);

const fimc_capture_qops_group1: ref;

axiom fimc_capture_qops_group1 == $sub.ref(0, 51456);

const fimc_capture_qops_group0: ref;

axiom fimc_capture_qops_group0 == $sub.ref(0, 52488);

const fimc_capture_sd_internal_ops_group0: ref;

axiom fimc_capture_sd_internal_ops_group0 == $sub.ref(0, 53520);

const fimc_capture_fops_group0: ref;

axiom fimc_capture_fops_group0 == $sub.ref(0, 54552);

const fimc_capture_ioctl_ops_group0: ref;

axiom fimc_capture_ioctl_ops_group0 == $sub.ref(0, 55584);

const fimc_capture_ioctl_ops_group1: ref;

axiom fimc_capture_ioctl_ops_group1 == $sub.ref(0, 56616);

const fimc_capture_ioctl_ops_group2: ref;

axiom fimc_capture_ioctl_ops_group2 == $sub.ref(0, 57648);

const fimc_capture_ioctl_ops_group3: ref;

axiom fimc_capture_ioctl_ops_group3 == $sub.ref(0, 58680);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 59708);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 60736);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 61764);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 62792);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 63820);

const ldv_retval_24: ref;

axiom ldv_retval_24 == $sub.ref(0, 64848);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 65876);

const fimc_md_driver_group1: ref;

axiom fimc_md_driver_group1 == $sub.ref(0, 66908);

const fimc_pipeline_ops_group0: ref;

axiom fimc_pipeline_ops_group0 == $sub.ref(0, 67940);

const cam_clk_ops_group0: ref;

axiom cam_clk_ops_group0 == $sub.ref(0, 68972);

const dev_attr_subdev_conf_mode_group0: ref;

axiom dev_attr_subdev_conf_mode_group0 == $sub.ref(0, 70004);

const dev_attr_subdev_conf_mode_group1: ref;

axiom dev_attr_subdev_conf_mode_group1 == $sub.ref(0, 71036);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 72064);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 73092);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 74120);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 75148);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 76176);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 77204);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 78232);

const ldv_retval_29: ref;

axiom ldv_retval_29 == $sub.ref(0, 79260);

const ldv_retval_28: ref;

axiom ldv_retval_28 == $sub.ref(0, 80288);

const ldv_module_refcounter: ref;

axiom ldv_module_refcounter == $sub.ref(0, 81316);

const {:count 2} __mod_platform__fimc_driver_ids_device_table: ref;

axiom __mod_platform__fimc_driver_ids_device_table == $sub.ref(0, 82404);

const {:count 2} __mod_of__fimc_md_of_match_device_table: ref;

axiom __mod_of__fimc_md_of_match_device_table == $sub.ref(0, 83828);

const {:count 2} fimc_md_of_match: ref;

axiom fimc_md_of_match == $sub.ref(0, 85252);

const fimc_md_driver: ref;

axiom fimc_md_driver == $sub.ref(0, 86452);

const cam_clk_ops: ref;

axiom cam_clk_ops == $sub.ref(0, 87636);

const dev_attr_subdev_conf_mode: ref;

axiom dev_attr_subdev_conf_mode == $sub.ref(0, 88708);

const fimc_pipeline_ops: ref;

axiom fimc_pipeline_ops == $sub.ref(0, 89772);

const fimc_capture_qops: ref;

axiom fimc_capture_qops == $sub.ref(0, 90876);

const fimc_capture_ioctl_ops: ref;

axiom fimc_capture_ioctl_ops == $sub.ref(0, 92812);

const fimc_capture_fops: ref;

axiom fimc_capture_fops == $sub.ref(0, 93916);

const fimc_capture_sd_internal_ops: ref;

axiom fimc_capture_sd_internal_ops == $sub.ref(0, 94972);

const fimc_sd_media_ops: ref;

axiom fimc_sd_media_ops == $sub.ref(0, 96012);

const fimc_subdev_pad_ops: ref;

axiom fimc_subdev_pad_ops == $sub.ref(0, 97148);

const fimc_subdev_ops: ref;

axiom fimc_subdev_ops == $sub.ref(0, 98236);

const fimc_qops: ref;

axiom fimc_qops == $sub.ref(0, 99340);

const m2m_ops: ref;

axiom m2m_ops == $sub.ref(0, 100404);

const fimc_m2m_ioctl_ops: ref;

axiom fimc_m2m_ioctl_ops == $sub.ref(0, 102340);

const fimc_m2m_fops: ref;

axiom fimc_m2m_fops == $sub.ref(0, 103444);

const {:count 4} pix_desc: ref;

axiom pix_desc == $sub.ref(0, 104516);

const {:count 2} fimc_clocks: ref;

axiom fimc_clocks == $sub.ref(0, 105556);

const fimc2_variant_s5p: ref;

axiom fimc2_variant_s5p == $sub.ref(0, 106604);

const fimc0_variant_s5p: ref;

axiom fimc0_variant_s5p == $sub.ref(0, 107652);

const fimc_drvdata_s5p: ref;

axiom fimc_drvdata_s5p == $sub.ref(0, 108732);

const {:count 5} fimc_driver_ids: ref;

axiom fimc_driver_ids == $sub.ref(0, 109916);

const fimc_pm_ops: ref;

axiom fimc_pm_ops == $sub.ref(0, 111124);

const fimc_drvdata_exynos4x12: ref;

axiom fimc_drvdata_exynos4x12 == $sub.ref(0, 112204);

const fimc_drvdata_exynos4210: ref;

axiom fimc_drvdata_exynos4210 == $sub.ref(0, 113284);

const fimc2_variant_s5pv210: ref;

axiom fimc2_variant_s5pv210 == $sub.ref(0, 114332);

const fimc1_variant_s5pv210: ref;

axiom fimc1_variant_s5pv210 == $sub.ref(0, 115380);

const {:count 4} s5p_pix_limit: ref;

axiom s5p_pix_limit == $sub.ref(0, 116452);

const fimc0_variant_s5pv210: ref;

axiom fimc0_variant_s5pv210 == $sub.ref(0, 117500);

const fimc_drvdata_s5pv210: ref;

axiom fimc_drvdata_s5pv210 == $sub.ref(0, 118580);

const {:count 4} fimc_of_match: ref;

axiom fimc_of_match == $sub.ref(0, 120404);

const fimc_driver: ref;

axiom fimc_driver == $sub.ref(0, 121604);

const fimc_ctrl_ops: ref;

axiom fimc_ctrl_ops == $sub.ref(0, 122652);

const {:count 20} fimc_formats: ref;

axiom fimc_formats == $sub.ref(0, 124476);

const {:count 7} .str.33: ref;

axiom .str.33 == $sub.ref(0, 125507);

const {:count 7} .str.34: ref;

axiom .str.34 == $sub.ref(0, 126538);

const {:count 17} .str.35: ref;

axiom .str.35 == $sub.ref(0, 127579);

const {:count 9} .str.36: ref;

axiom .str.36 == $sub.ref(0, 128612);

const {:count 9} .str.37: ref;

axiom .str.37 == $sub.ref(0, 129645);

const {:count 10} .str.38: ref;

axiom .str.38 == $sub.ref(0, 130679);

const {:count 25} .str.39: ref;

axiom .str.39 == $sub.ref(0, 131728);

const {:count 25} .str.40: ref;

axiom .str.40 == $sub.ref(0, 132777);

const {:count 25} .str.41: ref;

axiom .str.41 == $sub.ref(0, 133826);

const {:count 25} .str.42: ref;

axiom .str.42 == $sub.ref(0, 134875);

const {:count 26} .str.43: ref;

axiom .str.43 == $sub.ref(0, 135925);

const {:count 25} .str.44: ref;

axiom .str.44 == $sub.ref(0, 136974);

const {:count 25} .str.45: ref;

axiom .str.45 == $sub.ref(0, 138023);

const {:count 24} .str.46: ref;

axiom .str.46 == $sub.ref(0, 139071);

const {:count 25} .str.47: ref;

axiom .str.47 == $sub.ref(0, 140120);

const {:count 33} .str.48: ref;

axiom .str.48 == $sub.ref(0, 141177);

const {:count 34} .str.49: ref;

axiom .str.49 == $sub.ref(0, 142235);

const {:count 32} .str.50: ref;

axiom .str.50 == $sub.ref(0, 143291);

const {:count 18} .str.51: ref;

axiom .str.51 == $sub.ref(0, 144333);

const {:count 30} .str.52: ref;

axiom .str.52 == $sub.ref(0, 145387);

const {:count 13} .str.53: ref;

axiom .str.53 == $sub.ref(0, 146424);

const {:count 17} .str.80: ref;

axiom .str.80 == $sub.ref(0, 147465);

const {:count 39} .str.59: ref;

axiom .str.59 == $sub.ref(0, 148528);

const {:count 17} .str.60: ref;

axiom .str.60 == $sub.ref(0, 149569);

const {:count 23} .str.61: ref;

axiom .str.61 == $sub.ref(0, 150616);

const {:count 12} .str.62: ref;

axiom .str.62 == $sub.ref(0, 151652);

const {:count 28} .str.63: ref;

axiom .str.63 == $sub.ref(0, 152704);

const {:count 28} .str.64: ref;

axiom .str.64 == $sub.ref(0, 153756);

const {:count 9} .str.2: ref;

axiom .str.2 == $sub.ref(0, 154789);

const {:count 11} .str.65: ref;

axiom .str.65 == $sub.ref(0, 155824);

const {:count 224} .str.4: ref;

axiom .str.4 == $sub.ref(0, 157072);

const {:count 33} .str.66: ref;

axiom .str.66 == $sub.ref(0, 158129);

const {:count 8} .str.32: ref;

axiom .str.32 == $sub.ref(0, 159161);

const {:count 25} .str.28: ref;

axiom .str.28 == $sub.ref(0, 160210);

const {:count 227} .str.29: ref;

axiom .str.29 == $sub.ref(0, 161461);

const {:count 39} .str.30: ref;

axiom .str.30 == $sub.ref(0, 162524);

const {:count 38} .str.31: ref;

axiom .str.31 == $sub.ref(0, 163586);

const {:count 24} .str.10: ref;

axiom .str.10 == $sub.ref(0, 164634);

const {:count 47} .str.11: ref;

axiom .str.11 == $sub.ref(0, 165705);

const {:count 26} .str.13: ref;

axiom .str.13 == $sub.ref(0, 166755);

const {:count 223} .str.14: ref;

axiom .str.14 == $sub.ref(0, 168002);

const {:count 31} .str.15: ref;

axiom .str.15 == $sub.ref(0, 169057);

const {:count 23} .str.16: ref;

axiom .str.16 == $sub.ref(0, 170104);

const {:count 45} .str.17: ref;

axiom .str.17 == $sub.ref(0, 171173);

const .str: ref;

axiom .str == $sub.ref(0, 172225);

const {:count 28} .str.1: ref;

axiom .str.1 == $sub.ref(0, 173277);

const {:count 24} .str.18: ref;

axiom .str.18 == $sub.ref(0, 174325);

const {:count 46} .str.19: ref;

axiom .str.19 == $sub.ref(0, 175395);

const {:count 25} .str.78: ref;

axiom .str.78 == $sub.ref(0, 176444);

const {:count 15} .str.77: ref;

axiom .str.77 == $sub.ref(0, 177483);

const {:count 15} .str.67: ref;

axiom .str.67 == $sub.ref(0, 178522);

const {:count 19} .str.68: ref;

axiom .str.68 == $sub.ref(0, 179565);

const {:count 22} .str.69: ref;

axiom .str.69 == $sub.ref(0, 180611);

const {:count 26} .str.70: ref;

axiom .str.70 == $sub.ref(0, 181661);

const {:count 17} .str.71: ref;

axiom .str.71 == $sub.ref(0, 182702);

const {:count 23} .str.72: ref;

axiom .str.72 == $sub.ref(0, 183749);

const {:count 15} .str.73: ref;

axiom .str.73 == $sub.ref(0, 184788);

const {:count 15} .str.74: ref;

axiom .str.74 == $sub.ref(0, 185827);

const {:count 16} .str.75: ref;

axiom .str.75 == $sub.ref(0, 186867);

const {:count 5} .str.76: ref;

axiom .str.76 == $sub.ref(0, 187896);

const {:count 20} .str.54: ref;

axiom .str.54 == $sub.ref(0, 188940);

const {:count 29} .str.55: ref;

axiom .str.55 == $sub.ref(0, 189993);

const {:count 27} .str.94: ref;

axiom .str.94 == $sub.ref(0, 191044);

const {:count 18} .str.3: ref;

axiom .str.3 == $sub.ref(0, 192086);

const {:count 51} .str.5: ref;

axiom .str.5 == $sub.ref(0, 193161);

const {:count 54} .str.6: ref;

axiom .str.6 == $sub.ref(0, 194239);

const {:count 44} .str.20: ref;

axiom .str.20 == $sub.ref(0, 195307);

const {:count 45} .str.21: ref;

axiom .str.21 == $sub.ref(0, 196376);

const {:count 38} .str.22: ref;

axiom .str.22 == $sub.ref(0, 197438);

const {:count 41} .str.23: ref;

axiom .str.23 == $sub.ref(0, 198503);

const {:count 19} .str.7: ref;

axiom .str.7 == $sub.ref(0, 199546);

const {:count 29} .str.8: ref;

axiom .str.8 == $sub.ref(0, 200599);

const {:count 30} .str.9: ref;

axiom .str.9 == $sub.ref(0, 201653);

const {:count 22} .str.24: ref;

axiom .str.24 == $sub.ref(0, 202699);

const {:count 21} .str.58: ref;

axiom .str.58 == $sub.ref(0, 203744);

const {:count 12} .str.56: ref;

axiom .str.56 == $sub.ref(0, 204780);

const {:count 13} .str.57: ref;

axiom .str.57 == $sub.ref(0, 205817);

const {:count 10} .str.79: ref;

axiom .str.79 == $sub.ref(0, 206851);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 17} .str.92: ref;

axiom .str.92 == $sub.ref(0, 207892);

const {:count 223} .str.81: ref;

axiom .str.81 == $sub.ref(0, 209139);

const {:count 42} .str.93: ref;

axiom .str.93 == $sub.ref(0, 210205);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 14} .str.90: ref;

axiom .str.90 == $sub.ref(0, 211243);

const {:count 22} .str.91: ref;

axiom .str.91 == $sub.ref(0, 212289);

const vb2_dma_contig_memops: ref;

axiom vb2_dma_contig_memops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 31} .str.12: ref;

axiom .str.12 == $sub.ref(0, 213344);

const {:count 26} .str.86: ref;

axiom .str.86 == $sub.ref(0, 214394);

const {:count 53} .str.87: ref;

axiom .str.87 == $sub.ref(0, 215471);

const {:count 18} .str.88: ref;

axiom .str.88 == $sub.ref(0, 216513);

const {:count 49} .str.89: ref;

axiom .str.89 == $sub.ref(0, 217586);

const {:count 41} .str.83: ref;

axiom .str.83 == $sub.ref(0, 218651);

const {:count 27} .str.85: ref;

axiom .str.85 == $sub.ref(0, 219702);

const {:count 22} .str.84: ref;

axiom .str.84 == $sub.ref(0, 220748);

const {:count 14} .str.82: ref;

axiom .str.82 == $sub.ref(0, 221786);

const {:count 26} .str.103: ref;

axiom .str.103 == $sub.ref(0, 222836);

const {:count 34} .str.104: ref;

axiom .str.104 == $sub.ref(0, 223894);

const {:count 28} .str.100: ref;

axiom .str.100 == $sub.ref(0, 224946);

const {:count 27} .str.98: ref;

axiom .str.98 == $sub.ref(0, 225997);

const {:count 51} .str.99: ref;

axiom .str.99 == $sub.ref(0, 227072);

const {:count 26} .str.101: ref;

axiom .str.101 == $sub.ref(0, 228122);

const {:count 56} .str.102: ref;

axiom .str.102 == $sub.ref(0, 229202);

const {:count 20} .str.105: ref;

axiom .str.105 == $sub.ref(0, 230246);

const {:count 33} .str.106: ref;

axiom .str.106 == $sub.ref(0, 231303);

const {:count 24} .str.95: ref;

axiom .str.95 == $sub.ref(0, 232351);

const {:count 49} .str.96: ref;

axiom .str.96 == $sub.ref(0, 233424);

const {:count 16} .str.107: ref;

axiom .str.107 == $sub.ref(0, 234464);

const {:count 44} .str.108: ref;

axiom .str.108 == $sub.ref(0, 235532);

const {:count 16} .str.113: ref;

axiom .str.113 == $sub.ref(0, 236572);

const {:count 31} .str.27: ref;

axiom .str.27 == $sub.ref(0, 237627);

const {:count 12} .str.25: ref;

axiom .str.25 == $sub.ref(0, 238663);

const {:count 43} .str.26: ref;

axiom .str.26 == $sub.ref(0, 239730);

const {:count 21} .str.112: ref;

axiom .str.112 == $sub.ref(0, 240775);

const {:count 30} .str.111: ref;

axiom .str.111 == $sub.ref(0, 241829);

const {:count 18} .str.110: ref;

axiom .str.110 == $sub.ref(0, 242871);

const {:count 34} .str.97: ref;

axiom .str.97 == $sub.ref(0, 243929);

const {:count 40} .str.109: ref;

axiom .str.109 == $sub.ref(0, 244993);

const {:count 25} .str.160: ref;

axiom .str.160 == $sub.ref(0, 246042);

const {:count 22} .str.161: ref;

axiom .str.161 == $sub.ref(0, 247088);

const {:count 224} .str.132: ref;

axiom .str.132 == $sub.ref(0, 248336);

const {:count 17} .str.143: ref;

axiom .str.143 == $sub.ref(0, 249377);

const {:count 9} .str.156: ref;

axiom .str.156 == $sub.ref(0, 250410);

const {:count 9} .str.157: ref;

axiom .str.157 == $sub.ref(0, 251443);

const {:count 26} .str.158: ref;

axiom .str.158 == $sub.ref(0, 252493);

const {:count 36} .str.159: ref;

axiom .str.159 == $sub.ref(0, 253553);

const {:count 12} .str.116: ref;

axiom .str.116 == $sub.ref(0, 254589);

const {:count 32} .str.154: ref;

axiom .str.154 == $sub.ref(0, 255645);

const {:count 22} .str.114: ref;

axiom .str.114 == $sub.ref(0, 256691);

const {:count 17} .str.115: ref;

axiom .str.115 == $sub.ref(0, 257732);

const {:count 41} .str.117: ref;

axiom .str.117 == $sub.ref(0, 258797);

const {:count 42} .str.118: ref;

axiom .str.118 == $sub.ref(0, 259863);

const {:count 27} .str.119: ref;

axiom .str.119 == $sub.ref(0, 260914);

const {:count 41} .str.120: ref;

axiom .str.120 == $sub.ref(0, 261979);

const {:count 26} .str.148: ref;

axiom .str.148 == $sub.ref(0, 263029);

const {:count 65} .str.149: ref;

axiom .str.149 == $sub.ref(0, 264118);

const {:count 32} .str.150: ref;

axiom .str.150 == $sub.ref(0, 265174);

const {:count 25} .str.151: ref;

axiom .str.151 == $sub.ref(0, 266223);

const {:count 33} .str.152: ref;

axiom .str.152 == $sub.ref(0, 267280);

const {:count 32} .str.153: ref;

axiom .str.153 == $sub.ref(0, 268336);

const {:count 43} .str.147: ref;

axiom .str.147 == $sub.ref(0, 269403);

const {:count 19} .str.144: ref;

axiom .str.144 == $sub.ref(0, 270446);

const {:count 36} .str.145: ref;

axiom .str.145 == $sub.ref(0, 271506);

const {:count 29} .str.146: ref;

axiom .str.146 == $sub.ref(0, 272559);

const {:count 5} .str.128: ref;

axiom .str.128 == $sub.ref(0, 273588);

const {:count 15} .str.139: ref;

axiom .str.139 == $sub.ref(0, 274627);

const {:count 36} .str.140: ref;

axiom .str.140 == $sub.ref(0, 275687);

const {:count 36} .str.141: ref;

axiom .str.141 == $sub.ref(0, 276747);

const {:count 8} .str.142: ref;

axiom .str.142 == $sub.ref(0, 277779);

const {:count 8} .str.121: ref;

axiom .str.121 == $sub.ref(0, 278811);

const {:count 10} .str.129: ref;

axiom .str.129 == $sub.ref(0, 279845);

const {:count 34} .str.130: ref;

axiom .str.130 == $sub.ref(0, 280903);

const {:count 36} .str.131: ref;

axiom .str.131 == $sub.ref(0, 281963);

const {:count 39} .str.138: ref;

axiom .str.138 == $sub.ref(0, 283026);

const {:count 43} .str.135: ref;

axiom .str.135 == $sub.ref(0, 284093);

const {:count 5} .str.136: ref;

axiom .str.136 == $sub.ref(0, 285122);

const {:count 4} .str.137: ref;

axiom .str.137 == $sub.ref(0, 286150);

const {:count 37} .str.134: ref;

axiom .str.134 == $sub.ref(0, 287211);

const {:count 38} .str.133: ref;

axiom .str.133 == $sub.ref(0, 288273);

const {:count 8} .str.126: ref;

axiom .str.126 == $sub.ref(0, 289305);

const {:count 5} .str.127: ref;

axiom .str.127 == $sub.ref(0, 290334);

const {:count 11} .str.122: ref;

axiom .str.122 == $sub.ref(0, 291369);

const {:count 25} .str.123: ref;

axiom .str.123 == $sub.ref(0, 292418);

const {:count 12} .str.124: ref;

axiom .str.124 == $sub.ref(0, 293454);

const {:count 30} .str.125: ref;

axiom .str.125 == $sub.ref(0, 294508);

const {:count 9} .str.155: ref;

axiom .str.155 == $sub.ref(0, 295541);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 296573);

const {:count 3} .str.1.338: ref;

axiom .str.1.338 == $sub.ref(0, 297600);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 298638);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 299666);

const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 300698);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 0} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 3} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p4 := malloc($i0);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5} __VERIFIER_assume($i7);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 301730);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 302762);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 6} $r := $malloc($i0);
    return;
}



const fimc_s_ctrl: ref;

axiom fimc_s_ctrl == $sub.ref(0, 303794);

procedure fimc_s_ctrl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_s_ctrl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 584), 880));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 584), 880)), $mul.ref(400, 1));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p8 := spinlock_check($p7);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $i9 := _raw_spin_lock_irqsave($p8);
    call {:si_unique_call 9} {:cexpr "flags"} boogie_si_record_i64($i9);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $i10 := __fimc_s_ctrl($p4, $p0);
    call {:si_unique_call 11} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 584), 880)), $mul.ref(400, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} spin_unlock_irqrestore($p13, $i9);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 304826);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 305858);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 1} true;
    call {:si_unique_call 13} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 14} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __fimc_s_ctrl: ref;

axiom __fimc_s_ctrl == $sub.ref(0, 306890);

procedure __fimc_s_ctrl($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __fimc_s_ctrl($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i8;
  var $p25: ref;
  var $i26: i8;
  var $i27: i8;
  var $i28: i8;
  var $i29: i8;
  var $p30: ref;
  var $i31: i32;
  var $i32: i8;
  var $p33: ref;
  var $i34: i8;
  var $i35: i8;
  var $i36: i8;
  var $i37: i8;
  var $i38: i8;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $i44: i32;
  var $p46: ref;
  var $i47: i32;
  var $p49: ref;
  var $i50: i32;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i8;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(256, 1));
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(168, 1));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i8 := $and.i64($i7, 16);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(72, 1));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 9963807);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 9963810);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i12, 9963817);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i12, 9963817);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(392, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i83 := $or.i32($i82, 1);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(392, 1));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, $i83);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} set_bit(12, $p85);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(184, 1));
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i8($i73);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(144, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, $i74);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb10:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 9963810);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb14;

  $bb15:
    assume $i17 == 1;
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $i40 := constant_test_bit(5, $p39);
    call {:si_unique_call 16} {:cexpr "tmp"} boogie_si_record_i32($i40);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(184, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 90);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i60 == 1);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(184, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 270);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(184, 1));
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(380, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, $i70);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p5);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p64, $mul.ref(0, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb37;

  $bb38:
    assume $i68 == 1;
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb33;

  $bb26:
    assume $i41 == 1;
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(24, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(28, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(184, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $i56 := fimc_check_scaler_ratio($p0, $i44, $i47, $i50, $i53, $i55);
    call {:si_unique_call 21} {:cexpr "ret"} boogie_si_record_i32($i56);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i57 == 1;
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i12, 9963807);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb14;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(184, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i79 := fimc_set_color_effect($p0, $i78);
    call {:si_unique_call 18} {:cexpr "ret"} boogie_si_record_i32($i79);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb41:
    assume $i80 == 1;
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i10 := $i79;
    goto $bb3;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i12, 9963797);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i12, 9963797);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb14;

  $bb21:
    assume $i20 == 1;
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(184, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(384, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i35 := $and.i8($i32, 1);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i36 := $shl.i8($i35, 1);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i37 := $and.i8($i34, $sub.i8(0, 3));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i38 := $or.i8($i37, $i36);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i38);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i12, 9963796);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb14;

  $bb23:
    assume $i21 == 1;
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(184, 1));
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(384, 1));
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i27 := $and.i8($i24, 1);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i28 := $and.i8($i26, $sub.i8(0, 2));
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i29 := $or.i8($i28, $i27);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, $i29);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 307922);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 308954);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 309986);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const fimc_check_scaler_ratio: ref;

axiom fimc_check_scaler_ratio == $sub.ref(0, 311018);

procedure fimc_check_scaler_ratio($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fimc_check_scaler_ratio($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i17: i1;
  var $i16: i1;
  var $i18: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} {:cexpr "fimc_check_scaler_ratio:arg:sw"} boogie_si_record_i32($i1);
    call {:si_unique_call 27} {:cexpr "fimc_check_scaler_ratio:arg:sh"} boogie_si_record_i32($i2);
    call {:si_unique_call 28} {:cexpr "fimc_check_scaler_ratio:arg:dw"} boogie_si_record_i32($i3);
    call {:si_unique_call 29} {:cexpr "fimc_check_scaler_ratio:arg:dh"} boogie_si_record_i32($i4);
    call {:si_unique_call 30} {:cexpr "fimc_check_scaler_ratio:arg:rotation"} boogie_si_record_i32($i5);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 90);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i5, 270);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8, $i9 := $i3, $i4;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(328, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i20 := $mul.i32($i8, 64);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i21 := $sle.i32($i20, $i1);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i21 == 1);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i22 := $mul.i32($i9, 64);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i23 := $sle.i32($i22, $i2);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb12;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb15;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i1, $i8);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i16 := 0;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i18 := (if $i16 == 1 then 0 else $sub.i32(0, 22));
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb12;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i2, $i9);
    assume {:verifier.code 0} true;
    $i16 := $i17;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    call {:si_unique_call 31} {:cexpr "fimc_check_scaler_ratio:arg:__tmp"} boogie_si_record_i32($i3);
    call {:si_unique_call 32} {:cexpr "fimc_check_scaler_ratio:arg:dw"} boogie_si_record_i32($i4);
    call {:si_unique_call 33} {:cexpr "fimc_check_scaler_ratio:arg:dh"} boogie_si_record_i32($i3);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i8, $i9 := $i4, $i3;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const fimc_set_color_effect: ref;

axiom fimc_set_color_effect == $sub.ref(0, 312050);

procedure fimc_set_color_effect($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_set_color_effect($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i8;
  var $p34: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i8;
  var $p42: ref;
  var $i43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} {:cexpr "fimc_set_color_effect:arg:colorfx"} boogie_si_record_i32($i1);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i1, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i1, 15);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 15);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 22);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;

  $bb8:
    assume $i6 == 1;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(372, 1)), $mul.ref(0, 1));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 67108864);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(240, 1)), $mul.ref(8, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 208)), $mul.ref(184, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i32 := $ashr.i32($i31, 8);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(372, 1)), $mul.ref(4, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i33);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(240, 1)), $mul.ref(8, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 208)), $mul.ref(184, 1));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(372, 1)), $mul.ref(5, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, $i41);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb27;

  $bb6:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb11:
    assume $i7 == 1;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(372, 1)), $mul.ref(0, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 335544320);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i1, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i8 == 1);
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(372, 1)), $mul.ref(0, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 201326592);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb13:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb15:
    assume $i9 == 1;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(372, 1)), $mul.ref(0, 1));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 268435456);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i11 == 1);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(372, 1)), $mul.ref(0, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 134217728);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i11 == 1;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(372, 1)), $mul.ref(0, 1));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 67108864);
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(372, 1)), $mul.ref(4, 1));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 115);
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(372, 1)), $mul.ref(5, 1));
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $sub.i8(0, 111));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i12 == 1);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(372, 1)), $mul.ref(0, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 67108864);
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(372, 1)), $mul.ref(4, 1));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $sub.i8(0, 128));
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(372, 1)), $mul.ref(5, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, $sub.i8(0, 128));
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb21:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb23:
    assume $i13 == 1;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(372, 1)), $mul.ref(0, 1));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    goto $bb25;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 313082);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 36} devirtbounce(0, $p1, $i0, $p1);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    return;
}



const fimc_probe: ref;

axiom fimc_probe == $sub.ref(0, 314114);

procedure fimc_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation fimc_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i1;
  var $i72: i8;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i1;
  var $i85: i8;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i32;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i32;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $i107: i64;
  var $i108: i32;
  var $i109: i1;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $i118: i32;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $i126: i1;
  var $i127: i8;
  var $i128: i1;
  var $i129: i32;
  var $i130: i1;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $p137: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i1;
  var $i144: i8;
  var $i145: i1;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i149: i64;
  var $i150: i32;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i24;
  var $i158: i24;
  var $i159: i24;
  var $p160: ref;
  var $p161: ref;
  var $i162: i8;
  var $i163: i64;
  var $i164: i64;
  var $i165: i64;
  var $i166: i1;
  var $p167: ref;
  var $i168: i32;
  var $i169: i1;
  var $i170: i8;
  var $i171: i1;
  var $i172: i32;
  var $i173: i1;
  var $p175: ref;
  var $p176: ref;
  var $i136: i32;
  var $i122: i32;
  var $p178: ref;
  var $p179: ref;
  var $i11: i32;
  var vslice_dummy_var_63: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p1, 0);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $p7 := devm_kzalloc($p6, 5552, 208);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(232, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p0);
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1240, 1));
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(1456, 1));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p23 := $i2p.i64.ref($i22);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(264, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p23);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(8, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(272, 1));
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(264, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i31 == 1);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(272, 1));
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(264, 1));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 56)), $mul.ref(32, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i38 := $sge.i32($i33, $i37);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(272, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 0);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1240, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(304, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} __init_waitqueue_head($p57, .str.60, $p2);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} vslice_dummy_var_63 := spinlock_check($p58);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} __raw_spin_lock_init($p62, .str.61, $p3);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} __mutex_init($p63, .str.62, $p4);
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1240, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $p66 := fimc_get_sysreg_regmap($p65);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(248, 1));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, $p66);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(248, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $i71 := IS_ERR($p70);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i72 := $zext.i1.i8($i71);
    call {:si_unique_call 52} {:cexpr "tmp___1"} boogie_si_record_i8($i72);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i8.i1($i72);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p79 := platform_get_resource($p0, 512, 0);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p80 := devm_ioremap_resource($p6, $p79);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p81, $p80);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $i84 := IS_ERR($p83);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i85 := $zext.i1.i8($i84);
    call {:si_unique_call 58} {:cexpr "tmp___3"} boogie_si_record_i8($i85);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i8.i1($i85);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $p91 := platform_get_resource($p0, 1024, 0);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i93 := $eq.i64($i92, 0);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $i94 := fimc_clk_get($p8);
    call {:si_unique_call 64} {:cexpr "ret"} boogie_si_record_i32($i94);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.1, $p1);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 0);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(0, 8));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.1, $p1);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i107 := $zext.i32.i64($i106);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i108 := clk_set_rate($p105, $i107);
    call {:si_unique_call 66} {:cexpr "ret"} boogie_si_record_i32($i108);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i108, 0);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(0, 8));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $i113 := clk_enable($p112);
    call {:si_unique_call 68} {:cexpr "ret"} boogie_si_record_i32($i113);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i114 := $slt.i32($i113, 0);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $p115 := dev_name($p6);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p91, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i117 := $load.i64($M.0, $p116);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i64.i32($i117);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p8);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $i120 := devm_request_irq($p6, $i118, fimc_irq_handler, 0, $p115, $p119);
    call {:si_unique_call 71} {:cexpr "ret"} boogie_si_record_i32($i120);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i121 := $slt.i32($i120, 0);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $i123 := fimc_initialize_capture_subdev($p8);
    call {:si_unique_call 76} {:cexpr "ret"} boogie_si_record_i32($i123);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i123, 0);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p8);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} platform_set_drvdata($p0, $p125);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} pm_runtime_enable($p6);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $i126 := pm_runtime_enabled($p6);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i127 := $zext.i1.i8($i126);
    call {:si_unique_call 80} {:cexpr "tmp___5"} boogie_si_record_i8($i127);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i8.i1($i127);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i129 := 1;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $p137 := vb2_dma_contig_init_ctx($p6);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(5560, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p139, $p137);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(5560, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p141);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $i143 := IS_ERR($p142);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i144 := $zext.i1.i8($i143);
    call {:si_unique_call 86} {:cexpr "tmp___9"} boogie_si_record_i8($i144);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i8.i1($i144);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p151, .str.2);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p152, .str.65);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p153, .str.4);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p154, .str.66);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p155);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i157 := $load.i24($M.6, $p156);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i158 := $and.i24($i157, $sub.i24(0, 262144));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i159 := $or.i24($i158, 1028);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p156, $i159);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p160, 0);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i162 := $load.i8($M.7, $p161);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i163 := $zext.i8.i64($i162);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i164 := $and.i64($i163, 1);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $i165 := ldv__builtin_expect($i164, 0);
    call {:si_unique_call 93} {:cexpr "tmp___10"} boogie_si_record_i64($i165);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i166 := $ne.i64($i165, 0);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb64:
    assume $i166 == 1;
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(272, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i168 := $load.i32($M.0, $p167);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p6, .str.66, $i168);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb60:
    assume $i145 == 1;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(5560, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i149 := PTR_ERR($p148);
    call {:si_unique_call 88} {:cexpr "tmp___8"} boogie_si_record_i64($i149);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i150 := $trunc.i64.i32($i149);
    call {:si_unique_call 89} {:cexpr "ret"} boogie_si_record_i32($i150);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $i169 := pm_runtime_enabled($p6);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i170 := $zext.i1.i8($i169);
    call {:si_unique_call 91} {:cexpr "tmp___11"} boogie_si_record_i8($i170);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i171 := $trunc.i8.i1($i170);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    $i172 := 1;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i172, 0);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i136 := $i150;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} fimc_unregister_capture_subdev($p8);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i122 := $i136;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(0, 8));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.0, $p178);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} clk_disable($p179);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} fimc_clk_put($p8);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i11 := $i122;
    goto $bb3;

  $bb70:
    assume $i173 == 1;
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(1, 8));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.0, $p175);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} clk_disable($p176);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb67:
    assume $i171 == 1;
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i172 := 0;
    goto $bb69;

  $bb53:
    assume $i130 == 1;
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(1, 8));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $i134 := clk_enable($p133);
    call {:si_unique_call 82} {:cexpr "ret"} boogie_si_record_i32($i134);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i135 := $slt.i32($i134, 0);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb55:
    assume $i135 == 1;
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i136 := $i134;
    goto $bb57;

  $bb50:
    assume $i128 == 1;
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i129 := 0;
    goto $bb52;

  $bb47:
    assume $i124 == 1;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i122 := $i123;
    goto $bb45;

  $bb43:
    assume $i121 == 1;
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} dev_err.ref.ref.i32($p6, .str.64, $i120);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i122 := $i120;
    goto $bb45;

  $bb40:
    assume $i114 == 1;
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i11 := $i113;
    goto $bb3;

  $bb37:
    assume $i109 == 1;
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i11 := $i108;
    goto $bb3;

  $bb34:
    assume $i97 == 1;
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(264, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 56)), $mul.ref(40, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.0, $p100);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i64.i32($i101);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p1, $i102);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i95 == 1;
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i11 := $i94;
    goto $bb3;

  $bb28:
    assume $i93 == 1;
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} dev_err.ref.ref($p6, .str.63);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 6);
    goto $bb3;

  $bb25:
    assume $i86 == 1;
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i89 := PTR_ERR($p88);
    call {:si_unique_call 60} {:cexpr "tmp___2"} boogie_si_record_i64($i89);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i64.i32($i89);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i11 := $i90;
    goto $bb3;

  $bb22:
    assume $i73 == 1;
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(248, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $i77 := PTR_ERR($p76);
    call {:si_unique_call 54} {:cexpr "tmp___0"} boogie_si_record_i64($i77);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i64.i32($i77);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i11 := $i78;
    goto $bb3;

  $bb19:
    assume $i47 == 1;
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(272, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(264, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref($i50, 8));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(256, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $p55);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(272, 1));
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} dev_err.ref.ref.i32($p6, .str.59, $i43);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb12;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i17 := fimc_parse_dt($p8, $p1);
    call {:si_unique_call 44} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i11 := $i17;
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;
}



const fimc_remove: ref;

axiom fimc_remove == $sub.ref(0, 315146);

procedure fimc_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $p1 := platform_get_drvdata($p0);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} pm_runtime_disable($p3);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $i5 := pm_runtime_status_suspended($p4);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 99} {:cexpr "tmp___0"} boogie_si_record_i8($i6);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} pm_runtime_set_suspended($p13);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} fimc_unregister_capture_subdev($p2);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(5560, 1));
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} vb2_dma_contig_cleanup_ctx($p16);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(0, 8));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} clk_disable($p19);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} fimc_clk_put($p2);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} _dev_info.ref.ref($p20, .str.80);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(1, 8));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} clk_disable($p12);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const platform_get_drvdata: ref;

axiom platform_get_drvdata == $sub.ref(0, 316178);

procedure platform_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pm_runtime_disable: ref;

axiom pm_runtime_disable == $sub.ref(0, 317210);

procedure pm_runtime_disable($p0: ref);
  free requires assertsPassed;



implementation pm_runtime_disable($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} __pm_runtime_disable($p0, 1);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_status_suspended: ref;

axiom pm_runtime_status_suspended == $sub.ref(0, 318242);

procedure pm_runtime_status_suspended($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation pm_runtime_status_suspended($p0: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(544, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const clk_disable: ref;

axiom clk_disable == $sub.ref(0, 319274);

procedure clk_disable($p0: ref);
  free requires assertsPassed;



implementation clk_disable($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_set_suspended: ref;

axiom pm_runtime_set_suspended == $sub.ref(0, 320306);

procedure pm_runtime_set_suspended($p0: ref);
  free requires assertsPassed;



implementation pm_runtime_set_suspended($p0: ref)
{
  var vslice_dummy_var_64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} vslice_dummy_var_64 := __pm_runtime_set_status($p0, 2);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    return;
}



const fimc_unregister_capture_subdev: ref;

axiom fimc_unregister_capture_subdev == $sub.ref(0, 321338);

procedure fimc_unregister_capture_subdev($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_unregister_capture_subdev($p0: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} v4l2_device_unregister_subdev($p2);
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} media_entity_cleanup($p3);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} v4l2_set_subdevdata($p2, $0.ref);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    return;
}



const vb2_dma_contig_cleanup_ctx: ref;

axiom vb2_dma_contig_cleanup_ctx == $sub.ref(0, 322370);

procedure vb2_dma_contig_cleanup_ctx($p0: ref);
  free requires assertsPassed;



implementation vb2_dma_contig_cleanup_ctx($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    return;
}



const fimc_clk_put: ref;

axiom fimc_clk_put == $sub.ref(0, 323402);

procedure fimc_clk_put($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_clk_put($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(0, 8));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i5 := IS_ERR($p4);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 114} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(0, 8));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} clk_unprepare($p10);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(0, 8));
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} clk_put($p13);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $p14 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(0, 8));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p14);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(1, 8));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $i22 := IS_ERR($p21);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(1, 8));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} clk_unprepare($p27);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(1, 8));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} clk_put($p30);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $p31 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(1, 8));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p31);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 324434);

procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 325466);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $i1 := ldv_is_err($p0);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 123} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const clk_unprepare: ref;

axiom clk_unprepare == $sub.ref(0, 326498);

procedure clk_unprepare($p0: ref);
  free requires assertsPassed;



implementation clk_unprepare($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    return;
}



const clk_put: ref;

axiom clk_put == $sub.ref(0, 327530);

procedure clk_put($p0: ref);
  free requires assertsPassed;



implementation clk_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 328562);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 329594);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(2012, $i0);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 330626);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const v4l2_device_unregister_subdev: ref;

axiom v4l2_device_unregister_subdev == $sub.ref(0, 331658);

procedure v4l2_device_unregister_subdev($p0: ref);
  free requires assertsPassed;



implementation v4l2_device_unregister_subdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    return;
}



const media_entity_cleanup: ref;

axiom media_entity_cleanup == $sub.ref(0, 332690);

procedure media_entity_cleanup($p0: ref);
  free requires assertsPassed;



implementation media_entity_cleanup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_set_subdevdata: ref;

axiom v4l2_set_subdevdata == $sub.ref(0, 333722);

procedure v4l2_set_subdevdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation v4l2_set_subdevdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(224, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    return;
}



const __pm_runtime_set_status: ref;

axiom __pm_runtime_set_status == $sub.ref(0, 334754);

procedure __pm_runtime_set_status($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __pm_runtime_set_status($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 127} {:cexpr "__pm_runtime_set_status:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 1} true;
    call {:si_unique_call 128} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 129} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __pm_runtime_disable: ref;

axiom __pm_runtime_disable == $sub.ref(0, 335786);

procedure __pm_runtime_disable($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation __pm_runtime_disable($p0: ref, $i1: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} {:cexpr "__pm_runtime_disable:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 336818);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const devm_kzalloc: ref;

axiom devm_kzalloc == $sub.ref(0, 337850);

procedure devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} {:cexpr "devm_kzalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 132} {:cexpr "devm_kzalloc:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $p4 := devm_kmalloc($p0, $i1, $i3);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const fimc_parse_dt: ref;

axiom fimc_parse_dt == $sub.ref(0, 338882);

procedure fimc_parse_dt($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fimc_parse_dt($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i16;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i16;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i16;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i16;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i16;
  var $i51: i32;
  var $i52: i32;
  var $i53: i16;
  var $p54: ref;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i16;
  var $i59: i32;
  var $i60: i32;
  var $i61: i16;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i16;
  var $i69: i32;
  var $i70: i32;
  var $i71: i16;
  var $p72: ref;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i16;
  var $i77: i32;
  var $i78: i32;
  var $i79: i16;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i32;
  var $i87: i8;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i8;
  var $p92: ref;
  var $i93: i8;
  var $i94: i8;
  var $i95: i8;
  var $i96: i8;
  var $i97: i1;
  var $i98: i32;
  var $i99: i8;
  var $p100: ref;
  var $i101: i8;
  var $i102: i8;
  var $i103: i8;
  var $i104: i8;
  var $i105: i8;
  var $i106: i1;
  var $i107: i8;
  var $i108: i1;
  var $i109: i8;
  var $p110: ref;
  var $i111: i8;
  var $i112: i8;
  var $i113: i8;
  var $i114: i8;
  var $i115: i8;
  var $i116: i1;
  var $i117: i8;
  var $i118: i1;
  var $i119: i8;
  var $p120: ref;
  var $i121: i8;
  var $i122: i8;
  var $i123: i8;
  var $i124: i8;
  var $i125: i8;
  var $i126: i1;
  var $i127: i8;
  var $i128: i1;
  var $i129: i8;
  var $p130: ref;
  var $i131: i8;
  var $i132: i8;
  var $i133: i8;
  var $i134: i8;
  var $i135: i8;
  var $i137: i32;
  var $p138: ref;
  var $p139: ref;
  var $i11: i32;
  var vslice_dummy_var_65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(232, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1480)), $mul.ref(16, 1));
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1240, 1));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i8 := of_property_read_bool($p7, .str.67);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 136} {:cexpr "tmp"} boogie_si_record_i8($i9);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $p12 := devm_kzalloc($p5, 36, 208);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} $p16 := of_match_node(fimc_of_match, $p7);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref(0, 200)), $mul.ref(192, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(264, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p20);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p2);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $i24 := of_property_read_u32_array($p7, .str.68, $p23, 4);
    call {:si_unique_call 140} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p13);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(1, 12));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p28);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p26, $mul.ref(1, 12)), $mul.ref(0, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, $i30);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.1, $p32);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p26, $mul.ref(1, 12)), $mul.ref(2, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p35, $i34);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 4));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.1, $p36);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p26, $mul.ref(1, 12)), $mul.ref(8, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, $i38);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(3, 4));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.1, $p40);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p26, $mul.ref(1, 12)), $mul.ref(10, 1));
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, $i42);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p13, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $p27);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p2);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $i46 := of_property_read_u32_array($p7, .str.69, $p45, 2);
    call {:si_unique_call 142} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i47 == 1);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i52 := 16;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p13, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p54, $i53);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i46, 0);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i55 == 1);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i60 := 16;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i16($i60);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p13, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p62, $i61);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p2);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $i64 := of_property_read_u32_array($p7, .str.70, $p63, 2);
    call {:si_unique_call 144} {:cexpr "ret"} boogie_si_record_i32($i64);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i65 == 1);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i70 := 2;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i70);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p13, $mul.ref(0, 24)), $mul.ref(22, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p72, $i71);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i64, 0);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i73 == 1);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i78 := 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i16($i78);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p13, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p80, $i79);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p2);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p81, $mul.ref(1, 4));
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $i83 := of_property_read_u32($p7, .str.71, $p82);
    call {:si_unique_call 146} {:cexpr "ret"} boogie_si_record_i32($i83);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 0);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i84 == 1);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i90 := 1;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i32.i8($i90);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p13);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.0, $p92);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i94 := $and.i8($i91, 1);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i95 := $and.i8($i93, $sub.i8(0, 2));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i96 := $or.i8($i95, $i94);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p92, $i96);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i83, 0);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i98 := $zext.i1.i32($i97);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i8($i98);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p13);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.0, $p100);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i102 := $and.i8($i99, 1);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i103 := $shl.i8($i102, 1);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i104 := $and.i8($i101, $sub.i8(0, 3));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i105 := $or.i8($i104, $i103);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p100, $i105);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $i106 := of_property_read_bool($p7, .str.72);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i107 := $zext.i1.i8($i106);
    call {:si_unique_call 148} {:cexpr "tmp___1"} boogie_si_record_i8($i107);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i8.i1($i107);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i109 := $zext.i1.i8($i108);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p13);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i112 := $and.i8($i109, 1);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i113 := $shl.i8($i112, 2);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i114 := $and.i8($i111, $sub.i8(0, 5));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i115 := $or.i8($i114, $i113);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p110, $i115);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $i116 := of_property_read_bool($p7, .str.73);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i117 := $zext.i1.i8($i116);
    call {:si_unique_call 150} {:cexpr "tmp___2"} boogie_si_record_i8($i117);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i8.i1($i117);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i119 := $zext.i1.i8($i118);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p13);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.0, $p120);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i122 := $and.i8($i119, 1);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i123 := $shl.i8($i122, 4);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i124 := $and.i8($i121, $sub.i8(0, 17));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i125 := $or.i8($i124, $i123);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p120, $i125);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $i126 := of_property_read_bool($p7, .str.74);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i127 := $zext.i1.i8($i126);
    call {:si_unique_call 152} {:cexpr "tmp___3"} boogie_si_record_i8($i127);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i8.i1($i127);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i129 := $zext.i1.i8($i128);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p13);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.0, $p130);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i132 := $and.i8($i129, 1);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i133 := $shl.i8($i132, 3);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i134 := $and.i8($i131, $sub.i8(0, 9));
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i135 := $or.i8($i134, $i133);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p130, $i135);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} vslice_dummy_var_65 := of_property_read_u32($p7, .str.75, $p1);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $i137 := of_alias_get_id($p7, .str.76);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(272, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p138, $i137);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(256, 1));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p139, $p12);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb26:
    assume $i84 == 1;
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.1, $p85);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i8($i86);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i89 := $and.i32($i88, 1);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i90 := $i89;
    goto $bb28;

  $bb23:
    assume $i73 == 1;
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.1, $p74);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i16($i75);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i76);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i78 := $i77;
    goto $bb25;

  $bb20:
    assume $i65 == 1;
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.1, $p66);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i67);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i70 := $i69;
    goto $bb22;

  $bb17:
    assume $i55 == 1;
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.1, $p56);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i16($i57);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i60 := $i59;
    goto $bb19;

  $bb14:
    assume $i47 == 1;
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.1, $p48);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb16;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i11 := $i24;
    goto $bb3;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 19);
    goto $bb3;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 339914);

procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i64($p0: ref, $p1: ref, p.2: ref, p.3: i64);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i64($p0: ref, $p1: ref, p.2: ref, p.3: i64)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 340946);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 341978);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 343010);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    return;
}



const fimc_get_sysreg_regmap: ref;

axiom fimc_get_sysreg_regmap == $sub.ref(0, 344042);

procedure fimc_get_sysreg_regmap($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fimc_get_sysreg_regmap($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $p1 := syscon_regmap_lookup_by_phandle($p0, .str.77);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 345074);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 157} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const platform_get_resource: ref;

axiom platform_get_resource == $sub.ref(0, 346106);

procedure platform_get_resource($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_resource($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} {:cexpr "platform_get_resource:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 159} {:cexpr "platform_get_resource:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $p3 := external_alloc();
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const devm_ioremap_resource: ref;

axiom devm_ioremap_resource == $sub.ref(0, 347138);

procedure devm_ioremap_resource($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devm_ioremap_resource($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p2 := external_alloc();
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fimc_clk_get: ref;

axiom fimc_clk_get == $sub.ref(0, 348170);

procedure fimc_clk_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_clk_get($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $i17: i8;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i39: i64;
  var $p41: ref;
  var $i26: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $i42: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i1;
  var $i61: i8;
  var $i62: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p71: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $p1 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(0, 8));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p1);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $p68 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(1, 8));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, $p68);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(232, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.8, fimc_clocks);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $p9 := clk_get($p7, $p8);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(0, 8));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p9);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(0, 8));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i16 := IS_ERR($p15);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i8($i16);
    call {:si_unique_call 166} {:cexpr "tmp___1"} boogie_si_record_i8($i17);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i19 := 0;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(0, 8));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $i30 := clk_prepare($p29);
    call {:si_unique_call 172} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i32 := 0;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(232, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.8, $add.ref($add.ref(fimc_clocks, $mul.ref(0, 16)), $mul.ref(1, 8)));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $p53 := clk_get($p51, $p52);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(1, 8));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, $p53);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(1, 8));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i60 := IS_ERR($p59);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i8($i60);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i8.i1($i61);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i19 := 1;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(1, 8));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $i66 := clk_prepare($p65);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i66, 0);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i32 := 1;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref($i33, 8));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} clk_put($p36);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $p37 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i32);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref($i39, 8));
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $p37);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i26 := $i32;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} fimc_clk_put($p0);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(232, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i26);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref(fimc_clocks, $mul.ref(0, 16)), $mul.ref($i46, 8));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.8, $p47);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} dev_err.ref.ref.ref($p45, .str.78, $p48);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 6);
    goto $bb18;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref($i20, 8));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $i25 := PTR_ERR($p24);
    call {:si_unique_call 168} {:cexpr "tmp___0"} boogie_si_record_i64($i25);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i26 := $i19;
    goto $bb10;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb13;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb8;
}



const clk_set_rate: ref;

axiom clk_set_rate == $sub.ref(0, 349202);

procedure clk_set_rate($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation clk_set_rate($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 178} {:cexpr "clk_set_rate:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 1} true;
    call {:si_unique_call 179} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 180} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const clk_enable: ref;

axiom clk_enable == $sub.ref(0, 350234);

procedure clk_enable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation clk_enable($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 1} true;
    call {:si_unique_call 181} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 182} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 351266);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $p9 := kobject_name($p8);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const fimc_irq_handler: ref;

axiom fimc_irq_handler == $sub.ref(0, 352298);

procedure fimc_irq_handler($i0: i32, $p1: ref) returns ($r: i32);



const devm_request_irq: ref;

axiom devm_request_irq == $sub.ref(0, 353330);

procedure devm_request_irq($p0: ref, $i1: i32, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devm_request_irq($p0: ref, $i1: i32, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} {:cexpr "devm_request_irq:arg:irq"} boogie_si_record_i32($i1);
    call {:si_unique_call 185} {:cexpr "devm_request_irq:arg:irqflags"} boogie_si_record_i64($i3);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $i6 := devm_request_threaded_irq($p0, $i1, $p2, $0.ref, $i3, $p4, $p5);
    call {:si_unique_call 187} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const fimc_initialize_capture_subdev: ref;

axiom fimc_initialize_capture_subdev == $sub.ref(0, 354362);

procedure fimc_initialize_capture_subdev($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_initialize_capture_subdev($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p15: ref;
  var $p19: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i30: i32;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} v4l2_subdev_init($p2, fimc_subdev_ops);
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(148, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 4);
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(148, 1));
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(184, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(272, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} vslice_dummy_var_66 := snprintf.ref.i64.ref.i32($p8, 32, .str.32, $i10);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2192, 1)), $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, 1);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2192, 1)), $mul.ref(1, 24)), $mul.ref(16, 1));
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, 1);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2192, 1)), $mul.ref(2, 24)), $mul.ref(16, 1));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p23, 2);
    $p24 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2192, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i28 := media_entity_init($p24, 3, $p27, 0);
    call {:si_unique_call 191} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p32 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, fimc_sd_media_ops);
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(168, 1));
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, fimc_capture_sd_internal_ops);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p0);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} v4l2_set_subdevdata($p2, $p34);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i30 := $i28;
    goto $bb3;
}



const platform_set_drvdata: ref;

axiom platform_set_drvdata == $sub.ref(0, 355394);

procedure platform_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation platform_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} dev_set_drvdata($p2, $p1);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_enable: ref;

axiom pm_runtime_enable == $sub.ref(0, 356426);

procedure pm_runtime_enable($p0: ref);
  free requires assertsPassed;



implementation pm_runtime_enable($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_enabled: ref;

axiom pm_runtime_enabled == $sub.ref(0, 357458);

procedure pm_runtime_enabled($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation pm_runtime_enabled($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(1048, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const vb2_dma_contig_init_ctx: ref;

axiom vb2_dma_contig_init_ctx == $sub.ref(0, 358490);

procedure vb2_dma_contig_init_ctx($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vb2_dma_contig_init_ctx($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $p1 := external_alloc();
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 359522);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 196} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 360554);

procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 361586);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 1} true;
    call {:si_unique_call 197} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 198} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 362618);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_subdev_init: ref;

axiom v4l2_subdev_init == $sub.ref(0, 363650);

procedure v4l2_subdev_init($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation v4l2_subdev_init($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 364682);

procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



const media_entity_init: ref;

axiom media_entity_init == $sub.ref(0, 365714);

procedure media_entity_init($p0: ref, $i1: i16, $p2: ref, $i3: i16) returns ($r: i32);
  free requires assertsPassed;



implementation media_entity_init($p0: ref, $i1: i16, $p2: ref, $i3: i16) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 199} {:cexpr "media_entity_init:arg:arg1"} boogie_si_record_i16($i1);
    call {:si_unique_call 200} {:cexpr "media_entity_init:arg:arg3"} boogie_si_record_i16($i3);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 1} true;
    call {:si_unique_call 201} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 202} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const devm_request_threaded_irq: ref;

axiom devm_request_threaded_irq == $sub.ref(0, 366746);

procedure devm_request_threaded_irq($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devm_request_threaded_irq($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i64, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $i7: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 203} {:cexpr "devm_request_threaded_irq:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 204} {:cexpr "devm_request_threaded_irq:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 1} true;
    call {:si_unique_call 205} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 206} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const fimc_hw_clear_irq: ref;

axiom fimc_hw_clear_irq == $sub.ref(0, 367778);

procedure fimc_hw_clear_irq($p0: ref);



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 368810);

procedure spin_lock($p0: ref);



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 369842);

procedure test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 208} {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 209} devirtbounce.1(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.9, $p2);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 370874);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);



const v4l2_m2m_get_curr_priv: ref;

axiom v4l2_m2m_get_curr_priv == $sub.ref(0, 371906);

procedure v4l2_m2m_get_curr_priv($p0: ref) returns ($r: ref);



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 372938);

procedure spin_unlock($p0: ref);



const fimc_m2m_job_finish: ref;

axiom fimc_m2m_job_finish == $sub.ref(0, 373970);

procedure fimc_m2m_job_finish($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation fimc_m2m_job_finish($p0: ref, $i1: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} {:cexpr "fimc_m2m_job_finish:arg:vb_state"} boogie_si_record_i32($i1);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(408, 1)), $mul.ref(168, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(408, 1)), $mul.ref(168, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p12 := v4l2_m2m_src_buf_remove($p11);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(408, 1)), $mul.ref(168, 1));
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $p17 := v4l2_m2m_dst_buf_remove($p16);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p13);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p18);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb10;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} v4l2_m2m_buf_done($p13, $i1);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} v4l2_m2m_buf_done($p18, $i1);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(1840, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(408, 1)), $mul.ref(168, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} v4l2_m2m_job_finish($p27, $p30);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const fimc_capture_irq_handler: ref;

axiom fimc_capture_irq_handler == $sub.ref(0, 375002);

procedure fimc_capture_irq_handler($p0: ref, $i1: i32);



const list_empty: ref;

axiom list_empty == $sub.ref(0, 376034);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ktime_get_real_ts: ref;

axiom ktime_get_real_ts == $sub.ref(0, 377066);

procedure ktime_get_real_ts($p0: ref);



const fimc_active_queue_pop: ref;

axiom fimc_active_queue_pop == $sub.ref(0, 378098);

procedure fimc_active_queue_pop($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_active_queue_pop($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3288)), $mul.ref(2392, 1)), $mul.ref(0, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 928), 960));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 928), 960)), $mul.ref(928, 1));
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} list_del($p6);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3288)), $mul.ref(3256, 1));
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i8, 1);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3288)), $mul.ref(3256, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const vb2_buffer_done: ref;

axiom vb2_buffer_done == $sub.ref(0, 379130);

procedure vb2_buffer_done($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation vb2_buffer_done($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} {:cexpr "vb2_buffer_done:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    return;
}



const fimc_pending_queue_pop: ref;

axiom fimc_pending_queue_pop == $sub.ref(0, 380162);

procedure fimc_pending_queue_pop($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fimc_pending_queue_pop($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3288)), $mul.ref(2376, 1)), $mul.ref(0, 1));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 928), 960));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 928), 960)), $mul.ref(928, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} list_del($p6);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const fimc_hw_set_output_addr: ref;

axiom fimc_hw_set_output_addr == $sub.ref(0, 381194);

procedure fimc_hw_set_output_addr($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr;



implementation fimc_hw_set_output_addr($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i24;
  var $i38: i24;
  var $i39: i24;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 220} {:cexpr "fimc_hw_set_output_addr:arg:index"} boogie_si_record_i32($i2);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb4;

  $bb4:
    call $i6, $p7, $i8, $p9, $p10, $i11, $i12, $i13, $p14, $p15, $i16, $p17, $p18, $i19, $i20, $i21, $p22, $p23, $i24, $p25, $p26, $i27, $i28, $i29, $p30, $p31, $p32, $p33, $p34, $p35, $p36, $i37, $i38, $i39, $p40, $p41, $i42, $i43, $i44, $i45, $i46, $p47, $i48, $p49, $i50, $p51, $i52, $i53, $i54, $i55 := fimc_hw_set_output_addr_loop_$bb4($p0, $p1, $i2, $p3, $i6, $p7, $i8, $p9, $p10, $i11, $i12, $i13, $p14, $p15, $i16, $p17, $p18, $i19, $i20, $i21, $p22, $p23, $i24, $p25, $p26, $i27, $i28, $i29, $p30, $p31, $p32, $p33, $p34, $p35, $p36, $i37, $i38, $i39, $p40, $p41, $i42, $i43, $i44, $i45, $i46, $p47, $i48, $p49, $i50, $p51, $i52, $i53, $i54, $i55);
    goto $bb4_last;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i6, 6);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i11, 4);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p10, $mul.ref($i13, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} writel($i8, $p14);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i6, 10);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i20 := $mul.i32($i19, 4);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p18, $mul.ref($i21, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} writel($i16, $p22);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i6, 14);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i28 := $mul.i32($i27, 4);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p26, $mul.ref($i29, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} writel($i24, $p30);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p31, .str.2);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p32, .str.18);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p33, .str.14);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p34, .str.19);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i37 := $load.i24($M.16, $p36);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i38 := $and.i24($i37, $sub.i24(0, 262144));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i39 := $or.i24($i38, 555);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p36, $i39);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p40, 0);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.17, $p41);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i64($i42);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i44 := $and.i64($i43, 1);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 225} {:cexpr "tmp"} boogie_si_record_i64($i45);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i53 == 1;
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i6, 1);
    call {:si_unique_call 227} {:cexpr "i"} boogie_si_record_i32($i54);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i55 := $sle.i32($i54, 3);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i55 == 1);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i54;
    goto $bb10_dummy;

  $bb5:
    assume $i46 == 1;
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32.i32($p3, .str.19, .str.18, 555, $i6, $i48, $i50, $i52);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i5 := $i2;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1124;
}



const fimc_active_queue_add: ref;

axiom fimc_active_queue_add == $sub.ref(0, 382226);

procedure fimc_active_queue_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_active_queue_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 960)), $mul.ref(928, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3288)), $mul.ref(2392, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} list_add_tail($p2, $p3);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3288)), $mul.ref(3256, 1));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3288)), $mul.ref(3256, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    return;
}



const fimc_hw_get_frame_index: ref;

axiom fimc_hw_get_frame_index == $sub.ref(0, 383258);

procedure fimc_hw_get_frame_index($p0: ref) returns ($r: i32);



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 384290);

procedure __dynamic_pr_debug.ref.ref.ref.i32.i32.i64($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i64);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32.i32.i64($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: ref, p.5: ref, p.6: i32, p.7: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: ref, p.5: ref, p.6: i32, p.7: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32, p.10: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i64($p0: ref, $p1: ref, p.2: i32, p.3: i64);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i64($p0: ref, $p1: ref, p.2: i32, p.3: i64)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32.i32.i64.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i64, p.6: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32.i32.i64.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i64, p.6: i32)
{

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32)
{

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32)
{

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32)
{

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    return;
}



const ffs: ref;

axiom ffs == $sub.ref(0, 385322);

procedure ffs($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ffs($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} {:cexpr "ffs:arg:x"} boogie_si_record_i32($i0);
    call {:si_unique_call 230} $i1 := devirtbounce.3(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 231} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vb2_plane_vaddr: ref;

axiom vb2_plane_vaddr == $sub.ref(0, 386354);

procedure vb2_plane_vaddr($p0: ref, $i1: i32) returns ($r: ref);



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 387386);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 233} devirtbounce(0, $p1, $i0, $p1);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    return;
}



const fimc_capture_config_update: ref;

axiom fimc_capture_config_update == $sub.ref(0, 388418);

procedure fimc_capture_config_update($p0: ref) returns ($r: i32);



const fimc_deactivate_capture: ref;

axiom fimc_deactivate_capture == $sub.ref(0, 389450);

procedure fimc_deactivate_capture($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_deactivate_capture($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} fimc_hw_en_lastirq($p0, 1);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} fimc_hw_disable_capture($p0);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} fimc_hw_enable_scaler($p0, 0);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} fimc_hw_en_lastirq($p0, 0);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const fimc_hw_en_lastirq: ref;

axiom fimc_hw_en_lastirq == $sub.ref(0, 390482);

procedure fimc_hw_en_lastirq($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_hw_en_lastirq($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i9: i32;
  var $i8: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} {:cexpr "fimc_hw_en_lastirq:arg:enable"} boogie_si_record_i32($i1);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(76, 1));
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $i5 := readl($p4);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 240} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i1, 0);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i5, $sub.i32(0, 5));
    call {:si_unique_call 242} {:cexpr "cfg"} boogie_si_record_i32($i9);
    assume {:verifier.code 0} true;
    $i8 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(76, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} writel($i8, $p12);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i5, 4);
    call {:si_unique_call 241} {:cexpr "cfg"} boogie_si_record_i32($i7);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const fimc_hw_disable_capture: ref;

axiom fimc_hw_disable_capture == $sub.ref(0, 391514);

procedure fimc_hw_disable_capture($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_hw_disable_capture($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(192, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i4 := readl($p3);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 245} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1073741823);
    call {:si_unique_call 246} {:cexpr "cfg"} boogie_si_record_i32($i5);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(192, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} writel($i5, $p8);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const fimc_hw_enable_scaler: ref;

axiom fimc_hw_enable_scaler == $sub.ref(0, 392546);

procedure fimc_hw_enable_scaler($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_hw_enable_scaler($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i10: i32;
  var $i9: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 248} {:cexpr "fimc_hw_enable_scaler:arg:on"} boogie_si_record_i1($i1);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(88, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $i6 := readl($p5);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 250} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i6, $sub.i32(0, 32769));
    call {:si_unique_call 252} {:cexpr "cfg"} boogie_si_record_i32($i10);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(88, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} writel($i9, $p13);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i6, 32768);
    call {:si_unique_call 251} {:cexpr "cfg"} boogie_si_record_i32($i8);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const readl: ref;

axiom readl == $sub.ref(0, 393578);

procedure readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 254} $i2 := devirtbounce.4(0, $p1);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 255} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const writel: ref;

axiom writel == $sub.ref(0, 394610);

procedure writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} {:cexpr "writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 257} devirtbounce.5(0, $i0, $p2);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    return;
}



const fimc_hw_set_camera_offset: ref;

axiom fimc_hw_set_camera_offset == $sub.ref(0, 395642);

procedure fimc_hw_set_camera_offset($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_hw_set_camera_offset($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 1));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $i5 := readl($p4);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 259} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, $sub.i32(0, 134156288));
    call {:si_unique_call 260} {:cexpr "cfg"} boogie_si_record_i32($i6);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i9 := $shl.i32($i8, 16);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i9, $i11);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, $i6);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i13, $sub.i32(0, 2147483648));
    call {:si_unique_call 261} {:cexpr "cfg"} boogie_si_record_i32($i14);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(4, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} writel($i14, $p17);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i19, $i21);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i22, $i24);
    call {:si_unique_call 263} {:cexpr "hoff2"} boogie_si_record_i32($i25);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(28, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i27, $i29);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i30, $i32);
    call {:si_unique_call 264} {:cexpr "voff2"} boogie_si_record_i32($i33);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i34 := $shl.i32($i25, 16);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, $i33);
    call {:si_unique_call 265} {:cexpr "cfg"} boogie_si_record_i32($i35);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(20, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} writel($i35, $p38);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const fimc_set_scaler_info: ref;

axiom fimc_set_scaler_info == $sub.ref(0, 396674);

procedure fimc_set_scaler_info($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_set_scaler_info($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i23: i32;
  var $i24: i32;
  var $i29: i1;
  var $i30: i1;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $i85: i1;
  var $i86: i32;
  var $i87: i8;
  var $p88: ref;
  var $i89: i8;
  var $i90: i8;
  var $i91: i8;
  var $i92: i8;
  var $i93: i1;
  var $i94: i32;
  var $i95: i8;
  var $p96: ref;
  var $i97: i8;
  var $i98: i8;
  var $i99: i8;
  var $i100: i8;
  var $i101: i8;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i112: i32;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $i117: i32;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i122: i8;
  var $i123: i8;
  var $i124: i8;
  var $p125: ref;
  var $i126: i8;
  var $i127: i8;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(256, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 5568)), $mul.ref(232, 1));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(380, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 90);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i15 == 1);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(380, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 270);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(24, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    call {:si_unique_call 269} {:cexpr "tx"} boogie_si_record_i32($i26);
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(28, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    call {:si_unique_call 270} {:cexpr "ty"} boogie_si_record_i32($i28);
    assume {:verifier.code 0} true;
    $i23, $i24 := $i26, $i28;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i29 := $sle.i32($i23, 0);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i29 == 1);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i30 := $sle.i32($i24, 0);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    call {:si_unique_call 272} {:cexpr "sx"} boogie_si_record_i32($i33);
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    call {:si_unique_call 273} {:cexpr "sy"} boogie_si_record_i32($i35);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i36 := $sle.i32($i33, 0);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i36 == 1);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i37 := $sle.i32($i35, 0);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(36, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i33);
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(40, 1));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i35);
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(12, 1));
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(4, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i42 := fimc_get_scaler_factor($i33, $i23, $p40, $p41);
    call {:si_unique_call 276} {:cexpr "ret"} boogie_si_record_i32($i42);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(16, 1));
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(8, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $i46 := fimc_get_scaler_factor($i35, $i24, $p44, $p45);
    call {:si_unique_call 278} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(12, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i50 := $udiv.i32($i33, $i49);
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(20, 1));
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i50);
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(16, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i54 := $udiv.i32($i35, $i53);
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(24, 1));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i54);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p4);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p56, $mul.ref(0, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i60 == 1);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i73 := $shl.i32($i33, 8);
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(4, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i76 := $shl.i32($i23, $i75);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i77 := $sdiv.i32($i73, $i76);
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(28, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i77);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $i79 := $shl.i32($i35, 8);
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(8, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i82 := $shl.i32($i24, $i81);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i83 := $sdiv.i32($i79, $i82);
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(32, 1));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, $i83);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i85 := $sge.i32($i23, $i33);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i86 := $zext.i1.i32($i85);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i8($i86);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p10);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.0, $p88);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i90 := $and.i8($i87, 1);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i91 := $and.i8($i89, $sub.i8(0, 2));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i92 := $or.i8($i91, $i90);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p88, $i92);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i93 := $sge.i32($i24, $i35);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i94 := $zext.i1.i32($i93);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i94);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p10);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.0, $p96);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i98 := $and.i8($i95, 1);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i99 := $shl.i8($i98, 1);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i100 := $and.i8($i97, $sub.i8(0, 3));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i101 := $or.i8($i100, $i99);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p96, $i101);
    $p102 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i105, $i109);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p10);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.0, $p125);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i127 := $and.i8($i126, $sub.i8(0, 5));
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p125, $i127);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb29:
    assume $i110 == 1;
    $p111 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    $p113 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(24, 1));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i112, $i114);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb31;

  $bb32:
    assume $i115 == 1;
    $p116 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p116);
    $p118 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(28, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i117, $i119);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb31;

  $bb34:
    assume $i120 == 1;
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p10);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.0, $p121);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i123 := $and.i8($i122, $sub.i8(0, 5));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i124 := $or.i8($i123, 4);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p121, $i124);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb26:
    assume $i60 == 1;
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i61 := $shl.i32($i33, 14);
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(4, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i64 := $shl.i32($i23, $i63);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i65 := $sdiv.i32($i61, $i64);
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(28, 1));
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i67 := $shl.i32($i35, 14);
    $p68 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(8, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i70 := $shl.i32($i24, $i69);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i71 := $sdiv.i32($i67, $i70);
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(32, 1));
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i47 == 1;
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i31 := $i46;
    goto $bb12;

  $bb20:
    assume $i43 == 1;
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i31 := $i42;
    goto $bb12;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} dev_err.ref.ref.i32.i32($p9, .str.1, $i33, $i35);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb12;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} dev_err.ref.ref.i32.i32($p9, .str, $i23, $i24);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb2;

  $bb2:
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(24, 1));
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    call {:si_unique_call 267} {:cexpr "ty"} boogie_si_record_i32($i20);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(28, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    call {:si_unique_call 268} {:cexpr "tx"} boogie_si_record_i32($i22);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i23, $i24 := $i22, $i20;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;
}



const fimc_hw_set_prescaler: ref;

axiom fimc_hw_set_prescaler == $sub.ref(0, 397706);

procedure fimc_hw_set_prescaler($p0: ref);
  free requires assertsPassed;



implementation fimc_hw_set_prescaler($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(4, 1));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(8, 1));
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i5, $i7);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(10, $i8);
    call {:si_unique_call 279} {:cexpr "shfactor"} boogie_si_record_i32($i9);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i10 := $shl.i32($i9, 28);
    call {:si_unique_call 280} {:cexpr "cfg"} boogie_si_record_i32($i10);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(12, 1));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i13 := $shl.i32($i12, 16);
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(16, 1));
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i13, $i15);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i16, $i10);
    call {:si_unique_call 281} {:cexpr "cfg"} boogie_si_record_i32($i17);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref(80, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} writel($i17, $p20);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(20, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i23 := $shl.i32($i22, 16);
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(24, 1));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i23, $i25);
    call {:si_unique_call 283} {:cexpr "cfg"} boogie_si_record_i32($i26);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref(84, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} writel($i26, $p29);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    return;
}



const fimc_hw_set_mainscaler: ref;

axiom fimc_hw_set_mainscaler == $sub.ref(0, 398738);

procedure fimc_hw_set_mainscaler($p0: ref);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.29, $M.32, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_hw_set_mainscaler($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(256, 1));
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p7, .str.2);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p8, .str.16);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p9, .str.14);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p10, .str.17);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.16, $p12);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 322);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p12, $i15);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p16, 0);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.17, $p17);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 287} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} fimc_hw_set_scaler($p0);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref(88, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $i30 := readl($p29);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 291} {:cexpr "cfg"} boogie_si_record_i32($i30);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, $sub.i32(0, 33489408));
    call {:si_unique_call 292} {:cexpr "cfg"} boogie_si_record_i32($i31);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p5);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref(0, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i36 == 1);
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(28, 1));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i68 := $shl.i32($i67, 16);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i69 := $or.i32($i68, $i31);
    call {:si_unique_call 302} {:cexpr "cfg"} boogie_si_record_i32($i69);
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(32, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i72 := $or.i32($i71, $i69);
    call {:si_unique_call 303} {:cexpr "cfg"} boogie_si_record_i32($i72);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p74, $mul.ref(88, 1));
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} writel($i72, $p75);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i36 == 1;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(28, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i39 := $lshr.i32($i38, 6);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i40 := $shl.i32($i39, 16);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i40, $i31);
    call {:si_unique_call 293} {:cexpr "cfg"} boogie_si_record_i32($i41);
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(32, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i44 := $lshr.i32($i43, 6);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i44, $i41);
    call {:si_unique_call 294} {:cexpr "cfg"} boogie_si_record_i32($i45);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref(88, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} writel($i45, $p48);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p50, $mul.ref(392, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i52 := readl($p51);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 297} {:cexpr "cfg"} boogie_si_record_i32($i52);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, $sub.i32(0, 64576));
    call {:si_unique_call 298} {:cexpr "cfg"} boogie_si_record_i32($i53);
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(28, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i56 := $shl.i32($i55, 10);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 65535);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i58 := $or.i32($i57, $i53);
    call {:si_unique_call 299} {:cexpr "cfg"} boogie_si_record_i32($i58);
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(32, 1));
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 63);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i62 := $or.i32($i61, $i58);
    call {:si_unique_call 300} {:cexpr "cfg"} boogie_si_record_i32($i62);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p64, $mul.ref(392, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} writel($i62, $p65);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i22 == 1;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(28, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1)), $mul.ref(32, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} __dynamic_pr_debug.ref.ref.ref.i32.i32.i32($p1, .str.17, .str.16, 322, $i24, $i26);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fimc_hw_set_target_format: ref;

axiom fimc_hw_set_target_format == $sub.ref(0, 399770);

procedure fimc_hw_set_target_format($p0: ref);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.29, $M.32, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_hw_set_target_format($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i54: i32;
  var $i53: i32;
  var $i45: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i68: i32;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $i85: i32;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p5, .str.2);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p6, .str.13);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p7, .str.14);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p8, .str.15);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.16, $p10);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 114);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p10, $i13);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p14, 0);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.17, $p15);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 307} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(72, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $i32 := readl($p31);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 310} {:cexpr "cfg"} boogie_si_record_i32($i32);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, $sub.i32(0, 1878986752));
    call {:si_unique_call 311} {:cexpr "cfg"} boogie_si_record_i32($i33);
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i37, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i37, $sub.i32(0, 33));
    assume {:verifier.code 0} true;
    $i41 := $ule.i32($i40, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i45 := $i33;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(380, 1));
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 90);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i57 == 1);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(380, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 270);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i60 == 1);
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(24, 1));
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i71 := $shl.i32($i70, 16);
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(28, 1));
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i71, $i73);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i75 := $or.i32($i74, $i45);
    call {:si_unique_call 316} {:cexpr "cfg"} boogie_si_record_i32($i75);
    assume {:verifier.code 0} true;
    $i68 := $i75;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p77, $mul.ref(72, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} writel($i68, $p78);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p80, $mul.ref(92, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i82 := readl($p81);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 319} {:cexpr "cfg"} boogie_si_record_i32($i82);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, $sub.i32(0, 268435456));
    call {:si_unique_call 320} {:cexpr "cfg"} boogie_si_record_i32($i83);
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(24, 1));
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    $p86 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(28, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i88 := $mul.i32($i85, $i87);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i89 := $or.i32($i88, $i83);
    call {:si_unique_call 321} {:cexpr "cfg"} boogie_si_record_i32($i89);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p91, $mul.ref(92, 1));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} writel($i89, $p92);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb20;

  $bb20:
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(28, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i63 := $shl.i32($i62, 16);
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(24, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i63, $i65);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i67 := $or.i32($i66, $i45);
    call {:si_unique_call 315} {:cexpr "cfg"} boogie_si_record_i32($i67);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i68 := $i67;
    goto $bb24;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb20;

  $bb9:
    assume $i41 == 1;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.0, $p48);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 1);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i51 == 1);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i54 := $or.i32($i33, 536870912);
    call {:si_unique_call 314} {:cexpr "cfg"} boogie_si_record_i32($i54);
    assume {:verifier.code 0} true;
    $i53 := $i54;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i45 := $i53;
    goto $bb14;

  $bb15:
    assume $i51 == 1;
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i33, 1073741824);
    call {:si_unique_call 313} {:cexpr "cfg"} boogie_si_record_i32($i52);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb17;

  $bb7:
    assume $i39 == 1;
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i45 := $i33;
    goto $bb14;

  $bb5:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i37, $sub.i32(0, 16));
    assume {:verifier.code 0} true;
    $i43 := $ule.i32($i42, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb11;

  $bb12:
    assume $i43 == 1;
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i33, 1610612736);
    call {:si_unique_call 312} {:cexpr "cfg"} boogie_si_record_i32($i44);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb14;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i20 == 1;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(24, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(28, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32($p1, .str.15, .str.13, 114, $i22, $i24, $i28);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fimc_hw_set_rotation: ref;

axiom fimc_hw_set_rotation == $sub.ref(0, 400802);

procedure fimc_hw_set_rotation($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_hw_set_rotation($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i19: i32;
  var $i18: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(72, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $i6 := readl($p5);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 324} {:cexpr "cfg"} boogie_si_record_i32($i6);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 2147426303);
    call {:si_unique_call 325} {:cexpr "cfg"} boogie_si_record_i32($i7);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(380, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 90);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(380, 1));
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 270);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i20 := $i7;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(324, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(252, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $i32 := readl($p31);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 333} {:cexpr "flip"} boogie_si_record_i32($i32);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, $sub.i32(0, 24577));
    call {:si_unique_call 334} {:cexpr "flip"} boogie_si_record_i32($i33);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $i34 := fimc_hw_get_in_flip($p0);
    call {:si_unique_call 336} {:cexpr "tmp___0"} boogie_si_record_i32($i34);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, $i33);
    call {:si_unique_call 337} {:cexpr "flip"} boogie_si_record_i32($i35);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(252, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} writel($i35, $p38);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $i24 := fimc_hw_get_target_flip($p0);
    call {:si_unique_call 329} {:cexpr "tmp"} boogie_si_record_i32($i24);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, $i20);
    call {:si_unique_call 330} {:cexpr "cfg"} boogie_si_record_i32($i25);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(72, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} writel($i25, $p28);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(324, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 3);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i7, 8192);
    call {:si_unique_call 327} {:cexpr "cfg"} boogie_si_record_i32($i19);
    assume {:verifier.code 0} true;
    $i18 := $i19;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    goto $bb9;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i7, $sub.i32(0, 2147483648));
    call {:si_unique_call 326} {:cexpr "cfg"} boogie_si_record_i32($i17);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const fimc_hw_set_effect: ref;

axiom fimc_hw_set_effect == $sub.ref(0, 401834);

procedure fimc_hw_set_effect($p0: ref);
  free requires assertsPassed;



implementation fimc_hw_set_effect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(372, 1)), $mul.ref(0, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(208, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} writel($i24, $p27);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i7 := $or.i32(0, 1610612736);
    call {:si_unique_call 339} {:cexpr "cfg"} boogie_si_record_i32($i7);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(372, 1)), $mul.ref(0, 1));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, $i7);
    call {:si_unique_call 340} {:cexpr "cfg"} boogie_si_record_i32($i10);
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(372, 1)), $mul.ref(0, 1));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 67108864);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i10;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb6;

  $bb3:
    assume $i13 == 1;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(372, 1)), $mul.ref(4, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i17 := $shl.i32($i16, 13);
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(372, 1)), $mul.ref(5, 1));
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i17, $i20);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i21, $i10);
    call {:si_unique_call 341} {:cexpr "cfg"} boogie_si_record_i32($i22);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb5;
}



const fimc_prepare_dma_offset: ref;

axiom fimc_prepare_dma_offset == $sub.ref(0, 402866);

procedure fimc_prepare_dma_offset($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr;



implementation fimc_prepare_dma_offset($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i1;
  var $i19: i32;
  var $i20: i32;
  var $i35: i32;
  var $i18: i32;
  var $p36: ref;
  var $i37: i32;
  var $p39: ref;
  var $i40: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p67: ref;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i16;
  var $i73: i32;
  var $i74: i1;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $p80: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i1;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $p97: ref;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i24;
  var $i111: i24;
  var $i112: i24;
  var $p113: ref;
  var $p114: ref;
  var $i115: i8;
  var $i116: i64;
  var $i117: i64;
  var $i118: i64;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $p125: ref;
  var $i126: i32;
  var $p128: ref;
  var $i129: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(264, 1));
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(49, 1));
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 344} {:cexpr "pix_hoff"} boogie_si_record_i8($i11);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i32($i16, 0);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i18 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(108, 1)), $mul.ref(0, 1));
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i37);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i11);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i40 == 1);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(108, 1)), $mul.ref(0, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i44 := $lshr.i32($i18, 3);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i45 := $mul.i32($i43, $i44);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(108, 1)), $mul.ref(0, 1));
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i45);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(108, 1)), $mul.ref(4, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i49);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(108, 1)), $mul.ref(8, 1));
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i53);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(108, 1)), $mul.ref(12, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i57);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(108, 1)), $mul.ref(16, 1));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i61);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(108, 1)), $mul.ref(20, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i65);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i8.i1($i11);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i68 == 1);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i72 := $load.i16($M.0, $p71);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i72);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 3);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 32);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p104, .str.2);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p105, .str.10);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p106, .str.4);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p107, .str.11);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i110 := $load.i24($M.16, $p109);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i111 := $and.i24($i110, $sub.i24(0, 262144));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i112 := $or.i24($i111, 480);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p109, $i112);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p113, 0);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.17, $p114);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i64($i115);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i117 := $and.i64($i116, 1);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $i118 := ldv__builtin_expect($i117, 0);
    call {:si_unique_call 348} {:cexpr "tmp"} boogie_si_record_i64($i118);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i119 := $ne.i64($i118, 0);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i119 == 1;
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(108, 1)), $mul.ref(0, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.0, $p125);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(108, 1)), $mul.ref(4, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32($p2, .str.11, .str.10, 480, $i123, $i126, $i129);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb17:
    assume $i91 == 1;
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(108, 1)), $mul.ref(12, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i95 := $ashr.i32($i94, 1);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(108, 1)), $mul.ref(12, 1));
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p97, $i95);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(108, 1)), $mul.ref(20, 1));
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i101 := $ashr.i32($i100, 1);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(108, 1)), $mul.ref(20, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, $i101);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i74 == 1;
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(108, 1)), $mul.ref(8, 1));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i78 := $ashr.i32($i77, 1);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(108, 1)), $mul.ref(8, 1));
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i78);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(108, 1)), $mul.ref(16, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i84 := $ashr.i32($i83, 1);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(108, 1)), $mul.ref(16, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, $i84);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb12:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb9:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i19, $i20 := 0, 0;
    goto $bb4;

  $bb4:
    call $i21, $p22, $p23, $p25, $i26, $i27, $i28, $i29, $p30, $p31, $i32, $i33, $i34, $i19, $i20, $i35 := fimc_prepare_dma_offset_loop_$bb4($p1, $p12, $i21, $p22, $p23, $p25, $i26, $i27, $i28, $i29, $p30, $p31, $i32, $i33, $i34, $i19, $i20, $i35);
    goto $bb4_last;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(29, 1)), $mul.ref($i21, 1));
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, $i19);
    call {:si_unique_call 345} {:cexpr "depth"} boogie_si_record_i32($i28);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i20, 1);
    call {:si_unique_call 346} {:cexpr "i"} boogie_si_record_i32($i29);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p12);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.0, $p31);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i34 := $ugt.i32($i33, $i29);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i35 := $i28;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i18 := $i35;
    goto $bb3;

  $bb6:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i19, $i20 := $i28, $i29;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1795;
}



const fimc_hw_set_out_dma: ref;

axiom fimc_hw_set_out_dma == $sub.ref(0, 403898);

procedure fimc_hw_set_out_dma($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_hw_set_out_dma($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $i59: i1;
  var $i55: i32;
  var $i46: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i32;
  var $i68: i32;
  var $i63: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(108, 1)), $mul.ref(4, 1));
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i9 := $shl.i32($i8, 16);
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(108, 1)), $mul.ref(0, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i9, $i11);
    call {:si_unique_call 350} {:cexpr "cfg"} boogie_si_record_i32($i12);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(360, 1));
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} writel($i12, $p15);
    $p16 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(108, 1)), $mul.ref(12, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i18 := $shl.i32($i17, 16);
    $p19 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(108, 1)), $mul.ref(8, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i18, $i20);
    call {:si_unique_call 352} {:cexpr "cfg"} boogie_si_record_i32($i21);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(364, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} writel($i21, $p24);
    $p25 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(108, 1)), $mul.ref(20, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i27 := $shl.i32($i26, 16);
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(108, 1)), $mul.ref(16, 1));
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i27, $i29);
    call {:si_unique_call 354} {:cexpr "cfg"} boogie_si_record_i32($i30);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref(368, 1));
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} writel($i30, $p33);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} fimc_hw_set_out_dma_size($p0);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref(76, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $i37 := readl($p36);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 358} {:cexpr "cfg"} boogie_si_record_i32($i37);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, $sub.i32(0, 50528268));
    call {:si_unique_call 359} {:cexpr "cfg"} boogie_si_record_i32($i38);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i42 == 1);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.0, $p47);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 2);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i50 == 1);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.0, $p56);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 3);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i55 := $i38;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i46 := $i55;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 18);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i62 == 1);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 17);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i66 == 1);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 16);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i73 := $i46;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i68 := $i73;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i63 := $i68;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p75, $mul.ref(76, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} writel($i63, $p76);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i71 == 1;
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i72 := $or.i32($i46, 131072);
    call {:si_unique_call 364} {:cexpr "cfg"} boogie_si_record_i32($i72);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i73 := $i72;
    goto $bb18;

  $bb13:
    assume $i66 == 1;
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i67 := $or.i32($i46, 65536);
    call {:si_unique_call 363} {:cexpr "cfg"} boogie_si_record_i32($i67);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i68 := $i67;
    goto $bb15;

  $bb10:
    assume $i62 == 1;
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i63 := $i46;
    goto $bb12;

  $bb7:
    assume $i59 == 1;
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i50 == 1;
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(308, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i53 := $or.i32($i52, $i38);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i54 := $or.i32($i53, 8);
    call {:si_unique_call 361} {:cexpr "cfg"} boogie_si_record_i32($i54);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i55 := $i54;
    goto $bb6;

  $bb1:
    assume $i42 == 1;
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(304, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i44, $i38);
    call {:si_unique_call 360} {:cexpr "cfg"} boogie_si_record_i32($i45);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb3;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const fimc_hw_set_rgb_alpha: ref;

axiom fimc_hw_set_rgb_alpha == $sub.ref(0, 404930);

procedure fimc_hw_set_rgb_alpha($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_hw_set_rgb_alpha($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(34, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 8);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(76, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $i14 := readl($p13);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 366} {:cexpr "cfg"} boogie_si_record_i32($i14);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, $sub.i32(0, 4081));
    call {:si_unique_call 367} {:cexpr "cfg"} boogie_si_record_i32($i15);
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(144, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i19 := $shl.i32($i18, 4);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, $i15);
    call {:si_unique_call 368} {:cexpr "cfg"} boogie_si_record_i32($i20);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref(76, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} writel($i20, $p23);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fimc_hw_set_out_dma_size: ref;

axiom fimc_hw_set_out_dma_size == $sub.ref(0, 405962);

procedure fimc_hw_set_out_dma_size($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_hw_set_out_dma_size($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i22: i32;
  var $i21: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(4, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i5, 16);
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(0, 1));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i6, $i8);
    call {:si_unique_call 370} {:cexpr "cfg"} boogie_si_record_i32($i9);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(388, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} writel($i9, $p12);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(8, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $i16 := readl($p15);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    call {:si_unique_call 373} {:cexpr "cfg"} boogie_si_record_i32($i16);
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(0, 1));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i32($i18, 1279);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i16, $sub.i32(0, 33));
    call {:si_unique_call 375} {:cexpr "cfg"} boogie_si_record_i32($i22);
    assume {:verifier.code 0} true;
    $i21 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(8, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} writel($i21, $p25);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i16, 32);
    call {:si_unique_call 374} {:cexpr "cfg"} boogie_si_record_i32($i20);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb3;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const fimc_hw_get_target_flip: ref;

axiom fimc_hw_get_target_flip == $sub.ref(0, 406994);

procedure fimc_hw_get_target_flip($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fimc_hw_get_target_flip($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i19: i32;
  var $i20: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(384, 1));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(384, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i14 := $i7;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(380, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i17 := $sle.i32($i16, 90);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i19 := $xor.i32($i14, $sub.i32(0, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 49152);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i18 := $i20;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i18 := $i14;
    goto $bb9;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i7, 16384);
    call {:si_unique_call 378} {:cexpr "flip"} boogie_si_record_i32($i13);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i6 := $or.i32(0, 32768);
    call {:si_unique_call 377} {:cexpr "flip"} boogie_si_record_i32($i6);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const fimc_hw_get_in_flip: ref;

axiom fimc_hw_get_in_flip == $sub.ref(0, 408026);

procedure fimc_hw_get_in_flip($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fimc_hw_get_in_flip($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i17: i32;
  var $i18: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(384, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(384, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $i6;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(380, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i15 := $sle.i32($i14, 90);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i17 := $xor.i32($i12, $sub.i32(0, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 24576);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i16 := $i18;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i16 := $i12;
    goto $bb9;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i12 := 8192;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i6 := 16384;
    goto $bb3;
}



const fimc_hw_set_scaler: ref;

axiom fimc_hw_set_scaler == $sub.ref(0, 409058);

procedure fimc_hw_set_scaler($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_hw_set_scaler($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i57: i32;
  var $i58: i32;
  var $i56: i32;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $i68: i1;
  var $i70: i1;
  var $i71: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i32;
  var $i72: i32;
  var $i69: i32;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i32;
  var $i76: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(88, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $i9 := readl($p8);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 380} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 100631039);
    call {:si_unique_call 381} {:cexpr "cfg"} boogie_si_record_i32($i10);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(388, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 8);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i16 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p3);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref(0, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(0, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i30 := $i23;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p3);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(0, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i37 := $i30;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p3);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref(0, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i44 := $i37;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(320, 1));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 2);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i59 := $i44;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(324, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 2);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i62 == 1);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i77 := $or.i32($i59, 4096);
    call {:si_unique_call 390} {:cexpr "cfg"} boogie_si_record_i32($i77);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(388, 1));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 4);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i83 := $i77;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i76 := $i83;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p85, $mul.ref(88, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} writel($i76, $p86);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    return;

  $bb46:
    assume $i81 == 1;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i82 := $or.i32($i77, 33554432);
    call {:si_unique_call 394} {:cexpr "cfg"} boogie_si_record_i32($i82);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i83 := $i82;
    goto $bb48;

  $bb31:
    assume $i62 == 1;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    call {:si_unique_call 389} {:cexpr "color"} boogie_si_record_i32($i66);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i67 := $ugt.i32($i66, 15);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i66, 19);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i70 == 1);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i66, 20);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i75 := $i59;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i72 := $i75;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i69 := $i72;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i76 := $i69;
    goto $bb45;

  $bb42:
    assume $i73 == 1;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i59, 4096);
    call {:si_unique_call 392} {:cexpr "cfg"} boogie_si_record_i32($i74);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i75 := $i74;
    goto $bb44;

  $bb39:
    assume $i70 == 1;
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i71 := $or.i32($i59, 2048);
    call {:si_unique_call 391} {:cexpr "cfg"} boogie_si_record_i32($i71);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i72 := $i71;
    goto $bb41;

  $bb33:
    assume $i67 == 1;
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i68 := $ule.i32($i66, 18);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb35;

  $bb36:
    assume $i68 == 1;
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i69 := $i59;
    goto $bb38;

  $bb16:
    assume $i47 == 1;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i51, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i51, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i51, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i56 := $i44;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i59 := $i56;
    goto $bb30;

  $bb23:
    assume $i54 == 1;
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i58 := $or.i32($i44, 16384);
    call {:si_unique_call 388} {:cexpr "cfg"} boogie_si_record_i32($i58);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i56 := $i58;
    goto $bb28;

  $bb21:
    assume $i53 == 1;
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i44, 8192);
    call {:si_unique_call 387} {:cexpr "cfg"} boogie_si_record_i32($i57);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i56 := $i57;
    goto $bb28;

  $bb19:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i51, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb25;

  $bb26:
    assume $i55 == 1;
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i56 := $i44;
    goto $bb28;

  $bb13:
    assume $i42 == 1;
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i37, 512);
    call {:si_unique_call 386} {:cexpr "cfg"} boogie_si_record_i32($i43);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb15;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i30, 536870912);
    call {:si_unique_call 385} {:cexpr "cfg"} boogie_si_record_i32($i36);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb12;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i23, 1073741824);
    call {:si_unique_call 384} {:cexpr "cfg"} boogie_si_record_i32($i29);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb9;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i16, $sub.i32(0, 2147483648));
    call {:si_unique_call 383} {:cexpr "cfg"} boogie_si_record_i32($i22);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i10, 402653184);
    call {:si_unique_call 382} {:cexpr "cfg"} boogie_si_record_i32($i15);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb3;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const fimc_get_scaler_factor: ref;

axiom fimc_get_scaler_factor == $sub.ref(0, 410090);

procedure fimc_get_scaler_factor($i0: i32, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_get_scaler_factor($i0: i32, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i6: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} {:cexpr "fimc_get_scaler_factor:arg:src"} boogie_si_record_i32($i0);
    call {:si_unique_call 396} {:cexpr "fimc_get_scaler_factor:arg:tar"} boogie_si_record_i32($i1);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i1, 64);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i5 := $ule.i32($i4, $i0);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i1, 32);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i8 := $ule.i32($i7, $i0);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i9, $i10 := 5, 32;
    assume {:branchcond $i8} true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i11 := $mul.i32($i1, 16);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i12 := $ule.i32($i11, $i0);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i9, $i10 := 4, 16;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i13 := $mul.i32($i1, 8);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i14 := $ule.i32($i13, $i0);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i9, $i10 := 3, 8;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i1, 4);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i16 := $ule.i32($i15, $i0);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i9, $i10 := 2, 4;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i1, 2);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i18 := $ule.i32($i17, $i0);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i9, $i10 := 1, 2;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i19 := $ule.i32($i1, $i0);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i9, $i10 := 0, 1;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 1);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i9);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i10);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb8;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb8;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb8;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 411122);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} __list_add($p0, $p3, $p1);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 412154);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 413186);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    return;
}



const getnstimeofday64: ref;

axiom getnstimeofday64 == $sub.ref(0, 414218);

procedure getnstimeofday64($p0: ref);



const v4l2_m2m_src_buf_remove: ref;

axiom v4l2_m2m_src_buf_remove == $sub.ref(0, 415250);

procedure v4l2_m2m_src_buf_remove($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_m2m_src_buf_remove($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(960, 1));
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $p2 := v4l2_m2m_buf_remove($p1);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const v4l2_m2m_dst_buf_remove: ref;

axiom v4l2_m2m_dst_buf_remove == $sub.ref(0, 416282);

procedure v4l2_m2m_dst_buf_remove($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_m2m_dst_buf_remove($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(16, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $p2 := v4l2_m2m_buf_remove($p1);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const v4l2_m2m_buf_done: ref;

axiom v4l2_m2m_buf_done == $sub.ref(0, 417314);

procedure v4l2_m2m_buf_done($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation v4l2_m2m_buf_done($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} {:cexpr "v4l2_m2m_buf_done:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} vb2_buffer_done($p0, $i1);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_m2m_job_finish: ref;

axiom v4l2_m2m_job_finish == $sub.ref(0, 418346);

procedure v4l2_m2m_job_finish($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation v4l2_m2m_job_finish($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_m2m_buf_remove: ref;

axiom v4l2_m2m_buf_remove == $sub.ref(0, 419378);

procedure v4l2_m2m_buf_remove($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_m2m_buf_remove($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $p1 := external_alloc();
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 420410);

procedure _raw_spin_unlock($p0: ref);



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 421442);

procedure _raw_spin_lock($p0: ref);



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 422474);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const clk_get: ref;

axiom clk_get == $sub.ref(0, 423506);

procedure clk_get($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation clk_get($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $p2 := external_alloc();
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const clk_prepare: ref;

axiom clk_prepare == $sub.ref(0, 424538);

procedure clk_prepare($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation clk_prepare($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 1} true;
    call {:si_unique_call 404} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 405} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 425570);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const syscon_regmap_lookup_by_phandle: ref;

axiom syscon_regmap_lookup_by_phandle == $sub.ref(0, 426602);

procedure syscon_regmap_lookup_by_phandle($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation syscon_regmap_lookup_by_phandle($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $p2 := external_alloc();
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const of_property_read_bool: ref;

axiom of_property_read_bool == $sub.ref(0, 427634);

procedure of_property_read_bool($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation of_property_read_bool($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $p2 := of_find_property($p0, $p1, $0.ref);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const of_match_node: ref;

axiom of_match_node == $sub.ref(0, 428666);

procedure of_match_node($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation of_match_node($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $p2 := external_alloc();
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const of_property_read_u32_array: ref;

axiom of_property_read_u32_array == $sub.ref(0, 429698);

procedure of_property_read_u32_array($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation of_property_read_u32_array($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 409} {:cexpr "of_property_read_u32_array:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 1} true;
    call {:si_unique_call 410} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 411} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const of_property_read_u32: ref;

axiom of_property_read_u32 == $sub.ref(0, 430730);

procedure of_property_read_u32($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation of_property_read_u32($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $i3 := of_property_read_u32_array($p0, $p1, $p2, 1);
    call {:si_unique_call 413} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const of_alias_get_id: ref;

axiom of_alias_get_id == $sub.ref(0, 431762);

procedure of_alias_get_id($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation of_alias_get_id($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 1} true;
    call {:si_unique_call 414} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 415} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const of_find_property: ref;

axiom of_find_property == $sub.ref(0, 432794);

procedure of_find_property($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation of_find_property($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $p3 := external_alloc();
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const devm_kmalloc: ref;

axiom devm_kmalloc == $sub.ref(0, 433826);

procedure devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} {:cexpr "devm_kmalloc:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 418} {:cexpr "devm_kmalloc:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $p3 := external_alloc();
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const fimc_suspend: ref;

axiom fimc_suspend == $sub.ref(0, 434858);

procedure fimc_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.29, $M.32, $M.28, $M.27, $M.25, $M.36, assertsPassed;



implementation fimc_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $p2 := dev_get_drvdata($p0);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p4, .str.2);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p5, .str.57);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p6, .str.4);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p7, .str.55);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.16, $p9);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 1105);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p9, $i12);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p13, 0);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.17, $p14);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 423} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $i25 := test_and_set_bit(0, $p24);
    call {:si_unique_call 426} {:cexpr "tmp___1"} boogie_si_record_i32($i25);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i29 := constant_test_bit(11, $p28);
    call {:si_unique_call 428} {:cexpr "tmp___3"} boogie_si_record_i32($i29);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $i32 := fimc_m2m_suspend($p3);
    call {:si_unique_call 432} {:cexpr "tmp___4"} boogie_si_record_i32($i32);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i27 := $i32;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $i31 := fimc_capture_suspend($p3);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 430} {:cexpr "tmp___2"} boogie_si_record_i32($i31);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i27 := $i31;
    goto $bb6;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(272, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} __dynamic_pr_debug.ref.ref.ref.i32.i32.i64($p1, .str.55, .str.57, 1105, $i21, $i23);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fimc_resume: ref;

axiom fimc_resume == $sub.ref(0, 435890);

procedure fimc_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.29, $M.32, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $p2 := dev_get_drvdata($p0);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p4, .str.2);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p5, .str.56);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p6, .str.4);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p7, .str.55);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.16, $p9);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 1083);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p9, $i12);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p13, 0);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.17, $p14);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 436} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $p25 := spinlock_check($p24);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $i26 := _raw_spin_lock_irqsave($p25);
    call {:si_unique_call 440} {:cexpr "flags"} boogie_si_record_i64($i26);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i28 := test_and_clear_bit(0, $p27);
    call {:si_unique_call 442} {:cexpr "tmp___2"} boogie_si_record_i32($i28);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i33 := constant_test_bit(1, $p32);
    call {:si_unique_call 445} {:cexpr "tmp___3"} boogie_si_record_i32($i33);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} fimc_hw_reset($p3);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} spin_unlock_irqrestore($p39, $i26);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $i41 := constant_test_bit(11, $p40);
    call {:si_unique_call 452} {:cexpr "tmp___6"} boogie_si_record_i32($i41);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i44 := fimc_m2m_resume($p3);
    call {:si_unique_call 456} {:cexpr "tmp___7"} boogie_si_record_i32($i44);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i31 := $i44;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb14:
    assume $i42 == 1;
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $i43 := fimc_capture_resume($p3);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 454} {:cexpr "tmp___5"} boogie_si_record_i32($i43);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i31 := $i43;
    goto $bb6;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i34 == 1;
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i36 := constant_test_bit(11, $p35);
    call {:si_unique_call 447} {:cexpr "tmp___4"} boogie_si_record_i32($i36);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i37 == 1;
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} spin_unlock_irqrestore($p38, $i26);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb6;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} spin_unlock_irqrestore($p30, $i26);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(272, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} __dynamic_pr_debug.ref.ref.ref.i32.i32.i64($p1, .str.55, .str.56, 1083, $i21, $i23);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fimc_runtime_suspend: ref;

axiom fimc_runtime_suspend == $sub.ref(0, 436922);

procedure fimc_runtime_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.29, $M.32, $M.28, $M.27, $M.25, $M.36, assertsPassed;



implementation fimc_runtime_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i9: i32;
  var $i8: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i24;
  var $i21: i24;
  var $i22: i24;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $p2 := dev_get_drvdata($p0);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $i5 := constant_test_bit(11, $p4);
    call {:si_unique_call 460} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i9 := fimc_m2m_suspend($p3);
    call {:si_unique_call 464} {:cexpr "ret"} boogie_si_record_i32($i9);
    assume {:verifier.code 0} true;
    $i8 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i8, 0);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p14, .str.2);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p15, .str.58);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p16, .str.4);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p17, .str.55);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i20 := $load.i24($M.16, $p19);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i21 := $and.i24($i20, $sub.i24(0, 262144));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i22 := $or.i24($i21, 1072);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p19, $i22);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p23, 0);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.17, $p24);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i64($i25);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 1);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 467} {:cexpr "tmp___1"} boogie_si_record_i64($i28);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(272, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} __dynamic_pr_debug.ref.ref.ref.i32.i32.i64($p1, .str.55, .str.58, 1072, $i31, $i33);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(1, 8));
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} clk_disable($p13);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i7 := fimc_capture_suspend($p3);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 462} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const fimc_runtime_resume: ref;

axiom fimc_runtime_resume == $sub.ref(0, 437954);

procedure fimc_runtime_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.29, $M.32, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_runtime_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i64;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i33: i32;
  var $i32: i32;
  var vslice_dummy_var_67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $p2 := dev_get_drvdata($p0);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p4, .str.2);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p5, .str.54);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p6, .str.4);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p7, .str.55);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.16, $p9);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 1047);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p9, $i12);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p13, 0);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.17, $p14);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 472} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(280, 1)), $mul.ref(1, 8));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} vslice_dummy_var_67 := clk_enable($p26);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} fimc_hw_reset($p3);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $i29 := constant_test_bit(11, $p28);
    call {:si_unique_call 477} {:cexpr "tmp___2"} boogie_si_record_i32($i29);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i33 := fimc_m2m_resume($p3);
    call {:si_unique_call 481} {:cexpr "tmp___3"} boogie_si_record_i32($i33);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i32 := $i33;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i31 := fimc_capture_resume($p3);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 479} {:cexpr "tmp___1"} boogie_si_record_i32($i31);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb6;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(272, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} __dynamic_pr_debug.ref.ref.ref.i32.i32.i64($p1, .str.55, .str.54, 1047, $i21, $i23);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fimc_hw_reset: ref;

axiom fimc_hw_reset == $sub.ref(0, 438986);

procedure fimc_hw_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_hw_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $i3 := readl($p2);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 483} {:cexpr "cfg"} boogie_si_record_i32($i3);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i3, $sub.i32(0, 2147483648));
    call {:si_unique_call 484} {:cexpr "cfg"} boogie_si_record_i32($i4);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} writel($i4, $p6);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(8, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $i10 := readl($p9);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 487} {:cexpr "cfg"} boogie_si_record_i32($i10);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, $sub.i32(0, 2146435072));
    call {:si_unique_call 488} {:cexpr "cfg"} boogie_si_record_i32($i11);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(8, 1));
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} writel($i11, $p14);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} __const_udelay(42950);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(8, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i18 := readl($p17);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 492} {:cexpr "cfg"} boogie_si_record_i32($i18);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 2147483647);
    call {:si_unique_call 493} {:cexpr "cfg"} boogie_si_record_i32($i19);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(8, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} writel($i19, $p22);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(264, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 56)), $mul.ref(51, 1));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i28 := $ugt.i32($i27, 4);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} fimc_hw_set_dma_seq($p0, 15);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const fimc_capture_resume: ref;

axiom fimc_capture_resume == $sub.ref(0, 440018);

procedure fimc_capture_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, $M.27, $M.29, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.28, $M.32, $M.25, $M.36, assertsPassed;



implementation fimc_capture_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i41: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1));
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1));
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $i4 := test_and_clear_bit(9, $p3);
    call {:si_unique_call 497} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2392, 1));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} INIT_LIST_HEAD($p7);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3260, 1));
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p2);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} vslice_dummy_var_69 := fimc_capture_hw_init($p0);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} clear_bit(9, $p37);
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3268, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i40 := $ult.i32(0, $i39);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb17;

  $bb17:
    call $p42, $i43, $i44, $p45, $p46, $i47, $i48, $i49, $i41 := fimc_capture_resume_loop_$bb17($p0, $p1, $p38, $p42, $i43, $i44, $p45, $p46, $i47, $i48, $i49, $i41);
    goto $bb17_last;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2376, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $i43 := list_empty($p42);
    call {:si_unique_call 503} {:cexpr "tmp___0"} boogie_si_record_i32($i43);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $p45 := fimc_pending_queue_pop($p1);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 960)), $mul.ref(0, 1));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} buffer_queue($p46);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i41, 1);
    call {:si_unique_call 506} {:cexpr "i"} boogie_si_record_i32($i47);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p38);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i49 := $ult.i32($i47, $i48);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i49 == 1);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i41 := $i47;
    goto $bb23_dummy;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i44 == 1;
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i10 == 1;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i16 == 1;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb9;

  $bb10:
    assume $i24 == 1;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    $p31 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    $p34 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    call {:si_unique_call 499} vslice_dummy_var_68 := devirtbounce.6($p30, $p32, $p34, 0);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2661;
}



const fimc_m2m_resume: ref;

axiom fimc_m2m_resume == $sub.ref(0, 441050);

procedure fimc_m2m_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fimc_m2m_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $p2 := spinlock_check($p1);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i3 := _raw_spin_lock_irqsave($p2);
    call {:si_unique_call 509} {:cexpr "flags"} boogie_si_record_i64($i3);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(1848, 1));
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(1848, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $0.ref);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} spin_unlock_irqrestore($p9, $i3);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} $i11 := test_and_clear_bit(4, $p10);
    call {:si_unique_call 512} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} fimc_m2m_job_finish($p6, 6);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 442082);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    return;
}



const fimc_capture_hw_init: ref;

axiom fimc_capture_hw_init == $sub.ref(0, 443114);

procedure fimc_capture_hw_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.29, $M.32, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_capture_hw_init($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i13: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2360, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2360, 1)), $mul.ref(0, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 5);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $p20 := spinlock_check($p19);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i21 := _raw_spin_lock_irqsave($p20);
    call {:si_unique_call 518} {:cexpr "flags"} boogie_si_record_i64($i21);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(152, 1));
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} fimc_prepare_dma_offset($p5, $p22);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} fimc_set_yuv_order($p5);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} vslice_dummy_var_70 := fimc_hw_set_camera_polarity($p0, $p2);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} vslice_dummy_var_71 := fimc_hw_set_camera_type($p0, $p2);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} vslice_dummy_var_72 := fimc_hw_set_camera_source($p0, $p2);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} fimc_hw_set_camera_offset($p0, $p26);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i27 := fimc_set_scaler_info($p5);
    call {:si_unique_call 526} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} spin_unlock_irqrestore($p36, $i21);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i13 := $i27;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} fimc_hw_set_input_path($p5);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} fimc_hw_set_prescaler($p5);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} fimc_hw_set_mainscaler($p5);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} fimc_hw_set_target_format($p5);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} fimc_hw_set_rotation($p5);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} fimc_hw_set_effect($p5);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} fimc_hw_set_output_path($p5);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} fimc_hw_set_out_dma($p5);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(264, 1));
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 56)), $mul.ref(50, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} clear_bit(12, $p35);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} fimc_hw_set_rgb_alpha($p5);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $i17 := fimc_hw_camblk_cfg_writeback($p0);
    call {:si_unique_call 515} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i13 := $i17;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const buffer_queue: ref;

axiom buffer_queue == $sub.ref(0, 444146);

procedure buffer_queue($p0: ref);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $M.28, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.29, $M.32, $M.27, $M.25, $M.36, assertsPassed;



implementation buffer_queue($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $p48: ref;
  var $i49: i1;
  var $i50: i8;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $p91: ref;
  var $p92: ref;
  var $p94: ref;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 928)), $mul.ref(600, 1));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $p4 := vb2_get_drv_priv($p3);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1));
    $p9 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $p11 := spinlock_check($p10);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $i12 := _raw_spin_lock_irqsave($p11);
    call {:si_unique_call 541} {:cexpr "flags"} boogie_si_record_i64($i12);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 960)), $mul.ref(0, 1));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(152, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 960)), $mul.ref(944, 1));
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} vslice_dummy_var_73 := fimc_prepare_addr($p5, $p13, $p14, $p15);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i18 := constant_test_bit(9, $p17);
    call {:si_unique_call 544} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} fimc_pending_queue_add($p8, $p1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    $p44 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3268, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i46 := $ugt.i32($i45, 1);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i47 := (if $i46 == 1 then 2 else 1);
    call {:si_unique_call 552} {:cexpr "min_bufs"} boogie_si_record_i32($i47);
    $p48 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2408, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $i49 := vb2_is_streaming($p48);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i8($i49);
    call {:si_unique_call 554} {:cexpr "tmp___6"} boogie_si_record_i8($i50);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i8.i1($i50);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} spin_unlock_irqrestore($p94, $i12);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i51 == 1;
    $p52 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3256, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i54 := $sge.i32($i53, $i47);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb18;

  $bb19:
    assume $i54 == 1;
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $i56 := test_and_set_bit(7, $p55);
    call {:si_unique_call 556} {:cexpr "tmp___7"} boogie_si_record_i32($i56);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb21:
    assume $i57 == 1;
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} fimc_activate_capture($p5);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} spin_unlock_irqrestore($p58, $i12);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $i60 := test_and_set_bit(8, $p59);
    call {:si_unique_call 560} {:cexpr "tmp___3"} boogie_si_record_i32($i60);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p9);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i88 := $sub.i32(0, 2);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i88, 0);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb36:
    assume $i89 == 1;
    $p91 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(1600, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} vslice_dummy_var_74 := printk.ref.ref.i32(.str.94, $p92, $i88);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb27:
    assume $i63 == 1;
    $p64 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i87 := $sub.i32(0, 515);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i88 := $i87;
    goto $bb35;

  $bb29:
    assume $i69 == 1;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb31;

  $bb32:
    assume $i77 == 1;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    $p84 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    call {:si_unique_call 561} $i86 := devirtbounce.7($p83, $p85, 1);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    call {:si_unique_call 562} {:cexpr "tmp___4"} boogie_si_record_i32($i86);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i87 := $i86;
    goto $bb34;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i61 == 1;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $i21 := constant_test_bit(7, $p20);
    call {:si_unique_call 546} {:cexpr "tmp___2"} boogie_si_record_i32($i21);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i22 == 1);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} fimc_pending_queue_add($p8, $p1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb3:
    assume $i22 == 1;
    $p23 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3256, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i25 := $sle.i32($i24, 3);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} fimc_pending_queue_add($p8, $p1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb5:
    assume $i25 == 1;
    $p26 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3268, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 1);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 960)), $mul.ref(944, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} fimc_hw_set_output_addr($p7, $p32, $i31);
    $p33 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3260, 1));
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 960)), $mul.ref(956, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} fimc_active_queue_add($p8, $p1);
    $p36 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3260, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 1);
    $p39 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3260, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    $p40 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3260, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i41, 3);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i42 == 1;
    $p43 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3260, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 0);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i28 == 1;
    $p29 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3260, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb9;
}



const vb2_get_drv_priv: ref;

axiom vb2_get_drv_priv == $sub.ref(0, 445178);

procedure vb2_get_drv_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vb2_get_drv_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 848)), $mul.ref(48, 1));
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fimc_prepare_addr: ref;

axiom fimc_prepare_addr == $sub.ref(0, 446210);

procedure fimc_prepare_addr($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $CurrAddr;



implementation fimc_prepare_addr($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i24;
  var $i23: i24;
  var $i24: i24;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i64;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i16;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i16;
  var $i96: i32;
  var $i97: i1;
  var $i98: i64;
  var $i99: i32;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i16;
  var $i105: i32;
  var $i106: i1;
  var $i107: i64;
  var $i108: i32;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i24;
  var $i117: i24;
  var $i118: i24;
  var $p119: ref;
  var $p120: ref;
  var $i121: i8;
  var $i122: i64;
  var $i123: i64;
  var $i124: i64;
  var $i125: i1;
  var $p126: ref;
  var $i127: i32;
  var $p128: ref;
  var $i129: i32;
  var $p130: ref;
  var $i131: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p1);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p2);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(28, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i12, $i14);
    call {:si_unique_call 567} {:cexpr "pix_size"} boogie_si_record_i32($i15);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p16, .str.2);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p17, .str.3);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p18, .str.4);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p19, .str.5);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i22 := $load.i24($M.16, $p21);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i23 := $and.i24($i22, $sub.i24(0, 262144));
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i24 := $or.i24($i23, 363);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p21, $i24);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p25, 0);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.17, $p26);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i64($i27);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 1);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 569} {:cexpr "tmp"} boogie_si_record_i64($i30);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i42 := vb2_dma_contig_plane_dma_addr($p1, 0);
    call {:si_unique_call 572} {:cexpr "tmp___0"} boogie_si_record_i64($i42);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i64.i32($i42);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i43);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.0, $p47);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 1);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i50 == 1);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i89 := $load.i16($M.0, $p88);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i32($i89);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 0);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p110, .str.2);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p111, .str.3);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p112, .str.4);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p113, .str.6);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i116 := $load.i24($M.16, $p115);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i117 := $and.i24($i116, $sub.i24(0, 262144));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i118 := $or.i24($i117, 400);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p115, $i118);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p119, 0);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.17, $p120);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i64($i121);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i123 := $and.i64($i122, 1);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $i124 := ldv__builtin_expect($i123, 0);
    call {:si_unique_call 574} {:cexpr "tmp___3"} boogie_si_record_i64($i124);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i125 := $ne.i64($i124, 0);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb38:
    assume $i125 == 1;
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.0, $p126);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32.i32($p5, .str.6, .str.3, 400, $i127, $i129, $i131, 0);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb29:
    assume $i91 == 1;
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i95 := $load.i16($M.0, $p94);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i95);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i97 := $ugt.i32($i96, 1);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i104 := $load.i16($M.0, $p103);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i105 := $zext.i16.i32($i104);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 3);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i106 == 1;
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $i107 := vb2_dma_contig_plane_dma_addr($p1, 2);
    call {:si_unique_call 578} {:cexpr "tmp___2"} boogie_si_record_i64($i107);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i64.i32($i107);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p109, $i108);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i97 == 1;
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $i98 := vb2_dma_contig_plane_dma_addr($p1, 1);
    call {:si_unique_call 576} {:cexpr "tmp___1"} boogie_si_record_i64($i98);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i64.i32($i98);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p100, $i99);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb11:
    assume $i50 == 1;
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.0, $p53);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i55, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i55, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb6;

  $bb18:
    assume $i58 == 1;
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i68, $i15);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, $i69);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 32);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i75 == 1);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i83 := $lshr.i32($i15, 1);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i82, $i83);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, $i84);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb24:
    assume $i75 == 1;
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i78 := $lshr.i32($i15, 2);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i77, $i78);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i79);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb16:
    assume $i57 == 1;
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, $i15);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i64);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, 0);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb14:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i55, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb20;

  $bb21:
    assume $i59 == 1;
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, 0);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, 0);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32($p4, .str.5, .str.3, 363, $i36, $i41, $i15);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const fimc_pending_queue_add: ref;

axiom fimc_pending_queue_add == $sub.ref(0, 447242);

procedure fimc_pending_queue_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation fimc_pending_queue_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 960)), $mul.ref(928, 1));
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3288)), $mul.ref(2376, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} list_add_tail($p2, $p3);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    return;
}



const vb2_is_streaming: ref;

axiom vb2_is_streaming == $sub.ref(0, 448274);

procedure vb2_is_streaming($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation vb2_is_streaming($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 848)), $mul.ref(800, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i3 := $and.i8($i2, 1);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 449306);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 582} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 583} devirtbounce.1(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.9, $p2);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const fimc_activate_capture: ref;

axiom fimc_activate_capture == $sub.ref(0, 450338);

procedure fimc_activate_capture($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_activate_capture($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(328, 1));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} fimc_hw_enable_scaler($p2, $i7);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} fimc_hw_enable_capture($p0);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 451370);

procedure printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 1} true;
    call {:si_unique_call 586} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 587} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 1} true;
    call {:si_unique_call 588} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 589} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 1} true;
    call {:si_unique_call 590} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 591} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 1} true;
    call {:si_unique_call 592} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 593} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 1} true;
    call {:si_unique_call 594} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 595} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 1} true;
    call {:si_unique_call 596} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 597} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: ref, p.3: i32, p.4: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 1} true;
    call {:si_unique_call 598} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 599} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 1} true;
    call {:si_unique_call 600} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 601} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64.i64($p0: ref, p.1: ref, p.2: i64, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64.i64($p0: ref, p.1: ref, p.2: i64, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 1} true;
    call {:si_unique_call 602} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 603} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fimc_hw_enable_capture: ref;

axiom fimc_hw_enable_capture == $sub.ref(0, 452402);

procedure fimc_hw_enable_capture($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_hw_enable_capture($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i15: i32;
  var $i14: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(192, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $i6 := readl($p5);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    call {:si_unique_call 605} {:cexpr "cfg"} boogie_si_record_i32($i6);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 33554432);
    call {:si_unique_call 606} {:cexpr "cfg"} boogie_si_record_i32($i7);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(328, 1));
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i7, 1073741824);
    call {:si_unique_call 608} {:cexpr "cfg"} boogie_si_record_i32($i15);
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i14, $sub.i32(0, 2147483648));
    call {:si_unique_call 609} {:cexpr "cfg"} boogie_si_record_i32($i16);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(192, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} writel($i16, $p19);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i7, 1073741824);
    call {:si_unique_call 607} {:cexpr "cfg"} boogie_si_record_i32($i13);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const vb2_dma_contig_plane_dma_addr: ref;

axiom vb2_dma_contig_plane_dma_addr == $sub.ref(0, 453434);

procedure vb2_dma_contig_plane_dma_addr($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation vb2_dma_contig_plane_dma_addr($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} {:cexpr "vb2_dma_contig_plane_dma_addr:arg:plane_no"} boogie_si_record_i32($i1);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $p2 := vb2_plane_cookie($p0, $i1);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vb2_plane_cookie: ref;

axiom vb2_plane_cookie == $sub.ref(0, 454466);

procedure vb2_plane_cookie($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation vb2_plane_cookie($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} {:cexpr "vb2_plane_cookie:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $p2 := external_alloc();
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fimc_hw_camblk_cfg_writeback: ref;

axiom fimc_hw_camblk_cfg_writeback == $sub.ref(0, 455498);

procedure fimc_hw_camblk_cfg_writeback($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation fimc_hw_camblk_cfg_writeback($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(248, 1));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $i7 := regmap_read($p3, 536, $p1);
    call {:si_unique_call 617} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.18, $p1);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 7340032);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i11 := $lshr.i32($i10, 20);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 3);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(272, 1));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i15 := $sgt.i32($i14, 2);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    call {:si_unique_call 618} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i16);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 620} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i16, 0);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 623} {:cexpr "tmp___0"} boogie_si_record_i64($i27);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i34 := regmap_update_bits($p3, 536, 7372800, $i33);
    call {:si_unique_call 626} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i34, 0);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} usleep_range(1000, 2000);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i33, 32768);
    call {:si_unique_call 628} {:cexpr "val"} boogie_si_record_i32($i36);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $i37 := regmap_update_bits($p3, 536, 7372800, $i36);
    call {:si_unique_call 630} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i39 := $xor.i32(128, $sub.i32(0, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $i40 := regmap_update_bits($p3, 524, 128, $i39);
    call {:si_unique_call 632} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 0);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} usleep_range(1000, 2000);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i42 := regmap_update_bits($p3, 524, 128, 128);
    call {:si_unique_call 635} {:cexpr "tmp___1"} boogie_si_record_i32($i42);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i6 := $i42;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb23:
    assume $i41 == 1;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i6 := $i40;
    goto $bb3;

  $bb20:
    assume $i38 == 1;
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i6 := $i37;
    goto $bb3;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i6 := $i34;
    goto $bb3;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(272, 1));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, 20);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i32 := $shl.i32(1, $i31);
    call {:si_unique_call 624} {:cexpr "val"} boogie_si_record_i32($i32);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb16;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(272, 1));
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} warn_slowpath_fmt.ref.i32.ref.i32(.str.14, 817, .str.24, $i23);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const fimc_set_yuv_order: ref;

axiom fimc_set_yuv_order == $sub.ref(0, 456530);

procedure fimc_set_yuv_order($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr;



implementation fimc_set_yuv_order($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i24;
  var $i26: i24;
  var $i27: i24;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i24;
  var $i58: i24;
  var $i59: i24;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i64;
  var $i64: i64;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(316, 1));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(308, 1));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 35);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i9, 36);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i9, 36);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(312, 1));
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 48);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p19, .str.2);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p20, .str.7);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p21, .str.4);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p22, .str.8);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i25 := $load.i24($M.16, $p24);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i26 := $and.i24($i25, $sub.i24(0, 262144));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i27 := $or.i24($i26, 428);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p24, $i27);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p28, 0);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.17, $p29);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 639} {:cexpr "tmp"} boogie_si_record_i64($i33);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 35);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i41, 36);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i41, 36);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(304, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 0);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p51, .str.2);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p52, .str.7);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p53, .str.4);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p54, .str.9);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i57 := $load.i24($M.16, $p56);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i58 := $and.i24($i57, $sub.i24(0, 262144));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i59 := $or.i24($i58, 445);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p56, $i59);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p60, 0);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.17, $p61);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i64($i62);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i64 := $and.i64($i63, 1);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $i65 := ldv__builtin_expect($i64, 0);
    call {:si_unique_call 642} {:cexpr "tmp___0"} boogie_si_record_i64($i65);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume $i66 == 1;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(304, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} __dynamic_pr_debug.ref.ref.ref.i32.i32($p2, .str.9, .str.7, 445, $i68);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb23:
    assume $i44 == 1;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(304, 1));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, 3);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb21:
    assume $i43 == 1;
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(304, 1));
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 2);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb19:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i41, 34);
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i45 == 1);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(304, 1));
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, 1);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb26:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i41, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb25;

  $bb28:
    assume $i46 == 1;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb15:
    assume $i34 == 1;
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(312, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} __dynamic_pr_debug.ref.ref.ref.i32.i32($p1, .str.8, .str.7, 428, $i36);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(312, 1));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(312, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 32);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i9, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i13 == 1);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(312, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 16);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i9, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    goto $bb14;
}



const fimc_hw_set_camera_polarity: ref;

axiom fimc_hw_set_camera_polarity == $sub.ref(0, 457562);

procedure fimc_hw_set_camera_polarity($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_hw_set_camera_polarity($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(8, 1));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $i5 := readl($p4);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    call {:si_unique_call 645} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, $sub.i32(0, 117440531));
    call {:si_unique_call 646} {:cexpr "cfg"} boogie_si_record_i32($i6);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 128);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 32);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i20 := $i13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 8);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i27 := $i20;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 8);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i27;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.0, $p35);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 2048);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i41 := $i34;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p43, $mul.ref(8, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} writel($i41, $p44);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i34, 2);
    call {:si_unique_call 651} {:cexpr "cfg"} boogie_si_record_i32($i40);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i41 := $i40;
    goto $bb15;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i27, 16);
    call {:si_unique_call 650} {:cexpr "cfg"} boogie_si_record_i32($i33);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb12;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i20, 16777216);
    call {:si_unique_call 649} {:cexpr "cfg"} boogie_si_record_i32($i26);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb9;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i13, 33554432);
    call {:si_unique_call 648} {:cexpr "cfg"} boogie_si_record_i32($i19);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i6, 67108864);
    call {:si_unique_call 647} {:cexpr "cfg"} boogie_si_record_i32($i12);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const fimc_hw_set_camera_type: ref;

axiom fimc_hw_set_camera_type == $sub.ref(0, 458594);

procedure fimc_hw_set_camera_type($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_hw_set_camera_type($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i34: i32;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $i41: i32;
  var $i32: i32;
  var $i33: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i13: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $i80: i1;
  var $i81: i32;
  var $i82: i64;
  var $i83: i64;
  var $i84: i1;
  var $i85: i1;
  var $i86: i32;
  var $i87: i64;
  var $i66: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i50: i32;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i43: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i64;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(8, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $i6 := readl($p5);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 654} {:cexpr "cfg"} boogie_si_record_i32($i6);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, $sub.i32(0, 939525577));
    call {:si_unique_call 655} {:cexpr "cfg"} boogie_si_record_i32($i7);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i9, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i9, 5);
    assume {:verifier.code 0} true;
    $i13 := $i7;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    $p91 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(1600, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} vslice_dummy_var_77 := printk.ref.ref.i32(.str.23, $p92, $i94);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 22);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(256, 1));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p60, $mul.ref(0, 1));
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.0, $p61);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i64 == 1);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32(1, 0);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i67);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i68);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i70 := ldv__builtin_expect($i69, 0);
    call {:si_unique_call 667} {:cexpr "tmp___2"} boogie_si_record_i64($i70);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32(1, 0);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i86 := $zext.i1.i32($i85);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i86);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} vslice_dummy_var_76 := ldv__builtin_expect($i87, 0);
    assume {:verifier.code 0} true;
    $i66 := $i13;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i50 := $i66;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p97, $mul.ref(8, 1));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} writel($i50, $p98);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb32;

  $bb40:
    assume $i71 == 1;
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i8.i1(1);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i73 := $xor.i1($i72, 1);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i32($i73);
    call {:si_unique_call 668} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i74);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i76 := $zext.i1.i32($i75);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i76);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $i78 := ldv__builtin_expect($i77, 0);
    call {:si_unique_call 670} {:cexpr "tmp___0"} boogie_si_record_i64($i78);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i74, 0);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i81 := $zext.i1.i32($i80);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i81);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i83 := ldv__builtin_expect($i82, 0);
    call {:si_unique_call 673} {:cexpr "tmp___1"} boogie_si_record_i64($i83);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb45:
    assume $i84 == 1;
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i79 == 1;
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} warn_slowpath_fmt.ref.i32.ref(.str.14, 721, .str.22);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb37:
    assume $i64 == 1;
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i65 := $or.i32($i13, 64);
    call {:si_unique_call 665} {:cexpr "cfg"} boogie_si_record_i32($i65);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i66 := $i65;
    goto $bb39;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i7, 64);
    call {:si_unique_call 656} {:cexpr "cfg"} boogie_si_record_i32($i57);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i13 := $i57;
    goto $bb7;

  $bb2:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i9, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i7, 8);
    call {:si_unique_call 657} {:cexpr "cfg"} boogie_si_record_i32($i17);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i17;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2264, 1)), $mul.ref(8, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 16385);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i26, 20481);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i26, 20481);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    $p37 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(1600, 1));
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    $p40 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2264, 1)), $mul.ref(8, 1));
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} vslice_dummy_var_75 := printk.ref.ref.i32(.str.21, $p38, $i41);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 22);
    goto $bb32;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i23, 256);
    call {:si_unique_call 659} {:cexpr "cfg"} boogie_si_record_i32($i34);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i34, 48;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32(32, 32);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i45 := (if $i44 == 1 then 256 else 0);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i45, $i33);
    call {:si_unique_call 660} {:cexpr "tmp"} boogie_si_record_i32($i46);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref(404, 1));
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} writel($i46, $p49);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i50 := $i32;
    goto $bb33;

  $bb20:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i26, 16385);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb25;

  $bb26:
    assume $i30 == 1;
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i26, 8199);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb25;

  $bb28:
    assume $i31 == 1;
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i32, $i33 := $i23, 30;
    goto $bb30;

  $bb14:
    assume $i21 == 1;
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i17, 128);
    call {:si_unique_call 658} {:cexpr "cfg"} boogie_si_record_i32($i22);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb16;

  $bb10:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i9, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    $i16 := $ule.i32($i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb9;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i56 := $i7;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i50 := $i56;
    goto $bb33;

  $bb34:
    assume $i54 == 1;
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i7, 536870912);
    call {:si_unique_call 664} {:cexpr "cfg"} boogie_si_record_i32($i55);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i56 := $i55;
    goto $bb36;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const fimc_hw_set_camera_source: ref;

axiom fimc_hw_set_camera_source == $sub.ref(0, 459626);

procedure fimc_hw_set_camera_source($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fimc_hw_set_camera_source($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i1;
  var $i45: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i46: i32;
  var $i50: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i32;
  var $i51: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i40: i32;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i7, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i7, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i51 := 0;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i62 := $shl.i32($i61, 16);
    $p63 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i65 := $or.i32($i62, $i64);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i65, $i51);
    call {:si_unique_call 681} {:cexpr "cfg"} boogie_si_record_i32($i66);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} writel($i66, $p68);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb7;

  $bb4:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i7, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb9;

  $bb10:
    assume $i11 == 1;
    $p52 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, 384);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i51 := $i59;
    goto $bb39;

  $bb40:
    assume $i57 == 1;
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i58 := $or.i32(0, $sub.i32(0, 2147483648));
    call {:si_unique_call 683} {:cexpr "cfg"} boogie_si_record_i32($i58);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb42;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i7, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2264, 1)), $mul.ref(8, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 8200);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $i18 := 0;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    $p70 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2264, 1)), $mul.ref(8, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 8201);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i18 := 1;
    assume {:branchcond $i72} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    $p74 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2264, 1)), $mul.ref(8, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 8199);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i18 := 2;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    $p78 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2264, 1)), $mul.ref(8, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 8198);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i18 := 3;
    assume {:branchcond $i80} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i28, $i29, $i30 := 4, $u0, 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i28, 4);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 1);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i50 := $i30;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb39;

  $bb30:
    assume $i43 == 1;
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i29, 8);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i44 == 1);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i29, 16);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i49 := $i30;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i46 := $i49;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i50 := $i46;
    goto $bb38;

  $bb35:
    assume $i47 == 1;
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i30, 536870912);
    call {:si_unique_call 680} {:cexpr "cfg"} boogie_si_record_i32($i48);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i49 := $i48;
    goto $bb37;

  $bb32:
    assume $i44 == 1;
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i30, $sub.i32(0, 2147483648));
    call {:si_unique_call 679} {:cexpr "cfg"} boogie_si_record_i32($i45);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb34;

  $bb26:
    assume $i31 == 1;
    $p34 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(1600, 1));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    $p37 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2264, 1)), $mul.ref(8, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} vslice_dummy_var_78 := printk.ref.ref.i32(.str.20, $p35, $i38);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 22);
    goto $bb28;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref(pix_desc, $mul.ref(0, 48)), $mul.ref($i19, 12)), $mul.ref(4, 1));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.19, $p21);
    call {:si_unique_call 676} {:cexpr "cfg"} boogie_si_record_i32($i22);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i18);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref(pix_desc, $mul.ref(0, 48)), $mul.ref($i23, 12)), $mul.ref(8, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.20, $p25);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    call {:si_unique_call 677} {:cexpr "bus_width"} boogie_si_record_i32($i27);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i28, $i29, $i30 := $i18, $i27, $i22;
    goto $bb22;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb20;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb20;

  $bb12:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb9;

  $bb15:
    assume $i13 == 1;
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    goto $bb14;
}



const fimc_hw_set_input_path: ref;

axiom fimc_hw_set_input_path == $sub.ref(0, 460658);

procedure fimc_hw_set_input_path($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_hw_set_input_path($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(252, 1));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $i6 := readl($p5);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    call {:si_unique_call 685} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, $sub.i32(0, 9));
    call {:si_unique_call 686} {:cexpr "cfg"} boogie_si_record_i32($i7);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(320, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i12 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(252, 1));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} writel($i12, $p15);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i7, 8);
    call {:si_unique_call 687} {:cexpr "cfg"} boogie_si_record_i32($i11);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const fimc_hw_set_output_path: ref;

axiom fimc_hw_set_output_path == $sub.ref(0, 461690);

procedure fimc_hw_set_output_path($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_hw_set_output_path($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(88, 1));
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $i6 := readl($p5);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    call {:si_unique_call 690} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, $sub.i32(0, 67108865));
    call {:si_unique_call 691} {:cexpr "cfg"} boogie_si_record_i32($i7);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(324, 1));
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 3);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i12 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(88, 1));
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} writel($i12, $p15);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i7, 67108864);
    call {:si_unique_call 692} {:cexpr "cfg"} boogie_si_record_i32($i11);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 462722);

procedure warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    return;
}



procedure warn_slowpath_fmt.ref.i32.ref.i32($p0: ref, $i1: i32, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref.i32($p0: ref, $i1: i32, $p2: ref, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    return;
}



const regmap_read: ref;

axiom regmap_read == $sub.ref(0, 463754);

procedure regmap_read($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation regmap_read($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 696} {:cexpr "regmap_read:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 1} true;
    call {:si_unique_call 697} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 698} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const regmap_update_bits: ref;

axiom regmap_update_bits == $sub.ref(0, 464786);

procedure regmap_update_bits($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation regmap_update_bits($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 699} {:cexpr "regmap_update_bits:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 700} {:cexpr "regmap_update_bits:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 701} {:cexpr "regmap_update_bits:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 1} true;
    call {:si_unique_call 702} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 703} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const usleep_range: ref;

axiom usleep_range == $sub.ref(0, 465818);

procedure usleep_range($i0: i64, $i1: i64);
  free requires assertsPassed;



implementation usleep_range($i0: i64, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} {:cexpr "usleep_range:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 705} {:cexpr "usleep_range:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 466850);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    return;
}



const fimc_hw_set_dma_seq: ref;

axiom fimc_hw_set_dma_seq == $sub.ref(0, 467882);

procedure fimc_hw_set_dma_seq($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation fimc_hw_set_dma_seq($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} {:cexpr "fimc_hw_set_dma_seq:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(508, 1));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} writel($i1, $p4);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    return;
}



const fimc_capture_suspend: ref;

axiom fimc_capture_suspend == $sub.ref(0, 468914);

procedure fimc_capture_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.28, $M.27, $M.25, $M.36, assertsPassed;



implementation fimc_capture_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $i2 := constant_test_bit(11, $p1);
    call {:si_unique_call 710} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 711} {:cexpr "suspend"} boogie_si_record_i8($i4);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i6 := fimc_stop_capture($p0, $i5);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    call {:si_unique_call 713} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i45 := $sub.i32(0, 2);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i8 := $i45;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 515);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb13;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb9;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    call {:si_unique_call 714} $i43 := devirtbounce.8($p38, $p42);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 715} {:cexpr "tmp___1"} boogie_si_record_i32($i43);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb12;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const fimc_m2m_suspend: ref;

axiom fimc_m2m_suspend == $sub.ref(0, 469946);

procedure fimc_m2m_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fimc_m2m_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $i18: i1;
  var $i19: i64;
  var $i20: i1;
  var $i22: i1;
  var $i21: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i8;
  var $i34: i1;
  var $i35: i1;
  var $i36: i64;
  var $i37: i1;
  var $i39: i1;
  var $i38: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i32;
  var $p47: ref;
  var $i48: i1;
  var $i49: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $p3 := spinlock_check($p2);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i4 := _raw_spin_lock_irqsave($p3);
    call {:si_unique_call 719} {:cexpr "flags"} boogie_si_record_i64($i4);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $i6 := constant_test_bit(2, $p5);
    call {:si_unique_call 721} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} clear_bit(4, $p10);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} set_bit(3, $p11);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} spin_unlock_irqrestore($p12, $i4);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} __might_sleep(.str.4, 852, 0);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $i14 := constant_test_bit(4, $p13);
    call {:si_unique_call 728} {:cexpr "tmp___3"} boogie_si_record_i32($i14);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i8($i15);
    call {:si_unique_call 729} {:cexpr "__cond___0"} boogie_si_record_i8($i16);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i19 := 25;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i16);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i21 := 1;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i20 == 1);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i19, 0);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i21 := $i22;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i21);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i45 := $i19;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i64.i32($i45);
    call {:si_unique_call 739} {:cexpr "timeout"} boogie_si_record_i32($i46);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} clear_bit(3, $p47);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i46, 0);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i49 := (if $i48 == 1 then $sub.i32(0, 11) else 0);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i9 := $i49;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb14:
    assume $i24 == 1;
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} INIT_LIST_HEAD($p25);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 0);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i27 := 25;
    goto $bb16;

  $bb16:
    call $i27, $p28, $i29, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i39, $i38, $i40, $i41, $i42, $i43 := fimc_m2m_suspend_loop_$bb16($p0, $p1, $i27, $p28, $i29, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i39, $i38, $i40, $i41, $i42, $i43);
    goto $bb16_last;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(304, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $i29 := prepare_to_wait_event($p28, $p1, 2);
    call {:si_unique_call 732} {:cexpr "tmp___1"} boogie_si_record_i64($i29);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i31 := constant_test_bit(4, $p30);
    call {:si_unique_call 734} {:cexpr "tmp___2"} boogie_si_record_i32($i31);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i8($i32);
    call {:si_unique_call 735} {:cexpr "__cond"} boogie_si_record_i8($i33);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i33);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i36 := $i27;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($i33);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i38 := 1;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i37 == 1);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i36, 0);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i38 := $i39;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i38);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i42 := $i36;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $i43 := schedule_timeout($i36);
    call {:si_unique_call 738} {:cexpr "__ret___0"} boogie_si_record_i64($i43);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i27 := $i43;
    goto corral_source_split_3782_dummy;

  $bb26:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(304, 1));
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} finish_wait($p44, $p1);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i45 := $i42;
    goto $bb30;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb24;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i27, 0);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb19;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i36 := 1;
    goto $bb22;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb12;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64(25, 0);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb7;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb10;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} spin_unlock_irqrestore($p8, $i4);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  corral_source_split_3782_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3753;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 470978);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 742} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    return;
}



const prepare_to_wait_event: ref;

axiom prepare_to_wait_event == $sub.ref(0, 472010);

procedure prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 743} {:cexpr "prepare_to_wait_event:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 1} true;
    call {:si_unique_call 744} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 745} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 473042);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 746} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 1} true;
    call {:si_unique_call 747} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 748} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 474074);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    return;
}



const fimc_stop_capture: ref;

axiom fimc_stop_capture == $sub.ref(0, 475106);

procedure fimc_stop_capture($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.28, $M.29, $M.32, $M.27, $M.25, $M.36, assertsPassed;



implementation fimc_stop_capture($p0: ref, $i1: i1) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $i20: i1;
  var $i21: i64;
  var $i22: i1;
  var $i24: i1;
  var $i23: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i8;
  var $i36: i1;
  var $i37: i1;
  var $i38: i64;
  var $i39: i1;
  var $i41: i1;
  var $i40: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i64;
  var $p45: ref;
  var $i46: i1;
  var $i47: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i1);
    call {:si_unique_call 750} {:cexpr "fimc_stop_capture:arg:suspend"} boogie_si_record_i1($i1);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $i4 := fimc_capture_active($p0);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 752} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $p11 := spinlock_check($p10);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $i12 := _raw_spin_lock_irqsave($p11);
    call {:si_unique_call 755} {:cexpr "flags"} boogie_si_record_i64($i12);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} set_bit(10, $p13);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} fimc_deactivate_capture($p0);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} spin_unlock_irqrestore($p14, $i12);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} __might_sleep(.str.29, 142, 0);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i16 := constant_test_bit(10, $p15);
    call {:si_unique_call 761} {:cexpr "tmp___4"} boogie_si_record_i32($i16);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 762} {:cexpr "__cond___0"} boogie_si_record_i8($i18);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := 50;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i18);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i23 := 1;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i22 == 1);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, 0);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i23 := $i24;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i23);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i3);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $i47 := fimc_capture_state_cleanup($p0, $i46);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 773} {:cexpr "tmp___5"} boogie_si_record_i32($i47);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i9 := $i47;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i26 == 1;
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} INIT_LIST_HEAD($p27);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 0);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i29 := 50;
    goto $bb19;

  $bb19:
    call $i29, $p30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i41, $i40, $i42, $i43, $i44 := fimc_stop_capture_loop_$bb19($p0, $p2, $i29, $p30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i41, $i40, $i42, $i43, $i44);
    goto $bb19_last;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(304, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $i31 := prepare_to_wait_event($p30, $p2, 2);
    call {:si_unique_call 765} {:cexpr "tmp___2"} boogie_si_record_i64($i31);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i33 := constant_test_bit(10, $p32);
    call {:si_unique_call 767} {:cexpr "tmp___3"} boogie_si_record_i32($i33);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i8($i34);
    call {:si_unique_call 768} {:cexpr "__cond"} boogie_si_record_i8($i35);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i38 := $i29;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i35);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i40 := 1;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i39 == 1);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i38, 0);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i40 := $i41;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i40);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $i44 := schedule_timeout($i38);
    call {:si_unique_call 771} {:cexpr "__ret___0"} boogie_si_record_i64($i44);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i29 := $i44;
    goto corral_source_split_3880_dummy;

  $bb29:
    assume $i43 == 1;
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(304, 1));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} finish_wait($p45, $p2);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb27;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i29, 0);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb22;

  $bb23:
    assume $i37 == 1;
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i38 := 1;
    goto $bb25;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb15;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64(50, 0);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb10;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb13;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  corral_source_split_3880_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3851;
}



const fimc_capture_active: ref;

axiom fimc_capture_active == $sub.ref(0, 476138);

procedure fimc_capture_active($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation fimc_capture_active($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i8: i1;
  var $i13: i8;
  var $p14: ref;
  var $i15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $p2 := spinlock_check($p1);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i3 := _raw_spin_lock_irqsave($p2);
    call {:si_unique_call 776} {:cexpr "flags"} boogie_si_record_i64($i3);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 64);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i8 := 1;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i11 := $and.i64($i10, 32);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i8 := $i12;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i8);
    call {:si_unique_call 777} {:cexpr "ret"} boogie_si_record_i8($i13);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} spin_unlock_irqrestore($p14, $i3);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i13);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const fimc_capture_state_cleanup: ref;

axiom fimc_capture_state_cleanup == $sub.ref(0, 477170);

procedure fimc_capture_state_cleanup($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.28, $M.29, $M.32, $CurrAddr, $M.27, $M.25, $M.36, assertsPassed;



implementation fimc_capture_state_cleanup($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i8;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i1;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i1;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 779} {:cexpr "fimc_capture_state_cleanup:arg:suspend"} boogie_si_record_i1($i1);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $p5 := spinlock_check($p4);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 782} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i9 := $and.i64($i8, 256);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 783} {:cexpr "streaming"} boogie_si_record_i8($i11);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i14 := $and.i64($i13, $sub.i64(0, 1473));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, $i14);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i2);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, $sub.i64(0, 545));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i23);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i2);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i25 == 1);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p26, $p27, $p28, $i29, $i30 := fimc_capture_state_cleanup_loop_$bb7($p0, $p3, $i25, $p26, $p27, $p28, $i29, $i30);
    goto $bb7_last;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $i29 := list_empty($p28);
    call {:si_unique_call 785} {:cexpr "tmp___0"} boogie_si_record_i32($i29);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2392, 1));
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $i32 := list_empty($p31);
    call {:si_unique_call 789} {:cexpr "tmp___1"} boogie_si_record_i32($i32);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} fimc_hw_reset($p0);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3260, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 0);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} spin_unlock_irqrestore($p40, $i6);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i11);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i41 == 1);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i74 := 0;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $r := $i74;
    return;

  $bb26:
    assume $i41 == 1;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1));
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i73 := $sub.i32(0, 2);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i74 := $i73;
    goto $bb37;

  $bb28:
    assume $i44 == 1;
    $p46 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32(0, 515);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i73 := $i72;
    goto $bb36;

  $bb30:
    assume $i51 == 1;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb32;

  $bb33:
    assume $i60 == 1;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    $p69 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    call {:si_unique_call 797} $i71 := devirtbounce.7($p67, $p70, 0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    call {:si_unique_call 798} {:cexpr "tmp___2"} boogie_si_record_i32($i71);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i72 := $i71;
    goto $bb35;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i33 == 1;
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call $p34, $i35, $p36, $i37, $i38 := fimc_capture_state_cleanup_loop_$bb18($i2, $p3, $p31, $p34, $i35, $p36, $i37, $i38);
    goto $bb18_last;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $p34 := fimc_active_queue_pop($p3);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i2);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i35 == 1);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p34, $mul.ref(0, 960)), $mul.ref(0, 1));
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} vb2_buffer_done($p36, 6);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i37 := list_empty($p31);
    call {:si_unique_call 794} {:cexpr "tmp___1"} boogie_si_record_i32($i37);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i38 == 1);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb23_dummy;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} fimc_pending_queue_add($p3, $p34);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $p26 := fimc_pending_queue_pop($p3);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 960)), $mul.ref(0, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} vb2_buffer_done($p27, 6);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb10_dummy;

  $bb9:
    assume $i25 == 1;
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb5;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i19 := $or.i64($i18, 512);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i19);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10_dummy:
    assume false;
    return;

  $bb7_last:
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2376, 1));
    goto corral_source_split_3940;
}



const v4l2_m2m_fop_poll: ref;

axiom v4l2_m2m_fop_poll == $sub.ref(0, 478202);

procedure v4l2_m2m_fop_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_m2m_fop_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 1} true;
    call {:si_unique_call 799} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 800} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const video_ioctl2: ref;

axiom video_ioctl2 == $sub.ref(0, 479234);

procedure video_ioctl2($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation video_ioctl2($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 801} {:cexpr "video_ioctl2:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 802} {:cexpr "video_ioctl2:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 1} true;
    call {:si_unique_call 803} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 804} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const v4l2_m2m_fop_mmap: ref;

axiom v4l2_m2m_fop_mmap == $sub.ref(0, 480266);

procedure v4l2_m2m_fop_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_m2m_fop_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 1} true;
    call {:si_unique_call 805} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 806} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fimc_m2m_open: ref;

axiom fimc_m2m_open == $sub.ref(0, 481298);

procedure fimc_m2m_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $CurrAddr;



implementation fimc_m2m_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i8;
  var $i65: i8;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p72: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i1;
  var $i78: i8;
  var $i79: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i32;
  var $p88: ref;
  var $i89: i32;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $p95: ref;
  var $i96: i1;
  var $p97: ref;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $p102: ref;
  var $p103: ref;
  var $i86: i32;
  var $i48: i32;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i31: i32;
  var $p107: ref;
  var $i27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $p2 := video_drvdata($p0);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p4, .str.2);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p5, .str.90);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p6, .str.81);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p7, .str.91);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.16, $p9);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 610);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p9, $i12);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p13, 0);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.17, $p14);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 810} {:cexpr "tmp___2"} boogie_si_record_i64($i18);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $i25 := mutex_lock_interruptible_nested($p24, 0);
    call {:si_unique_call 816} {:cexpr "tmp___3"} boogie_si_record_i32($i25);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $i29 := constant_test_bit(11, $p28);
    call {:si_unique_call 818} {:cexpr "tmp___4"} boogie_si_record_i32($i29);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $p32 := kzalloc(880, 208);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p33, $mul.ref(0, 880)), $mul.ref(408, 1));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(0, 1));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} v4l2_fh_init($p36, $p38);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p33, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p2);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $p40 := fimc_get_format(0);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p40);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $p43 := fimc_get_format(0);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p43);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $i46 := fimc_ctrls_create($p33);
    call {:si_unique_call 825} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(0, 1));
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 880)), $mul.ref(408, 1)), $mul.ref(24, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $p50);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p33, $mul.ref(0, 880)), $mul.ref(408, 1));
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, $p53);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p33, $mul.ref(0, 880)), $mul.ref(408, 1));
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} v4l2_fh_add($p56);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p33, $mul.ref(0, 880)), $mul.ref(392, 1));
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, 65536);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p33, $mul.ref(0, 880)), $mul.ref(388, 1));
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 0);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p33, $mul.ref(0, 880)), $mul.ref(320, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 2);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p33, $mul.ref(0, 880)), $mul.ref(324, 1));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, 2);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p33, $mul.ref(0, 880)), $mul.ref(328, 1));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i64 := $and.i8($i63, $sub.i8(0, 9));
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i65 := $or.i8($i64, 8);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, $i65);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(1840, 1));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p33);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $p70 := v4l2_m2m_ctx_init($p68, $p69, queue_init);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 880)), $mul.ref(408, 1)), $mul.ref(168, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p72, $p70);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 880)), $mul.ref(408, 1)), $mul.ref(168, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $i77 := IS_ERR($p76);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i78 := $zext.i1.i8($i77);
    call {:si_unique_call 832} {:cexpr "tmp___7"} boogie_si_record_i8($i78);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i8.i1($i78);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(1856, 1));
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    call {:si_unique_call 837} {:cexpr "tmp___8"} boogie_si_record_i32($i89);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(1856, 1));
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i92, 1);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(1856, 1));
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, $i93);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i89, 0);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $i98 := fimc_m2m_set_default_format($p33);
    call {:si_unique_call 840} {:cexpr "ret"} boogie_si_record_i32($i98);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i98, 0);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} mutex_unlock($p100);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb26:
    assume $i99 == 1;
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 880)), $mul.ref(408, 1)), $mul.ref(168, 1));
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} v4l2_m2m_ctx_release($p103);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i86 := $i98;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} fimc_ctrls_delete($p33);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i48 := $i86;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p33, $mul.ref(0, 880)), $mul.ref(408, 1));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} v4l2_fh_del($p104);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p33, $mul.ref(0, 880)), $mul.ref(408, 1));
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} v4l2_fh_exit($p105);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p33);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} kfree($p106);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i31 := $i48;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} mutex_unlock($p107);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i27 := $i31;
    goto $bb6;

  $bb23:
    assume $i96 == 1;
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} set_bit(1, $p97);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i79 == 1;
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 880)), $mul.ref(408, 1)), $mul.ref(168, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $i84 := PTR_ERR($p83);
    call {:si_unique_call 834} {:cexpr "tmp___6"} boogie_si_record_i64($i84);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i64.i32($i84);
    call {:si_unique_call 835} {:cexpr "ret"} boogie_si_record_i32($i85);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i86 := $i85;
    goto $bb21;

  $bb15:
    assume $i47 == 1;
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i48 := $i46;
    goto $bb17;

  $bb12:
    assume $i35 == 1;
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 12);
    goto $bb10;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 16);
    goto $bb10;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 512);
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $p20 := get_current();
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $i21 := task_pid_nr($p20);
    call {:si_unique_call 813} {:cexpr "tmp___1"} boogie_si_record_i32($i21);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} __dynamic_pr_debug.ref.ref.i32.i64($p1, .str.91, $i21, $i23);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fimc_m2m_release: ref;

axiom fimc_m2m_release == $sub.ref(0, 482330);

procedure fimc_m2m_release($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $CurrAddr;



implementation fimc_m2m_release($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i64;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p43: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 408), 880));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 408), 880)), $mul.ref(400, 1));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p9, .str.2);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p10, .str.92);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p11, .str.81);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p12, .str.93);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.16, $p14);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 684);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p14, $i17);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p18, 0);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.17, $p19);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 845} {:cexpr "tmp___1"} boogie_si_record_i64($i23);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} mutex_lock_nested($p32, 0);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p5, $mul.ref($sub.ref(0, 408), 880)), $mul.ref(408, 1)), $mul.ref(168, 1));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} v4l2_m2m_ctx_release($p35);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} fimc_ctrls_delete($p6);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 408), 880)), $mul.ref(408, 1));
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} v4l2_fh_del($p36);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 408), 880)), $mul.ref(408, 1));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} v4l2_fh_exit($p37);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(1856, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i40, 1);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(1856, 1));
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i41);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(1856, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i47 := $sle.i32($i46, 0);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p6);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} kfree($p49);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} mutex_unlock($p50);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i47 == 1;
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} clear_bit(1, $p48);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $p25 := get_current();
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $i26 := task_pid_nr($p25);
    call {:si_unique_call 848} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(1856, 1));
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} __dynamic_pr_debug.ref.ref.ref.i32.i32.i64.i32($p1, .str.93, .str.92, 684, $i26, $i28, $i31);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 483362);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $p0 := devirtbounce.9(0, current_task);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const task_pid_nr: ref;

axiom task_pid_nr == $sub.ref(0, 484394);

procedure task_pid_nr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation task_pid_nr($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 11744)), $mul.ref(2136, 1));
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.21, $p1);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 485426);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_m2m_ctx_release: ref;

axiom v4l2_m2m_ctx_release == $sub.ref(0, 486458);

procedure v4l2_m2m_ctx_release($p0: ref);
  free requires assertsPassed;



implementation v4l2_m2m_ctx_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    return;
}



const fimc_ctrls_delete: ref;

axiom fimc_ctrls_delete == $sub.ref(0, 487490);

procedure fimc_ctrls_delete($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_ctrls_delete($p0: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(288, 1));
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(0, 1));
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} v4l2_ctrl_handler_free($p5);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(288, 1));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 0);
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(280, 1));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const v4l2_fh_del: ref;

axiom v4l2_fh_del == $sub.ref(0, 488522);

procedure v4l2_fh_del($p0: ref);
  free requires assertsPassed;



implementation v4l2_fh_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_fh_exit: ref;

axiom v4l2_fh_exit == $sub.ref(0, 489554);

procedure v4l2_fh_exit($p0: ref);
  free requires assertsPassed;



implementation v4l2_fh_exit($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 490586);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} free_($p0);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 491618);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 492650);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 862} $free($p0);
    return;
}



const v4l2_ctrl_handler_free: ref;

axiom v4l2_ctrl_handler_free == $sub.ref(0, 493682);

procedure v4l2_ctrl_handler_free($p0: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_handler_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    return;
}



const video_drvdata: ref;

axiom video_drvdata == $sub.ref(0, 494714);

procedure video_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $p1 := video_devdata($p0);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $p2 := video_get_drvdata($p1);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const mutex_lock_interruptible_nested: ref;

axiom mutex_lock_interruptible_nested == $sub.ref(0, 495746);

procedure mutex_lock_interruptible_nested($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_lock_interruptible_nested($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 865} {:cexpr "mutex_lock_interruptible_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 1} true;
    call {:si_unique_call 866} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 867} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 496778);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 869} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const v4l2_fh_init: ref;

axiom v4l2_fh_init == $sub.ref(0, 497810);

procedure v4l2_fh_init($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation v4l2_fh_init($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    return;
}



const fimc_get_format: ref;

axiom fimc_get_format == $sub.ref(0, 498842);

procedure fimc_get_format($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation fimc_get_format($i0: i32) returns ($r: ref)
{
  var $i1: i1;
  var $i3: i64;
  var $p4: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} {:cexpr "fimc_get_format:arg:index"} boogie_si_record_i32($i0);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i1 := $ugt.i32($i0, 19);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i0);
    $p4 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref($i3, 40));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p2 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p2 := $0.ref;
    goto $bb3;
}



const fimc_ctrls_create: ref;

axiom fimc_ctrls_create == $sub.ref(0, 499874);

procedure fimc_ctrls_create($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fimc_ctrls_create($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p7: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i12: i32;
  var vslice_dummy_var_79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i5 := fimc_get_alpha_mask($p4);
    call {:si_unique_call 874} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(0, 1));
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(288, 1));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} vslice_dummy_var_79 := v4l2_ctrl_handler_init_class($p7, 6, $p1, .str.12);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $p14 := v4l2_ctrl_new_std($p7, fimc_ctrl_ops, 9963810, 0, 270, 90, 0);
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(256, 1));
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p14);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $p16 := v4l2_ctrl_new_std($p7, fimc_ctrl_ops, 9963796, 0, 1, 1, 0);
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(264, 1));
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p16);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $p18 := v4l2_ctrl_new_std($p7, fimc_ctrl_ops, 9963797, 0, 1, 1, 0);
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(272, 1));
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p18);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 5568)), $mul.ref(264, 1));
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 56)), $mul.ref(50, 1));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(280, 1));
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $p32 := v4l2_ctrl_new_std_menu($p7, fimc_ctrl_ops, 9963807, 15, $sub.i64(0, 38976), 0);
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(240, 1)), $mul.ref(0, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p32);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $p35 := v4l2_ctrl_new_std($p7, fimc_ctrl_ops, 9963818, 0, 65535, 1, 0);
    $p37 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(240, 1)), $mul.ref(8, 1));
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p35);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(372, 1)), $mul.ref(0, 1));
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 0);
    $p40 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(0, 1)), $mul.ref(236, 1));
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    $p46 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(0, 1)), $mul.ref(236, 1));
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i12 := $i47;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i42 == 1;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(240, 1)), $mul.ref(0, 1));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} v4l2_ctrl_cluster(2, $p44);
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(288, 1));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, 1);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i5);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $p29 := v4l2_ctrl_new_std($p7, fimc_ctrl_ops, 9963817, 0, $i28, 1, 0);
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(280, 1));
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p29);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;
}



const v4l2_fh_add: ref;

axiom v4l2_fh_add == $sub.ref(0, 500906);

procedure v4l2_fh_add($p0: ref);
  free requires assertsPassed;



implementation v4l2_fh_add($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    return;
}



const queue_init: ref;

axiom queue_init == $sub.ref(0, 501938);

procedure queue_init($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation queue_init($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 848)), $mul.ref(0, 1));
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 10);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 848)), $mul.ref(4, 1));
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 19);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 848)), $mul.ref(48, 1));
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p0);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 848)), $mul.ref(32, 1));
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, fimc_qops);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 848)), $mul.ref(40, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, vb2_dma_contig_memops);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 848)), $mul.ref(56, 1));
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 944);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 848)), $mul.ref(60, 1));
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 16384);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 848)), $mul.ref(16, 1));
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p14);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $i16 := vb2_queue_init($p1);
    call {:si_unique_call 884} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 848)), $mul.ref(0, 1));
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 9);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 848)), $mul.ref(4, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 19);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 848)), $mul.ref(48, 1));
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p0);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 848)), $mul.ref(32, 1));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, fimc_qops);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 848)), $mul.ref(40, 1));
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, vb2_dma_contig_memops);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 848)), $mul.ref(56, 1));
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 944);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 848)), $mul.ref(60, 1));
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 16384);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 848)), $mul.ref(16, 1));
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p29);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $i31 := vb2_queue_init($p2);
    call {:si_unique_call 886} {:cexpr "tmp"} boogie_si_record_i32($i31);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i18 := $i31;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    goto $bb3;
}



const v4l2_m2m_ctx_init: ref;

axiom v4l2_m2m_ctx_init == $sub.ref(0, 502970);

procedure v4l2_m2m_ctx_init($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_m2m_ctx_init($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $p3 := external_alloc();
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const fimc_m2m_set_default_format: ref;

axiom fimc_m2m_set_default_format == $sub.ref(0, 504002);

procedure fimc_m2m_set_default_format($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fimc_m2m_set_default_format($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p9: ref;
  var $p12: ref;
  var $p16: ref;
  var $p20: ref;
  var $p24: ref;
  var $p28: ref;
  var $p32: ref;
  var $p36: ref;
  var $p39: ref;
  var $p42: ref;
  var $p46: ref;
  var $p50: ref;
  var $p54: ref;
  var $p58: ref;
  var $p62: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p91: ref;
  var $p92: ref;
  var $i90: i32;
  var $p95: ref;
  var $p98: ref;
  var $p102: ref;
  var $p106: ref;
  var $p110: ref;
  var $p114: ref;
  var $p118: ref;
  var $p122: ref;
  var $p125: ref;
  var $p128: ref;
  var $p132: ref;
  var $p136: ref;
  var $p140: ref;
  var $p144: ref;
  var $p148: ref;
  var $p152: ref;
  var $p155: ref;
  var $p158: ref;
  var $p162: ref;
  var $p166: ref;
  var $p170: ref;
  var $p174: ref;
  var $p178: ref;
  var $p182: ref;
  var $p185: ref;
  var $p188: ref;
  var $p192: ref;
  var $p196: ref;
  var $p200: ref;
  var $p204: ref;
  var $p208: ref;
  var $p212: ref;
  var $p215: ref;
  var $p218: ref;
  var $p222: ref;
  var $p226: ref;
  var $p230: ref;
  var $p234: ref;
  var $p238: ref;
  var $p242: ref;
  var $p245: ref;
  var $p248: ref;
  var $p252: ref;
  var $p256: ref;
  var $p260: ref;
  var $p264: ref;
  var $p268: ref;
  var $p272: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} $p1 := $alloc($mul.ref(192, $zext.i32.i64(1)));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 800);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 600);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 876758866);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(12, 1));
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(16, 1));
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 1920000);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 3200);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(0, 20)), $mul.ref(8, 1)), $mul.ref(0, 2));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, 0);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(0, 20)), $mul.ref(8, 1)), $mul.ref(1, 2));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, 0);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(0, 20)), $mul.ref(8, 1)), $mul.ref(2, 2));
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, 0);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(0, 20)), $mul.ref(8, 1)), $mul.ref(3, 2));
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, 0);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(0, 20)), $mul.ref(8, 1)), $mul.ref(4, 2));
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, 0);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(0, 20)), $mul.ref(8, 1)), $mul.ref(5, 2));
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p36, 0);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(1, 20)), $mul.ref(0, 1));
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 0);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(1, 20)), $mul.ref(4, 1));
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 0);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(1, 20)), $mul.ref(8, 1)), $mul.ref(0, 2));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p46, 0);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(1, 20)), $mul.ref(8, 1)), $mul.ref(1, 2));
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p50, 0);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(1, 20)), $mul.ref(8, 1)), $mul.ref(2, 2));
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p54, 0);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(1, 20)), $mul.ref(8, 1)), $mul.ref(3, 2));
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p58, 0);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(1, 20)), $mul.ref(8, 1)), $mul.ref(4, 2));
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p62, 0);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(1, 20)), $mul.ref(8, 1)), $mul.ref(5, 2));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p66, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(2, 20)), $mul.ref(0, 1));
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p95, 0);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(2, 20)), $mul.ref(4, 1));
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p98, 0);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(2, 20)), $mul.ref(8, 1)), $mul.ref(0, 2));
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p102, 0);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(2, 20)), $mul.ref(8, 1)), $mul.ref(1, 2));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p106, 0);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(2, 20)), $mul.ref(8, 1)), $mul.ref(2, 2));
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p110, 0);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(2, 20)), $mul.ref(8, 1)), $mul.ref(3, 2));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p114, 0);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(2, 20)), $mul.ref(8, 1)), $mul.ref(4, 2));
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p118, 0);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(2, 20)), $mul.ref(8, 1)), $mul.ref(5, 2));
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p122, 0);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(3, 20)), $mul.ref(0, 1));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p125, 0);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(3, 20)), $mul.ref(4, 1));
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p128, 0);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(3, 20)), $mul.ref(8, 1)), $mul.ref(0, 2));
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p132, 0);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(3, 20)), $mul.ref(8, 1)), $mul.ref(1, 2));
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p136, 0);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(3, 20)), $mul.ref(8, 1)), $mul.ref(2, 2));
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p140, 0);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(3, 20)), $mul.ref(8, 1)), $mul.ref(3, 2));
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p144, 0);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(3, 20)), $mul.ref(8, 1)), $mul.ref(4, 2));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p148, 0);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(3, 20)), $mul.ref(8, 1)), $mul.ref(5, 2));
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p152, 0);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(4, 20)), $mul.ref(0, 1));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p155, 0);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(4, 20)), $mul.ref(4, 1));
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p158, 0);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(4, 20)), $mul.ref(8, 1)), $mul.ref(0, 2));
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p162, 0);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(4, 20)), $mul.ref(8, 1)), $mul.ref(1, 2));
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p166, 0);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(4, 20)), $mul.ref(8, 1)), $mul.ref(2, 2));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p170, 0);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(4, 20)), $mul.ref(8, 1)), $mul.ref(3, 2));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p174, 0);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(4, 20)), $mul.ref(8, 1)), $mul.ref(4, 2));
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p178, 0);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(4, 20)), $mul.ref(8, 1)), $mul.ref(5, 2));
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p182, 0);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(5, 20)), $mul.ref(0, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p185, 0);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(5, 20)), $mul.ref(4, 1));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p188, 0);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(5, 20)), $mul.ref(8, 1)), $mul.ref(0, 2));
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p192, 0);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(5, 20)), $mul.ref(8, 1)), $mul.ref(1, 2));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p196, 0);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(5, 20)), $mul.ref(8, 1)), $mul.ref(2, 2));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p200, 0);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(5, 20)), $mul.ref(8, 1)), $mul.ref(3, 2));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p204, 0);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(5, 20)), $mul.ref(8, 1)), $mul.ref(4, 2));
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p208, 0);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(5, 20)), $mul.ref(8, 1)), $mul.ref(5, 2));
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p212, 0);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(6, 20)), $mul.ref(0, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p215, 0);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(6, 20)), $mul.ref(4, 1));
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p218, 0);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(6, 20)), $mul.ref(8, 1)), $mul.ref(0, 2));
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p222, 0);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(6, 20)), $mul.ref(8, 1)), $mul.ref(1, 2));
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p226, 0);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(6, 20)), $mul.ref(8, 1)), $mul.ref(2, 2));
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p230, 0);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(6, 20)), $mul.ref(8, 1)), $mul.ref(3, 2));
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p234, 0);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(6, 20)), $mul.ref(8, 1)), $mul.ref(4, 2));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p238, 0);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(6, 20)), $mul.ref(8, 1)), $mul.ref(5, 2));
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p242, 0);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(7, 20)), $mul.ref(0, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p245, 0);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(7, 20)), $mul.ref(4, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p248, 0);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(7, 20)), $mul.ref(8, 1)), $mul.ref(0, 2));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p252, 0);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(7, 20)), $mul.ref(8, 1)), $mul.ref(1, 2));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p256, 0);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(7, 20)), $mul.ref(8, 1)), $mul.ref(2, 2));
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p260, 0);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(7, 20)), $mul.ref(8, 1)), $mul.ref(3, 2));
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p264, 0);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(7, 20)), $mul.ref(8, 1)), $mul.ref(4, 2));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p268, 0);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(7, 20)), $mul.ref(8, 1)), $mul.ref(5, 2));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p272, 0);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(180, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, 0);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(181, 1));
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p68, 0);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(182, 1));
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, 0);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(183, 1));
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, 0);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, 0);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(185, 1)), $mul.ref(0, 1));
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p73, 0);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(185, 1)), $mul.ref(1, 1));
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p75, 0);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(185, 1)), $mul.ref(2, 1));
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, 0);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(185, 1)), $mul.ref(3, 1));
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p79, 0);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(185, 1)), $mul.ref(4, 1));
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, 0);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(185, 1)), $mul.ref(5, 1));
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p83, 0);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(185, 1)), $mul.ref(6, 1));
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, 0);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} $p87 := fimc_find_format($p86, $0.ref, 6, 0);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p87);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i89 := $eq.i64($i88, 0);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} __set_frame_format($p91, $p87, $p1);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1));
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} __set_frame_format($p92, $p87, $p1);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i90 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $r := $i90;
    return;

  $bb5:
    assume $i89 == 1;
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i90 := $sub.i32(0, 22);
    goto $bb7;
}



const fimc_find_format: ref;

axiom fimc_find_format == $sub.ref(0, 505034);

procedure fimc_find_format($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: ref);
  free requires assertsPassed;



implementation fimc_find_format($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: ref)
{
  var $i4: i1;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i1;
  var $p25: ref;
  var $p10: ref;
  var $i11: i32;
  var $p5: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i64;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i64;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i16;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i64;
  var $i51: i1;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i64;
  var $i56: i1;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $i64: i32;
  var $i65: i16;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i64;
  var $i70: i1;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i74: i64;
  var $i75: i1;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $p82: ref;
  var $i83: i32;
  var $i84: i16;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $i88: i64;
  var $i89: i1;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $i93: i64;
  var $i94: i1;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $i98: i1;
  var $p99: ref;
  var $i100: i32;
  var $p101: ref;
  var $i102: i32;
  var $i103: i16;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i107: i64;
  var $i108: i1;
  var $i109: i32;
  var $i110: i32;
  var $i111: i1;
  var $i112: i64;
  var $i113: i1;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $i117: i1;
  var $p118: ref;
  var $i119: i32;
  var $p120: ref;
  var $i121: i32;
  var $i122: i16;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $i126: i64;
  var $i127: i1;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $i131: i64;
  var $i132: i1;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $i136: i1;
  var $p137: ref;
  var $i138: i32;
  var $p139: ref;
  var $i140: i32;
  var $i141: i16;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $i145: i64;
  var $i146: i1;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $i150: i64;
  var $i151: i1;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $i155: i1;
  var $p156: ref;
  var $i157: i32;
  var $p158: ref;
  var $i159: i32;
  var $i160: i16;
  var $i161: i32;
  var $i162: i32;
  var $i163: i1;
  var $i164: i64;
  var $i165: i1;
  var $i166: i32;
  var $i167: i32;
  var $i168: i1;
  var $i169: i64;
  var $i170: i1;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $i174: i1;
  var $p175: ref;
  var $i176: i32;
  var $p177: ref;
  var $i178: i32;
  var $i179: i16;
  var $i180: i32;
  var $i181: i32;
  var $i182: i1;
  var $i183: i64;
  var $i184: i1;
  var $i185: i32;
  var $i186: i32;
  var $i187: i1;
  var $i188: i64;
  var $i189: i1;
  var $i190: i32;
  var $i191: i32;
  var $i192: i1;
  var $i193: i1;
  var $p194: ref;
  var $i195: i32;
  var $p196: ref;
  var $i197: i32;
  var $i198: i16;
  var $i199: i32;
  var $i200: i32;
  var $i201: i1;
  var $i202: i64;
  var $i203: i1;
  var $i204: i32;
  var $i205: i32;
  var $i206: i1;
  var $i207: i64;
  var $i208: i1;
  var $i209: i32;
  var $i210: i32;
  var $i211: i1;
  var $i212: i1;
  var $p213: ref;
  var $i214: i32;
  var $p215: ref;
  var $i216: i32;
  var $i217: i16;
  var $i218: i32;
  var $i219: i32;
  var $i220: i1;
  var $i221: i64;
  var $i222: i1;
  var $i223: i32;
  var $i224: i32;
  var $i225: i1;
  var $i226: i64;
  var $i227: i1;
  var $i228: i32;
  var $i229: i32;
  var $i230: i1;
  var $i231: i1;
  var $p232: ref;
  var $i233: i32;
  var $p234: ref;
  var $i235: i32;
  var $i236: i16;
  var $i237: i32;
  var $i238: i32;
  var $i239: i1;
  var $i240: i64;
  var $i241: i1;
  var $i242: i32;
  var $i243: i32;
  var $i244: i1;
  var $i245: i64;
  var $i246: i1;
  var $i247: i32;
  var $i248: i32;
  var $i249: i1;
  var $i250: i1;
  var $p251: ref;
  var $i252: i32;
  var $p253: ref;
  var $i254: i32;
  var $i255: i16;
  var $i256: i32;
  var $i257: i32;
  var $i258: i1;
  var $i259: i64;
  var $i260: i1;
  var $i261: i32;
  var $i262: i32;
  var $i263: i1;
  var $i264: i64;
  var $i265: i1;
  var $i266: i32;
  var $i267: i32;
  var $i268: i1;
  var $i269: i1;
  var $p270: ref;
  var $i271: i32;
  var $p272: ref;
  var $i273: i32;
  var $i274: i16;
  var $i275: i32;
  var $i276: i32;
  var $i277: i1;
  var $i278: i64;
  var $i279: i1;
  var $i280: i32;
  var $i281: i32;
  var $i282: i1;
  var $i283: i64;
  var $i284: i1;
  var $i285: i32;
  var $i286: i32;
  var $i287: i1;
  var $i288: i1;
  var $p289: ref;
  var $i290: i32;
  var $p291: ref;
  var $i292: i32;
  var $i293: i16;
  var $i294: i32;
  var $i295: i32;
  var $i296: i1;
  var $i297: i64;
  var $i298: i1;
  var $i299: i32;
  var $i300: i32;
  var $i301: i1;
  var $i302: i64;
  var $i303: i1;
  var $i304: i32;
  var $i305: i32;
  var $i306: i1;
  var $i307: i1;
  var $p308: ref;
  var $i309: i32;
  var $p310: ref;
  var $i311: i32;
  var $i312: i16;
  var $i313: i32;
  var $i314: i32;
  var $i315: i1;
  var $i316: i64;
  var $i317: i1;
  var $i318: i32;
  var $i319: i32;
  var $i320: i1;
  var $i321: i64;
  var $i322: i1;
  var $i323: i32;
  var $i324: i32;
  var $i325: i1;
  var $i326: i1;
  var $p327: ref;
  var $i328: i32;
  var $p329: ref;
  var $i330: i32;
  var $i331: i16;
  var $i332: i32;
  var $i333: i32;
  var $i334: i1;
  var $i335: i64;
  var $i336: i1;
  var $i337: i32;
  var $i338: i32;
  var $i339: i1;
  var $i340: i64;
  var $i341: i1;
  var $i342: i32;
  var $i343: i32;
  var $i344: i1;
  var $i345: i1;
  var $p346: ref;
  var $i347: i32;
  var $p348: ref;
  var $i349: i32;
  var $i350: i16;
  var $i351: i32;
  var $i352: i32;
  var $i353: i1;
  var $i354: i64;
  var $i355: i1;
  var $i356: i32;
  var $i357: i32;
  var $i358: i1;
  var $i359: i64;
  var $i360: i1;
  var $i361: i32;
  var $i362: i32;
  var $i363: i1;
  var $i364: i1;
  var $p365: ref;
  var $i366: i32;
  var $p367: ref;
  var $i368: i32;
  var $i369: i16;
  var $i370: i32;
  var $i371: i32;
  var $i372: i1;
  var $i373: i64;
  var $i374: i1;
  var $i375: i32;
  var $i376: i32;
  var $i377: i1;
  var $i378: i64;
  var $i379: i1;
  var $i380: i32;
  var $i381: i32;
  var $i382: i1;
  var $i383: i1;
  var $p384: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} {:cexpr "fimc_find_format:arg:mask"} boogie_si_record_i32($i2);
    call {:si_unique_call 893} {:cexpr "fimc_find_format:arg:index"} boogie_si_record_i32($i3);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 19);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(0, 40)), $mul.ref(34, 1)));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, $i2);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p1);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i3, 0);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $p25 := $0.ref;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p10, $i11 := $p25, 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(1, 40)), $mul.ref(34, 1)));
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, $i2);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p1);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i3, $i11);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $p42 := $p10;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i11, 1);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p44, $i45 := $p42, $i43;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(2, 40)), $mul.ref(34, 1)));
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, $i2);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p0);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p1);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i3, $i45);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $p61 := $p44;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i45, 1);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $p63, $i64 := $p61, $i62;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(3, 40)), $mul.ref(34, 1)));
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i65);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, $i2);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p0);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p1);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i3, $i64);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $p80 := $p63;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i64, 1);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p82, $i83 := $p80, $i81;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i84 := $load.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(4, 40)), $mul.ref(34, 1)));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i84);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i85, $i2);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 0);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p0);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p1);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i3, $i83);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $p99 := $p82;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i83, 1);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p101, $i102 := $p99, $i100;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i103 := $load.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(5, 40)), $mul.ref(34, 1)));
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i104 := $zext.i16.i32($i103);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i105 := $and.i32($i104, $i2);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 0);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p0);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p1);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i113 := $ne.i64($i112, 0);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb119, $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i3, $i102);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    $p118 := $p101;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i102, 1);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p120, $i121 := $p118, $i119;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $i122 := $load.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(6, 40)), $mul.ref(34, 1)));
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i123 := $zext.i16.i32($i122);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i123, $i2);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 0);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p0);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p1);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb139, $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    assume !($i132 == 1);
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i3, $i121);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    $p137 := $p120;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i138 := $add.i32($i121, 1);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $p139, $i140 := $p137, $i138;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $i141 := $load.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(7, 40)), $mul.ref(34, 1)));
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i142 := $zext.i16.i32($i141);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i143 := $and.i32($i142, $i2);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 0);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p0);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i146 := $ne.i64($i145, 0);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $i150 := $p2i.ref.i64($p1);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i151 := $ne.i64($i150, 0);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb159, $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i3, $i140);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    $p156 := $p139;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i157 := $add.i32($i140, 1);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $p158, $i159 := $p156, $i157;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $i160 := $load.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(8, 40)), $mul.ref(34, 1)));
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i161 := $zext.i16.i32($i160);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i162 := $and.i32($i161, $i2);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 0);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $i164 := $p2i.ref.i64($p0);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i165 := $ne.i64($i164, 0);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb173, $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    assume !($i165 == 1);
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $i169 := $p2i.ref.i64($p1);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i170 := $ne.i64($i169, 0);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb179, $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    assume !($i170 == 1);
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i3, $i159);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    $p175 := $p158;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i176 := $add.i32($i159, 1);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p177, $i178 := $p175, $i176;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $i179 := $load.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(9, 40)), $mul.ref(34, 1)));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i180 := $zext.i16.i32($i179);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i181 := $and.i32($i180, $i2);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, 0);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $i183 := $p2i.ref.i64($p0);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i184 := $ne.i64($i183, 0);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb193, $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    assume !($i184 == 1);
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $i188 := $p2i.ref.i64($p1);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i189 := $ne.i64($i188, 0);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb199, $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    assume !($i189 == 1);
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $i193 := $eq.i32($i3, $i178);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    $p194 := $p177;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i195 := $add.i32($i178, 1);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $p196, $i197 := $p194, $i195;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $i198 := $load.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(10, 40)), $mul.ref(34, 1)));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i199 := $zext.i16.i32($i198);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i200 := $and.i32($i199, $i2);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i200, 0);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i201} true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $i202 := $p2i.ref.i64($p0);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i203 := $ne.i64($i202, 0);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb213, $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    assume !($i203 == 1);
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $i207 := $p2i.ref.i64($p1);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i208 := $ne.i64($i207, 0);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb219, $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    assume !($i208 == 1);
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i3, $i197);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    $p213 := $p196;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i214 := $add.i32($i197, 1);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p215, $i216 := $p213, $i214;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $i217 := $load.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(11, 40)), $mul.ref(34, 1)));
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i218 := $zext.i16.i32($i217);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i219 := $and.i32($i218, $i2);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i220 := $eq.i32($i219, 0);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $i221 := $p2i.ref.i64($p0);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i222 := $ne.i64($i221, 0);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb233, $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    assume !($i222 == 1);
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $i226 := $p2i.ref.i64($p1);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i227 := $ne.i64($i226, 0);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i227} true;
    goto $bb239, $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    assume !($i227 == 1);
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i3, $i216);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    $p232 := $p215;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i233 := $add.i32($i216, 1);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $p234, $i235 := $p232, $i233;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $i236 := $load.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(12, 40)), $mul.ref(34, 1)));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i237 := $zext.i16.i32($i236);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i238 := $and.i32($i237, $i2);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i238, 0);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i239} true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $i240 := $p2i.ref.i64($p0);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i241 := $ne.i64($i240, 0);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i241} true;
    goto $bb253, $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    assume !($i241 == 1);
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $i245 := $p2i.ref.i64($p1);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i246 := $ne.i64($i245, 0);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i246} true;
    goto $bb259, $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    assume !($i246 == 1);
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i3, $i235);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i250} true;
    goto $bb265, $bb266;

  $bb266:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    $p251 := $p234;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i252 := $add.i32($i235, 1);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p253, $i254 := $p251, $i252;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    $i255 := $load.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(13, 40)), $mul.ref(34, 1)));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i256 := $zext.i16.i32($i255);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i257 := $and.i32($i256, $i2);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i258 := $eq.i32($i257, 0);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    $i259 := $p2i.ref.i64($p0);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i260 := $ne.i64($i259, 0);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i260} true;
    goto $bb273, $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    assume !($i260 == 1);
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    $i264 := $p2i.ref.i64($p1);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i265 := $ne.i64($i264, 0);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    assume {:branchcond $i265} true;
    goto $bb279, $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    assume !($i265 == 1);
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i3, $i254);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i269} true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    $p270 := $p253;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i271 := $add.i32($i254, 1);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p272, $i273 := $p270, $i271;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    $i274 := $load.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(14, 40)), $mul.ref(34, 1)));
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i275 := $zext.i16.i32($i274);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i276 := $and.i32($i275, $i2);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i277 := $eq.i32($i276, 0);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i277} true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    $i278 := $p2i.ref.i64($p0);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i279 := $ne.i64($i278, 0);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i279} true;
    goto $bb293, $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    assume !($i279 == 1);
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    $i283 := $p2i.ref.i64($p1);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i284 := $ne.i64($i283, 0);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    assume {:branchcond $i284} true;
    goto $bb299, $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    assume !($i284 == 1);
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    $i288 := $eq.i32($i3, $i273);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    assume {:branchcond $i288} true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    $p289 := $p272;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $i290 := $add.i32($i273, 1);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $p291, $i292 := $p289, $i290;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    $i293 := $load.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(15, 40)), $mul.ref(34, 1)));
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i294 := $zext.i16.i32($i293);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i295 := $and.i32($i294, $i2);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i295, 0);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb310, $bb311;

  $bb311:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    $i297 := $p2i.ref.i64($p0);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i298 := $ne.i64($i297, 0);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i298} true;
    goto $bb313, $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    assume !($i298 == 1);
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    $i302 := $p2i.ref.i64($p1);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i303 := $ne.i64($i302, 0);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i303} true;
    goto $bb319, $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    assume !($i303 == 1);
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    $i307 := $eq.i32($i3, $i292);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i307} true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    $p308 := $p291;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i309 := $add.i32($i292, 1);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $p310, $i311 := $p308, $i309;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    $i312 := $load.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(16, 40)), $mul.ref(34, 1)));
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i313 := $zext.i16.i32($i312);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i314 := $and.i32($i313, $i2);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i315 := $eq.i32($i314, 0);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i315} true;
    goto $bb330, $bb331;

  $bb331:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    $i316 := $p2i.ref.i64($p0);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i317 := $ne.i64($i316, 0);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i317} true;
    goto $bb333, $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    assume !($i317 == 1);
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    $i321 := $p2i.ref.i64($p1);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i322 := $ne.i64($i321, 0);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i322} true;
    goto $bb339, $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    assume !($i322 == 1);
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i3, $i311);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    assume {:branchcond $i326} true;
    goto $bb345, $bb346;

  $bb346:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    $p327 := $p310;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i328 := $add.i32($i311, 1);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p329, $i330 := $p327, $i328;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    $i331 := $load.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(17, 40)), $mul.ref(34, 1)));
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i332 := $zext.i16.i32($i331);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i333 := $and.i32($i332, $i2);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i334 := $eq.i32($i333, 0);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i334} true;
    goto $bb350, $bb351;

  $bb351:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    $i335 := $p2i.ref.i64($p0);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i336 := $ne.i64($i335, 0);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i336} true;
    goto $bb353, $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    assume !($i336 == 1);
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    $i340 := $p2i.ref.i64($p1);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i341 := $ne.i64($i340, 0);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i341} true;
    goto $bb359, $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    assume !($i341 == 1);
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    $i345 := $eq.i32($i3, $i330);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i345} true;
    goto $bb365, $bb366;

  $bb366:
    assume !($i345 == 1);
    assume {:verifier.code 0} true;
    $p346 := $p329;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i347 := $add.i32($i330, 1);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p348, $i349 := $p346, $i347;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    $i350 := $load.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(18, 40)), $mul.ref(34, 1)));
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i351 := $zext.i16.i32($i350);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i352 := $and.i32($i351, $i2);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i353 := $eq.i32($i352, 0);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i353} true;
    goto $bb370, $bb371;

  $bb371:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    $i354 := $p2i.ref.i64($p0);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i355 := $ne.i64($i354, 0);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb373, $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    assume !($i355 == 1);
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    $i359 := $p2i.ref.i64($p1);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i360 := $ne.i64($i359, 0);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i360} true;
    goto $bb379, $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    assume !($i360 == 1);
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    $i364 := $eq.i32($i3, $i349);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i364} true;
    goto $bb385, $bb386;

  $bb386:
    assume !($i364 == 1);
    assume {:verifier.code 0} true;
    $p365 := $p348;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i366 := $add.i32($i349, 1);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $p367, $i368 := $p365, $i366;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    $i369 := $load.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(19, 40)), $mul.ref(34, 1)));
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i370 := $zext.i16.i32($i369);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i371 := $and.i32($i370, $i2);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i372 := $eq.i32($i371, 0);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i372} true;
    goto $bb390, $bb391;

  $bb391:
    assume !($i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    $i373 := $p2i.ref.i64($p0);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i374 := $ne.i64($i373, 0);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i374} true;
    goto $bb393, $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    assume !($i374 == 1);
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    $i378 := $p2i.ref.i64($p1);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i379 := $ne.i64($i378, 0);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i379} true;
    goto $bb399, $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    assume !($i379 == 1);
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    $i383 := $eq.i32($i3, $i368);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    assume {:branchcond $i383} true;
    goto $bb405, $bb406;

  $bb406:
    assume !($i383 == 1);
    assume {:verifier.code 0} true;
    $p384 := $p367;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p26 := $p384;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p5 := $p26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb405:
    assume $i383 == 1;
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(19, 40));
    goto $bb407;

  $bb399:
    assume $i379 == 1;
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i380 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(19, 40)), $mul.ref(0, 1)));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i381 := $load.i32($M.0, $p1);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i382 := $eq.i32($i380, $i381);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(19, 40));
    assume {:branchcond $i382} true;
    goto $bb402, $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    assume !($i382 == 1);
    goto $bb401;

  $bb402:
    assume {:verifier.code 0} true;
    assume $i382 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p5 := $p23;
    goto $bb3;

  $bb393:
    assume $i374 == 1;
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i375 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(19, 40)), $mul.ref(16, 1)));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $i376 := $load.i32($M.0, $p0);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i377 := $eq.i32($i375, $i376);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(19, 40));
    assume {:branchcond $i377} true;
    goto $bb396, $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    assume !($i377 == 1);
    goto $bb395;

  $bb396:
    assume {:verifier.code 0} true;
    assume $i377 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p5 := $p17;
    goto $bb3;

  $bb390:
    assume $i372 == 1;
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $p26 := $p367;
    goto $bb408;

  $bb385:
    assume $i364 == 1;
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(18, 40));
    goto $bb387;

  $bb379:
    assume $i360 == 1;
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i361 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(18, 40)), $mul.ref(0, 1)));
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i362 := $load.i32($M.0, $p1);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i363 := $eq.i32($i361, $i362);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(18, 40));
    assume {:branchcond $i363} true;
    goto $bb382, $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    assume !($i363 == 1);
    goto $bb381;

  $bb382:
    assume {:verifier.code 0} true;
    assume $i363 == 1;
    goto $bb22;

  $bb373:
    assume $i355 == 1;
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i356 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(18, 40)), $mul.ref(16, 1)));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i357 := $load.i32($M.0, $p0);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i358 := $eq.i32($i356, $i357);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(18, 40));
    assume {:branchcond $i358} true;
    goto $bb376, $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    assume !($i358 == 1);
    goto $bb375;

  $bb376:
    assume {:verifier.code 0} true;
    assume $i358 == 1;
    goto $bb15;

  $bb370:
    assume $i353 == 1;
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $p367, $i368 := $p348, $i349;
    goto $bb388;

  $bb365:
    assume $i345 == 1;
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(17, 40));
    goto $bb367;

  $bb359:
    assume $i341 == 1;
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i342 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(17, 40)), $mul.ref(0, 1)));
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i343 := $load.i32($M.0, $p1);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i344 := $eq.i32($i342, $i343);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(17, 40));
    assume {:branchcond $i344} true;
    goto $bb362, $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    assume !($i344 == 1);
    goto $bb361;

  $bb362:
    assume {:verifier.code 0} true;
    assume $i344 == 1;
    goto $bb22;

  $bb353:
    assume $i336 == 1;
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i337 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(17, 40)), $mul.ref(16, 1)));
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i338 := $load.i32($M.0, $p0);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i339 := $eq.i32($i337, $i338);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(17, 40));
    assume {:branchcond $i339} true;
    goto $bb356, $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    assume !($i339 == 1);
    goto $bb355;

  $bb356:
    assume {:verifier.code 0} true;
    assume $i339 == 1;
    goto $bb15;

  $bb350:
    assume $i334 == 1;
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p348, $i349 := $p329, $i330;
    goto $bb368;

  $bb345:
    assume $i326 == 1;
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(16, 40));
    goto $bb347;

  $bb339:
    assume $i322 == 1;
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i323 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(16, 40)), $mul.ref(0, 1)));
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i324 := $load.i32($M.0, $p1);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i325 := $eq.i32($i323, $i324);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(16, 40));
    assume {:branchcond $i325} true;
    goto $bb342, $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    assume !($i325 == 1);
    goto $bb341;

  $bb342:
    assume {:verifier.code 0} true;
    assume $i325 == 1;
    goto $bb22;

  $bb333:
    assume $i317 == 1;
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i318 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(16, 40)), $mul.ref(16, 1)));
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i319 := $load.i32($M.0, $p0);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i320 := $eq.i32($i318, $i319);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(16, 40));
    assume {:branchcond $i320} true;
    goto $bb336, $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    assume !($i320 == 1);
    goto $bb335;

  $bb336:
    assume {:verifier.code 0} true;
    assume $i320 == 1;
    goto $bb15;

  $bb330:
    assume $i315 == 1;
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p329, $i330 := $p310, $i311;
    goto $bb348;

  $bb325:
    assume $i307 == 1;
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(15, 40));
    goto $bb327;

  $bb319:
    assume $i303 == 1;
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i304 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(15, 40)), $mul.ref(0, 1)));
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i305 := $load.i32($M.0, $p1);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i304, $i305);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(15, 40));
    assume {:branchcond $i306} true;
    goto $bb322, $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    assume !($i306 == 1);
    goto $bb321;

  $bb322:
    assume {:verifier.code 0} true;
    assume $i306 == 1;
    goto $bb22;

  $bb313:
    assume $i298 == 1;
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i299 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(15, 40)), $mul.ref(16, 1)));
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $i300 := $load.i32($M.0, $p0);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i301 := $eq.i32($i299, $i300);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(15, 40));
    assume {:branchcond $i301} true;
    goto $bb316, $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    assume !($i301 == 1);
    goto $bb315;

  $bb316:
    assume {:verifier.code 0} true;
    assume $i301 == 1;
    goto $bb15;

  $bb310:
    assume $i296 == 1;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $p310, $i311 := $p291, $i292;
    goto $bb328;

  $bb305:
    assume $i288 == 1;
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(14, 40));
    goto $bb307;

  $bb299:
    assume $i284 == 1;
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i285 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(14, 40)), $mul.ref(0, 1)));
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i286 := $load.i32($M.0, $p1);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i285, $i286);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(14, 40));
    assume {:branchcond $i287} true;
    goto $bb302, $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    assume !($i287 == 1);
    goto $bb301;

  $bb302:
    assume {:verifier.code 0} true;
    assume $i287 == 1;
    goto $bb22;

  $bb293:
    assume $i279 == 1;
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i280 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(14, 40)), $mul.ref(16, 1)));
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i281 := $load.i32($M.0, $p0);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i282 := $eq.i32($i280, $i281);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(14, 40));
    assume {:branchcond $i282} true;
    goto $bb296, $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    assume !($i282 == 1);
    goto $bb295;

  $bb296:
    assume {:verifier.code 0} true;
    assume $i282 == 1;
    goto $bb15;

  $bb290:
    assume $i277 == 1;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p291, $i292 := $p272, $i273;
    goto $bb308;

  $bb285:
    assume $i269 == 1;
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(13, 40));
    goto $bb287;

  $bb279:
    assume $i265 == 1;
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i266 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(13, 40)), $mul.ref(0, 1)));
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i267 := $load.i32($M.0, $p1);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i268 := $eq.i32($i266, $i267);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(13, 40));
    assume {:branchcond $i268} true;
    goto $bb282, $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    assume !($i268 == 1);
    goto $bb281;

  $bb282:
    assume {:verifier.code 0} true;
    assume $i268 == 1;
    goto $bb22;

  $bb273:
    assume $i260 == 1;
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i261 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(13, 40)), $mul.ref(16, 1)));
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i262 := $load.i32($M.0, $p0);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i261, $i262);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(13, 40));
    assume {:branchcond $i263} true;
    goto $bb276, $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    assume !($i263 == 1);
    goto $bb275;

  $bb276:
    assume {:verifier.code 0} true;
    assume $i263 == 1;
    goto $bb15;

  $bb270:
    assume $i258 == 1;
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p272, $i273 := $p253, $i254;
    goto $bb288;

  $bb265:
    assume $i250 == 1;
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(12, 40));
    goto $bb267;

  $bb259:
    assume $i246 == 1;
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i247 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(12, 40)), $mul.ref(0, 1)));
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i248 := $load.i32($M.0, $p1);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i247, $i248);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(12, 40));
    assume {:branchcond $i249} true;
    goto $bb262, $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    assume !($i249 == 1);
    goto $bb261;

  $bb262:
    assume {:verifier.code 0} true;
    assume $i249 == 1;
    goto $bb22;

  $bb253:
    assume $i241 == 1;
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i242 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(12, 40)), $mul.ref(16, 1)));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i243 := $load.i32($M.0, $p0);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i244 := $eq.i32($i242, $i243);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(12, 40));
    assume {:branchcond $i244} true;
    goto $bb256, $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    assume !($i244 == 1);
    goto $bb255;

  $bb256:
    assume {:verifier.code 0} true;
    assume $i244 == 1;
    goto $bb15;

  $bb250:
    assume $i239 == 1;
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $p253, $i254 := $p234, $i235;
    goto $bb268;

  $bb245:
    assume $i231 == 1;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(11, 40));
    goto $bb247;

  $bb239:
    assume $i227 == 1;
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i228 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(11, 40)), $mul.ref(0, 1)));
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i229 := $load.i32($M.0, $p1);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i228, $i229);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(11, 40));
    assume {:branchcond $i230} true;
    goto $bb242, $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    assume !($i230 == 1);
    goto $bb241;

  $bb242:
    assume {:verifier.code 0} true;
    assume $i230 == 1;
    goto $bb22;

  $bb233:
    assume $i222 == 1;
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i223 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(11, 40)), $mul.ref(16, 1)));
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i224 := $load.i32($M.0, $p0);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i223, $i224);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(11, 40));
    assume {:branchcond $i225} true;
    goto $bb236, $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    assume !($i225 == 1);
    goto $bb235;

  $bb236:
    assume {:verifier.code 0} true;
    assume $i225 == 1;
    goto $bb15;

  $bb230:
    assume $i220 == 1;
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p234, $i235 := $p215, $i216;
    goto $bb248;

  $bb225:
    assume $i212 == 1;
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(10, 40));
    goto $bb227;

  $bb219:
    assume $i208 == 1;
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i209 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(10, 40)), $mul.ref(0, 1)));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i210 := $load.i32($M.0, $p1);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i209, $i210);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(10, 40));
    assume {:branchcond $i211} true;
    goto $bb222, $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    assume !($i211 == 1);
    goto $bb221;

  $bb222:
    assume {:verifier.code 0} true;
    assume $i211 == 1;
    goto $bb22;

  $bb213:
    assume $i203 == 1;
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i204 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(10, 40)), $mul.ref(16, 1)));
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.0, $p0);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i204, $i205);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(10, 40));
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    assume !($i206 == 1);
    goto $bb215;

  $bb216:
    assume {:verifier.code 0} true;
    assume $i206 == 1;
    goto $bb15;

  $bb210:
    assume $i201 == 1;
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $p215, $i216 := $p196, $i197;
    goto $bb228;

  $bb205:
    assume $i193 == 1;
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(9, 40));
    goto $bb207;

  $bb199:
    assume $i189 == 1;
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i190 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(9, 40)), $mul.ref(0, 1)));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.0, $p1);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i190, $i191);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(9, 40));
    assume {:branchcond $i192} true;
    goto $bb202, $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    assume !($i192 == 1);
    goto $bb201;

  $bb202:
    assume {:verifier.code 0} true;
    assume $i192 == 1;
    goto $bb22;

  $bb193:
    assume $i184 == 1;
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(9, 40)), $mul.ref(16, 1)));
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.0, $p0);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i185, $i186);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(9, 40));
    assume {:branchcond $i187} true;
    goto $bb196, $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    assume !($i187 == 1);
    goto $bb195;

  $bb196:
    assume {:verifier.code 0} true;
    assume $i187 == 1;
    goto $bb15;

  $bb190:
    assume $i182 == 1;
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $p196, $i197 := $p177, $i178;
    goto $bb208;

  $bb185:
    assume $i174 == 1;
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(8, 40));
    goto $bb187;

  $bb179:
    assume $i170 == 1;
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(8, 40)), $mul.ref(0, 1)));
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.0, $p1);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i171, $i172);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(8, 40));
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    assume !($i173 == 1);
    goto $bb181;

  $bb182:
    assume {:verifier.code 0} true;
    assume $i173 == 1;
    goto $bb22;

  $bb173:
    assume $i165 == 1;
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(8, 40)), $mul.ref(16, 1)));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.0, $p0);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i166, $i167);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(8, 40));
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    assume !($i168 == 1);
    goto $bb175;

  $bb176:
    assume {:verifier.code 0} true;
    assume $i168 == 1;
    goto $bb15;

  $bb170:
    assume $i163 == 1;
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p177, $i178 := $p158, $i159;
    goto $bb188;

  $bb165:
    assume $i155 == 1;
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(7, 40));
    goto $bb167;

  $bb159:
    assume $i151 == 1;
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(7, 40)), $mul.ref(0, 1)));
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.0, $p1);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i152, $i153);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(7, 40));
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    assume !($i154 == 1);
    goto $bb161;

  $bb162:
    assume {:verifier.code 0} true;
    assume $i154 == 1;
    goto $bb22;

  $bb153:
    assume $i146 == 1;
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(7, 40)), $mul.ref(16, 1)));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p0);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i147, $i148);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(7, 40));
    assume {:branchcond $i149} true;
    goto $bb156, $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    assume !($i149 == 1);
    goto $bb155;

  $bb156:
    assume {:verifier.code 0} true;
    assume $i149 == 1;
    goto $bb15;

  $bb150:
    assume $i144 == 1;
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $p158, $i159 := $p139, $i140;
    goto $bb168;

  $bb145:
    assume $i136 == 1;
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(6, 40));
    goto $bb147;

  $bb139:
    assume $i132 == 1;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(6, 40)), $mul.ref(0, 1)));
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p1);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i133, $i134);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(6, 40));
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb141;

  $bb142:
    assume {:verifier.code 0} true;
    assume $i135 == 1;
    goto $bb22;

  $bb133:
    assume $i127 == 1;
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(6, 40)), $mul.ref(16, 1)));
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p0);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i128, $i129);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(6, 40));
    assume {:branchcond $i130} true;
    goto $bb136, $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb135;

  $bb136:
    assume {:verifier.code 0} true;
    assume $i130 == 1;
    goto $bb15;

  $bb130:
    assume $i125 == 1;
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p139, $i140 := $p120, $i121;
    goto $bb148;

  $bb125:
    assume $i117 == 1;
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(5, 40));
    goto $bb127;

  $bb119:
    assume $i113 == 1;
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(5, 40)), $mul.ref(0, 1)));
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p1);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i114, $i115);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(5, 40));
    assume {:branchcond $i116} true;
    goto $bb122, $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb121;

  $bb122:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb22;

  $bb113:
    assume $i108 == 1;
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(5, 40)), $mul.ref(16, 1)));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p0);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i109, $i110);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(5, 40));
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb115;

  $bb116:
    assume {:verifier.code 0} true;
    assume $i111 == 1;
    goto $bb15;

  $bb110:
    assume $i106 == 1;
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $p120, $i121 := $p101, $i102;
    goto $bb128;

  $bb105:
    assume $i98 == 1;
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(4, 40));
    goto $bb107;

  $bb99:
    assume $i94 == 1;
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(4, 40)), $mul.ref(0, 1)));
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p1);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i95, $i96);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(4, 40));
    assume {:branchcond $i97} true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb101;

  $bb102:
    assume {:verifier.code 0} true;
    assume $i97 == 1;
    goto $bb22;

  $bb93:
    assume $i89 == 1;
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(4, 40)), $mul.ref(16, 1)));
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p0);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i90, $i91);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(4, 40));
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb95;

  $bb96:
    assume {:verifier.code 0} true;
    assume $i92 == 1;
    goto $bb15;

  $bb90:
    assume $i87 == 1;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $p101, $i102 := $p82, $i83;
    goto $bb108;

  $bb85:
    assume $i79 == 1;
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(3, 40));
    goto $bb87;

  $bb79:
    assume $i75 == 1;
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(3, 40)), $mul.ref(0, 1)));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p1);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i76, $i77);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(3, 40));
    assume {:branchcond $i78} true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb81;

  $bb82:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb22;

  $bb73:
    assume $i70 == 1;
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(3, 40)), $mul.ref(16, 1)));
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p0);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i71, $i72);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(3, 40));
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb75;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb15;

  $bb70:
    assume $i68 == 1;
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $p82, $i83 := $p63, $i64;
    goto $bb88;

  $bb65:
    assume $i60 == 1;
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(2, 40));
    goto $bb67;

  $bb59:
    assume $i56 == 1;
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(2, 40)), $mul.ref(0, 1)));
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p1);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i57, $i58);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(2, 40));
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb61;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb22;

  $bb53:
    assume $i51 == 1;
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(2, 40)), $mul.ref(16, 1)));
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p0);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i52, $i53);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(2, 40));
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb55;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb15;

  $bb50:
    assume $i49 == 1;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p63, $i64 := $p44, $i45;
    goto $bb68;

  $bb45:
    assume $i41 == 1;
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(1, 40));
    goto $bb47;

  $bb39:
    assume $i37 == 1;
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(1, 40)), $mul.ref(0, 1)));
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p1);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i38, $i39);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(1, 40));
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb41;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb22;

  $bb33:
    assume $i32 == 1;
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(1, 40)), $mul.ref(16, 1)));
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p0);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i33, $i34);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(1, 40));
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb35;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb15;

  $bb30:
    assume $i30 == 1;
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p44, $i45 := $p10, $i11;
    goto $bb48;

  $bb25:
    assume $i24 == 1;
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p25 := fimc_formats;
    goto $bb27;

  $bb18:
    assume $i19 == 1;
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, fimc_formats);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p1);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i20, $i21);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p23 := fimc_formats;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb20;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb22;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(0, 40)), $mul.ref(16, 1)));
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p0);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i14, $i15);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p17 := fimc_formats;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb13;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb15;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p10, $i11 := $0.ref, 0;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;
}



const __set_frame_format: ref;

axiom __set_frame_format == $sub.ref(0, 506066);

procedure __set_frame_format($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __set_frame_format($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $i7: i32;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(0, 1));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(4, 1));
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(28, 1));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 0);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, 0);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $p1);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $i8, $p11, $i12, $i13, $p15, $i16, $p19, $i20, $i21, $p23, $i24, $i25, $i26, $i27, $i7 := __set_frame_format_loop_$bb4($p0, $p2, $p3, $i8, $p11, $i12, $i13, $p15, $i16, $p19, $i20, $i21, $p23, $i24, $i25, $i26, $i27, $i7);
    goto $bb4_last;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref($i8, 20)), $mul.ref(4, 1));
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i7);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(64, 1)), $mul.ref($i13, 4));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i12);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i7);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref($i16, 20)), $mul.ref(0, 1));
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i7);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(32, 1)), $mul.ref($i21, 4));
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i20);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i7, 1);
    call {:si_unique_call 894} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p3);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i27 := $sgt.i32($i26, $i24);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i24;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5242;
}



const vb2_queue_init: ref;

axiom vb2_queue_init == $sub.ref(0, 507098);

procedure vb2_queue_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_queue_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 1} true;
    call {:si_unique_call 895} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 896} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fimc_get_alpha_mask: ref;

axiom fimc_get_alpha_mask == $sub.ref(0, 508130);

procedure fimc_get_alpha_mask($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fimc_get_alpha_mask($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 17);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 20);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 20);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i8 := 255;
    goto $bb13;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 17);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb13;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb11:
    assume $i7 == 1;
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i8 := 15;
    goto $bb13;
}



const v4l2_ctrl_handler_init_class: ref;

axiom v4l2_ctrl_handler_init_class == $sub.ref(0, 509162);

procedure v4l2_ctrl_handler_init_class($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_handler_init_class($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 897} {:cexpr "v4l2_ctrl_handler_init_class:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 1} true;
    call {:si_unique_call 898} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 899} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const v4l2_ctrl_new_std: ref;

axiom v4l2_ctrl_new_std == $sub.ref(0, 510194);

procedure v4l2_ctrl_new_std($p0: ref, $p1: ref, $i2: i32, $i3: i64, $i4: i64, $i5: i64, $i6: i64) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_new_std($p0: ref, $p1: ref, $i2: i32, $i3: i64, $i4: i64, $i5: i64, $i6: i64) returns ($r: ref)
{
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} {:cexpr "v4l2_ctrl_new_std:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 901} {:cexpr "v4l2_ctrl_new_std:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 902} {:cexpr "v4l2_ctrl_new_std:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 903} {:cexpr "v4l2_ctrl_new_std:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 904} {:cexpr "v4l2_ctrl_new_std:arg:arg6"} boogie_si_record_i64($i6);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} $p7 := external_alloc();
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;
}



const v4l2_ctrl_new_std_menu: ref;

axiom v4l2_ctrl_new_std_menu == $sub.ref(0, 511226);

procedure v4l2_ctrl_new_std_menu($p0: ref, $p1: ref, $i2: i32, $i3: i8, $i4: i64, $i5: i8) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_new_std_menu($p0: ref, $p1: ref, $i2: i32, $i3: i8, $i4: i64, $i5: i8) returns ($r: ref)
{
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} {:cexpr "v4l2_ctrl_new_std_menu:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 907} {:cexpr "v4l2_ctrl_new_std_menu:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 908} {:cexpr "v4l2_ctrl_new_std_menu:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 909} {:cexpr "v4l2_ctrl_new_std_menu:arg:arg5"} boogie_si_record_i8($i5);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $p6 := external_alloc();
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const v4l2_ctrl_cluster: ref;

axiom v4l2_ctrl_cluster == $sub.ref(0, 512258);

procedure v4l2_ctrl_cluster($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_cluster($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} {:cexpr "v4l2_ctrl_cluster:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 513290);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 913} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 514322);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 916} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $p2 := ldv_malloc($i0);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const video_devdata: ref;

axiom video_devdata == $sub.ref(0, 515354);

procedure video_devdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_devdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $p1 := external_alloc();
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const video_get_drvdata: ref;

axiom video_get_drvdata == $sub.ref(0, 516386);

procedure video_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1840)), $mul.ref(128, 1));
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fimc_m2m_querycap: ref;

axiom fimc_m2m_querycap == $sub.ref(0, 517418);

procedure fimc_m2m_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fimc_m2m_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} $p3 := video_drvdata($p0);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(232, 1));
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} __fimc_vidioc_querycap($p7, $p2, 67137536);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const fimc_m2m_enum_fmt_mplane: ref;

axiom fimc_m2m_enum_fmt_mplane == $sub.ref(0, 518450);

procedure fimc_m2m_enum_fmt_mplane($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_m2m_enum_fmt_mplane($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i11: i32;
  var vslice_dummy_var_80: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $i5 := get_m2m_fmt_flags($i4);
    call {:si_unique_call 923} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $p8 := fimc_find_format($0.ref, $0.ref, $i5, $i7);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} vslice_dummy_var_80 := strncpy($p13, $p15, 31);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;
}



const fimc_m2m_g_fmt_mplane: ref;

axiom fimc_m2m_g_fmt_mplane == $sub.ref(0, 519482);

procedure fimc_m2m_g_fmt_mplane($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_m2m_g_fmt_mplane($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 408), 880));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $p8 := ctx_get_frame($p5, $i7);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $i10 := IS_ERR($p9);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 928} {:cexpr "tmp___1"} boogie_si_record_i8($i11);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} __fimc_get_format($p8, $p2);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p8);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $i14 := PTR_ERR($p13);
    call {:si_unique_call 930} {:cexpr "tmp___0"} boogie_si_record_i64($i14);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb3;
}



const fimc_m2m_s_fmt_mplane: ref;

axiom fimc_m2m_s_fmt_mplane == $sub.ref(0, 520514);

procedure fimc_m2m_s_fmt_mplane($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_m2m_s_fmt_mplane($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p32: ref;
  var $p31: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i10: i32;
  var vslice_dummy_var_81: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 408), 880));
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 408), 880)), $mul.ref(400, 1));
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $i8 := fimc_try_fmt_mplane($p5, $p2);
    call {:si_unique_call 933} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p4, $mul.ref($sub.ref(0, 408), 880)), $mul.ref(408, 1)), $mul.ref(168, 1));
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $p16 := v4l2_m2m_get_vq($p13, $i15);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $i17 := vb2_is_busy($p16);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 936} {:cexpr "tmp"} boogie_si_record_i8($i18);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 10);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 408), 880)), $mul.ref(152, 1));
    assume {:verifier.code 0} true;
    $p31 := $p32;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $i35 := get_m2m_fmt_flags($i34);
    call {:si_unique_call 939} {:cexpr "tmp___0"} boogie_si_record_i32($i35);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $p39 := fimc_find_format($p38, $0.ref, $i35, 0);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} __set_frame_format($p31, $p39, $p43);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} fimc_alpha_ctrl_update($p5);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 408), 880)), $mul.ref(0, 1));
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $p31 := $p30;
    goto $bb10;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(0, 1)), $mul.ref(1600, 1));
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} vslice_dummy_var_81 := printk.ref.ref.i32(.str.84, $p23, $i25);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 16);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;
}



const fimc_m2m_try_fmt_mplane: ref;

axiom fimc_m2m_try_fmt_mplane == $sub.ref(0, 521546);

procedure fimc_m2m_try_fmt_mplane($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_m2m_try_fmt_mplane($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 408), 880));
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $i6 := fimc_try_fmt_mplane($p5, $p2);
    call {:si_unique_call 944} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const v4l2_m2m_ioctl_reqbufs: ref;

axiom v4l2_m2m_ioctl_reqbufs == $sub.ref(0, 522578);

procedure v4l2_m2m_ioctl_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_m2m_ioctl_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 1} true;
    call {:si_unique_call 945} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 946} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const v4l2_m2m_ioctl_querybuf: ref;

axiom v4l2_m2m_ioctl_querybuf == $sub.ref(0, 523610);

procedure v4l2_m2m_ioctl_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_m2m_ioctl_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 1} true;
    call {:si_unique_call 947} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 948} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const v4l2_m2m_ioctl_qbuf: ref;

axiom v4l2_m2m_ioctl_qbuf == $sub.ref(0, 524642);

procedure v4l2_m2m_ioctl_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_m2m_ioctl_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 1} true;
    call {:si_unique_call 949} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 950} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const v4l2_m2m_ioctl_expbuf: ref;

axiom v4l2_m2m_ioctl_expbuf == $sub.ref(0, 525674);

procedure v4l2_m2m_ioctl_expbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_m2m_ioctl_expbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 1} true;
    call {:si_unique_call 951} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 952} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const v4l2_m2m_ioctl_dqbuf: ref;

axiom v4l2_m2m_ioctl_dqbuf == $sub.ref(0, 526706);

procedure v4l2_m2m_ioctl_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_m2m_ioctl_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 1} true;
    call {:si_unique_call 953} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 954} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const v4l2_m2m_ioctl_streamon: ref;

axiom v4l2_m2m_ioctl_streamon == $sub.ref(0, 527738);

procedure v4l2_m2m_ioctl_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_m2m_ioctl_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 955} {:cexpr "v4l2_m2m_ioctl_streamon:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 1} true;
    call {:si_unique_call 956} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 957} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const v4l2_m2m_ioctl_streamoff: ref;

axiom v4l2_m2m_ioctl_streamoff == $sub.ref(0, 528770);

procedure v4l2_m2m_ioctl_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_m2m_ioctl_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 958} {:cexpr "v4l2_m2m_ioctl_streamoff:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 1} true;
    call {:si_unique_call 959} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 960} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const fimc_m2m_cropcap: ref;

axiom fimc_m2m_cropcap == $sub.ref(0, 529802);

procedure fimc_m2m_cropcap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_m2m_cropcap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i16: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 408), 880));
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $p8 := ctx_get_frame($p5, $i7);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $i10 := IS_ERR($p9);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 963} {:cexpr "tmp___0"} boogie_si_record_i8($i11);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 0);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 0);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p8, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(8, 1));
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i22);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p8, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1)), $mul.ref(12, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i26);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(20, 1));
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p29);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p30);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 966} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p31, $p32, 16, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p8);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $i14 := PTR_ERR($p13);
    call {:si_unique_call 965} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb3;
}



const fimc_m2m_g_crop: ref;

axiom fimc_m2m_g_crop == $sub.ref(0, 530834);

procedure fimc_m2m_g_crop($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_m2m_g_crop($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p32: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 408), 880));
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $p8 := ctx_get_frame($p5, $i7);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $i10 := IS_ERR($p9);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 969} {:cexpr "tmp___0"} boogie_si_record_i8($i11);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i18);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p8, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i22);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p8, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(8, 1));
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i26);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p8, $mul.ref(0, 152)), $mul.ref(28, 1));
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(12, 1));
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i30);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p8);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $i14 := PTR_ERR($p13);
    call {:si_unique_call 971} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb3;
}



const fimc_m2m_s_crop: ref;

axiom fimc_m2m_s_crop == $sub.ref(0, 531866);

procedure fimc_m2m_s_crop($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr;



implementation fimc_m2m_s_crop($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p19: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i32;
  var $p27: ref;
  var $i28: i32;
  var $p30: ref;
  var $i31: i32;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p40: ref;
  var $i41: i32;
  var $p43: ref;
  var $i44: i32;
  var $p46: ref;
  var $i47: i32;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i38: i32;
  var $i54: i1;
  var $p57: ref;
  var $p58: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $i13: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $p3 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 408), 880));
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 408), 880)), $mul.ref(400, 1));
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 973} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p9, $p10, 20, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $i11 := fimc_m2m_try_crop($p6, $p3);
    call {:si_unique_call 975} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 10);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 408), 880)), $mul.ref(152, 1));
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $p18 := $p19;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 10);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p5, $mul.ref($sub.ref(0, 408), 880)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p5, $mul.ref($sub.ref(0, 408), 880)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(8, 1));
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(12, 1));
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 408), 880)), $mul.ref(380, 1));
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} $i53 := fimc_check_scaler_ratio($p6, $i41, $i44, $i47, $i50, $i52);
    call {:si_unique_call 979} {:cexpr "ret"} boogie_si_record_i32($i53);
    assume {:verifier.code 0} true;
    $i38 := $i53;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i38, 0);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p18, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p18, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i66);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(8, 1));
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p18, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, $i70);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(12, 1));
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p18, $mul.ref(0, 152)), $mul.ref(28, 1));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} fimc_ctx_state_set(1, $p6);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb11:
    assume $i54 == 1;
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(0, 1)), $mul.ref(1600, 1));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} vslice_dummy_var_82 := printk.ref.ref(.str.86, $p58);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(8, 1));
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(12, 1));
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p5, $mul.ref($sub.ref(0, 408), 880)), $mul.ref(152, 1)), $mul.ref(24, 1));
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p5, $mul.ref($sub.ref(0, 408), 880)), $mul.ref(152, 1)), $mul.ref(28, 1));
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 408), 880)), $mul.ref(380, 1));
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} $i37 := fimc_check_scaler_ratio($p6, $i25, $i28, $i31, $i34, $i36);
    call {:si_unique_call 977} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb10;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 408), 880)), $mul.ref(0, 1));
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p18 := $p17;
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb3;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 532898);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const fimc_m2m_try_crop: ref;

axiom fimc_m2m_try_crop == $sub.ref(0, 533930);

procedure fimc_m2m_try_crop($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr;



implementation fimc_m2m_try_crop($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p23: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i37: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i56: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i16;
  var $i68: i32;
  var $i69: i1;
  var $i73: i64;
  var $p74: ref;
  var $p75: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $i84: i16;
  var $i85: i32;
  var $i86: i1;
  var $i71: i32;
  var $i72: i32;
  var $i87: i32;
  var $i70: i32;
  var $i88: i32;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $p102: ref;
  var $i103: i32;
  var $p105: ref;
  var $i106: i32;
  var $i107: i32;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i112: i32;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $p118: ref;
  var $p120: ref;
  var $i121: i32;
  var $p123: ref;
  var $i124: i32;
  var $i125: i32;
  var $p126: ref;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i130: i32;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $p136: ref;
  var $p138: ref;
  var $i139: i32;
  var $i140: i32;
  var $i141: i32;
  var $p143: ref;
  var $p145: ref;
  var $i146: i32;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i16;
  var $i151: i32;
  var $i152: i32;
  var $i153: i32;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i24;
  var $i163: i24;
  var $i164: i24;
  var $p165: ref;
  var $p166: ref;
  var $i167: i8;
  var $i168: i64;
  var $i169: i64;
  var $i170: i64;
  var $i171: i1;
  var $p173: ref;
  var $i174: i32;
  var $p176: ref;
  var $i177: i32;
  var $p179: ref;
  var $i180: i32;
  var $p182: ref;
  var $i183: i32;
  var $p184: ref;
  var $i185: i32;
  var $p186: ref;
  var $i187: i32;
  var $i18: i32;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 9);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 10);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p23 := $p0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p23);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i29, $i30);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(256, 1));
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i37 := $i42;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(256, 1));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 24)), $mul.ref(22, 1));
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.0, $p45);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 1);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i48 == 1);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(256, 1));
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 24)), $mul.ref(22, 1));
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p59);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $i62 := ffs($i61);
    call {:si_unique_call 986} {:cexpr "tmp"} boogie_si_record_i32($i62);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, $sub.i32(0, 1));
    call {:si_unique_call 987} {:cexpr "halign"} boogie_si_record_i32($i63);
    assume {:verifier.code 0} true;
    $i56 := $i63;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p23, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i67 := $load.i16($M.0, $p66);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i67);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i69 := $sgt.i32($i68, 0);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i70 := 0;
    assume {:branchcond $i69} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $i88 := ffs($i37);
    call {:si_unique_call 991} {:cexpr "tmp___0"} boogie_si_record_i32($i88);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(8, 1));
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p23, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i88, $sub.i32(0, 1));
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(12, 1));
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p23, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i70, 7);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, $sub.i32(0, 8));
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $i100 := $udiv.i32(64, $i99);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} v4l_bound_align_image($p90, $i37, $i92, $i93, $p95, $i37, $i97, $i56, $i100);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(8, 1));
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i107 := $add.i32($i103, $i106);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p23, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i110 := $ugt.i32($i107, $i109);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(12, 1));
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i125 := $add.i32($i121, $i124);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p23, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.0, $p126);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i128 := $ugt.i32($i125, $i127);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.0, $p138);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i140 := $sub.i32(0, $i37);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i141 := $and.i32($i139, $i140);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p143, $i141);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(256, 1));
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p147);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p148, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i150 := $load.i16($M.0, $p149);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i151 := $zext.i16.i32($i150);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i152 := $sub.i32(0, $i151);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i153 := $and.i32($i146, $i152);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p155, $i153);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p156, .str.2);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p157, .str.88);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p158, .str.81);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p159, .str.89);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p160);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $i162 := $load.i24($M.16, $p161);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i163 := $and.i24($i162, $sub.i24(0, 262144));
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i164 := $or.i24($i163, 482);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p161, $i164);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p165, 0);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.17, $p166);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i168 := $zext.i8.i64($i167);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i169 := $and.i64($i168, 1);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $i170 := ldv__builtin_expect($i169, 0);
    call {:si_unique_call 994} {:cexpr "tmp___1"} boogie_si_record_i64($i170);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i171 := $ne.i64($i170, 0);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb34:
    assume $i171 == 1;
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.0, $p173);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $p176);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(8, 1));
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.0, $p179);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(12, 1));
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.0, $p182);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p23, $mul.ref(0, 152)), $mul.ref(0, 1));
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.0, $p184);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p23, $mul.ref(0, 152)), $mul.ref(4, 1));
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.0, $p186);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32($p2, .str.89, .str.88, 482, $i174, $i177, $i180, $i183, $i185, $i187);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i128 == 1;
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p23, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(12, 1));
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $i134 := $sub.i32($i130, $i133);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p136, $i134);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i110 == 1;
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p23, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(8, 1));
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $i116 := $sub.i32($i112, $i115);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p118, $i116);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb20:
    assume $i69 == 1;
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i71, $i72 := 0, 0;
    goto $bb23;

  $bb23:
    call $i73, $p74, $p75, $p77, $i78, $i79, $i80, $i81, $p82, $p83, $i84, $i85, $i86, $i71, $i72, $i87 := fimc_m2m_try_crop_loop_$bb23($p23, $p64, $i73, $p74, $p75, $p77, $i78, $i79, $i80, $i81, $p82, $p83, $i84, $i85, $i86, $i71, $i72, $i87);
    goto $bb23_last;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i71);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p23, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p75, $mul.ref(0, 40)), $mul.ref(29, 1)), $mul.ref($i73, 1));
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i80 := $add.i32($i79, $i72);
    call {:si_unique_call 988} {:cexpr "depth"} boogie_si_record_i32($i80);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i71, 1);
    call {:si_unique_call 989} {:cexpr "i"} boogie_si_record_i32($i81);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p64);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i84 := $load.i16($M.0, $p83);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i84);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i86 := $sgt.i32($i85, $i81);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i87 := $i80;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $i70 := $i87;
    goto $bb22;

  $bb25:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $i71, $i72 := $i81, $i80;
    goto $bb25_dummy;

  $bb17:
    assume $i48 == 1;
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p23, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 16);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i32($i54);
    call {:si_unique_call 984} {:cexpr "halign"} boogie_si_record_i32($i55);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i56 := $i55;
    goto $bb19;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(256, 1));
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb16;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $p23 := $p22;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(0, 1)), $mul.ref(1600, 1));
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} vslice_dummy_var_83 := printk.ref.ref(.str.87, $p16);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb25_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5716;
}



const fimc_ctx_state_set: ref;

axiom fimc_ctx_state_set == $sub.ref(0, 534962);

procedure fimc_ctx_state_set($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_ctx_state_set($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} {:cexpr "fimc_ctx_state_set:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $p5 := spinlock_check($p4);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 999} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(392, 1));
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, $i0);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(392, 1));
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} spin_unlock_irqrestore($p13, $i6);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    return;
}



const v4l_bound_align_image: ref;

axiom v4l_bound_align_image == $sub.ref(0, 535994);

procedure v4l_bound_align_image($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref, $i5: i32, $i6: i32, $i7: i32, $i8: i32);
  free requires assertsPassed;



implementation v4l_bound_align_image($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref, $i5: i32, $i6: i32, $i7: i32, $i8: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} {:cexpr "v4l_bound_align_image:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1002} {:cexpr "v4l_bound_align_image:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1003} {:cexpr "v4l_bound_align_image:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1004} {:cexpr "v4l_bound_align_image:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 1005} {:cexpr "v4l_bound_align_image:arg:arg6"} boogie_si_record_i32($i6);
    call {:si_unique_call 1006} {:cexpr "v4l_bound_align_image:arg:arg7"} boogie_si_record_i32($i7);
    call {:si_unique_call 1007} {:cexpr "v4l_bound_align_image:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    return;
}



const ctx_get_frame: ref;

axiom ctx_get_frame == $sub.ref(0, 537026);

procedure ctx_get_frame($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation ctx_get_frame($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i1;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p7: ref;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p10: ref;
  var $p9: ref;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} {:cexpr "ctx_get_frame:arg:type"} boogie_si_record_i32($i1);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 10);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i1, 9);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 5568)), $mul.ref(392, 1));
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} vslice_dummy_var_84 := printk.ref.ref.i32(.str.83, $p18, $i1);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $p20 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $p9 := $p20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1));
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p10 := $p12;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $p9 := $p10;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $i3 := fimc_ctx_state_is_set(65536, $p0);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1010} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $p7 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $p9 := $p7;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $p0;
    goto $bb7;
}



const fimc_ctx_state_is_set: ref;

axiom fimc_ctx_state_is_set == $sub.ref(0, 538058);

procedure fimc_ctx_state_is_set($i0: i32, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation fimc_ctx_state_is_set($i0: i32, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} {:cexpr "fimc_ctx_state_is_set:arg:mask"} boogie_si_record_i32($i0);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} $p5 := spinlock_check($p4);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 1017} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(392, 1));
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, $i0);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, $i0);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 1018} {:cexpr "ret"} boogie_si_record_i8($i11);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} spin_unlock_irqrestore($p14, $i6);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i11);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const fimc_try_fmt_mplane: ref;

axiom fimc_try_fmt_mplane == $sub.ref(0, 539090);

procedure fimc_try_fmt_mplane($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_try_fmt_mplane($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i53: i32;
  var $i54: i32;
  var $i65: i32;
  var $i66: i1;
  var $p69: ref;
  var $i70: i16;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i78: i32;
  var $i67: i32;
  var $i68: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i16;
  var $i90: i32;
  var $p91: ref;
  var $i92: i32;
  var $p93: ref;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(256, 1));
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 10);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $i17 := get_m2m_fmt_flags($i16);
    call {:si_unique_call 1021} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $p19 := fimc_find_format($p18, $0.ref, $i17, 0);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    call {:si_unique_call 1023} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i22);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 1025} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i22, 0);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 1028} {:cexpr "tmp___1"} boogie_si_record_i64($i31);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(12, 1));
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(12, 1));
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 1);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 10);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.0, $p57);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    call {:si_unique_call 1033} {:cexpr "max_w"} boogie_si_record_i32($i59);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.0, $p60);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $i63 := ffs($i62);
    call {:si_unique_call 1035} {:cexpr "tmp___3"} boogie_si_record_i32($i63);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, $sub.i32(0, 1));
    call {:si_unique_call 1036} {:cexpr "mod_x"} boogie_si_record_i32($i64);
    assume {:verifier.code 0} true;
    $i53, $i54 := $i59, $i64;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $i65 := tiled_fmt($p19);
    call {:si_unique_call 1038} {:cexpr "tmp___5"} boogie_si_record_i32($i65);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i66 == 1);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(22, 1));
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.0, $p69);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 1);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i72 == 1);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(22, 1));
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i80 := $load.i16($M.0, $p79);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $i82 := ffs($i81);
    call {:si_unique_call 1043} {:cexpr "tmp___4"} boogie_si_record_i32($i82);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i82, $sub.i32(0, 1));
    call {:si_unique_call 1044} {:cexpr "mod_y"} boogie_si_record_i32($i83);
    assume {:verifier.code 0} true;
    $i78 := $i83;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i67, $i68 := $i54, $i78;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 12)), $mul.ref(2, 1));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i89 := $load.i16($M.0, $p88);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i32($i89);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} v4l_bound_align_image($p84, 16, $i53, $i67, $p85, 8, $i90, $i68, 0);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} fimc_adjust_mplane_format($p19, $i92, $i94, $p96);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb26:
    assume $i72 == 1;
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 16);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 0);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i77 := $zext.i1.i32($i76);
    call {:si_unique_call 1041} {:cexpr "mod_y"} boogie_si_record_i32($i77);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $i78 := $i77;
    goto $bb28;

  $bb23:
    assume $i66 == 1;
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i67, $i68 := 6, 5;
    goto $bb25;

  $bb20:
    assume $i42 == 1;
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 12)), $mul.ref(2, 1));
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.0, $p45);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    call {:si_unique_call 1029} {:cexpr "max_w"} boogie_si_record_i32($i47);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.0, $p48);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $i51 := ffs($i50);
    call {:si_unique_call 1031} {:cexpr "tmp___2"} boogie_si_record_i32($i51);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, $sub.i32(0, 1));
    call {:si_unique_call 1032} {:cexpr "mod_x"} boogie_si_record_i32($i52);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i53, $i54 := $i47, $i52;
    goto $bb22;

  $bb17:
    assume $i39 == 1;
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb6;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(12, 1));
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 1);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb6;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} warn_slowpath_fmt.ref.i32.ref(.str.81, 299, .str.85);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 9);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb6;
}



const get_m2m_fmt_flags: ref;

axiom get_m2m_fmt_flags == $sub.ref(0, 540122);

procedure get_m2m_fmt_flags($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation get_m2m_fmt_flags($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} {:cexpr "get_m2m_fmt_flags:arg:stream_type"} boogie_si_record_i32($i0);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 10);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i2 := 4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i2 := 2;
    goto $bb3;
}



const tiled_fmt: ref;

axiom tiled_fmt == $sub.ref(0, 541154);

procedure tiled_fmt($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tiled_fmt($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 842091860);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const fimc_adjust_mplane_format: ref;

axiom fimc_adjust_mplane_format == $sub.ref(0, 542186);

procedure fimc_adjust_mplane_format($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_adjust_mplane_format($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i64: i1;
  var $p65: ref;
  var $i66: i16;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i63: i32;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i64;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $p88: ref;
  var $i89: i32;
  var $i90: i8;
  var $i91: i32;
  var $i92: i1;
  var $i19: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} {:cexpr "fimc_adjust_mplane_format:arg:width"} boogie_si_record_i32($i1);
    call {:si_unique_call 1047} {:cexpr "fimc_adjust_mplane_format:arg:height"} boogie_si_record_i32($i2);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(16, 1));
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 7);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(12, 1));
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 1);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i16.i8($i7);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(180, 1));
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, $i8);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i2);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i1);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(180, 1));
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, 0);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i19, $i20 := 0, 0;
    goto $bb4;

  $bb4:
    call $p21, $p22, $i23, $p25, $i26, $p27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p46, $i47, $i48, $i49, $p50, $i51, $i52, $p53, $i54, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i64, $p65, $i66, $i67, $i68, $i69, $i70, $i63, $p71, $p72, $i73, $p74, $i75, $i76, $i77, $p79, $i80, $i81, $i82, $i83, $p84, $i85, $i86, $i87, $p88, $i89, $i90, $i91, $i92, $i19, $i20 := fimc_adjust_mplane_format_loop_$bb4($p0, $p3, $p15, $p21, $p22, $i23, $p25, $i26, $p27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $p38, $i39, $i40, $i41, $i42, $i43, $i44, $p46, $i47, $i48, $i49, $p50, $i51, $i52, $p53, $i54, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i64, $p65, $i66, $i67, $i68, $i69, $i70, $i63, $p71, $p72, $i73, $p74, $i75, $i76, $i77, $p79, $i80, $i81, $i82, $i83, $p84, $i85, $i86, $i87, $p88, $i89, $i90, $i91, $i92, $i19, $i20);
    goto $bb4_last;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(20, 1));
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i19);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p22, $mul.ref($i23, 20)), $mul.ref(4, 1));
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    call {:si_unique_call 1048} {:cexpr "bpl"} boogie_si_record_i32($i26);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i32($i29, 1);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i37 := $i26;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $p38);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i61 := $i37;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i19, 0);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i62 == 1);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i19, 1);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i70 := $i20;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i63 := $i70;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p22, $mul.ref($i23, 20)), $mul.ref(4, 1));
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, $i63);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i76 := $mul.i32($i73, $i75);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i19);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(29, 1)), $mul.ref($i77, 1));
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i82 := $mul.i32($i76, $i81);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i83 := $udiv.i32($i82, 8);
    call {:si_unique_call 1051} {:cexpr "_max1"} boogie_si_record_i32($i83);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p22, $mul.ref($i23, 20)), $mul.ref(0, 1));
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    call {:si_unique_call 1052} {:cexpr "_max2"} boogie_si_record_i32($i85);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i86 := $ugt.i32($i83, $i85);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i86 == 1);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i87 := $i85;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p22, $mul.ref($i23, 20)), $mul.ref(0, 1));
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $i87);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i19, 1);
    call {:si_unique_call 1054} {:cexpr "i"} boogie_si_record_i32($i89);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.0, $p15);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i92 := $sgt.i32($i91, $i89);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i92 == 1);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb36:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $i19, $i20 := $i89, $i63;
    goto $bb36_dummy;

  $bb33:
    assume $i86 == 1;
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i87 := $i83;
    goto $bb35;

  $bb27:
    assume $i64 == 1;
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.0, $p65);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 3);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb29;

  $bb30:
    assume $i68 == 1;
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i69 := $udiv.i32($i20, 2);
    call {:si_unique_call 1053} {:cexpr "bytesperline"} boogie_si_record_i32($i69);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i70 := $i69;
    goto $bb32;

  $bb24:
    assume $i62 == 1;
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $i63 := $i61;
    goto $bb26;

  $bb15:
    assume $i41 == 1;
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i37, 0);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i42 == 1);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i43 := $mul.i32($i37, 8);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i19);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(29, 1)), $mul.ref($i44, 1));
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i49 := $udiv.i32($i43, $i48);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i52 := $ult.i32($i49, $i51);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb17;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(29, 1)), $mul.ref(0, 1));
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i59 := $mul.i32($i54, $i58);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i60 := $udiv.i32($i59, 8);
    call {:si_unique_call 1050} {:cexpr "bpl"} boogie_si_record_i32($i60);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i61 := $i60;
    goto $bb23;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb19;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i26, 0);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i31 == 1);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i34 := $ugt.i32($i33, $i26);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb8;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    call {:si_unique_call 1049} {:cexpr "bpl"} boogie_si_record_i32($i36);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb14;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb10;

  $bb36_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6077;
}



const v4l2_m2m_get_vq: ref;

axiom v4l2_m2m_get_vq == $sub.ref(0, 543218);

procedure v4l2_m2m_get_vq($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_m2m_get_vq($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} {:cexpr "v4l2_m2m_get_vq:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $p2 := external_alloc();
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const vb2_is_busy: ref;

axiom vb2_is_busy == $sub.ref(0, 544250);

procedure vb2_is_busy($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation vb2_is_busy($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 848)), $mul.ref(496, 1));
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const fimc_alpha_ctrl_update: ref;

axiom fimc_alpha_ctrl_update == $sub.ref(0, 545282);

procedure fimc_alpha_ctrl_update($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_alpha_ctrl_update($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i64;
  var $i29: i32;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(280, 1));
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(264, 1));
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 56)), $mul.ref(50, 1));
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} v4l2_ctrl_lock($p5);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $i17 := fimc_get_alpha_mask($p16);
    call {:si_unique_call 1059} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(104, 1));
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i18);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(188, 1)), $mul.ref(0, 1));
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(104, 1));
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i64($i23, $i25);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} v4l2_ctrl_unlock($p5);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(104, 1));
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i32($i28);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(188, 1)), $mul.ref(0, 1));
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i29);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const v4l2_ctrl_lock: ref;

axiom v4l2_ctrl_lock == $sub.ref(0, 546314);

procedure v4l2_ctrl_lock($p0: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(160, 1));
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} mutex_lock_nested($p4, 0);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_ctrl_unlock: ref;

axiom v4l2_ctrl_unlock == $sub.ref(0, 547346);

procedure v4l2_ctrl_unlock($p0: ref);
  free requires assertsPassed;



implementation v4l2_ctrl_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 240)), $mul.ref(160, 1));
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} mutex_unlock($p4);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    return;
}



const __fimc_get_format: ref;

axiom __fimc_get_format == $sub.ref(0, 548378);

procedure __fimc_get_format($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __fimc_get_format($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i16;
  var $i21: i8;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i28: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $p35: ref;
  var $i36: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $i27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(12, 1));
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 1);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(16, 1));
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 7);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i16.i8($i20);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(180, 1));
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i21);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(180, 1));
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, 0);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb4;

  $bb4:
    call $i28, $p30, $i31, $i32, $p35, $i36, $p38, $i39, $i40, $p43, $i44, $i45, $i46, $i47, $i27 := __fimc_get_format_loop_$bb4($p0, $p3, $p23, $i28, $p30, $i31, $i32, $p35, $i36, $p38, $i39, $i40, $p43, $i44, $i45, $i46, $i47, $i27);
    goto $bb4_last;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(64, 1)), $mul.ref($i28, 4));
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i27);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref($i32, 20)), $mul.ref(4, 1));
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i31);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i27);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(32, 1)), $mul.ref($i36, 4));
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i27);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref($i40, 20)), $mul.ref(0, 1));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i39);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i27, 1);
    call {:si_unique_call 1063} {:cexpr "i"} boogie_si_record_i32($i44);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p23);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i47 := $sgt.i32($i46, $i44);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i47 == 1);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i27 := $i44;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6275;
}



const strncpy: ref;

axiom strncpy == $sub.ref(0, 549410);

procedure strncpy($p0: ref, $p1: ref, $i2: i64) returns ($r: ref);



const __fimc_vidioc_querycap: ref;

axiom __fimc_vidioc_querycap == $sub.ref(0, 550442);

procedure __fimc_vidioc_querycap($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation __fimc_vidioc_querycap($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} {:cexpr "__fimc_vidioc_querycap:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    return;
}



const fimc_device_run: ref;

axiom fimc_device_run == $sub.ref(0, 551474);

procedure fimc_device_run($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.29, $M.32, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_device_run($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p54: ref;
  var $p56: ref;
  var $i57: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $p74: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 1065} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i4);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 1067} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i4, 0);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 1070} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} $p18 := spinlock_check($p17);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $i19 := _raw_spin_lock_irqsave($p18);
    call {:si_unique_call 1073} {:cexpr "flags"} boogie_si_record_i64($i19);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p16, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} set_bit(2, $p20);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(152, 1));
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(392, 1));
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 1);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(408, 1)), $mul.ref(168, 1));
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $p30 := v4l2_m2m_next_src_buf($p29);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i33 := fimc_prepare_addr($p1, $p31, $p21, $p32);
    call {:si_unique_call 1079} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(408, 1)), $mul.ref(168, 1));
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $p38 := v4l2_m2m_next_dst_buf($p37);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    $p40 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(96, 1));
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} $i41 := fimc_prepare_addr($p1, $p39, $p22, $p40);
    call {:si_unique_call 1083} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 928)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 928)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p44);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p46);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 1084} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p47, $p48, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 928)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, $sub.i32(0, 458753));
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 928)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i52);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 928)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 928)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 458752);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i62 := $or.i32($i57, $i61);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 928)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i62);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(1848, 1));
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p1);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i68, $i69);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(392, 1));
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, 1);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    $p89 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} fimc_hw_set_input_addr($p16, $p89);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    $p90 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(96, 1));
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} fimc_hw_set_output_addr($p16, $p90, $sub.i32(0, 1));
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} fimc_activate_capture($p1);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(392, 1));
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i92, 196608);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(392, 1));
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i93);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} fimc_hw_activate_input_dma($p16, 1);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p16, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} spin_unlock_irqrestore($p95, $i19);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i80 == 1;
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} fimc_set_yuv_order($p1);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} fimc_hw_set_input_path($p1);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} fimc_hw_set_in_dma($p1);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} $i81 := fimc_set_scaler_info($p1);
    call {:si_unique_call 1089} {:cexpr "ret"} boogie_si_record_i32($i81);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} fimc_hw_set_prescaler($p1);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} fimc_hw_set_mainscaler($p1);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} fimc_hw_set_target_format($p1);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} fimc_hw_set_rotation($p1);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} fimc_hw_set_effect($p1);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} fimc_hw_set_out_dma($p1);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p16, $mul.ref(0, 5568)), $mul.ref(264, 1));
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 56)), $mul.ref(50, 1));
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.0, $p85);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} fimc_hw_set_output_path($p1);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i88 == 1;
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} fimc_hw_set_rgb_alpha($p1);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i82 == 1;
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i70 == 1;
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(392, 1));
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i73 := $or.i32($i72, 1);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 880)), $mul.ref(392, 1));
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, $i73);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(1848, 1));
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p76, $p0);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i42 == 1;
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} fimc_prepare_dma_offset($p1, $p21);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} fimc_prepare_dma_offset($p1, $p22);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} warn_slowpath_fmt.ref.i32.ref(.str.81, 109, .str.82);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fimc_job_abort: ref;

axiom fimc_job_abort == $sub.ref(0, 552506);

procedure fimc_job_abort($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fimc_job_abort($p0: ref)
{
  var $p1: ref;
  var vslice_dummy_var_85: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} vslice_dummy_var_85 := fimc_m2m_shutdown($p1);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    return;
}



const fimc_m2m_shutdown: ref;

axiom fimc_m2m_shutdown == $sub.ref(0, 553538);

procedure fimc_m2m_shutdown($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fimc_m2m_shutdown($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $i17: i1;
  var $i18: i64;
  var $i19: i1;
  var $i21: i1;
  var $i20: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i8;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i8;
  var $i37: i1;
  var $i38: i1;
  var $i39: i64;
  var $i40: i1;
  var $i42: i1;
  var $i41: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $i5 := constant_test_bit(2, $p4);
    call {:si_unique_call 1105} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} fimc_ctx_state_set(262144, $p0);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} __might_sleep(.str.81, 74, 0);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $i8 := fimc_ctx_state_is_set(262144, $p0);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 1109} {:cexpr "tmp___3"} boogie_si_record_i8($i9);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 1110} {:cexpr "__cond___0"} boogie_si_record_i8($i15);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i18 := 25;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i15);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $i20 := 1;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i19 == 1);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i18, 0);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i20 := $i21;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i20);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i48 := $i18;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i64.i32($i48);
    call {:si_unique_call 1120} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i50 == 1);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 110);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $i7 := $i51;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb37:
    assume $i50 == 1;
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i51 := $i49;
    goto $bb39;

  $bb17:
    assume $i23 == 1;
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} INIT_LIST_HEAD($p24);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 0);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $i26 := 25;
    goto $bb19;

  $bb19:
    call $i26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i42, $i41, $i43, $i44, $i45, $i46 := fimc_m2m_shutdown_loop_$bb19($p0, $p1, $p3, $i26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i42, $i41, $i43, $i44, $i45, $i46);
    goto $bb19_last;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(304, 1));
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} $i28 := prepare_to_wait_event($p27, $p1, 2);
    call {:si_unique_call 1113} {:cexpr "tmp___0"} boogie_si_record_i64($i28);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} $i29 := fimc_ctx_state_is_set(262144, $p0);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i8($i29);
    call {:si_unique_call 1115} {:cexpr "tmp___1"} boogie_si_record_i8($i30);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i30);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i8($i35);
    call {:si_unique_call 1116} {:cexpr "__cond"} boogie_si_record_i8($i36);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($i36);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i39 := $i26;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i36);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i41 := 1;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i40 == 1);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i39, 0);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i41 := $i42;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i41);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i45 := $i39;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} $i46 := schedule_timeout($i39);
    call {:si_unique_call 1119} {:cexpr "__ret___0"} boogie_si_record_i64($i46);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $i26 := $i46;
    goto corral_source_split_6522_dummy;

  $bb32:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(304, 1));
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} finish_wait($p47, $p1);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i48 := $i45;
    goto $bb36;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb30;

  $bb23:
    assume $i37 == 1;
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i26, 0);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb25;

  $bb26:
    assume $i38 == 1;
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i39 := 1;
    goto $bb28;

  $bb20:
    assume $i33 == 1;
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb22;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb15;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64(25, 0);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb13;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  corral_source_split_6522_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6486;
}



const v4l2_m2m_next_src_buf: ref;

axiom v4l2_m2m_next_src_buf == $sub.ref(0, 554570);

procedure v4l2_m2m_next_src_buf($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_m2m_next_src_buf($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(960, 1));
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $p2 := v4l2_m2m_next_buf($p1);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const v4l2_m2m_next_dst_buf: ref;

axiom v4l2_m2m_next_dst_buf == $sub.ref(0, 555602);

procedure v4l2_m2m_next_dst_buf($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_m2m_next_dst_buf($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2024)), $mul.ref(16, 1));
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $p2 := v4l2_m2m_next_buf($p1);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fimc_hw_set_in_dma: ref;

axiom fimc_hw_set_in_dma == $sub.ref(0, 556634);

procedure fimc_hw_set_in_dma($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_hw_set_in_dma($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i16;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i75: i32;
  var $i53: i32;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i32;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i32;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(108, 1)), $mul.ref(4, 1));
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32($i6, 16);
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(108, 1)), $mul.ref(0, 1));
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i7, $i9);
    call {:si_unique_call 1123} {:cexpr "cfg"} boogie_si_record_i32($i10);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(372, 1));
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} writel($i10, $p13);
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(108, 1)), $mul.ref(12, 1));
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i16 := $shl.i32($i15, 16);
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(108, 1)), $mul.ref(8, 1));
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i16, $i18);
    call {:si_unique_call 1125} {:cexpr "cfg"} boogie_si_record_i32($i19);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(376, 1));
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} writel($i19, $p22);
    $p23 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(108, 1)), $mul.ref(20, 1));
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32($i24, 16);
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(108, 1)), $mul.ref(16, 1));
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i25, $i27);
    call {:si_unique_call 1127} {:cexpr "cfg"} boogie_si_record_i32($i28);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(380, 1));
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} writel($i28, $p31);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} fimc_hw_set_in_dma_size($p0);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(324, 1));
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 3);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} fimc_hw_en_autoload($p2, $i35);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(252, 1));
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $i39 := readl($p38);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    call {:si_unique_call 1132} {:cexpr "cfg"} boogie_si_record_i32($i39);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, $sub.i32(0, 251887679));
    call {:si_unique_call 1133} {:cexpr "cfg"} boogie_si_record_i32($i40);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i40, 67112968);
    call {:si_unique_call 1134} {:cexpr "cfg"} boogie_si_record_i32($i41);
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i45, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i45, $sub.i32(0, 33));
    assume {:verifier.code 0} true;
    $i49 := $ule.i32($i48, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i53 := $i41;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p89, $mul.ref(252, 1));
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} writel($i53, $p90);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p92, $mul.ref(396, 1));
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $i94 := readl($p93);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    call {:si_unique_call 1138} {:cexpr "cfg"} boogie_si_record_i32($i94);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i94, $sub.i32(0, 1610637313));
    call {:si_unique_call 1139} {:cexpr "cfg"} boogie_si_record_i32($i95);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $i99 := tiled_fmt($p98);
    call {:si_unique_call 1141} {:cexpr "tmp"} boogie_si_record_i32($i99);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $i102 := $i95;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $i106 := tiled_fmt($p105);
    call {:si_unique_call 1148} {:cexpr "tmp___0"} boogie_si_record_i32($i106);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $i109 := $i102;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p111, $mul.ref(396, 1));
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} writel($i109, $p112);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    return;

  $bb25:
    assume $i107 == 1;
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $i108 := $or.i32($i102, 24576);
    call {:si_unique_call 1149} {:cexpr "cfg"} boogie_si_record_i32($i108);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $i109 := $i108;
    goto $bb27;

  $bb22:
    assume $i100 == 1;
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i101 := $or.i32($i95, 1610612736);
    call {:si_unique_call 1146} {:cexpr "cfg"} boogie_si_record_i32($i101);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i102 := $i101;
    goto $bb24;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i49 == 1;
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.0, $p67);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 1);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i70 == 1);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $i76 := $or.i32($i41, 2);
    call {:si_unique_call 1144} {:cexpr "cfg"} boogie_si_record_i32($i76);
    $p77 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $i80 := $load.i16($M.0, $p79);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 2);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i87 := $i76;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i75 := $i87;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i53 := $i75;
    goto $bb11;

  $bb18:
    assume $i82 == 1;
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(316, 1));
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i85 := $or.i32($i84, $i76);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i86 := $or.i32($i85, 32768);
    call {:si_unique_call 1145} {:cexpr "cfg"} boogie_si_record_i32($i86);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $i87 := $i86;
    goto $bb20;

  $bb15:
    assume $i70 == 1;
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(312, 1));
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i73 := $or.i32($i72, $i41);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i73, 4);
    call {:si_unique_call 1143} {:cexpr "cfg"} boogie_si_record_i32($i74);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i75 := $i74;
    goto $bb17;

  $bb4:
    assume $i47 == 1;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.0, $p56);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 2);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i64 := $i41;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i53 := $i64;
    goto $bb11;

  $bb12:
    assume $i59 == 1;
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(316, 1));
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i62 := $or.i32($i61, $i41);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i62, 32768);
    call {:si_unique_call 1142} {:cexpr "cfg"} boogie_si_record_i32($i63);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i64 := $i63;
    goto $bb14;

  $bb2:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i45, $sub.i32(0, 18));
    assume {:verifier.code 0} true;
    $i51 := $ule.i32($i50, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb8;

  $bb9:
    assume $i51 == 1;
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i41, 6);
    call {:si_unique_call 1135} {:cexpr "cfg"} boogie_si_record_i32($i52);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb11;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;
}



const fimc_hw_set_input_addr: ref;

axiom fimc_hw_set_input_addr == $sub.ref(0, 557666);

procedure fimc_hw_set_input_addr($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_hw_set_input_addr($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(248, 1));
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} $i5 := readl($p4);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    call {:si_unique_call 1152} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 1073741824);
    call {:si_unique_call 1153} {:cexpr "cfg"} boogie_si_record_i32($i6);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(248, 1));
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} writel($i6, $p9);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(212, 1));
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} writel($i11, $p14);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(216, 1));
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} writel($i16, $p19);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(220, 1));
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} writel($i21, $p24);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i6, $sub.i32(0, 1073741825));
    call {:si_unique_call 1158} {:cexpr "cfg"} boogie_si_record_i32($i25);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(248, 1));
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} writel($i25, $p28);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;
}



const fimc_hw_activate_input_dma: ref;

axiom fimc_hw_activate_input_dma == $sub.ref(0, 558698);

procedure fimc_hw_activate_input_dma($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_hw_activate_input_dma($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i10: i32;
  var $i9: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1160} {:cexpr "fimc_hw_activate_input_dma:arg:on"} boogie_si_record_i1($i1);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(252, 1));
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $i6 := readl($p5);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    call {:si_unique_call 1162} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i6, $sub.i32(0, 2));
    call {:si_unique_call 1164} {:cexpr "cfg"} boogie_si_record_i32($i10);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(252, 1));
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} writel($i9, $p13);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i6, 1);
    call {:si_unique_call 1163} {:cexpr "cfg"} boogie_si_record_i32($i8);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;

  SeqInstr_220:
    assume !assertsPassed;
    return;
}



const fimc_hw_set_in_dma_size: ref;

axiom fimc_hw_set_in_dma_size == $sub.ref(0, 559730);

procedure fimc_hw_set_in_dma_size($p0: ref);
  free requires assertsPassed;



implementation fimc_hw_set_in_dma_size($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(324, 1));
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 3);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i11 := $shl.i32($i10, 16);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i11, $i13);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, 0);
    call {:si_unique_call 1167} {:cexpr "cfg_o"} boogie_si_record_i32($i15);
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i18 := $shl.i32($i17, 16);
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i18, $i20);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i21, $i8);
    call {:si_unique_call 1168} {:cexpr "cfg_r"} boogie_si_record_i32($i22);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(384, 1));
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} writel($i15, $p25);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(248, 1));
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} writel($i22, $p28);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i7 := $or.i32(0, $sub.i32(0, 2147483648));
    call {:si_unique_call 1166} {:cexpr "cfg_r"} boogie_si_record_i32($i7);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const fimc_hw_en_autoload: ref;

axiom fimc_hw_en_autoload == $sub.ref(0, 560762);

procedure fimc_hw_en_autoload($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_hw_en_autoload($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i9: i32;
  var $i8: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} {:cexpr "fimc_hw_en_autoload:arg:enable"} boogie_si_record_i32($i1);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(384, 1));
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $i5 := readl($p4);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    call {:si_unique_call 1173} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i1, 0);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i5, 2147483647);
    call {:si_unique_call 1175} {:cexpr "cfg"} boogie_si_record_i32($i9);
    assume {:verifier.code 0} true;
    $i8 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(384, 1));
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} writel($i8, $p12);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i5, $sub.i32(0, 2147483648));
    call {:si_unique_call 1174} {:cexpr "cfg"} boogie_si_record_i32($i7);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;

  SeqInstr_223:
    assume !assertsPassed;
    return;
}



const v4l2_m2m_next_buf: ref;

axiom v4l2_m2m_next_buf == $sub.ref(0, 561794);

procedure v4l2_m2m_next_buf($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_m2m_next_buf($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} $p1 := external_alloc();
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const fimc_queue_setup: ref;

axiom fimc_queue_setup == $sub.ref(0, 562826);

procedure fimc_queue_setup($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_queue_setup($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i16;
  var $i32: i32;
  var $i33: i1;
  var $i35: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i46: i64;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i1;
  var $i34: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $p6 := vb2_get_drv_priv($p0);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 848)), $mul.ref(0, 1));
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $p10 := ctx_get_frame($p7, $i9);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $i12 := IS_ERR($p11);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 1181} {:cexpr "tmp___1"} boogie_si_record_i8($i13);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p10, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i27);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p10, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i31 := $load.i16($M.0, $p30);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i33 := $sgt.i32($i32, 0);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb11;

  $bb11:
    call $i35, $p37, $i38, $i39, $p40, $p41, $p42, $p43, $p44, $i46, $p47, $i48, $p49, $p50, $i51, $i52, $i53, $i34 := fimc_queue_setup_loop_$bb11($p4, $p5, $p7, $p10, $p28, $i35, $p37, $i38, $i39, $p40, $p41, $p42, $p43, $p44, $i46, $p47, $i48, $p49, $p50, $i51, $i52, $i53, $i34);
    goto $bb11_last;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 152)), $mul.ref(32, 1)), $mul.ref($i35, 4));
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i34);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p4, $mul.ref($i39, 4));
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i38);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 5568)), $mul.ref(5560, 1));
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i34);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p5, $mul.ref($i46, 8));
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, $p44);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i34, 1);
    call {:si_unique_call 1184} {:cexpr "i"} boogie_si_record_i32($i48);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p28);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i53 := $sgt.i32($i52, $i48);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i53 == 1);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i34 := $i48;
    goto $bb13_dummy;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p10);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} $i16 := PTR_ERR($p15);
    call {:si_unique_call 1183} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6809;
}



const vb2_ops_wait_prepare: ref;

axiom vb2_ops_wait_prepare == $sub.ref(0, 563858);

procedure vb2_ops_wait_prepare($p0: ref);
  free requires assertsPassed;



implementation vb2_ops_wait_prepare($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    return;
}



const vb2_ops_wait_finish: ref;

axiom vb2_ops_wait_finish == $sub.ref(0, 564890);

procedure vb2_ops_wait_finish($p0: ref);
  free requires assertsPassed;



implementation vb2_ops_wait_finish($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    return;
}



const fimc_buf_prepare: ref;

axiom fimc_buf_prepare == $sub.ref(0, 565922);

procedure fimc_buf_prepare($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_buf_prepare($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i1;
  var $i25: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $i24: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 928)), $mul.ref(600, 1));
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $p3 := vb2_get_drv_priv($p2);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 928)), $mul.ref(600, 1));
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 848)), $mul.ref(0, 1));
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $p9 := ctx_get_frame($p4, $i8);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $i11 := IS_ERR($p10);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 1188} {:cexpr "tmp___1"} boogie_si_record_i8($i12);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i23 := $sgt.i32($i22, 0);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb8;

  $bb8:
    call $i25, $p27, $i28, $i29, $i30, $p31, $p32, $i33, $i34, $i35, $i24 := fimc_buf_prepare_loop_$bb8($p0, $p9, $p18, $i25, $p27, $i28, $i29, $i30, $p31, $p32, $i33, $i34, $i35, $i24);
    goto $bb8_last;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 152)), $mul.ref(32, 1)), $mul.ref($i25, 4));
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i28);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} vb2_set_plane_payload($p0, $i24, $i29);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i24, 1);
    call {:si_unique_call 1192} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p18);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i35 := $sgt.i32($i34, $i30);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i24 := $i30;
    goto $bb10_dummy;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p9);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $i15 := PTR_ERR($p14);
    call {:si_unique_call 1190} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i15);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6869;
}



const start_streaming: ref;

axiom start_streaming == $sub.ref(0, 566954);

procedure start_streaming($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation start_streaming($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} {:cexpr "start_streaming:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 848)), $mul.ref(48, 1));
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 5568)), $mul.ref(232, 1));
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $i10 := pm_runtime_get_sync($p9);
    call {:si_unique_call 1195} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32(0, $i10);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;
}



const stop_streaming: ref;

axiom stop_streaming == $sub.ref(0, 567986);

procedure stop_streaming($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation stop_streaming($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var vslice_dummy_var_86: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 848)), $mul.ref(48, 1));
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} $i4 := fimc_m2m_shutdown($p3);
    call {:si_unique_call 1197} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, $sub.i32(0, 110));
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(232, 1));
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} vslice_dummy_var_86 := pm_runtime_put($p10);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} fimc_m2m_job_finish($p3, 6);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fimc_buf_queue: ref;

axiom fimc_buf_queue == $sub.ref(0, 569018);

procedure fimc_buf_queue($p0: ref);
  free requires assertsPassed;



implementation fimc_buf_queue($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 928)), $mul.ref(600, 1));
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $p3 := vb2_get_drv_priv($p2);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 880)), $mul.ref(408, 1)), $mul.ref(168, 1));
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} v4l2_m2m_buf_queue($p7, $p0);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_m2m_buf_queue: ref;

axiom v4l2_m2m_buf_queue == $sub.ref(0, 570050);

procedure v4l2_m2m_buf_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation v4l2_m2m_buf_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_put: ref;

axiom pm_runtime_put == $sub.ref(0, 571082);

procedure pm_runtime_put($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pm_runtime_put($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $i1 := __pm_runtime_idle($p0, 5);
    call {:si_unique_call 1203} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __pm_runtime_idle: ref;

axiom __pm_runtime_idle == $sub.ref(0, 572114);

procedure __pm_runtime_idle($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __pm_runtime_idle($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1204} {:cexpr "__pm_runtime_idle:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1205} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1206} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pm_runtime_get_sync: ref;

axiom pm_runtime_get_sync == $sub.ref(0, 573146);

procedure pm_runtime_get_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pm_runtime_get_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} $i1 := __pm_runtime_resume($p0, 4);
    call {:si_unique_call 1208} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __pm_runtime_resume: ref;

axiom __pm_runtime_resume == $sub.ref(0, 574178);

procedure __pm_runtime_resume($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __pm_runtime_resume($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1209} {:cexpr "__pm_runtime_resume:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1210} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1211} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vb2_set_plane_payload: ref;

axiom vb2_set_plane_payload == $sub.ref(0, 575210);

procedure vb2_set_plane_payload($p0: ref, $i1: i32, $i2: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation vb2_set_plane_payload($p0: ref, $i1: i32, $i2: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} {:cexpr "vb2_set_plane_payload:arg:plane_no"} boogie_si_record_i32($i1);
    call {:si_unique_call 1213} {:cexpr "vb2_set_plane_payload:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 928)), $mul.ref(608, 1));
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, $i1);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i1);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 928)), $mul.ref(88, 1)), $mul.ref($i7, 64)), $mul.ref(0, 1));
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i6);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fimc_subdev_enum_mbus_code: ref;

axiom fimc_subdev_enum_mbus_code == $sub.ref(0, 576242);

procedure fimc_subdev_enum_mbus_code($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_subdev_enum_mbus_code($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} $p5 := fimc_find_format($0.ref, $0.ref, 1, $i4);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const fimc_subdev_get_fmt: ref;

axiom fimc_subdev_get_fmt == $sub.ref(0, 577274);

procedure fimc_subdev_get_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_subdev_get_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} $p3 := v4l2_get_subdevdata($p0);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} mutex_lock_nested($p19, 0);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i21, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i21, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2264, 1));
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p18);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p57);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 1227} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p58, $p59, 48, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} mutex_unlock($p60);
    $p61 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, 7);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb10:
    assume $i24 == 1;
    $p26 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    call {:si_unique_call 1220} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i30);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 1222} {:cexpr "tmp___0"} boogie_si_record_i64($i34);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i30, 0);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i36);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 1225} {:cexpr "tmp___1"} boogie_si_record_i64($i39);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    $p46 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    $p48 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    $p49 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    $p51 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i50);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i40 == 1;
    $p41 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    $p45 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i35 == 1;
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} warn_slowpath_null(.str.29, 1517);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2312, 1));
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p18);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p53);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 1219} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p54, $p55, 48, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb6:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i21, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb12;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} $p14 := v4l2_subdev_get_try_format($p0, $p1, $i13);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p14);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 1217} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p16, $p17, 48, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fimc_subdev_set_fmt: ref;

axiom fimc_subdev_set_fmt == $sub.ref(0, 578306);

procedure fimc_subdev_set_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $CurrAddr;



implementation fimc_subdev_set_fmt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i1;
  var $i39: i8;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $i68: i1;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p80: ref;
  var $i81: i32;
  var $p82: ref;
  var $p84: ref;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $i115: i32;
  var $p116: ref;
  var $i117: i32;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $p124: ref;
  var $p125: ref;
  var $i41: i32;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} $p4 := v4l2_get_subdevdata($p0);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p10, .str.2);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p11, .str.105);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p12, .str.29);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p13, .str.106);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.16, $p15);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 1550);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p15, $i18);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p19, 0);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.17, $p20);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1231} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 2);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} mutex_lock_nested($p42, 0);
    $p43 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(0, 1));
    $p44 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(4, 1));
    $p45 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $p48 := fimc_capture_try_format($p9, $p43, $p44, $p45, $0.ref, $i47);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} mutex_unlock($p49);
    $p50 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 7);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p48);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i61 := $eq.i64($i60, 0);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $i62 := $zext.i1.i32($i61);
    call {:si_unique_call 1240} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i62);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i64 := $zext.i1.i32($i63);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i64);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} $i66 := ldv__builtin_expect($i65, 0);
    call {:si_unique_call 1242} {:cexpr "tmp___2"} boogie_si_record_i64($i66);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i62, 0);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i32($i68);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $i71 := ldv__builtin_expect($i70, 0);
    call {:si_unique_call 1245} {:cexpr "tmp___3"} boogie_si_record_i64($i71);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} fimc_alpha_ctrl_update($p9);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p48, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} fimc_capture_mark_jpeg_xfer($p9, $i74);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 2);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i77 == 1);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p87 := $p9;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} mutex_lock_nested($p89, 0);
    $p90 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    $p92 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} set_frame_bounds($p87, $i91, $i93);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 1);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i96 == 1);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 0);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p87, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p106, $p48);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 2);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i109 == 1);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p9, $mul.ref(0, 880)), $mul.ref(392, 1));
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i112 := $and.i32($i111, 2);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 0);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 2);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} mutex_unlock($p125);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb35:
    assume $i120 == 1;
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p9, $mul.ref(0, 880)), $mul.ref(392, 1));
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i123 := $and.i32($i122, $sub.i32(0, 3));
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p9, $mul.ref(0, 880)), $mul.ref(392, 1));
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p124, $i123);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb30;

  $bb30:
    $p114 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    $p116 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p116);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} set_frame_crop($p87, 0, 0, $i115, $i117);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i109 == 1;
    goto $bb30;

  $bb26:
    assume $i102 == 1;
    $p103 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2264, 1));
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p6);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 1251} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p104, $p105, 48, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i96 == 1;
    $p97 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2312, 1));
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p6);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 1250} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p98, $p99, 48, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i77 == 1;
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p9, $mul.ref(0, 880)), $mul.ref(152, 1));
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    $p82 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, $i81);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    $p86 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, $i85);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $p87 := $p78;
    goto $bb22;

  $bb17:
    assume $i72 == 1;
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 22);
    goto $bb8;

  $bb14:
    assume $i67 == 1;
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} warn_slowpath_null(.str.29, 1567);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i53 == 1;
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} $p56 := v4l2_subdev_get_try_format($p0, $p1, $i55);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p56);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p57);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 1239} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p58, $p59, 48, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb8;

  $bb4:
    assume $i36 == 1;
    $p37 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2408, 1));
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} $i38 := vb2_is_busy($p37);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i8($i38);
    call {:si_unique_call 1234} {:cexpr "tmp___1"} boogie_si_record_i8($i39);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i40 == 1;
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 16);
    goto $bb8;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    $p32 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32.i32($p3, .str.106, .str.105, 1550, $i27, $i29, $i31, $i33);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fimc_subdev_get_selection: ref;

axiom fimc_subdev_get_selection == $sub.ref(0, 579338);

procedure fimc_subdev_get_selection($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr;



implementation fimc_subdev_get_selection($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i25: i1;
  var $p26: ref;
  var $p24: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p39: ref;
  var $p40: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i24;
  var $i71: i24;
  var $i72: i24;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $i85: i32;
  var $p86: ref;
  var $i87: i32;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $i14: i32;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $p4 := v4l2_get_subdevdata($p0);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 2);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} mutex_lock_nested($p15, 0);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 256);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i17, 258);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i17, 258);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} mutex_unlock($p45);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(152, 1));
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $p24 := $p26;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    $p29 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p24, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    $p32 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    $p33 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    $p34 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 0);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} mutex_unlock($p35);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb8:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i17, 256);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb12;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} $p43 := v4l2_subdev_get_try_compose($p0, $p1, $i42);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(152, 1));
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $p39, $p40 := $p44, $p43;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i48 == 1);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p39, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    $p54 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p39, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    $p57 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p39, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    $p60 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p39, $mul.ref(0, 152)), $mul.ref(28, 1));
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    $p63 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p64, .str.2);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p65, .str.101);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p66, .str.29);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p67, .str.102);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i70 := $load.i24($M.16, $p69);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i71 := $and.i24($i70, $sub.i24(0, 262144));
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i72 := $or.i24($i71, 1653);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p69, $i72);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p73, 0);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.17, $p74);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i64($i75);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i77 := $and.i64($i76, 1);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} $i78 := ldv__builtin_expect($i77, 0);
    call {:si_unique_call 1263} {:cexpr "tmp___0"} boogie_si_record_i64($i78);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} mutex_unlock($p94);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb27:
    assume $i79 == 1;
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    $p82 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    $p84 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    $p86 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    $p88 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p39, $mul.ref(0, 152)), $mul.ref(0, 1));
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p39, $mul.ref(0, 152)), $mul.ref(4, 1));
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32($p3, .str.102, .str.101, 1653, $i81, $i83, $i85, $i87, $i89, $i91, $i93);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i48 == 1;
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p40);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 1261} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p50, $p51, 16, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb6:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i17, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i17, 2);
    assume {:verifier.code 0} true;
    $p24 := $p8;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb12;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb18;

  $bb15:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i17, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb12;

  $bb20:
    assume $i25 == 1;
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} $p38 := v4l2_subdev_get_try_crop($p0, $p1, $i37);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $p39, $p40 := $p8, $p38;
    goto $bb22;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;
}



const fimc_subdev_set_selection: ref;

axiom fimc_subdev_set_selection == $sub.ref(0, 580370);

procedure fimc_subdev_set_selection($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr;



implementation fimc_subdev_set_selection($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p24: ref;
  var $p25: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i24;
  var $i64: i24;
  var $i65: i24;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $i14: i32;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $p4 := v4l2_get_subdevdata($p0);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 2);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} mutex_lock_nested($p15, 0);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} fimc_capture_try_selection($p8, $p10, 0);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 256);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i17, 256);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} mutex_unlock($p30);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} $p28 := v4l2_subdev_get_try_compose($p0, $p1, $i27);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(152, 1));
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $p24, $p25 := $p29, $p28;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i33 == 1);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $p38 := spinlock_check($p37);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $i39 := _raw_spin_lock_irqsave($p38);
    call {:si_unique_call 1276} {:cexpr "flags"} boogie_si_record_i64($i39);
    $p40 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    $p42 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    $p44 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    $p46 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} set_frame_crop($p24, $i41, $i43, $i45, $i47);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} set_bit(12, $p48);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 256);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} spin_unlock_irqrestore($p56, $i39);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p57, .str.2);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p58, .str.103);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p59, .str.29);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p60, .str.104);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $i63 := $load.i24($M.16, $p62);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $i64 := $and.i24($i63, $sub.i24(0, 262144));
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $i65 := $or.i24($i64, 1701);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p62, $i65);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p66, 0);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.17, $p67);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i64($i68);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i70 := $and.i64($i69, 1);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} $i71 := ldv__builtin_expect($i70, 0);
    call {:si_unique_call 1280} {:cexpr "tmp___1"} boogie_si_record_i64($i71);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} mutex_unlock($p83);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb21:
    assume $i72 == 1;
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    $p75 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    $p77 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    $p79 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    $p81 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32.i32.i32($p3, .str.104, .str.103, 1701, $i74, $i76, $i78, $i80, $i82);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i51 == 1;
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(392, 1));
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i54 := $or.i32($i53, 2);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(392, 1));
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i54);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i33 == 1;
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p25);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p34);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.0;
    cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 1273} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p35, $p36, 16, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_32;
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb6:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i17, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb10;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} $p23 := v4l2_subdev_get_try_crop($p0, $p1, $i22);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $p24, $p25 := $p8, $p23;
    goto $bb13;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;
}



const v4l2_get_subdevdata: ref;

axiom v4l2_get_subdevdata == $sub.ref(0, 581402);

procedure v4l2_get_subdevdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_get_subdevdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(224, 1));
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fimc_capture_try_selection: ref;

axiom fimc_capture_try_selection == $sub.ref(0, 582434);

procedure fimc_capture_try_selection($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr;



implementation fimc_capture_try_selection($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i7: i1;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $i73: i16;
  var $i74: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $p80: ref;
  var $i81: i16;
  var $i82: i32;
  var $i79: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i32;
  var $p87: ref;
  var $i88: i32;
  var $i86: i32;
  var $i89: i1;
  var $i90: i32;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i32;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $p112: ref;
  var $i113: i32;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $p119: ref;
  var $i120: i32;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $p126: ref;
  var $p127: ref;
  var $i128: i32;
  var $i129: i1;
  var $i130: i32;
  var $p131: ref;
  var $i132: i32;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $i137: i32;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $p141: ref;
  var $i142: i16;
  var $i143: i32;
  var $i144: i32;
  var $i145: i32;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i24;
  var $i154: i24;
  var $i155: i24;
  var $p156: ref;
  var $p157: ref;
  var $i158: i8;
  var $i159: i64;
  var $i160: i64;
  var $i161: i64;
  var $i162: i1;
  var $p163: ref;
  var $i164: i32;
  var $p165: ref;
  var $i166: i32;
  var $p167: ref;
  var $i168: i32;
  var $p169: ref;
  var $i170: i32;
  var $p171: ref;
  var $i172: i32;
  var $p173: ref;
  var $i174: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1285} {:cexpr "fimc_capture_try_selection:arg:target"} boogie_si_record_i32($i2);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(380, 1));
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 90);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(380, 1));
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 270);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $i7 := $i10;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i7);
    call {:si_unique_call 1286} {:cexpr "rotate"} boogie_si_record_i8($i11);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 5568)), $mul.ref(256, 1));
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 384);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i2, 256);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i34 == 1);
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} $i68 := fimc_get_format_depth($p67);
    call {:si_unique_call 1288} {:cexpr "tmp___2"} boogie_si_record_i32($i68);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i68, 7);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, $sub.i32(0, 8));
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i71 := $udiv.i32(64, $i70);
    call {:si_unique_call 1289} {:cexpr "align_sz"} boogie_si_record_i32($i71);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.0, $p72);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    call {:si_unique_call 1290} {:cexpr "min_sz"} boogie_si_record_i32($i74);
    assume {:verifier.code 0} true;
    $i59, $i60, $i61, $i62, $i63, $i64, $i65 := $i74, $i74, $i74, $i71, 4, 1, 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i8.i1($i11);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i75 == 1);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p17, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $i81 := $load.i16($M.0, $p80);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i79 := $i82;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i8.i1($i11);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i83 == 1);
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $i86 := $i88;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $i89 := $ult.i32($i79, $i86);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i89 == 1);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $i90 := $i86;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    call {:si_unique_call 1298} {:cexpr "__min2___0"} boogie_si_record_i32($i92);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $i93 := $ult.i32(8192, $i92);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i93 == 1);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i94 := $i92;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i2, 256);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i109, $i110 := $i59, $i60;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $i111 := ffs($i61);
    call {:si_unique_call 1302} {:cexpr "tmp___3"} boogie_si_record_i32($i111);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i111, $sub.i32(0, 1));
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} v4l_bound_align_image($p112, $i109, $i90, $i113, $p114, $i110, $i94, $i63, $i62);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    call {:si_unique_call 1304} {:cexpr "__max1"} boogie_si_record_i32($i116);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $i117 := $ugt.i32($i116, 0);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i117 == 1);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $i118 := 0;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $i123 := $sub.i32($i120, $i122);
    call {:si_unique_call 1305} {:cexpr "__min2___3"} boogie_si_record_i32($i123);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $i124 := $ult.i32($i118, $i123);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i124 == 1);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $i125 := $i123;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p126, $i125);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.0, $p127);
    call {:si_unique_call 1306} {:cexpr "__max1___0"} boogie_si_record_i32($i128);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $i129 := $ugt.i32($i128, 0);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i129 == 1);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $i130 := 0;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $i135 := $sub.i32($i132, $i134);
    call {:si_unique_call 1307} {:cexpr "__min2___4"} boogie_si_record_i32($i135);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i136 := $ult.i32($i130, $i135);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i136 == 1);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i137 := $i135;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p138, $i137);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.0, $p139);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i142 := $load.i16($M.0, $p141);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $i143 := $zext.i16.i32($i142);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $i144 := $sub.i32(0, $i143);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $i145 := $and.i32($i140, $i144);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p146, $i145);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p147, .str.2);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p148, .str.98);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p149, .str.29);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p150, .str.99);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p151);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $i153 := $load.i24($M.16, $p152);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $i154 := $and.i24($i153, $sub.i24(0, 262144));
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i155 := $or.i24($i154, 725);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p152, $i155);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p156, 0);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $i158 := $load.i8($M.17, $p157);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $i159 := $zext.i8.i64($i158);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $i160 := $and.i64($i159, 1);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $i161 := ldv__builtin_expect($i160, 0);
    call {:si_unique_call 1309} {:cexpr "tmp___4"} boogie_si_record_i64($i161);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $i162 := $ne.i64($i161, 0);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb59:
    assume $i162 == 1;
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.0, $p165);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $i168 := $load.i32($M.0, $p167);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.0, $p169);
    $p171 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.0, $p171);
    $p173 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.0, $p173);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32.i32($p3, .str.99, .str.98, 725, $i2, $i164, $i166, $i168, $i170, $i172, $i174);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb56:
    assume $i136 == 1;
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i137 := $i130;
    goto $bb58;

  $bb53:
    assume $i129 == 1;
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $i130 := $i128;
    goto $bb55;

  $bb50:
    assume $i124 == 1;
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $i125 := $i118;
    goto $bb52;

  $bb47:
    assume $i117 == 1;
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $i118 := $i116;
    goto $bb49;

  $bb35:
    assume $i95 == 1;
    $p96 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $i98 := $udiv.i32($i97, $i64);
    call {:si_unique_call 1299} {:cexpr "__min2___1"} boogie_si_record_i32($i98);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i99 := $ult.i32($i90, $i98);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i99 == 1);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $i100 := $i98;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $i103 := $udiv.i32($i102, $i65);
    call {:si_unique_call 1300} {:cexpr "__min2___2"} boogie_si_record_i32($i103);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $i104 := $ult.i32($i94, $i103);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i104 == 1);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $i105 := $i103;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i8.i1($i11);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    $i107, $i108 := $i100, $i105;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $i109, $i110 := $i107, $i108;
    goto $bb46;

  $bb43:
    assume $i106 == 1;
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $i107, $i108 := $i105, $i100;
    goto $bb45;

  $bb40:
    assume $i104 == 1;
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $i105 := $i94;
    goto $bb42;

  $bb37:
    assume $i99 == 1;
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $i100 := $i90;
    goto $bb39;

  $bb32:
    assume $i93 == 1;
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $i94 := 8192;
    goto $bb34;

  $bb29:
    assume $i89 == 1;
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $i90 := $i79;
    goto $bb31;

  $bb26:
    assume $i83 == 1;
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $i86 := $i85;
    goto $bb28;

  $bb23:
    assume $i75 == 1;
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p17, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.0, $p76);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i79 := $i78;
    goto $bb25;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(380, 1));
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 90);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i41 := 4;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $i44 := ffs($i43);
    call {:si_unique_call 1292} {:cexpr "tmp___0"} boogie_si_record_i32($i44);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, $sub.i32(0, 3));
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $i46 := $shl.i32(1, $i45);
    call {:si_unique_call 1293} {:cexpr "_min2"} boogie_si_record_i32($i46);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32(64, $i46);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i47 == 1);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $i48 := $i46;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} $i51 := ffs($i50);
    call {:si_unique_call 1295} {:cexpr "tmp___1"} boogie_si_record_i32($i51);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, $sub.i32(0, 1));
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i53 := $shl.i32(1, $i52);
    call {:si_unique_call 1296} {:cexpr "_min2___0"} boogie_si_record_i32($i53);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32(64, $i53);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i54 == 1);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i55 := $i53;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.0, $p56);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    call {:si_unique_call 1297} {:cexpr "min_sz"} boogie_si_record_i32($i58);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i59, $i60, $i61, $i62, $i63, $i64, $i65 := 0, 0, $i58, 0, $i41, $i48, $i55;
    goto $bb22;

  $bb19:
    assume $i54 == 1;
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i55 := 64;
    goto $bb21;

  $bb16:
    assume $i47 == 1;
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $i48 := 64;
    goto $bb18;

  $bb10:
    assume $i37 == 1;
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(380, 1));
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 270);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb12;

  $bb13:
    assume $i40 == 1;
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i41 := 1;
    goto $bb15;

  $bb4:
    assume $i25 == 1;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 0);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const v4l2_subdev_get_try_crop: ref;

axiom v4l2_subdev_get_try_crop == $sub.ref(0, 583466);

procedure v4l2_subdev_get_try_crop($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_subdev_get_try_crop($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i64;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} {:cexpr "v4l2_subdev_get_try_crop:arg:pad"} boogie_si_record_i32($i2);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(60, 1));
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i7 := $ule.i32($i6, $i2);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1313} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i2);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref($i12, 80)), $mul.ref(48, 1));
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 1314} devirtbounce.10(0, .str.100, 650, 12);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call v4l2_subdev_get_try_crop_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const v4l2_subdev_get_try_compose: ref;

axiom v4l2_subdev_get_try_compose == $sub.ref(0, 584498);

procedure v4l2_subdev_get_try_compose($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_subdev_get_try_compose($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i64;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} {:cexpr "v4l2_subdev_get_try_compose:arg:pad"} boogie_si_record_i32($i2);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(60, 1));
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $i7 := $ule.i32($i6, $i2);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1317} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i2);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref($i12, 80)), $mul.ref(64, 1));
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 1318} devirtbounce.10(0, .str.100, 651, 12);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call v4l2_subdev_get_try_compose_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const set_frame_crop: ref;

axiom set_frame_crop == $sub.ref(0, 585530);

procedure set_frame_crop($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation set_frame_crop($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} {:cexpr "set_frame_crop:arg:left"} boogie_si_record_i32($i1);
    call {:si_unique_call 1320} {:cexpr "set_frame_crop:arg:top"} boogie_si_record_i32($i2);
    call {:si_unique_call 1321} {:cexpr "set_frame_crop:arg:width"} boogie_si_record_i32($i3);
    call {:si_unique_call 1322} {:cexpr "set_frame_crop:arg:height"} boogie_si_record_i32($i4);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i1);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i2);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i3);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(28, 1));
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i4);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    return;
}



const fimc_get_format_depth: ref;

axiom fimc_get_format_depth == $sub.ref(0, 586562);

procedure fimc_get_format_depth($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fimc_get_format_depth($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $i10: i64;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $i8: i32;
  var $i9: i32;
  var $i20: i32;
  var $i7: i32;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i5, 0);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $i7;
    goto $bb11;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $i8, $i9 := 0, 0;
    goto $bb6;

  $bb6:
    call $i10, $p12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i8, $i9, $i20 := fimc_get_format_depth_loop_$bb6($p0, $p3, $i10, $p12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i8, $i9, $i20);
    goto $bb6_last;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(29, 1)), $mul.ref($i10, 1));
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, $i8);
    call {:si_unique_call 1323} {:cexpr "depth"} boogie_si_record_i32($i15);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i9, 1);
    call {:si_unique_call 1324} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p3);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i32($i18, $i16);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $i20 := $i15;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $i7 := $i20;
    goto $bb5;

  $bb8:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i8, $i9 := $i15, $i16;
    goto $bb8_dummy;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7730;
}



const fimc_capture_try_format: ref;

axiom fimc_capture_try_format == $sub.ref(0, 587594);

procedure fimc_capture_try_format($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $i5: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr;



implementation fimc_capture_try_format($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $i5: i32) returns ($r: ref)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i10: i1;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i64;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $i60: i1;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $p83: ref;
  var $i84: i16;
  var $i85: i32;
  var $i82: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $p102: ref;
  var $i103: i32;
  var $p105: ref;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $i109: i16;
  var $i110: i32;
  var $p112: ref;
  var $i113: i16;
  var $i114: i32;
  var $i111: i32;
  var $p115: ref;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i120: i32;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $p124: ref;
  var $i125: i32;
  var $p126: ref;
  var $i127: i32;
  var $i128: i32;
  var $p131: ref;
  var $i132: i16;
  var $i133: i32;
  var $p134: ref;
  var $i135: i16;
  var $i136: i32;
  var $i129: i32;
  var $i130: i32;
  var $p137: ref;
  var $i138: i16;
  var $i139: i32;
  var $i140: i1;
  var $i141: i1;
  var $p142: ref;
  var $i143: i32;
  var $i144: i32;
  var $i145: i1;
  var $i146: i32;
  var $i147: i32;
  var $i148: i32;
  var $p149: ref;
  var $i150: i16;
  var $i151: i32;
  var $i152: i32;
  var $i153: i32;
  var $i154: i32;
  var $i155: i32;
  var $i156: i32;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i24;
  var $i164: i24;
  var $i165: i24;
  var $p166: ref;
  var $p167: ref;
  var $i168: i8;
  var $i169: i64;
  var $i170: i64;
  var $i171: i64;
  var $i172: i1;
  var $i173: i64;
  var $i174: i1;
  var $i175: i32;
  var $i176: i32;
  var $i177: i32;
  var $i178: i32;
  var $p179: ref;
  var $i180: i32;
  var $p181: ref;
  var $i182: i32;
  var $p65: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1326} {:cexpr "fimc_capture_try_format:arg:pad"} boogie_si_record_i32($i5);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(380, 1));
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 90);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $i10 := 1;
    assume {:branchcond $i9} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(380, 1));
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 270);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $i10 := $i13;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i10);
    call {:si_unique_call 1327} {:cexpr "rotation"} boogie_si_record_i8($i14);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 5568)), $mul.ref(256, 1));
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p3);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p4);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i48 := 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i5, 1);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $i48;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $p51 := fimc_find_format($p4, $p3, $i50, 0);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i32($i53);
    call {:si_unique_call 1330} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i54);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i32($i55);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i56);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} $i58 := ldv__builtin_expect($i57, 0);
    call {:si_unique_call 1332} {:cexpr "tmp"} boogie_si_record_i64($i58);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i54, 0);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i32($i60);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} $i63 := ldv__builtin_expect($i62, 0);
    call {:si_unique_call 1335} {:cexpr "tmp___0"} boogie_si_record_i64($i63);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p3);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p4);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i5, 2);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p51, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, 384);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i8.i1($i14);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i107 == 1);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p20, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $i113 := $load.i16($M.0, $p112);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $i114 := $zext.i16.i32($i113);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i111 := $i114;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(392, 1));
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $i117 := $and.i32($i116, 2);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i118 == 1);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $i132 := $load.i16($M.0, $p131);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $i133 := $zext.i16.i32($i132);
    call {:si_unique_call 1341} {:cexpr "min_w"} boogie_si_record_i32($i133);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i135 := $load.i16($M.0, $p134);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $i136 := $zext.i16.i32($i135);
    call {:si_unique_call 1342} {:cexpr "min_h"} boogie_si_record_i32($i136);
    assume {:verifier.code 0} true;
    $i129, $i130 := $i133, $i136;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(22, 1));
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $i138 := $load.i16($M.0, $p137);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $i139 := $zext.i16.i32($i138);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 1);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i140 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i147 := 3;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} $i148 := fimc_get_format_depth($p51);
    call {:si_unique_call 1345} {:cexpr "depth"} boogie_si_record_i32($i148);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $i150 := $load.i16($M.0, $p149);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $i151 := $zext.i16.i32($i150);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} $i152 := ffs($i151);
    call {:si_unique_call 1347} {:cexpr "tmp___1"} boogie_si_record_i32($i152);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i153 := $add.i32($i152, $sub.i32(0, 1));
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $i154 := $add.i32($i148, 7);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $i155 := $and.i32($i154, $sub.i32(0, 8));
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $i156 := $udiv.i32(64, $i155);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} v4l_bound_align_image($p1, $i129, $i111, $i153, $p2, $i130, 8192, $i147, $i156);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p157, .str.2);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p158, .str.95);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p159, .str.29);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p160, .str.96);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p161);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $i163 := $load.i24($M.16, $p162);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $i164 := $and.i24($i163, $sub.i24(0, 262144));
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $i165 := $or.i24($i164, 655);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p162, $i165);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p166, 0);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $i168 := $load.i8($M.17, $p167);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $i169 := $zext.i8.i64($i168);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $i170 := $and.i64($i169, 1);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} $i171 := ldv__builtin_expect($i170, 0);
    call {:si_unique_call 1350} {:cexpr "tmp___2"} boogie_si_record_i64($i171);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $i172 := $ne.i64($i171, 0);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p65 := $p51;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $r := $p65;
    return;

  $bb65:
    assume $i172 == 1;
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $i173 := $p2i.ref.i64($p3);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $i174 := $ne.i64($i173, 0);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i174 == 1);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i176 := 0;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $p1);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $i178 := $load.i32($M.0, $p2);
    $p179 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(0, 1));
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.0, $p179);
    $p181 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(4, 1));
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.0, $p181);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32($p6, .str.96, .str.95, 655, $i5, $i176, $i177, $i178, $i180, $i182);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb67:
    assume $i174 == 1;
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.0, $p3);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $i176 := $i175;
    goto $bb69;

  $bb59:
    assume $i140 == 1;
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i8.i1($i14);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i141 == 1);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p51, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.0, $p142);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $i144 := $and.i32($i143, 16);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 0);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $i146 := $zext.i1.i32($i145);
    call {:si_unique_call 1343} {:cexpr "align_h"} boogie_si_record_i32($i146);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $i147 := $i146;
    goto $bb64;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i141 == 1;
    goto $bb61;

  $bb56:
    assume $i118 == 1;
    $p119 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(16, 1));
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(24, 1));
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i123 := $add.i32($i120, $i122);
    call {:si_unique_call 1339} {:cexpr "min_w"} boogie_si_record_i32($i123);
    $p124 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(20, 1));
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    $p126 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(28, 1));
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.0, $p126);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $i128 := $add.i32($i125, $i127);
    call {:si_unique_call 1340} {:cexpr "min_h"} boogie_si_record_i32($i128);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $i129, $i130 := $i123, $i128;
    goto $bb58;

  $bb53:
    assume $i107 == 1;
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p20, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i109 := $load.i16($M.0, $p108);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i109);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $i111 := $i110;
    goto $bb55;

  $bb50:
    assume $i100 == 1;
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i103);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i106);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $p65 := $p51;
    goto $bb30;

  $bb38:
    assume $i74 == 1;
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p51, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 384);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i78 == 1);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p20, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $i84 := $load.i16($M.0, $p83);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i84);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $i82 := $i85;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p2);
    call {:si_unique_call 1336} {:cexpr "__max1"} boogie_si_record_i32($i86);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p1);
    call {:si_unique_call 1337} {:cexpr "__max1___0"} boogie_si_record_i32($i87);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $i88 := $ugt.i32($i87, 32);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i88 == 1);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i89 := 32;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $i90 := $ugt.i32($i86, 32);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i90 == 1);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $i91 := 32;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p51, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i93, 384);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $i96 := (if $i95 == 1 then 3 else 1);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} v4l_bound_align_image($p1, $i89, $i82, 4, $p2, $i91, 8192, $i96, 0);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $p65 := $p51;
    goto $bb30;

  $bb46:
    assume $i90 == 1;
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $i91 := $i86;
    goto $bb48;

  $bb43:
    assume $i88 == 1;
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $i89 := $i87;
    goto $bb45;

  $bb40:
    assume $i78 == 1;
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p20, $mul.ref(0, 12)), $mul.ref(2, 1));
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $i80 := $load.i16($M.0, $p79);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $i82 := $i81;
    goto $bb42;

  $bb35:
    assume $i71 == 1;
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p51, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i73);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i67 == 1;
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p51, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i69);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb28:
    assume $i64 == 1;
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $p65 := $0.ref;
    goto $bb30;

  $bb25:
    assume $i59 == 1;
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} warn_slowpath_null(.str.29, 608);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i49 == 1;
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i50 := 32;
    goto $bb24;

  $bb14:
    assume $i43 == 1;
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p4);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 1195724874);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb16;

  $bb17:
    assume $i45 == 1;
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i5, 2);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb16;

  $bb19:
    assume $i46 == 1;
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $i47 := $or.i32(1, 6);
    call {:si_unique_call 1328} {:cexpr "mask"} boogie_si_record_i32($i47);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $i48 := $i47;
    goto $bb21;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb6;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i5, 2);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb6;

  $bb9:
    assume $i29 == 1;
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 384);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb6;

  $bb11:
    assume $i36 == 1;
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i41);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;
}



const v4l2_subdev_get_try_format: ref;

axiom v4l2_subdev_get_try_format == $sub.ref(0, 588626);

procedure v4l2_subdev_get_try_format($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_subdev_get_try_format($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i64;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} {:cexpr "v4l2_subdev_get_try_format:arg:pad"} boogie_si_record_i32($i2);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(60, 1));
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $i7 := $ule.i32($i6, $i2);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1354} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i2);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref($i12, 80)), $mul.ref(0, 1));
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 1355} devirtbounce.10(0, .str.100, 649, 12);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call v4l2_subdev_get_try_format_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 589658);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    return;
}



const fimc_capture_mark_jpeg_xfer: ref;

axiom fimc_capture_mark_jpeg_xfer == $sub.ref(0, 590690);

procedure fimc_capture_mark_jpeg_xfer($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_capture_mark_jpeg_xfer($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i8;
  var $i13: i8;
  var $i14: i8;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} {:cexpr "fimc_capture_mark_jpeg_xfer:arg:color"} boogie_si_record_i32($i1);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 384);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1358} {:cexpr "jpeg"} boogie_si_record_i8($i4);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(328, 1));
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $i12 := $and.i8($i8, 1);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i13 := $shl.i8($i12, 3);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $i14 := $and.i8($i11, $sub.i8(0, 9));
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $i15 := $or.i8($i14, $i13);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $i15);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i4);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i19 := $xor.i1($i18, 1);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} fimc_ctrls_activate($p0, $i19);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i4);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} clear_bit(13, $p26);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} set_bit(13, $p23);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const set_frame_bounds: ref;

axiom set_frame_bounds == $sub.ref(0, 591722);

procedure set_frame_bounds($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation set_frame_bounds($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} {:cexpr "set_frame_bounds:arg:width"} boogie_si_record_i32($i1);
    call {:si_unique_call 1363} {:cexpr "set_frame_bounds:arg:height"} boogie_si_record_i32($i2);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i1);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i2);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(0, 1));
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i1);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 152)), $mul.ref(4, 1));
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i2);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    return;
}



const fimc_ctrls_activate: ref;

axiom fimc_ctrls_activate == $sub.ref(0, 592754);

procedure fimc_ctrls_activate($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_ctrls_activate($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i1;
  var $i38: i1;
  var $i37: i1;
  var $i39: i1;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $i45: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i8;
  var $p57: ref;
  var $i58: i8;
  var $i59: i8;
  var $i60: i8;
  var $i61: i8;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i8;
  var $p67: ref;
  var $i68: i8;
  var $i69: i8;
  var $i70: i8;
  var $i71: i8;
  var $i72: i8;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i8;
  var $p79: ref;
  var $i80: i8;
  var $i81: i8;
  var $p83: ref;
  var $p84: ref;
  var vslice_dummy_var_87: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1364} {:cexpr "fimc_ctrls_activate:arg:active"} boogie_si_record_i1($i1);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(34, 1));
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 8);
    call {:si_unique_call 1365} {:cexpr "has_alpha"} boogie_si_record_i32($i9);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(288, 1));
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(0, 1)), $mul.ref(160, 1));
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} mutex_lock_nested($p16, 0);
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(256, 1));
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i2);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} v4l2_ctrl_activate($p18, $i19);
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(264, 1));
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i2);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} v4l2_ctrl_activate($p21, $i22);
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(272, 1));
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i2);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} v4l2_ctrl_activate($p24, $i25);
    $p27 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(240, 1)), $mul.ref(0, 1));
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i2);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} v4l2_ctrl_activate($p28, $i29);
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(280, 1));
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i2);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i39 == 1);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(372, 1)), $mul.ref(0, 1));
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, 0);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(380, 1));
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, 0);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(384, 1));
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $i78 := $and.i8($i77, $sub.i8(0, 2));
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, $i78);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(384, 1));
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.0, $p79);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $i81 := $and.i8($i80, $sub.i8(0, 3));
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p79, $i81);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    $p83 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(0, 1)), $mul.ref(160, 1));
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} mutex_unlock($p84);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume $i39 == 1;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(240, 1)), $mul.ref(0, 1));
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 208)), $mul.ref(188, 1)), $mul.ref(0, 1));
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} vslice_dummy_var_87 := fimc_set_color_effect($p0, $i45);
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(256, 1));
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 208)), $mul.ref(184, 1));
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(380, 1));
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i50);
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(264, 1));
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 208)), $mul.ref(184, 1));
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(384, 1));
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $i59 := $and.i8($i56, 1);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $i60 := $and.i8($i58, $sub.i8(0, 2));
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i61 := $or.i8($i60, $i59);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, $i61);
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(272, 1));
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 208)), $mul.ref(184, 1));
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(384, 1));
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $i69 := $and.i8($i66, 1);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $i70 := $shl.i8($i69, 1);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $i71 := $and.i8($i68, $sub.i8(0, 3));
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $i72 := $or.i8($i71, $i70);
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, $i72);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i33 == 1;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(280, 1));
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i2);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $i37 := 0;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} v4l2_ctrl_activate($p35, $i37);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i9, 0);
    assume {:verifier.code 0} true;
    $i37 := $i38;
    goto $bb9;
}



const v4l2_ctrl_activate: ref;

axiom v4l2_ctrl_activate == $sub.ref(0, 593786);

procedure v4l2_ctrl_activate($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation v4l2_ctrl_activate($p0: ref, $i1: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} {:cexpr "v4l2_ctrl_activate:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    return;
}



const fimc_link_setup: ref;

axiom fimc_link_setup == $sub.ref(0, 594818);

procedure fimc_link_setup($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $CurrAddr;



implementation fimc_link_setup($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i24;
  var $i34: i24;
  var $i35: i24;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i1;
  var $p67: ref;
  var $i68: i8;
  var $i69: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1376} {:cexpr "fimc_link_setup:arg:flags"} boogie_si_record_i32($i3);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} $p6 := v4l2_get_subdevdata($p5);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} $i11 := media_entity_type($p10);
    call {:si_unique_call 1379} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 131072);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p7);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    call {:si_unique_call 1380} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i16);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 1382} {:cexpr "tmp___1"} boogie_si_record_i64($i20);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i16, 0);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 1385} {:cexpr "tmp___2"} boogie_si_record_i64($i25);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p27, .str.2);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p28, .str.107);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p29, .str.29);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p30, .str.108);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i33 := $load.i24($M.16, $p32);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i34 := $and.i24($i33, $sub.i24(0, 262144));
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $i35 := $or.i24($i34, 1408);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p32, $i35);
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p36, 0);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.17, $p37);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i64($i38);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 1);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 1387} {:cexpr "tmp___3"} boogie_si_record_i64($i41);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i3, 1);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    $p58 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3280, 1));
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 304)), $mul.ref(216, 1));
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    $p63 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3280, 1));
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    $p64 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3284, 1));
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i8.i1($i65);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i66 == 1);
    $p67 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3285, 1));
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.0, $p67);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i8.i1($i68);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    $p71 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $p72 := fimc_find_remote_sensor($p71);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i74 := $eq.i64($i73, 0);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    $p75 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p76, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(0, 1));
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p72, $mul.ref(0, 304)), $mul.ref(176, 1));
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} $i81 := v4l2_ctrl_add_handler($p78, $p80, $0.ref);
    call {:si_unique_call 1391} {:cexpr "tmp___4"} boogie_si_record_i32($i81);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $i13 := $i81;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb26:
    assume $i74 == 1;
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i69 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb21;

  $bb17:
    assume $i60 == 1;
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 16);
    goto $bb3;

  $bb14:
    assume $i55 == 1;
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3280, 1));
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, 0);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb11:
    assume $i42 == 1;
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 120)), $mul.ref(32, 1));
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 120)), $mul.ref(32, 1));
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3280, 1));
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} __dynamic_pr_debug.ref.ref.ref.i32.ref.ref.i32.i32($p4, .str.108, .str.107, 1408, $p46, $p50, $i3, $i53);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} warn_slowpath_null(.str.29, 1403);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb3;
}



const media_entity_type: ref;

axiom media_entity_type == $sub.ref(0, 595850);

procedure media_entity_type($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation media_entity_type($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(40, 1));
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 16711680);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const fimc_find_remote_sensor: ref;

axiom fimc_find_remote_sensor == $sub.ref(0, 596882);

procedure fimc_find_remote_sensor($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fimc_find_remote_sensor($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $p1 := external_alloc();
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const v4l2_ctrl_add_handler: ref;

axiom v4l2_ctrl_add_handler == $sub.ref(0, 597914);

procedure v4l2_ctrl_add_handler($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_ctrl_add_handler($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1393} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1394} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const fimc_capture_subdev_registered: ref;

axiom fimc_capture_subdev_registered == $sub.ref(0, 598946);

procedure fimc_capture_subdev_registered($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fimc_capture_subdev_registered($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p21: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $p1 := v4l2_get_subdevdata($p0);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(152, 1));
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $i8 := fimc_register_m2m_device($p2, $p7);
    call {:si_unique_call 1397} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $p10 := v4l2_get_subdev_hostdata($p0);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p10);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(152, 1));
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $i17 := fimc_register_capture_device($p2, $p16);
    call {:si_unique_call 1400} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i5 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} fimc_unregister_m2m_device($p2);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $0.ref);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $i5 := $i8;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 6);
    goto $bb3;
}



const fimc_capture_subdev_unregistered: ref;

axiom fimc_capture_subdev_unregistered == $sub.ref(0, 599978);

procedure fimc_capture_subdev_unregistered($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_capture_subdev_unregistered($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $p1 := v4l2_get_subdevdata($p0);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} mutex_lock_nested($p5, 0);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} fimc_unregister_m2m_device($p2);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1));
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $i9 := video_is_registered($p8);
    call {:si_unique_call 1406} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} kfree($p21);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $0.ref);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} mutex_unlock($p24);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} video_unregister_device($p8);
    $p11 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} media_entity_cleanup($p11);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} fimc_ctrls_delete($p14);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $0.ref);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fimc_unregister_m2m_device: ref;

axiom fimc_unregister_m2m_device == $sub.ref(0, 601010);

procedure fimc_unregister_m2m_device($p0: ref);
  free requires assertsPassed;



implementation fimc_unregister_m2m_device($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(1840, 1));
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(0, 1));
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} $i13 := video_is_registered($p12);
    call {:si_unique_call 1414} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(0, 1));
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} video_unregister_device($p16);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} media_entity_cleanup($p19);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(1840, 1));
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} v4l2_m2m_release($p10);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const video_is_registered: ref;

axiom video_is_registered == $sub.ref(0, 602042);

procedure video_is_registered($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation video_is_registered($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1840)), $mul.ref(1648, 1));
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 1418} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const video_unregister_device: ref;

axiom video_unregister_device == $sub.ref(0, 603074);

procedure video_unregister_device($p0: ref);
  free requires assertsPassed;



implementation video_unregister_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_m2m_release: ref;

axiom v4l2_m2m_release == $sub.ref(0, 604106);

procedure v4l2_m2m_release($p0: ref);
  free requires assertsPassed;



implementation v4l2_m2m_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    return;
}



const fimc_register_m2m_device: ref;

axiom fimc_register_m2m_device == $sub.ref(0, 605138);

procedure fimc_register_m2m_device($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_register_m2m_device($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $i28: i8;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $i43: i32;
  var $p54: ref;
  var $p55: ref;
  var $i39: i32;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(0, 1));
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(392, 1));
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p1);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 1419} cmdloc_dummy_var_34 := $memset.i8(cmdloc_dummy_var_33, $p5, 0, 1832, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_34;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(0, 1)), $mul.ref(120, 1));
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, fimc_m2m_fops);
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(0, 1)), $mul.ref(1776, 1));
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, fimc_m2m_ioctl_ops);
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(0, 1)), $mul.ref(1560, 1));
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(0, 1)), $mul.ref(1640, 1));
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $sub.i32(0, 1));
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(0, 1)), $mul.ref(1768, 1));
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, video_device_release_empty);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(72, 1));
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(0, 1)), $mul.ref(1832, 1));
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p11);
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(0, 1)), $mul.ref(1636, 1));
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 2);
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(0, 1)), $mul.ref(1600, 1));
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(272, 1));
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} vslice_dummy_var_88 := snprintf.ref.i64.ref.i32($p15, 32, .str.25, $i17);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p0);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} video_set_drvdata($p3, $p19);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $p20 := v4l2_m2m_init(m2m_ops);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(1840, 1));
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p20);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(1840, 1));
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $i27 := IS_ERR($p26);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i8($i27);
    call {:si_unique_call 1424} {:cexpr "tmp___0"} boogie_si_record_i8($i28);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i28);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p40 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $i41 := media_entity_init($p40, 0, $0.ref, 0);
    call {:si_unique_call 1429} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} $i44 := video_register_device($p3, 0, $sub.i32(0, 1));
    call {:si_unique_call 1432} {:cexpr "ret"} boogie_si_record_i32($i44);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} $p46 := video_device_node_name($p3);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    $p49 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(0, 1)), $mul.ref(1600, 1));
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} vslice_dummy_var_90 := printk.ref.ref.ref.ref(.str.27, $p48, $p50, $p46);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb9:
    assume $i45 == 1;
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    $p52 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} media_entity_cleanup($p52);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $i43 := $i44;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(1840, 1));
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} v4l2_m2m_release($p55);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $i39 := $i43;
    goto $bb3;

  $bb5:
    assume $i42 == 1;
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $i43 := $i41;
    goto $bb7;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} vslice_dummy_var_89 := printk.ref.ref(.str.26, $p31);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(400, 1)), $mul.ref(1840, 1));
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} $i37 := PTR_ERR($p36);
    call {:si_unique_call 1427} {:cexpr "tmp"} boogie_si_record_i64($i37);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i37);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb3;
}



const v4l2_get_subdev_hostdata: ref;

axiom v4l2_get_subdev_hostdata == $sub.ref(0, 606170);

procedure v4l2_get_subdev_hostdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_get_subdev_hostdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(232, 1));
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fimc_register_capture_device: ref;

axiom fimc_register_capture_device == $sub.ref(0, 607202);

procedure fimc_register_capture_device($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fimc_register_capture_device($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $p82: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i1;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p101: ref;
  var $p102: ref;
  var $i91: i32;
  var $p103: ref;
  var $i58: i32;
  var $p104: ref;
  var $i11: i32;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1));
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2408, 1));
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $p7 := kzalloc(880, 208);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p0);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(320, 1));
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 1);
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(324, 1));
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 2);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(392, 1));
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 131072);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} $p16 := fimc_find_format($0.ref, $0.ref, 1, 0);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p16);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p21);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p4);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    call {:si_unique_call 1438} cmdloc_dummy_var_36 := $memset.i8(cmdloc_dummy_var_35, $p24, 0, 1832, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_36;
    $p25 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(1600, 1));
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(272, 1));
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} vslice_dummy_var_91 := snprintf.ref.i64.ref.i32($p26, 32, .str.113, $i28);
    $p30 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(120, 1));
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, fimc_capture_fops);
    $p31 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(1776, 1));
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, fimc_capture_ioctl_ops);
    $p32 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(1560, 1));
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p1);
    $p33 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(1640, 1));
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $sub.i32(0, 1));
    $p34 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(1768, 1));
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, video_device_release_empty);
    $p35 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(1584, 1));
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p6);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(72, 1));
    $p37 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(1832, 1));
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p36);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p0);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} video_set_drvdata($p4, $p38);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3256, 1));
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, 0);
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3268, 1));
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, 0);
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p7);
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2376, 1));
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} INIT_LIST_HEAD($p43);
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2392, 1));
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} INIT_LIST_HEAD($p44);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p6);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_37 := $M.0;
    call {:si_unique_call 1443} cmdloc_dummy_var_38 := $memset.i8(cmdloc_dummy_var_37, $p45, 0, 848, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_38;
    $p46 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2408, 1)), $mul.ref(0, 1));
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 9);
    $p47 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2408, 1)), $mul.ref(4, 1));
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, 19);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2408, 1)), $mul.ref(48, 1));
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $p7);
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2408, 1)), $mul.ref(32, 1));
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, fimc_capture_qops);
    $p51 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2408, 1)), $mul.ref(40, 1));
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, vb2_dma_contig_memops);
    $p52 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2408, 1)), $mul.ref(56, 1));
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, 960);
    $p53 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2408, 1)), $mul.ref(60, 1));
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 8192);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(72, 1));
    $p55 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2408, 1)), $mul.ref(16, 1));
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, $p54);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} $i56 := vb2_queue_init($p6);
    call {:si_unique_call 1445} {:cexpr "ret"} boogie_si_record_i32($i56);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} $p59 := fimc_find_format($0.ref, $0.ref, 1, 0);
    $p61 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, 640);
    $p63 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2264, 1)), $mul.ref(4, 1));
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, 480);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p59, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    $p67 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2264, 1)), $mul.ref(8, 1));
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i65);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 640);
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, 480);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, $p59);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} $p74 := fimc_find_format($0.ref, $0.ref, 32, 0);
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2312, 1));
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2264, 1));
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p75);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p76);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.0;
    cmdloc_dummy_var_40 := $M.0;
    call {:si_unique_call 1449} cmdloc_dummy_var_41 := $memcpy.i8(cmdloc_dummy_var_39, cmdloc_dummy_var_40, $p77, $p78, 48, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_41;
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p74, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    $p82 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2312, 1)), $mul.ref(8, 1));
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, $i80);
    $p84 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2168, 1)), $mul.ref(16, 1));
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p84, 1);
    $p85 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    $p86 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2168, 1));
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} $i87 := media_entity_init($p85, 1, $p86, 0);
    call {:si_unique_call 1451} {:cexpr "ret"} boogie_si_record_i32($i87);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} $i89 := fimc_ctrls_create($p8);
    call {:si_unique_call 1453} {:cexpr "ret"} boogie_si_record_i32($i89);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} $i92 := video_register_device($p4, 0, $sub.i32(0, 1));
    call {:si_unique_call 1456} {:cexpr "ret"} boogie_si_record_i32($i92);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} $p94 := video_device_node_name($p4);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    $p97 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(1600, 1));
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} vslice_dummy_var_92 := printk.ref.ref.ref.ref(.str.27, $p96, $p98, $p94);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(584, 1)), $mul.ref(0, 1));
    $p102 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(1576, 1));
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p102, $p101);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb16:
    assume $i93 == 1;
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} fimc_ctrls_delete($p8);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $i91 := $i92;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} media_entity_cleanup($p103);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i58 := $i91;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p8);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} kfree($p104);
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $i11 := $i58;
    goto $bb3;

  $bb12:
    assume $i90 == 1;
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i91 := $i89;
    goto $bb14;

  $bb9:
    assume $i88 == 1;
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $i58 := $i87;
    goto $bb7;

  $bb5:
    assume $i57 == 1;
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $i58 := $i56;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 608234);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const video_device_release_empty: ref;

axiom video_device_release_empty == $sub.ref(0, 609266);

procedure video_device_release_empty($p0: ref);



const video_set_drvdata: ref;

axiom video_set_drvdata == $sub.ref(0, 610298);

procedure video_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation video_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1840)), $mul.ref(128, 1));
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} dev_set_drvdata($p2, $p1);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    return;
}



const video_register_device: ref;

axiom video_register_device == $sub.ref(0, 611330);

procedure video_register_device($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation video_register_device($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} {:cexpr "video_register_device:arg:type"} boogie_si_record_i32($i1);
    call {:si_unique_call 1462} {:cexpr "video_register_device:arg:nr"} boogie_si_record_i32($i2);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1840)), $mul.ref(120, 1));
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} $i7 := __video_register_device($p0, $i1, $i2, 1, $p6);
    call {:si_unique_call 1464} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const video_device_node_name: ref;

axiom video_device_node_name == $sub.ref(0, 612362);

procedure video_device_node_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation video_device_node_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1840)), $mul.ref(128, 1));
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $p2 := dev_name($p1);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __video_register_device: ref;

axiom __video_register_device == $sub.ref(0, 613394);

procedure __video_register_device($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __video_register_device($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1466} {:cexpr "__video_register_device:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1467} {:cexpr "__video_register_device:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1468} {:cexpr "__video_register_device:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1469} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1470} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const v4l2_m2m_init: ref;

axiom v4l2_m2m_init == $sub.ref(0, 614426);

procedure v4l2_m2m_init($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation v4l2_m2m_init($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} $p1 := external_alloc();
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const vb2_fop_poll: ref;

axiom vb2_fop_poll == $sub.ref(0, 615458);

procedure vb2_fop_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_fop_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1472} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1473} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vb2_fop_mmap: ref;

axiom vb2_fop_mmap == $sub.ref(0, 616490);

procedure vb2_fop_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_fop_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1474} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1475} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fimc_capture_open: ref;

axiom fimc_capture_open == $sub.ref(0, 617522);

procedure fimc_capture_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $CurrAddr, $M.27, $M.29, $M.25, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.28, $M.32, $M.36, assertsPassed;



implementation fimc_capture_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i8;
  var $i77: i1;
  var $p78: ref;
  var $i79: i8;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $p97: ref;
  var $i98: i1;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i108: i32;
  var $i30: i32;
  var $p109: ref;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} $p2 := video_drvdata($p0);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1));
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p6, .str.2);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p7, .str.110);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p8, .str.29);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p9, .str.111);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.16, $p11);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 483);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p11, $i14);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p15, 0);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.17, $p16);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 1479} {:cexpr "tmp___2"} boogie_si_record_i64($i20);
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} mutex_lock_nested($p26, 0);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $i28 := constant_test_bit(1, $p27);
    call {:si_unique_call 1486} {:cexpr "tmp___3"} boogie_si_record_i32($i28);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} set_bit(11, $p31);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(232, 1));
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $i35 := pm_runtime_get_sync($p34);
    call {:si_unique_call 1490} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 0);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} $i37 := v4l2_fh_open($p0);
    call {:si_unique_call 1492} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $i43 := v4l2_fh_is_singular_file($p0);
    call {:si_unique_call 1495} {:cexpr "tmp___6"} boogie_si_record_i32($i43);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i108 := $i37;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $i30 := $i108;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} mutex_unlock($p109);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} fimc_md_graph_lock($p5);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p5);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i73 := $sub.i32(0, 2);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 0);
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i88 := $i73;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 0);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} fimc_md_graph_unlock($p5);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i88, 0);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i100 := $i88;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i100, 0);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i108 := $i100;
    goto $bb45;

  $bb42:
    assume $i101 == 1;
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} clear_bit(11, $p102);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(232, 1));
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p104, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} vslice_dummy_var_94 := pm_runtime_put_sync($p105);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} vslice_dummy_var_95 := v4l2_fh_release($p0);
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i98 == 1;
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} $i99 := fimc_capture_set_default_format($p3);
    call {:si_unique_call 1504} {:cexpr "ret"} boogie_si_record_i32($i99);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $i100 := $i99;
    goto $bb41;

  $bb36:
    assume $i89 == 1;
    $p92 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(100, 1));
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i93, 1);
    $p97 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(100, 1));
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p97, $i94);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb25:
    assume $i74 == 1;
    $p75 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3284, 1));
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.0, $p75);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i8.i1($i76);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb27;

  $bb28:
    assume $i77 == 1;
    $p78 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3285, 1));
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i8.i1($i79);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb27;

  $bb30:
    assume $i80 == 1;
    $p81 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} fimc_ctrls_delete($p82);
    $p83 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $i85 := fimc_ctrls_create($p84);
    call {:si_unique_call 1501} {:cexpr "ret"} boogie_si_record_i32($i85);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 0);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i88 := $i85;
    goto $bb35;

  $bb32:
    assume $i86 == 1;
    $p87 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3285, 1));
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, 0);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb16:
    assume $i46 == 1;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32(0, 515);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $i73 := $i72;
    goto $bb24;

  $bb18:
    assume $i52 == 1;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb20;

  $bb21:
    assume $i60 == 1;
    $p61 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    $p67 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    $p70 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    call {:si_unique_call 1497} $i71 := devirtbounce.6($p66, $p68, $p70, 1);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    call {:si_unique_call 1498} {:cexpr "tmp___4"} boogie_si_record_i32($i71);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $i72 := $i71;
    goto $bb23;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(232, 1));
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} vslice_dummy_var_93 := pm_runtime_put_sync($p41);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $i30 := $i37;
    goto $bb6;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $i30 := $i35;
    goto $bb6;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 16);
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} $p22 := get_current();
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} $i23 := task_pid_nr($p22);
    call {:si_unique_call 1482} {:cexpr "tmp___1"} boogie_si_record_i32($i23);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} __dynamic_pr_debug.ref.ref.ref.i32.i32.i64($p1, .str.111, .str.110, 483, $i23, $i25);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fimc_capture_release: ref;

axiom fimc_capture_release == $sub.ref(0, 618554);

procedure fimc_capture_release($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.29, $M.32, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation fimc_capture_release($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i1;
  var $p30: ref;
  var $i31: i8;
  var $i32: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p67: ref;
  var $p68: ref;
  var $p70: ref;
  var $p71: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $p2 := video_drvdata($p0);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} $i5 := v4l2_fh_is_singular_file($p0);
    call {:si_unique_call 1511} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 1512} {:cexpr "close"} boogie_si_record_i8($i7);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p8, .str.2);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p9, .str.112);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p10, .str.29);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p11, .str.111);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.16, $p13);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 543);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, $p13, $i16);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, $p17, 0);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.17, $p18);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 1514} {:cexpr "tmp___3"} boogie_si_record_i64($i22);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} mutex_lock_nested($p28, 0);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i7);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} $i37 := _vb2_fop_release($p0, $0.ref);
    call {:si_unique_call 1522} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i7);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(232, 1));
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} vslice_dummy_var_97 := pm_runtime_put_sync($p85);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(72, 1));
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} mutex_unlock($p87);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} clear_bit(11, $p39);
    $p40 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1));
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} clear_bit(9, $p70);
    $p71 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1));
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} fimc_md_graph_lock($p71);
    $p75 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(100, 1));
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $i77 := $sub.i32($i76, 1);
    $p81 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(100, 1));
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i77);
    $p82 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1));
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} fimc_md_graph_unlock($p82);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb12:
    assume $i42 == 1;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i49 == 1;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb16;

  $bb17:
    assume $i58 == 1;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    $p67 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    call {:si_unique_call 1524} vslice_dummy_var_96 := devirtbounce.8($p65, $p68);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i29 == 1;
    $p30 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3272, 1));
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb6;

  $bb7:
    assume $i32 == 1;
    $p35 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} media_entity_pipeline_stop($p35);
    $p36 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3272, 1));
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 0);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} $p24 := get_current();
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} $i25 := task_pid_nr($p24);
    call {:si_unique_call 1517} {:cexpr "tmp___2"} boogie_si_record_i32($i25);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} __dynamic_pr_debug.ref.ref.ref.i32.i32.i64($p1, .str.111, .str.112, 543, $i25, $i27);
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const v4l2_fh_is_singular_file: ref;

axiom v4l2_fh_is_singular_file == $sub.ref(0, 619586);

procedure v4l2_fh_is_singular_file($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_fh_is_singular_file($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} $i4 := v4l2_fh_is_singular($p3);
    call {:si_unique_call 1531} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const media_entity_pipeline_stop: ref;

axiom media_entity_pipeline_stop == $sub.ref(0, 620618);

procedure media_entity_pipeline_stop($p0: ref);
  free requires assertsPassed;



implementation media_entity_pipeline_stop($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    return;
}



const _vb2_fop_release: ref;

axiom _vb2_fop_release == $sub.ref(0, 621650);

procedure _vb2_fop_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _vb2_fop_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1532} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1533} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fimc_md_graph_lock: ref;

axiom fimc_md_graph_lock == $sub.ref(0, 622682);

procedure fimc_md_graph_lock($p0: ref);
  free requires assertsPassed;



implementation fimc_md_graph_lock($p0: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2184)), $mul.ref(2016, 1));
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} mutex_lock_nested($p5, 0);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    return;
}



const fimc_md_graph_unlock: ref;

axiom fimc_md_graph_unlock == $sub.ref(0, 623714);

procedure fimc_md_graph_unlock($p0: ref);
  free requires assertsPassed;



implementation fimc_md_graph_unlock($p0: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2184)), $mul.ref(2016, 1));
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} mutex_unlock($p5);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_put_sync: ref;

axiom pm_runtime_put_sync == $sub.ref(0, 624746);

procedure pm_runtime_put_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pm_runtime_put_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} $i1 := __pm_runtime_idle($p0, 4);
    call {:si_unique_call 1537} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const v4l2_fh_is_singular: ref;

axiom v4l2_fh_is_singular == $sub.ref(0, 625778);

procedure v4l2_fh_is_singular($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_fh_is_singular($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1538} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1539} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const v4l2_fh_open: ref;

axiom v4l2_fh_open == $sub.ref(0, 626810);

procedure v4l2_fh_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_fh_open($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1540} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1541} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fimc_capture_set_default_format: ref;

axiom fimc_capture_set_default_format == $sub.ref(0, 627842);

procedure fimc_capture_set_default_format($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.25, $M.27;



implementation fimc_capture_set_default_format($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $p293: ref;
  var $p294: ref;
  var $p295: ref;
  var $p298: ref;
  var $p299: ref;
  var $p300: ref;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $p327: ref;
  var $p328: ref;
  var $p329: ref;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $p349: ref;
  var $p350: ref;
  var $p351: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p361: ref;
  var $p362: ref;
  var $p363: ref;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $p373: ref;
  var $p374: ref;
  var $p375: ref;
  var $p379: ref;
  var $p380: ref;
  var $p381: ref;
  var $p385: ref;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $p391: ref;
  var $p392: ref;
  var $p393: ref;
  var $p394: ref;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $p399: ref;
  var $p400: ref;
  var $p401: ref;
  var $p402: ref;
  var $p404: ref;
  var $p405: ref;
  var $p406: ref;
  var $p408: ref;
  var $p409: ref;
  var $p410: ref;
  var $p412: ref;
  var $p413: ref;
  var $p414: ref;
  var $p416: ref;
  var $p417: ref;
  var $p418: ref;
  var $p420: ref;
  var $p421: ref;
  var $p422: ref;
  var $p424: ref;
  var $p425: ref;
  var $p426: ref;
  var $p428: ref;
  var $i429: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} $p1 := $alloc($mul.ref(208, $zext.i32.i64(1)));
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 9);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 640);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 480);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 1448695129);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 192)), $mul.ref(12, 1));
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 1);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 192)), $mul.ref(16, 1));
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 7);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 0);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p24, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 0);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($add.ref($p29, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(0, 20)), $mul.ref(8, 1)), $mul.ref(0, 2));
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, 0);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($add.ref($p35, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(0, 20)), $mul.ref(8, 1)), $mul.ref(1, 2));
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, 0);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($add.ref($p41, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(0, 20)), $mul.ref(8, 1)), $mul.ref(2, 2));
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p45, 0);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($add.ref($p47, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(0, 20)), $mul.ref(8, 1)), $mul.ref(3, 2));
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p51, 0);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($add.ref($add.ref($p53, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(0, 20)), $mul.ref(8, 1)), $mul.ref(4, 2));
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p57, 0);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($add.ref($add.ref($p59, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(0, 20)), $mul.ref(8, 1)), $mul.ref(5, 2));
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p63, 0);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($p65, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(1, 20)), $mul.ref(0, 1));
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, 0);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($p70, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(1, 20)), $mul.ref(4, 1));
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, 0);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($add.ref($add.ref($p75, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(1, 20)), $mul.ref(8, 1)), $mul.ref(0, 2));
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p79, 0);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($add.ref($add.ref($p81, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(1, 20)), $mul.ref(8, 1)), $mul.ref(1, 2));
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p85, 0);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($add.ref($add.ref($p87, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(1, 20)), $mul.ref(8, 1)), $mul.ref(2, 2));
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p91, 0);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($add.ref($add.ref($p93, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(1, 20)), $mul.ref(8, 1)), $mul.ref(3, 2));
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p97, 0);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($add.ref($add.ref($p99, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(1, 20)), $mul.ref(8, 1)), $mul.ref(4, 2));
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p103, 0);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($add.ref($add.ref($p105, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(1, 20)), $mul.ref(8, 1)), $mul.ref(5, 2));
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p109, 0);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p111, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(2, 20)), $mul.ref(0, 1));
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p114, 0);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($add.ref($p116, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(2, 20)), $mul.ref(4, 1));
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p119, 0);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($add.ref($add.ref($p121, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(2, 20)), $mul.ref(8, 1)), $mul.ref(0, 2));
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p125, 0);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($add.ref($add.ref($p127, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(2, 20)), $mul.ref(8, 1)), $mul.ref(1, 2));
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p131, 0);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($add.ref($add.ref($p133, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(2, 20)), $mul.ref(8, 1)), $mul.ref(2, 2));
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p137, 0);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p138);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($add.ref($add.ref($p139, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(2, 20)), $mul.ref(8, 1)), $mul.ref(3, 2));
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p143, 0);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($add.ref($add.ref($p145, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(2, 20)), $mul.ref(8, 1)), $mul.ref(4, 2));
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p149, 0);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p150);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($add.ref($add.ref($p151, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(2, 20)), $mul.ref(8, 1)), $mul.ref(5, 2));
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p155, 0);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($add.ref($p157, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(3, 20)), $mul.ref(0, 1));
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p160, 0);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p161);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($add.ref($p162, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(3, 20)), $mul.ref(4, 1));
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p165, 0);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p166);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($add.ref($add.ref($p167, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(3, 20)), $mul.ref(8, 1)), $mul.ref(0, 2));
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p171, 0);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($add.ref($add.ref($p173, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(3, 20)), $mul.ref(8, 1)), $mul.ref(1, 2));
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p177, 0);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $p179 := $bitcast.ref.ref($p178);
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($add.ref($add.ref($p179, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(3, 20)), $mul.ref(8, 1)), $mul.ref(2, 2));
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p183, 0);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $p185 := $bitcast.ref.ref($p184);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($add.ref($add.ref($p185, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(3, 20)), $mul.ref(8, 1)), $mul.ref(3, 2));
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p189, 0);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $p191 := $bitcast.ref.ref($p190);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(3, 20)), $mul.ref(8, 1)), $mul.ref(4, 2));
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p195, 0);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $p197 := $bitcast.ref.ref($p196);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($add.ref($add.ref($p197, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(3, 20)), $mul.ref(8, 1)), $mul.ref(5, 2));
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p201, 0);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $p203 := $bitcast.ref.ref($p202);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($add.ref($p203, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(4, 20)), $mul.ref(0, 1));
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p206, 0);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p207);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($add.ref($p208, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(4, 20)), $mul.ref(4, 1));
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p211, 0);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $p213 := $bitcast.ref.ref($p212);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($add.ref($add.ref($p213, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(4, 20)), $mul.ref(8, 1)), $mul.ref(0, 2));
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p217, 0);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $p219 := $bitcast.ref.ref($p218);
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($add.ref($add.ref($p219, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(4, 20)), $mul.ref(8, 1)), $mul.ref(1, 2));
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p223, 0);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $p225 := $bitcast.ref.ref($p224);
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($add.ref($add.ref($p225, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(4, 20)), $mul.ref(8, 1)), $mul.ref(2, 2));
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p229, 0);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $p231 := $bitcast.ref.ref($p230);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($add.ref($add.ref($p231, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(4, 20)), $mul.ref(8, 1)), $mul.ref(3, 2));
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p235, 0);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $p237 := $bitcast.ref.ref($p236);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref($add.ref($add.ref($p237, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(4, 20)), $mul.ref(8, 1)), $mul.ref(4, 2));
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p241, 0);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $p243 := $bitcast.ref.ref($p242);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($add.ref($add.ref($add.ref($p243, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(4, 20)), $mul.ref(8, 1)), $mul.ref(5, 2));
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p247, 0);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    $p249 := $bitcast.ref.ref($p248);
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($add.ref($add.ref($p249, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(5, 20)), $mul.ref(0, 1));
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p252, 0);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $p254 := $bitcast.ref.ref($p253);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($add.ref($add.ref($p254, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(5, 20)), $mul.ref(4, 1));
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p257, 0);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $p259 := $bitcast.ref.ref($p258);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($add.ref($add.ref($add.ref($p259, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(5, 20)), $mul.ref(8, 1)), $mul.ref(0, 2));
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p263, 0);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $p265 := $bitcast.ref.ref($p264);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($add.ref($add.ref($add.ref($p265, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(5, 20)), $mul.ref(8, 1)), $mul.ref(1, 2));
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p269, 0);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $p271 := $bitcast.ref.ref($p270);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($add.ref($add.ref($add.ref($p271, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(5, 20)), $mul.ref(8, 1)), $mul.ref(2, 2));
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p275, 0);
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $p277 := $bitcast.ref.ref($p276);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($add.ref($add.ref($add.ref($p277, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(5, 20)), $mul.ref(8, 1)), $mul.ref(3, 2));
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p281, 0);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $p283 := $bitcast.ref.ref($p282);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($add.ref($add.ref($add.ref($p283, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(5, 20)), $mul.ref(8, 1)), $mul.ref(4, 2));
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p287, 0);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $p289 := $bitcast.ref.ref($p288);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($add.ref($add.ref($add.ref($p289, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(5, 20)), $mul.ref(8, 1)), $mul.ref(5, 2));
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p293, 0);
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $p295 := $bitcast.ref.ref($p294);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($add.ref($add.ref($p295, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(6, 20)), $mul.ref(0, 1));
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p298, 0);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $p300 := $bitcast.ref.ref($p299);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($add.ref($add.ref($p300, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(6, 20)), $mul.ref(4, 1));
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p303, 0);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $p305 := $bitcast.ref.ref($p304);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref($add.ref($add.ref($p305, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(6, 20)), $mul.ref(8, 1)), $mul.ref(0, 2));
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p309, 0);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $p311 := $bitcast.ref.ref($p310);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($add.ref($add.ref($add.ref($p311, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(6, 20)), $mul.ref(8, 1)), $mul.ref(1, 2));
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p315, 0);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $p317 := $bitcast.ref.ref($p316);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($add.ref($add.ref($add.ref($p317, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(6, 20)), $mul.ref(8, 1)), $mul.ref(2, 2));
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p321, 0);
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $p323 := $bitcast.ref.ref($p322);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($add.ref($add.ref($p323, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(6, 20)), $mul.ref(8, 1)), $mul.ref(3, 2));
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p327, 0);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $p329 := $bitcast.ref.ref($p328);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($add.ref($add.ref($add.ref($p329, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(6, 20)), $mul.ref(8, 1)), $mul.ref(4, 2));
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p333, 0);
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $p335 := $bitcast.ref.ref($p334);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($add.ref($add.ref($add.ref($p335, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(6, 20)), $mul.ref(8, 1)), $mul.ref(5, 2));
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p339, 0);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $p341 := $bitcast.ref.ref($p340);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($add.ref($add.ref($p341, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(7, 20)), $mul.ref(0, 1));
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p344, 0);
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $p346 := $bitcast.ref.ref($p345);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($add.ref($add.ref($p346, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(7, 20)), $mul.ref(4, 1));
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p349, 0);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $p351 := $bitcast.ref.ref($p350);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($add.ref($add.ref($add.ref($p351, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(7, 20)), $mul.ref(8, 1)), $mul.ref(0, 2));
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p355, 0);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    $p357 := $bitcast.ref.ref($p356);
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($add.ref($add.ref($add.ref($p357, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(7, 20)), $mul.ref(8, 1)), $mul.ref(1, 2));
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p361, 0);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $p363 := $bitcast.ref.ref($p362);
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($add.ref($add.ref($add.ref($p363, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(7, 20)), $mul.ref(8, 1)), $mul.ref(2, 2));
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p367, 0);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $p369 := $bitcast.ref.ref($p368);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($add.ref($add.ref($add.ref($p369, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(7, 20)), $mul.ref(8, 1)), $mul.ref(3, 2));
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p373, 0);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $p375 := $bitcast.ref.ref($p374);
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($add.ref($add.ref($add.ref($p375, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(7, 20)), $mul.ref(8, 1)), $mul.ref(4, 2));
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p379, 0);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $p381 := $bitcast.ref.ref($p380);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($add.ref($add.ref($add.ref($p381, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(7, 20)), $mul.ref(8, 1)), $mul.ref(5, 2));
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p385, 0);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    $p387 := $bitcast.ref.ref($p386);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p387, $mul.ref(0, 192)), $mul.ref(180, 1));
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p388, 0);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $p390 := $bitcast.ref.ref($p389);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($p390, $mul.ref(0, 192)), $mul.ref(181, 1));
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p391, 0);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $p393 := $bitcast.ref.ref($p392);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p393, $mul.ref(0, 192)), $mul.ref(182, 1));
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p394, 0);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $p396 := $bitcast.ref.ref($p395);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p396, $mul.ref(0, 192)), $mul.ref(183, 1));
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p397, 0);
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $p399 := $bitcast.ref.ref($p398);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($p399, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p400, 0);
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $p402 := $bitcast.ref.ref($p401);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($add.ref($p402, $mul.ref(0, 192)), $mul.ref(185, 1)), $mul.ref(0, 1));
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p404, 0);
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $p406 := $bitcast.ref.ref($p405);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($add.ref($p406, $mul.ref(0, 192)), $mul.ref(185, 1)), $mul.ref(1, 1));
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p408, 0);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    $p410 := $bitcast.ref.ref($p409);
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($add.ref($p410, $mul.ref(0, 192)), $mul.ref(185, 1)), $mul.ref(2, 1));
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p412, 0);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $p414 := $bitcast.ref.ref($p413);
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($add.ref($p414, $mul.ref(0, 192)), $mul.ref(185, 1)), $mul.ref(3, 1));
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p416, 0);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $p418 := $bitcast.ref.ref($p417);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($add.ref($p418, $mul.ref(0, 192)), $mul.ref(185, 1)), $mul.ref(4, 1));
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p420, 0);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $p422 := $bitcast.ref.ref($p421);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($add.ref($p422, $mul.ref(0, 192)), $mul.ref(185, 1)), $mul.ref(5, 1));
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p424, 0);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $p426 := $bitcast.ref.ref($p425);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($add.ref($p426, $mul.ref(0, 192)), $mul.ref(185, 1)), $mul.ref(6, 1));
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p428, 0);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} $i429 := __fimc_capture_set_format($p0, $p1);
    call {:si_unique_call 1544} {:cexpr "tmp"} boogie_si_record_i32($i429);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $r := $i429;
    return;
}



const v4l2_fh_release: ref;

axiom v4l2_fh_release == $sub.ref(0, 628874);

procedure v4l2_fh_release($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_fh_release($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1545} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1546} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __fimc_capture_set_format: ref;

axiom __fimc_capture_set_format == $sub.ref(0, 629906);

procedure __fimc_capture_set_format($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, $M.25, $M.27;



implementation __fimc_capture_set_format($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i1;
  var $i25: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $p32: ref;
  var $i33: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $i46: i1;
  var $i24: i32;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $i64: i8;
  var $i65: i1;
  var $p66: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(152, 1));
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $0.ref);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2408, 1));
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} $i11 := vb2_is_busy($p10);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 1549} {:cexpr "tmp"} boogie_si_record_i8($i12);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p15 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} $i16 := __video_try_or_set_format($p0, $p1, 0, $p2, $p15);
    call {:si_unique_call 1551} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} fimc_alpha_ctrl_update($p5);
    $p18 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $i23 := $sgt.i32($i22, 0);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} set_frame_bounds($p8, $i48, $i50);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(392, 1));
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 2);
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    $p59 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} fimc_capture_mark_jpeg_xfer($p5, $i62);
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3284, 1));
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i8.i1($i64);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i65 == 1);
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p2);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $p66);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} set_frame_bounds($p69, $i71, $i73);
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(0, 1));
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} set_frame_crop($p74, 0, 0, $i76, $i78);
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i14 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb19:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i54 == 1;
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} set_frame_crop($p8, 0, 0, $i56, $i58);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb11;

  $bb11:
    call $i25, $p28, $i29, $i30, $p32, $i33, $p36, $i37, $i38, $p40, $i41, $p42, $p43, $i44, $i45, $i46, $i24 := __fimc_capture_set_format_loop_$bb11($p5, $p7, $p18, $i25, $p28, $i29, $i30, $p32, $i33, $p36, $i37, $i38, $p40, $i41, $p42, $p43, $i44, $i45, $i46, $i24);
    goto $bb11_last;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref($i25, 20)), $mul.ref(4, 1));
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i24);
    $p32 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(64, 1)), $mul.ref($i30, 4));
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i29);
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i24);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref($i33, 20)), $mul.ref(0, 1));
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i24);
    $p40 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(32, 1)), $mul.ref($i38, 4));
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i37);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i24, 1);
    call {:si_unique_call 1553} {:cexpr "i"} boogie_si_record_i32($i41);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p18);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $i46 := $sgt.i32($i45, $i41);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i46 == 1);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i24 := $i41;
    goto $bb13_dummy;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $i14 := $i16;
    goto $bb3;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 16);
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9234;
}



const __video_try_or_set_format: ref;

axiom __video_try_or_set_format == $sub.ref(0, 630938);

procedure __video_try_or_set_format($p0: ref, $p1: ref, $i2: i1, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.25, $M.27, $CurrAddr;



implementation __video_try_or_set_format($p0: ref, $p1: ref, $i2: i1, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p29: ref;
  var $i30: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p36: ref;
  var $i27: i32;
  var $i28: i32;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i8;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i1;
  var $i58: i1;
  var $p61: ref;
  var $p59: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i16;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i16;
  var $i103: i32;
  var $i104: i1;
  var $i106: i32;
  var $i107: i32;
  var $i46: i32;
  var vslice_dummy_var_98: ref;
  var vslice_dummy_var_99: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} $p5 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i2);
    call {:si_unique_call 1560} {:cexpr "__video_try_or_set_format:arg:try"} boogie_si_record_i1($i2);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1));
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} $i15 := fimc_jpeg_fourcc($i14);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i8($i15);
    call {:si_unique_call 1562} {:cexpr "tmp"} boogie_si_record_i8($i16);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i37, $i38 := 0, 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} $p42 := fimc_capture_try_format($p12, $p39, $p40, $0.ref, $p41, 2);
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p42);
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p4);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i6);
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3284, 1));
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i8.i1($i56);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i57 == 1);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i6);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i58 == 1);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2264, 1));
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    $p59 := $p61;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p4);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p59, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i64);
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p59, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i67);
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p59, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, $i70);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} fimc_md_graph_lock($p10);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i8.i1($i6);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} $i73 := fimc_pipeline_try_format($p12, $p59, $p3, $i72);
    call {:si_unique_call 1571} {:cexpr "ret"} boogie_si_record_i32($i73);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} fimc_md_graph_unlock($p10);
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i73, 0);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p59, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, $i76);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p59, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i79);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $i81 := $i73;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p4);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} fimc_adjust_mplane_format($p82, $i84, $i86, $p8);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p4);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 40)), $mul.ref(34, 1));
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $i89 := $load.i16($M.0, $p88);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i32($i89);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, 16);
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i107 := $i81;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $i46 := $i107;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $r := $i46;
    return;

  $bb26:
    assume $i92 == 1;
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} fimc_md_graph_lock($p10);
    $p93 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} $p95 := __fimc_md_get_subdev($p94, 0);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p95);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $i97 := $ne.i64($i96, 0);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i106 := $sub.i32(0, 32);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} fimc_md_graph_unlock($p10);
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $i107 := $i106;
    goto $bb31;

  $bb28:
    assume $i97 == 1;
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(20, 1));
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p4);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $i102 := $load.i16($M.0, $p101);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i32($i102);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i8.i1($i6);
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} vslice_dummy_var_99 := fimc_get_sensor_frame_desc($p95, $p99, $i103, $i104);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $i106 := $i81;
    goto $bb30;

  $bb22:
    assume $i74 == 1;
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    $i46 := $i73;
    goto $bb9;

  $bb19:
    assume $i58 == 1;
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $p59 := $p5;
    goto $bb21;

  $bb17:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i81 := 0;
    goto $bb25;

  $bb11:
    assume $i47 == 1;
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} $i50 := fimc_jpeg_fourcc($i49);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i8($i50);
    call {:si_unique_call 1568} {:cexpr "tmp___0"} boogie_si_record_i8($i51);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i8.i1($i51);
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i52 == 1;
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i37);
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i38);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i45 == 1;
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32(0, 22);
    goto $bb9;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} vslice_dummy_var_98 := fimc_capture_try_format($p12, $p18, $p19, $0.ref, $p20, 0);
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i6);
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i22 == 1);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i30);
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i34);
    assume {:verifier.code 0} true;
    $i27, $i28 := 0, 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    $i37, $i38 := $i27, $i28;
    goto $bb6;

  $bb3:
    assume $i22 == 1;
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    call {:si_unique_call 1564} {:cexpr "width"} boogie_si_record_i32($i24);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p8, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    call {:si_unique_call 1565} {:cexpr "height"} boogie_si_record_i32($i26);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $i27, $i28 := $i24, $i26;
    goto $bb5;
}



const fimc_jpeg_fourcc: ref;

axiom fimc_jpeg_fourcc == $sub.ref(0, 631970);

procedure fimc_jpeg_fourcc($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation fimc_jpeg_fourcc($i0: i32) returns ($r: i1)
{
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} {:cexpr "fimc_jpeg_fourcc:arg:pixelformat"} boogie_si_record_i32($i0);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1195724874);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1229141331);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const fimc_pipeline_try_format: ref;

axiom fimc_pipeline_try_format == $sub.ref(0, 633002);

procedure fimc_pipeline_try_format($p0: ref, $p1: ref, $p2: ref, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, $M.27;



implementation fimc_pipeline_try_format($p0: ref, $p1: ref, $p2: ref, $i3: i1) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i21: i64;
  var $i22: i1;
  var $i20: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i29: i1;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i1;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i104: i16;
  var $i105: i32;
  var $i106: i32;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $p110: ref;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $i126: i1;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $i137: i32;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i32;
  var $i142: i64;
  var $p143: ref;
  var $p144: ref;
  var $i145: i64;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $i149: i64;
  var $i150: i1;
  var $p66: ref;
  var $p151: ref;
  var $p65: ref;
  var $p152: ref;
  var $i153: i32;
  var $p154: ref;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $i158: i32;
  var $p159: ref;
  var $i160: i32;
  var $p161: ref;
  var $p162: ref;
  var $i163: i32;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i64;
  var $i172: i1;
  var $p173: ref;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $i177: i32;
  var $p178: ref;
  var $p179: ref;
  var $i180: i32;
  var $p181: ref;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $i185: i32;
  var $p186: ref;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $i191: i32;
  var $p192: ref;
  var $i193: i64;
  var $i194: i1;
  var $i195: i64;
  var $i196: i1;
  var $p197: ref;
  var $p198: ref;
  var $i34: i32;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var vslice_dummy_var_100: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} $p4 := $alloc($mul.ref(88, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i3);
    call {:si_unique_call 1581} {:cexpr "fimc_pipeline_try_format:arg:set"} boogie_si_record_i1($i3);
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p16);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $i20 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i19 == 1);
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p1);
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $i20 := $i22;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i20);
    call {:si_unique_call 1582} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i23);
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 1584} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i23, 0);
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 1587} {:cexpr "tmp___0"} boogie_si_record_i64($i32);
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p4);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.0;
    call {:si_unique_call 1588} cmdloc_dummy_var_43 := $memset.i8(cmdloc_dummy_var_42, $p35, 0, 88, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_43;
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p1);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_44 := $M.0;
    cmdloc_dummy_var_45 := $M.0;
    call {:si_unique_call 1589} cmdloc_dummy_var_46 := $memcpy.i8(cmdloc_dummy_var_44, cmdloc_dummy_var_45, $p37, $p38, 48, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_46;
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i6);
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i40);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p16, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} $p43 := fimc_pipeline_get_head($p42);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $p44, $i45 := $p43, 1;
    goto $bb11;

  $bb11:
    call $p44, $i45, $i46, $p47, $i48, $i49, $p50, $p51, $p52, $i53, $i54, $p55, $i56, $p57, $p58, $p61, $i62, $i63, $i64, $p67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $p78, $p79, $p80, $p81, $p82, $i83, $i84, $p85, $p86, $p87, $p88, $p89, $p90, $i91, $i92, $i93, $i94, $i95, $p96, $p97, $p98, $i99, $i100, $i101, $i102, $p103, $i104, $i105, $i106, $p107, $p108, $i109, $p110, $i111, $i112, $p113, $p114, $p115, $p116, $i117, $i118, $p119, $p120, $p121, $p122, $p123, $p124, $i125, $i126, $p127, $p128, $p129, $p130, $p131, $p132, $i133, $i134, $i135, $i136, $i137, $p138, $p139, $p140, $i141, $i142, $p143, $p144, $i145, $i146, $p147, $p148, $i149, $i150, $p66, $p151, $p65, $p152, $i153, $p154, $i155, $i156, $p157, $i158, $p159, $i160, $p161, $p162, $i163, $p164, $p165, $p166, $p168, $p169, $p170, $i171, $i172, $p173, $i174, $i175, $p176, $i177, $p178, $p179, $i180, $p181, $i182, $i183, $p184, $i185, $p186, $i187, $i188, $p189, vslice_dummy_var_100 := fimc_pipeline_try_format_loop_$bb11($p0, $p1, $p4, $p5, $p8, $p44, $i45, $i46, $p47, $i48, $i49, $p50, $p51, $p52, $i53, $i54, $p55, $i56, $p57, $p58, $p61, $i62, $i63, $i64, $p67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $p78, $p79, $p80, $p81, $p82, $i83, $i84, $p85, $p86, $p87, $p88, $p89, $p90, $i91, $i92, $i93, $i94, $i95, $p96, $p97, $p98, $i99, $i100, $i101, $i102, $p103, $i104, $i105, $i106, $p107, $p108, $i109, $p110, $i111, $i112, $p113, $p114, $p115, $p116, $i117, $i118, $p119, $p120, $p121, $p122, $p123, $p124, $i125, $i126, $p127, $p128, $p129, $p130, $p131, $p132, $i133, $i134, $i135, $i136, $i137, $p138, $p139, $p140, $i141, $i142, $p143, $p144, $i145, $i146, $p147, $p148, $i149, $i150, $p66, $p151, $p65, $p152, $i153, $p154, $i155, $i156, $p157, $i158, $p159, $i160, $p161, $p162, $i163, $p164, $p165, $p166, $p168, $p169, $p170, $i171, $i172, $p173, $i174, $i175, $p176, $i177, $p178, $p179, $i180, $p181, $i182, $i183, $p184, $i185, $p186, $i187, $i188, $p189, vslice_dummy_var_100);
    goto $bb11_last;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, 1);
    call {:si_unique_call 1591} {:cexpr "i"} boogie_si_record_i32($i46);
    $p47 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i49 == 1);
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $p51 := $0.ref;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} $p52 := fimc_find_format($0.ref, $p51, 1, $i45);
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p52, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    call {:si_unique_call 1593} {:cexpr "tmp___2"} boogie_si_record_i32($i56);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    $p58 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i56);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p44);
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i62, $i63);
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    $p65 := $p44;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    $p152 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.0, $p152);
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $i156 := $ne.i32($i153, $i155);
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p52, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.0, $p157);
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p5, $i158);
    $p159 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p159);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p161, $i160);
    $p162 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $p162);
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p164, $i163);
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} vslice_dummy_var_100 := fimc_capture_try_format($p0, $p165, $p166, $0.ref, $p5, 0);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} $p170 := fimc_capture_try_format($p0, $p168, $p169, $0.ref, $p5, 2);
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $i171 := $p2i.ref.i64($p170);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $i172 := $ne.i64($i171, 0);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i172 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    $p179 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.0, $p179);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.0, $p181);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i180, $i182);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb68;

  $bb68:
    assume !($i183 == 1);
    $p184 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.0, $p184);
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.0, $p186);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $i188 := $ne.i32($i185, $i187);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $p189 := $p170;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    $p190 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.0, $p190);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p192, $i191);
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i193 := $p2i.ref.i64($p2);
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $i194 := $ne.i64($i193, 0);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i194 == 1);
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p197 := $bitcast.ref.ref($p1);
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p17);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_47 := $M.0;
    cmdloc_dummy_var_48 := $M.0;
    call {:si_unique_call 1601} cmdloc_dummy_var_49 := $memcpy.i8(cmdloc_dummy_var_47, cmdloc_dummy_var_48, $p197, $p198, 48, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_49;
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb73:
    assume $i194 == 1;
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    $i195 := $p2i.ref.i64($p189);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $i196 := $ne.i64($i195, 0);
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i196 == 1);
    goto $bb75;

  $bb76:
    assume $i196 == 1;
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p189);
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i188 == 1;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p44, $i45 := $p65, $i46;
    goto $bb58_dummy;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i183 == 1;
    goto $bb67;

  $bb60:
    assume $i172 == 1;
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p170, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.0, $p173);
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    $i175 := $ne.i32($i174, 0);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i175 == 1);
    goto $bb62;

  $bb63:
    assume $i175 == 1;
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p170, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $p176);
    $p178 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p178, $i177);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb56:
    assume $i156 == 1;
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb18:
    assume $i64 == 1;
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    $p66 := $p44;
    goto $bb21;

  $bb21:
    call $p67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $p78, $p79, $p80, $p81, $p82, $i83, $i84, $p85, $p86, $p87, $p88, $p89, $p90, $i91, $i92, $i93, $i94, $i95, $p96, $p97, $p98, $i99, $i100, $i101, $i102, $p103, $i104, $i105, $i106, $p107, $p108, $i109, $p110, $i111, $i112, $p113, $p114, $p115, $p116, $i117, $i118, $p119, $p120, $p121, $p122, $p123, $p124, $i125, $i126, $p127, $p128, $p129, $p130, $p131, $p132, $i133, $i134, $i135, $i136, $i137, $p138, $p139, $p140, $i141, $i142, $p143, $p144, $i145, $i146, $p147, $p148, $i149, $i150, $p66, $p151 := fimc_pipeline_try_format_loop_$bb21($p1, $p4, $i62, $p67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $p78, $p79, $p80, $p81, $p82, $i83, $i84, $p85, $p86, $p87, $p88, $p89, $p90, $i91, $i92, $i93, $i94, $i95, $p96, $p97, $p98, $i99, $i100, $i101, $i102, $p103, $i104, $i105, $i106, $p107, $p108, $i109, $p110, $i111, $i112, $p113, $p114, $p115, $p116, $i117, $i118, $p119, $p120, $p121, $p122, $p123, $p124, $i125, $i126, $p127, $p128, $p129, $p130, $p131, $p132, $i133, $i134, $i135, $i136, $i137, $p138, $p139, $p140, $i141, $i142, $p143, $p144, $i145, $i146, $p147, $p148, $i149, $i150, $p66, $p151);
    goto $bb21_last;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, 0);
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p67);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i93 := $sub.i32(0, 19);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $i95 := $i93;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p66, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.23, $p96);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $i99 := $load.i64($M.0, $p98);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i64.i32($i99);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i100, 1);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p66, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.23, $p138);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.0, $p140);
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    $i142 := $zext.i32.i64($i141);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($p139, $mul.ref($i142, 24));
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} $p144 := media_entity_remote_pad($p143);
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p144);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    $i146 := $eq.i64($i145, 0);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p144, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p147);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    $i149 := $p2i.ref.i64($p148);
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $i150 := $ne.i64($i62, $i149);
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $p151 := $p148;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    $p65 := $p151;
    goto $bb20;

  $bb53:
    assume $i150 == 1;
    assume {:verifier.code 0} true;
    $p66 := $p148;
    goto $bb53_dummy;

  $bb50:
    assume $i146 == 1;
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 22);
    goto $bb9;

  $bb35:
    assume $i102 == 1;
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p66, $mul.ref(0, 120)), $mul.ref(60, 1));
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $i104 := $load.i16($M.23, $p103);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $i105 := $zext.i16.i32($i104);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i105, $sub.i32(0, 1));
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p107, $i106);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    $p110 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p110, $i109);
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p67);
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i111, 0);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    $i135 := $sub.i32(0, 19);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i135, 0);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $i137 := $i135;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb46:
    assume $i136 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $i34 := $i137;
    goto $bb9;

  $bb37:
    assume $i112 == 1;
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p67, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.24, $p113);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p116);
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    $i118 := $ne.i64($i117, 0);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i134 := $sub.i32(0, 515);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $i135 := $i134;
    goto $bb45;

  $bb39:
    assume $i118 == 1;
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p67, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.24, $p119);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p120, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p122, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $i125 := $p2i.ref.i64($p124);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $i126 := $ne.i64($i125, 0);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb41;

  $bb42:
    assume $i126 == 1;
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p67, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.24, $p127);
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p128, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p130, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    call {:si_unique_call 1596} $i133 := devirtbounce.11($p132, $p67, $0.ref, $p4);
    call {:si_unique_call 1597} {:cexpr "tmp___5"} boogie_si_record_i32($i133);
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $i134 := $i133;
    goto $bb44;

  $bb32:
    assume $i94 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $i34 := $i95;
    goto $bb9;

  $bb23:
    assume $i70 == 1;
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p67, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.24, $p71);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32(0, 515);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $i93 := $i92;
    goto $bb31;

  $bb25:
    assume $i76 == 1;
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p67, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.24, $p77);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb27;

  $bb28:
    assume $i84 == 1;
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p67, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.24, $p85);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    call {:si_unique_call 1594} $i91 := devirtbounce.11($p90, $p67, $0.ref, $p4);
    call {:si_unique_call 1595} {:cexpr "tmp___3"} boogie_si_record_i32($i91);
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $i92 := $i91;
    goto $bb30;

  $bb15:
    assume $i54 == 1;
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 22);
    goto $bb9;

  $bb12:
    assume $i49 == 1;
    $p50 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    $p51 := $p50;
    goto $bb14;

  $bb7:
    assume $i33 == 1;
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 22);
    goto $bb9;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} warn_slowpath_null(.str.29, 796);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb53_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9526;

  $bb58_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9498;
}



const __fimc_md_get_subdev: ref;

axiom __fimc_md_get_subdev == $sub.ref(0, 634034);

procedure __fimc_md_get_subdev($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __fimc_md_get_subdev($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i1;
  var $i7: i64;
  var $p9: ref;
  var $p10: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} {:cexpr "__fimc_md_get_subdev:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i1, 4);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i1);
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i7, 8));
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $p6 := $p10;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const fimc_get_sensor_frame_desc: ref;

axiom fimc_get_sensor_frame_desc == $sub.ref(0, 635066);

procedure fimc_get_sensor_frame_desc($p0: ref, $p1: ref, $i2: i32, $i3: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.0, $CurrAddr;



implementation fimc_get_sensor_frame_desc($p0: ref, $p1: ref, $i2: i32, $i3: i1) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $i8: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i7: i32;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i49: i32;
  var $i75: i1;
  var $p77: ref;
  var $i78: i16;
  var $i79: i32;
  var $i80: i1;
  var $i81: i1;
  var $i83: i64;
  var $p86: ref;
  var $i87: i32;
  var $i88: i64;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $i82: i32;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p104: ref;
  var $i105: i32;
  var $i76: i32;
  var vslice_dummy_var_101: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} $p4 := $alloc($mul.ref(52, $zext.i32.i64(1)));
    call {:si_unique_call 1604} {:cexpr "fimc_get_sensor_frame_desc:arg:num_planes"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i3);
    call {:si_unique_call 1605} {:cexpr "fimc_get_sensor_frame_desc:arg:try"} boogie_si_record_i1($i3);
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    $i6 := $ult.i32(0, $i2);
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(60, 1));
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, $sub.i32(0, 1));
    call {:si_unique_call 1607} {:cexpr "pad"} boogie_si_record_i32($i22);
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i5);
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p0);
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i74 := $sub.i32(0, 19);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i49 := $i74;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i49, 0);
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 52)), $mul.ref(48, 1));
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $i78 := $load.i16($M.27, $p77);
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i78);
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, $i2);
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i81 := $ult.i32(0, $i2);
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 52)), $mul.ref(0, 1)), $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.27, $p95);
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $i97 := $ugt.i32($i96, 10485760);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i76 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    $r := $i76;
    return;

  $bb45:
    assume $i97 == 1;
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(152, 1));
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 52)), $mul.ref(0, 1)), $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.27, $p104);
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} vslice_dummy_var_101 := printk.ref.ref.i32(.str.97, $p101, $i105);
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    $i76 := $sub.i32(0, 22);
    goto $bb32;

  $bb37:
    assume $i81 == 1;
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $i82 := 0;
    goto $bb40;

  $bb40:
    call $i83, $p86, $i87, $i88, $p90, $i91, $i92, $i82 := fimc_get_sensor_frame_desc_loop_$bb40($p1, $i2, $p4, $i83, $p86, $i87, $i88, $p90, $i91, $i92, $i82);
    goto $bb40_last;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i82);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 52)), $mul.ref(0, 1)), $mul.ref($i83, 12)), $mul.ref(8, 1));
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.27, $p86);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $i88 := $sext.i32.i64($i82);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref($i88, 20)), $mul.ref(0, 1));
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, $i87);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i82, 1);
    call {:si_unique_call 1612} {:cexpr "i"} boogie_si_record_i32($i91);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    $i92 := $ult.i32($i91, $i2);
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i92 == 1);
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb42:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $i82 := $i91;
    goto $bb42_dummy;

  $bb34:
    assume $i80 == 1;
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $i76 := $sub.i32(0, 22);
    goto $bb32;

  $bb30:
    assume $i75 == 1;
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $i76 := $i49;
    goto $bb32;

  $bb21:
    assume $i51 == 1;
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32(0, 515);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    $i74 := $i73;
    goto $bb29;

  $bb23:
    assume $i57 == 1;
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb25;

  $bb26:
    assume $i65 == 1;
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    call {:si_unique_call 1610} $i72 := devirtbounce.12($p71, $p0, $i22, $p4);
    call {:si_unique_call 1611} {:cexpr "tmp___1"} boogie_si_record_i32($i72);
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    $i73 := $i72;
    goto $bb28;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p0);
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i48 := $sub.i32(0, 19);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $i49 := $i48;
    goto $bb20;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 515);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $i48 := $i47;
    goto $bb19;

  $bb13:
    assume $i31 == 1;
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb15;

  $bb16:
    assume $i39 == 1;
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    call {:si_unique_call 1608} $i46 := devirtbounce.12($p45, $p0, $i22, $p4);
    call {:si_unique_call 1609} {:cexpr "tmp"} boogie_si_record_i32($i46);
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb18;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $i8, $p10, $i11, $i12, $p15, $i16, $i17, $i7 := fimc_get_sensor_frame_desc_loop_$bb4($p1, $i2, $p4, $i8, $p10, $i11, $i12, $p15, $i16, $i17, $i7);
    goto $bb4_last;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref($i8, 20)), $mul.ref(0, 1));
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i7);
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 52)), $mul.ref(0, 1)), $mul.ref($i12, 12)), $mul.ref(8, 1));
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p15, $i11);
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i7, 1);
    call {:si_unique_call 1606} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $i17 := $ult.i32($i16, $i2);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i16;
    goto $bb6_dummy;

  $bb42_dummy:
    assume false;
    return;

  $bb40_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9831;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9727;
}



const fimc_pipeline_get_head: ref;

axiom fimc_pipeline_get_head == $sub.ref(0, 636098);

procedure fimc_pipeline_get_head($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fimc_pipeline_get_head($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p8: ref;
  var $p9: ref;
  var $p23: ref;
  var $p7: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 2);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $p7 := $p0;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p14 := $p7;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $p8, $p9 := $p0, $p2;
    goto $bb4;

  $bb4:
    call $p10, $i11, $i12, $p13, $p15, $p16, $p17, $p18, $p19, $i20, $i21, $i22, $p8, $p9, $p23 := fimc_pipeline_get_head_loop_$bb4($p10, $i11, $i12, $p13, $p15, $p16, $p17, $p18, $p19, $i20, $i21, $i22, $p8, $p9, $p23);
    goto $bb4_last;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} $p10 := media_entity_remote_pad($p9);
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $p13 := $p8;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 2);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    $p23 := $p16;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    $p7 := $p23;
    goto $bb3;

  $bb10:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $p8, $p9 := $p16, $p18;
    goto $bb10_dummy;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    $p14 := $p13;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9868;
}



const media_entity_remote_pad: ref;

axiom media_entity_remote_pad == $sub.ref(0, 637130);

procedure media_entity_remote_pad($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation media_entity_remote_pad($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} $p1 := external_alloc();
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fimc_cap_querycap: ref;

axiom fimc_cap_querycap == $sub.ref(0, 638162);

procedure fimc_cap_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fimc_cap_querycap($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} $p3 := video_drvdata($p0);
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(232, 1));
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} __fimc_vidioc_querycap($p7, $p2, 67112960);
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const fimc_cap_enum_fmt_mplane: ref;

axiom fimc_cap_enum_fmt_mplane == $sub.ref(0, 639194);

procedure fimc_cap_enum_fmt_mplane($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_cap_enum_fmt_mplane($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i8: i32;
  var vslice_dummy_var_102: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} $p5 := fimc_find_format($0.ref, $0.ref, 7, $i4);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} vslice_dummy_var_102 := strncpy($p10, $p12, 31);
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 16385);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i21, 1);
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;
}



const fimc_cap_g_fmt_mplane: ref;

axiom fimc_cap_g_fmt_mplane == $sub.ref(0, 640226);

procedure fimc_cap_g_fmt_mplane($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_cap_g_fmt_mplane($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} $p3 := video_drvdata($p0);
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 880)), $mul.ref(152, 1));
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} __fimc_get_format($p8, $p2);
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const fimc_cap_s_fmt_mplane: ref;

axiom fimc_cap_s_fmt_mplane == $sub.ref(0, 641258);

procedure fimc_cap_s_fmt_mplane($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, $M.25, $M.27;



implementation fimc_cap_s_fmt_mplane($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} $p3 := video_drvdata($p0);
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} $i5 := __fimc_capture_set_format($p4, $p2);
    call {:si_unique_call 1624} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const fimc_cap_try_fmt_mplane: ref;

axiom fimc_cap_try_fmt_mplane == $sub.ref(0, 642290);

procedure fimc_cap_try_fmt_mplane($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.25, $M.27, $CurrAddr;



implementation fimc_cap_try_fmt_mplane($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} $p5 := video_drvdata($p0);
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $0.ref);
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $0.ref);
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} $i7 := __video_try_or_set_format($p6, $p2, 1, $p4, $p3);
    call {:si_unique_call 1629} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const fimc_cap_reqbufs: ref;

axiom fimc_cap_reqbufs == $sub.ref(0, 643322);

procedure fimc_cap_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_cap_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} $p3 := video_drvdata($p0);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} $i5 := vb2_ioctl_reqbufs($p0, $p1, $p2);
    call {:si_unique_call 1632} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3268, 1));
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i8);
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vb2_ioctl_querybuf: ref;

axiom vb2_ioctl_querybuf == $sub.ref(0, 644354);

procedure vb2_ioctl_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_ioctl_querybuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1633} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1634} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vb2_ioctl_qbuf: ref;

axiom vb2_ioctl_qbuf == $sub.ref(0, 645386);

procedure vb2_ioctl_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_ioctl_qbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1635} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1636} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vb2_ioctl_expbuf: ref;

axiom vb2_ioctl_expbuf == $sub.ref(0, 646418);

procedure vb2_ioctl_expbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_ioctl_expbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1637} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1638} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vb2_ioctl_dqbuf: ref;

axiom vb2_ioctl_dqbuf == $sub.ref(0, 647450);

procedure vb2_ioctl_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_ioctl_dqbuf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1639} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1640} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vb2_ioctl_create_bufs: ref;

axiom vb2_ioctl_create_bufs == $sub.ref(0, 648482);

procedure vb2_ioctl_create_bufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_ioctl_create_bufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1641} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1642} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vb2_ioctl_prepare_buf: ref;

axiom vb2_ioctl_prepare_buf == $sub.ref(0, 649514);

procedure vb2_ioctl_prepare_buf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_ioctl_prepare_buf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1643} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1644} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const fimc_cap_streamon: ref;

axiom fimc_cap_streamon == $sub.ref(0, 650546);

procedure fimc_cap_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, $M.25;



implementation fimc_cap_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i8;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i30: i32;
  var $i12: i32;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} {:cexpr "fimc_cap_streamon:arg:type"} boogie_si_record_i32($i2);
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} $p3 := video_drvdata($p0);
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} $i9 := fimc_capture_active($p4);
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i8($i9);
    call {:si_unique_call 1648} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p14 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} $i17 := media_entity_pipeline_start($p8, $p16);
    call {:si_unique_call 1650} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p20 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} $p22 := __fimc_md_get_subdev($p21, 0);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $p27 := $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    $p31 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2360, 1));
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p27);
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_50 := $M.0;
    cmdloc_dummy_var_51 := $M.0;
    call {:si_unique_call 1654} cmdloc_dummy_var_52 := $memcpy.i8(cmdloc_dummy_var_50, cmdloc_dummy_var_51, $p32, $p33, 12, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_52;
    $p34 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3280, 1));
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 16384);
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    $p39 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3284, 1));
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i40);
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} $i44 := vb2_ioctl_streamon($p0, $p1, $i2);
    call {:si_unique_call 1658} {:cexpr "ret"} boogie_si_record_i32($i44);
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i30 := $i44;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} media_entity_pipeline_stop($p8);
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    $i12 := $i30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb24:
    assume $i45 == 1;
    $p46 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3272, 1));
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, 1);
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $i12 := $i44;
    goto $bb3;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} $i42 := fimc_pipeline_validate($p4);
    call {:si_unique_call 1656} {:cexpr "ret"} boogie_si_record_i32($i42);
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 0);
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i43 == 1;
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $i30 := $i42;
    goto $bb13;

  $bb15:
    assume $i36 == 1;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2360, 1)), $mul.ref(0, 1));
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 5);
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 32);
    goto $bb13;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} $p25 := v4l2_get_subdev_hostdata($p22);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    $p27 := $p25;
    goto $bb10;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $i12 := $i17;
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb3;
}



const fimc_cap_streamoff: ref;

axiom fimc_cap_streamoff == $sub.ref(0, 651578);

procedure fimc_cap_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_cap_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i6: i32;
  var $i7: i1;
  var $p11: ref;
  var $p12: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} {:cexpr "fimc_cap_streamoff:arg:type"} boogie_si_record_i32($i2);
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} $p3 := video_drvdata($p0);
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} $i6 := vb2_ioctl_streamoff($p0, $p1, $i2);
    call {:si_unique_call 1662} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p11 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} media_entity_pipeline_stop($p11);
    $p12 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3272, 1));
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;
}



const fimc_cap_enum_input: ref;

axiom fimc_cap_enum_input == $sub.ref(0, 652610);

procedure fimc_cap_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_cap_enum_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i10: i32;
  var vslice_dummy_var_103: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} $p3 := video_drvdata($p0);
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1));
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 2);
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} fimc_md_graph_lock($p6);
    $p12 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} $p14 := __fimc_md_get_subdev($p13, 0);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} fimc_md_graph_unlock($p6);
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p14, $mul.ref(0, 304)), $mul.ref(184, 1));
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} vslice_dummy_var_103 := strlcpy($p18, $p20, 32);
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;
}



const fimc_cap_g_input: ref;

axiom fimc_cap_g_input == $sub.ref(0, 653642);

procedure fimc_cap_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_cap_g_input($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const fimc_cap_s_input: ref;

axiom fimc_cap_s_input == $sub.ref(0, 654674);

procedure fimc_cap_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fimc_cap_s_input($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} {:cexpr "fimc_cap_s_input:arg:i"} boogie_si_record_i32($i2);
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $i4 := (if $i3 == 1 then 0 else $sub.i32(0, 22));
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const fimc_cap_g_selection: ref;

axiom fimc_cap_g_selection == $sub.ref(0, 655706);

procedure fimc_cap_g_selection($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_cap_g_selection($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i22: i1;
  var $i24: i1;
  var $p26: ref;
  var $p23: ref;
  var $p21: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p38: ref;
  var $p39: ref;
  var $p25: ref;
  var $p40: ref;
  var $i41: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p55: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} $p3 := video_drvdata($p0);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 9);
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 256);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i14, 257);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i14, 258);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i14, 258);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref(0, 880)), $mul.ref(152, 1));
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    $p23 := $p26;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $p21 := $p23;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 0);
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(4, 1));
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p21, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(8, 1));
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i32);
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p21, $mul.ref(0, 152)), $mul.ref(12, 1));
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(12, 1));
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i36);
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p7, $mul.ref(0, 880)), $mul.ref(152, 1));
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $p25 := $p39;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p25, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i41);
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p25, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(4, 1));
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i45);
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p25, $mul.ref(0, 152)), $mul.ref(24, 1));
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(8, 1));
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i49);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p25, $mul.ref(0, 152)), $mul.ref(28, 1));
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(12, 1));
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i53);
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i14, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i14, 2);
    assume {:verifier.code 0} true;
    $p21 := $p7;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i14, 2);
    assume {:verifier.code 0} true;
    $p23 := $p7;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb15;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb22;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb19;

  $bb16:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i14, 0);
    assume {:verifier.code 0} true;
    $p25 := $p7;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb15;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb25;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;
}



const fimc_cap_s_selection: ref;

axiom fimc_cap_s_selection == $sub.ref(0, 656738);

procedure fimc_cap_s_selection($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr;



implementation fimc_cap_s_selection($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p20: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p48: ref;
  var $i49: i32;
  var $p51: ref;
  var $i52: i32;
  var $p54: ref;
  var $i55: i32;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $i15: i32;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} $p4 := video_drvdata($p0);
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p3);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p9);
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.0;
    cmdloc_dummy_var_54 := $M.0;
    call {:si_unique_call 1673} cmdloc_dummy_var_55 := $memcpy.i8(cmdloc_dummy_var_53, cmdloc_dummy_var_54, $p10, $p11, 16, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_55;
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 9);
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 256);
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $p8;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} fimc_capture_try_selection($p8, $p3, $i26);
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 2);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 1);
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p3);
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_56 := $M.0;
    cmdloc_dummy_var_57 := $M.0;
    call {:si_unique_call 1679} cmdloc_dummy_var_58 := $memcpy.i8(cmdloc_dummy_var_56, cmdloc_dummy_var_57, $p42, $p43, 16, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_58;
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} $p45 := spinlock_check($p44);
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} $i46 := _raw_spin_lock_irqsave($p45);
    call {:si_unique_call 1682} {:cexpr "flags"} boogie_si_record_i64($i46);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(4, 1));
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(8, 1));
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1)), $mul.ref(12, 1));
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} set_frame_crop($p20, $i49, $i52, $i55, $i58);
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(0, 1));
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} spin_unlock_irqrestore($p59, $i46);
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} set_bit(12, $p60);
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} $i39 := enclosed_rectangle($p38, $p3);
    call {:si_unique_call 1678} {:cexpr "tmp___1"} boogie_si_record_i32($i39);
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i40 == 1;
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 34);
    goto $bb3;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} $i32 := enclosed_rectangle($p3, $p31);
    call {:si_unique_call 1676} {:cexpr "tmp___0"} boogie_si_record_i32($i32);
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 34);
    goto $bb3;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(152, 1));
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    $p20 := $p19;
    goto $bb7;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;
}



const enclosed_rectangle: ref;

axiom enclosed_rectangle == $sub.ref(0, 657770);

procedure enclosed_rectangle($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation enclosed_rectangle($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i3, $i5);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i8, $i10);
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i14, $i16);
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i19, $i21);
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i17, $i22);
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i25, $i27);
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i30, $i32);
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    $i34 := $ugt.i32($i28, $i33);
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 658802);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1686} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1687} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1688} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vb2_ioctl_streamoff: ref;

axiom vb2_ioctl_streamoff == $sub.ref(0, 659834);

procedure vb2_ioctl_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_ioctl_streamoff($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1689} {:cexpr "vb2_ioctl_streamoff:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1690} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1691} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const media_entity_pipeline_start: ref;

axiom media_entity_pipeline_start == $sub.ref(0, 660866);

procedure media_entity_pipeline_start($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation media_entity_pipeline_start($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1692} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1693} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fimc_pipeline_validate: ref;

axiom fimc_pipeline_validate == $sub.ref(0, 661898);

procedure fimc_pipeline_validate($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, $M.25;



implementation fimc_pipeline_validate($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p45: ref;
  var $p46: ref;
  var $p17: ref;
  var $p18: ref;
  var $p37: ref;
  var $p38: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $i61: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $p78: ref;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $i110: i1;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i16;
  var $i117: i32;
  var $p118: ref;
  var $p119: ref;
  var $i120: i64;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i64;
  var $i127: i1;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i64;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $i144: i32;
  var $i145: i1;
  var $i146: i1;
  var $p148: ref;
  var $i149: i32;
  var $p151: ref;
  var $i152: i32;
  var $i153: i1;
  var $p155: ref;
  var $i156: i32;
  var $p158: ref;
  var $i159: i32;
  var $i160: i1;
  var $p162: ref;
  var $i163: i32;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $p169: ref;
  var $p170: ref;
  var $i171: i64;
  var $i172: i64;
  var $i173: i1;
  var $p175: ref;
  var $i176: i32;
  var $i177: i1;
  var $i178: i8;
  var $i179: i1;
  var $p180: ref;
  var $p181: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $i187: i16;
  var $i188: i32;
  var $i189: i32;
  var $i190: i1;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $i194: i16;
  var $i195: i32;
  var $i196: i1;
  var $i198: i64;
  var $p200: ref;
  var $i201: i32;
  var $i202: i64;
  var $p204: ref;
  var $i205: i32;
  var $i206: i1;
  var $i207: i32;
  var $p208: ref;
  var $p209: ref;
  var $i210: i16;
  var $i211: i32;
  var $i212: i1;
  var $i197: i32;
  var $i111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} $p1 := $alloc($mul.ref(88, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} $p2 := $alloc($mul.ref(88, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} $p3 := $alloc($mul.ref(60, $zext.i32.i64(1)));
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1));
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    $p10, $p11 := $u1, $p5;
    goto $bb1;

  $bb1:
    call $p10, $p11, $p13, $i14, $i15, $i16, $p23, $p24, $i25, $p26, $p27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $p35, $p36, $p39, $p40, $i41, $i42, $i43, $i44, $p19, $p20, $i21, $p45, $p46, $p17, $p18, $p37, $p38, $i47, $i48, $p49, $p50, $i51, $i52, $p53, $i54, $i55, $i56, $p57, $p58, $p60, $i61, $p63, $p64, $i65, $p67, $p68, $p69, $i70, $i71, $p72, $p73, $p74, $i75, $i76, $p78, $p79, $i80, $i81, $p82, $p83, $i84, $i85, $p86, $p87, $p88, $p89, $i90, $i91, $p92, $p93, $p94, $p95, $p96, $p97, $i98, $i99, $p100, $p101, $p102, $p103, $p104, $p105, $i106, $i107, $i108, $i109, $i110, $p112, $p113, $p114, $p115, $i116, $i117, $p118, $p119, $i120, $i121, $p122, $p123, $p124, $p125, $i126, $i127, $p128, $p129, $p130, $p131, $p132, $p133, $i134, $i135, $p136, $p137, $p138, $p139, $p140, $p141, $i142, $i143, $i144, $i145, $i146, $p148, $i149, $p151, $i152, $i153, $p155, $i156, $p158, $i159, $i160, $p162, $i163, $p165, $i166, $i167, $p169, $p170, $i171, $i172, $i173, $p175, $i176, $i177, $i178, $i179, $p180, $p181, $p183, $p184, $p185, $p186, $i187, $i188, $i189, $i190, $p191, $p192, $p193, $i194, $i195, $i196, $i198, $p200, $i201, $i202, $p204, $i205, $i206, $i207, $p208, $p209, $i210, $i211, $i212, $i197 := fimc_pipeline_validate_loop_$bb1($p0, $p1, $p2, $p3, $p9, $p10, $p11, $p13, $i14, $i15, $i16, $p23, $p24, $i25, $p26, $p27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $p35, $p36, $p39, $p40, $i41, $i42, $i43, $i44, $p19, $p20, $i21, $p45, $p46, $p17, $p18, $p37, $p38, $i47, $i48, $p49, $p50, $i51, $i52, $p53, $i54, $i55, $i56, $p57, $p58, $p60, $i61, $p63, $p64, $i65, $p67, $p68, $p69, $i70, $i71, $p72, $p73, $p74, $i75, $i76, $p78, $p79, $i80, $i81, $p82, $p83, $i84, $i85, $p86, $p87, $p88, $p89, $i90, $i91, $p92, $p93, $p94, $p95, $p96, $p97, $i98, $i99, $p100, $p101, $p102, $p103, $p104, $p105, $i106, $i107, $i108, $i109, $i110, $p112, $p113, $p114, $p115, $i116, $i117, $p118, $p119, $i120, $i121, $p122, $p123, $p124, $p125, $i126, $i127, $p128, $p129, $p130, $p131, $p132, $p133, $i134, $i135, $p136, $p137, $p138, $p139, $p140, $p141, $i142, $i143, $i144, $i145, $i146, $p148, $i149, $p151, $i152, $i153, $p155, $i156, $p158, $i159, $i160, $p162, $i163, $p165, $i166, $i167, $p169, $p170, $i171, $i172, $i173, $p175, $i176, $i177, $i178, $i179, $p180, $p181, $p183, $p184, $p185, $p186, $i187, $i188, $i189, $i190, $p191, $p192, $p193, $i194, $i195, $i196, $i198, $p200, $i201, $i202, $p204, $i205, $i206, $i207, $p208, $p209, $i210, $i211, $i212, $i197);
    goto $bb1_last;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(60, 1));
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i15, 0);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    $p17, $p18 := $0.ref, $p10;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p37, $p38 := $p17, $p18;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p37);
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i48 == 1);
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p37, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} $i51 := media_entity_type($p50);
    call {:si_unique_call 1700} {:cexpr "tmp"} boogie_si_record_i32($i51);
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 131072);
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1));
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p11);
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i54, $i55);
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i56 == 1);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p38, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    $i80 := $load.i16($M.0, $p79);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, $i81);
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, 1);
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p11);
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    $i108 := $sub.i32(0, 19);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i108, 0);
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p37, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p113);
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p37, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    $i116 := $load.i16($M.0, $p115);
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    $i117 := $zext.i16.i32($i116);
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p118, $i117);
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p119, 1);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p114);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    $i121 := $ne.i64($i120, 0);
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    $i144 := $sub.i32(0, 19);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    $i145 := $slt.i32($i144, 0);
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i145 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.0, $p148);
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.0, $p151);
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $i153 := $ne.i32($i149, $i152);
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb63;

  $bb63:
    assume !($i153 == 1);
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    $i156 := $load.i32($M.0, $p155);
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $p158);
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i156, $i159);
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i160 == 1);
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.0, $p162);
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.0, $p165);
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i163, $i166);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $i171 := $p2i.ref.i64($p170);
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $i172 := $p2i.ref.i64($p114);
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $i173 := $eq.i64($i171, $i172);
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p10, $p11 := $p38, $p113;
    goto $bb88_dummy;

  $bb69:
    assume $i173 == 1;
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $i176 := $load.i32($M.0, $p175);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} $i177 := fimc_user_defined_mbus_fmt($i176);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    $i178 := $zext.i1.i8($i177);
    call {:si_unique_call 1706} {:cexpr "tmp___4"} boogie_si_record_i8($i178);
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    $i179 := $trunc.i8.i1($i178);
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb71:
    assume $i179 == 1;
    $p180 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p3);
    $p184 := $add.ref($add.ref($add.ref($p181, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.0, $p184);
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p185, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    $i187 := $load.i16($M.0, $p186);
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    $i188 := $zext.i16.i32($i187);
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} $i189 := fimc_get_sensor_frame_desc($p114, $p183, $i188, 0);
    call {:si_unique_call 1708} {:cexpr "ret"} boogie_si_record_i32($i189);
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    $i190 := $slt.i32($i189, 0);
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    $p191 := $add.ref($add.ref($add.ref($p181, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p192, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    $i194 := $load.i16($M.0, $p193);
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    $i195 := $zext.i16.i32($i194);
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $i196 := $ugt.i32($i195, 0);
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i196 == 1);
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb76:
    assume $i196 == 1;
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $i197 := 0;
    goto $bb79;

  $bb79:
    call $i198, $p200, $i201, $i202, $p204, $i205, $i206, $i207, $p208, $p209, $i210, $i211, $i212, $i197 := fimc_pipeline_validate_loop_$bb79($p3, $p181, $p191, $i198, $p200, $i201, $i202, $p204, $i205, $i206, $i207, $p208, $p209, $i210, $i211, $i212, $i197);
    goto $bb79_last;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i198 := $zext.i32.i64($i197);
    $p200 := $add.ref($add.ref($add.ref($add.ref($p181, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(32, 1)), $mul.ref($i198, 4));
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.0, $p200);
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    $i202 := $zext.i32.i64($i197);
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 60)), $mul.ref($i202, 20)), $mul.ref(0, 1));
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.0, $p204);
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    $i206 := $ult.i32($i201, $i205);
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i207 := $add.i32($i197, 1);
    call {:si_unique_call 1709} {:cexpr "i___0"} boogie_si_record_i32($i207);
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p191);
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p208, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    $i210 := $load.i16($M.0, $p209);
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    $i211 := $zext.i16.i32($i210);
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    $i212 := $ugt.i32($i211, $i207);
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i212 == 1);
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb84:
    assume $i212 == 1;
    assume {:verifier.code 0} true;
    $i197 := $i207;
    goto $bb84_dummy;

  $bb81:
    assume $i206 == 1;
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    $i111 := $sub.i32(0, 32);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    $r := $i111;
    return;

  $bb73:
    assume $i190 == 1;
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    $i111 := $sub.i32(0, 32);
    goto $bb44;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i167 == 1;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i111 := $sub.i32(0, 32);
    goto $bb44;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i160 == 1;
    goto $bb62;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i153 == 1;
    goto $bb62;

  $bb55:
    assume $i145 == 1;
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i144, $sub.i32(0, 515));
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb57;

  $bb58:
    assume $i146 == 1;
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    $i111 := $sub.i32(0, 32);
    goto $bb44;

  $bb46:
    assume $i121 == 1;
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p114, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p125);
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i143 := $sub.i32(0, 515);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    $i144 := $i143;
    goto $bb54;

  $bb48:
    assume $i127 == 1;
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p114, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.0, $p128);
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p129, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p131, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p133);
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $i135 := $ne.i64($i134, 0);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb50;

  $bb51:
    assume $i135 == 1;
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p114, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p139, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    call {:si_unique_call 1703} $i142 := devirtbounce.11($p141, $p114, $0.ref, $p2);
    call {:si_unique_call 1704} {:cexpr "tmp___2"} boogie_si_record_i32($i142);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    $i143 := $i142;
    goto $bb53;

  $bb39:
    assume $i109 == 1;
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i108, $sub.i32(0, 515));
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb41;

  $bb42:
    assume $i110 == 1;
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    $i111 := $sub.i32(0, 32);
    goto $bb44;

  $bb30:
    assume $i85 == 1;
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p11, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i107 := $sub.i32(0, 515);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    $i108 := $i107;
    goto $bb38;

  $bb32:
    assume $i91 == 1;
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p11, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, 0);
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb34;

  $bb35:
    assume $i99 == 1;
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p11, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    call {:si_unique_call 1701} $i106 := devirtbounce.11($p105, $p11, $0.ref, $p1);
    call {:si_unique_call 1702} {:cexpr "tmp___0"} boogie_si_record_i32($i106);
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    $i107 := $i106;
    goto $bb37;

  $bb24:
    assume $i56 == 1;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p58, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i61);
    $p64 := $add.ref($add.ref($add.ref($p58, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i65);
    $p68 := $add.ref($add.ref($add.ref($p58, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i71 == 1);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $i76 := 0;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i76);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i71 == 1;
    $p72 := $add.ref($add.ref($add.ref($p58, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $i76 := $i75;
    goto $bb28;

  $bb20:
    assume $i52 == 1;
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i111 := 0;
    goto $bb44;

  $bb17:
    assume $i48 == 1;
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb2:
    assume $i16 == 1;
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    $p19, $p20, $i21 := $p10, $0.ref, 0;
    goto $bb5;

  $bb5:
    call $p23, $p24, $i25, $p26, $p27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $p35, $p36, $p39, $p40, $i41, $i42, $i43, $i44, $p19, $p20, $i21, $p45, $p46 := fimc_pipeline_validate_loop_$bb5($p11, $p13, $p23, $p24, $i25, $p26, $p27, $i28, $i29, $i30, $i31, $p32, $i33, $i34, $p35, $p36, $p39, $p40, $i41, $i42, $i43, $i44, $p19, $p20, $i21, $p45, $p46);
    goto $bb5_last;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i21);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p24, $mul.ref($i25, 24));
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p24, $mul.ref($i25, 24)), $mul.ref(16, 1));
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i32($i28);
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 1);
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $p39, $p40 := $p20, $p19;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i21, 1);
    call {:si_unique_call 1698} {:cexpr "i"} boogie_si_record_i32($i41);
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p13);
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    $i44 := $sgt.i32($i43, $i41);
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $p45, $p46 := $p39, $p40;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    $p17, $p18 := $p45, $p46;
    goto $bb4;

  $bb14:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $p19, $p20, $i21 := $p40, $p39, $i41;
    goto $bb14_dummy;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} $p32 := media_entity_remote_pad($p26);
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $p35, $p36 := $p26, $p32;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p39, $p40 := $p32, $p26;
    goto $bb13;

  $bb9:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    $p37, $p38 := $p36, $p35;
    goto $bb11;

  $bb84_dummy:
    assume false;
    return;

  $bb79_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10526;

  $bb14_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10303;

  $bb88_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10295;
}



const vb2_ioctl_streamon: ref;

axiom vb2_ioctl_streamon == $sub.ref(0, 662930);

procedure vb2_ioctl_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_ioctl_streamon($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1710} {:cexpr "vb2_ioctl_streamon:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1711} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1712} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const fimc_user_defined_mbus_fmt: ref;

axiom fimc_user_defined_mbus_fmt == $sub.ref(0, 663962);

procedure fimc_user_defined_mbus_fmt($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation fimc_user_defined_mbus_fmt($i0: i32) returns ($r: i1)
{
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} {:cexpr "fimc_user_defined_mbus_fmt:arg:code"} boogie_si_record_i32($i0);
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 16385);
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 20481);
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const vb2_ioctl_reqbufs: ref;

axiom vb2_ioctl_reqbufs == $sub.ref(0, 664994);

procedure vb2_ioctl_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vb2_ioctl_reqbufs($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1714} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1715} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const queue_setup: ref;

axiom queue_setup == $sub.ref(0, 666026);

procedure queue_setup($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation queue_setup($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i64;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i33: i64;
  var $i34: i1;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i1;
  var $i44: i64;
  var $p46: ref;
  var $i47: i8;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i32;
  var $i52: i64;
  var $i53: i1;
  var $i54: i64;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i64;
  var $p62: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i68: i64;
  var $p70: ref;
  var $i71: i32;
  var $i72: i64;
  var $p73: ref;
  var $i75: i64;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i64;
  var $p82: ref;
  var $i74: i32;
  var $i63: i32;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i88: i64;
  var $p89: ref;
  var $i90: i32;
  var $i91: i16;
  var $i92: i32;
  var $i93: i1;
  var $i43: i32;
  var $i35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 848)), $mul.ref(48, 1));
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p1);
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    $p27 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(0, 1));
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    $p29 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(4, 1));
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $i31 := $mul.i32($i28, $i30);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    call {:si_unique_call 1718} {:cexpr "wh"} boogie_si_record_i64($i32);
    assume {:verifier.code 0} true;
    $p24, $p25, $i26 := $0.ref, $p11, $i32;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p25);
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p25, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i38);
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p25, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i41, 0);
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  $bb8:
    assume $i42 == 1;
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb11;

  $bb11:
    call $i44, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $p57, $i58, $i59, $i60, $i61, $p62, $p64, $i65, $i66, $i67, $i68, $p70, $i71, $i72, $p73, $i75, $p77, $i78, $i79, $i80, $i81, $p82, $i74, $i63, $p83, $p84, $p85, $p86, $i88, $p89, $i90, $i91, $i92, $i93, $i43 := queue_setup_loop_$bb11($p4, $p5, $p8, $p24, $p25, $i26, $p39, $i44, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $p57, $i58, $i59, $i60, $i61, $p62, $p64, $i65, $i66, $i67, $i68, $p70, $i71, $i72, $p73, $i75, $p77, $i78, $i79, $i80, $i81, $p82, $i74, $i63, $p83, $p84, $p85, $p86, $i88, $p89, $i90, $i91, $i92, $i93, $i43);
    goto $bb11_last;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 40)), $mul.ref(29, 1)), $mul.ref($i44, 1));
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i64($i47);
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    $i49 := $mul.i64($i48, $i26);
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $i50 := $udiv.i64($i49, 8);
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i64.i32($i50);
    call {:si_unique_call 1719} {:cexpr "size"} boogie_si_record_i32($i51);
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p24);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i53 == 1);
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p25, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 384);
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i67 == 1);
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i43);
    $p77 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(32, 1)), $mul.ref($i75, 4));
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    call {:si_unique_call 1722} {:cexpr "__max2"} boogie_si_record_i32($i78);
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $i79 := $ugt.i32($i51, $i78);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i79 == 1);
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $i80 := $i78;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i43);
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p4, $mul.ref($i81, 4));
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, $i80);
    assume {:verifier.code 0} true;
    $i74 := $i43;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i63 := $i74;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 5568)), $mul.ref(5560, 1));
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    $i88 := $sext.i32.i64($i63);
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p5, $mul.ref($i88, 8));
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p89, $p86);
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i63, 1);
    call {:si_unique_call 1721} {:cexpr "i"} boogie_si_record_i32($i90);
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    $i91 := $load.i16($M.0, $p39);
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    $i92 := $zext.i16.i32($i91);
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    $i93 := $sgt.i32($i92, $i90);
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i93 == 1);
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb25:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    $i43 := $i90;
    goto $bb25_dummy;

  $bb22:
    assume $i79 == 1;
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    $i80 := $i51;
    goto $bb24;

  $bb19:
    assume $i67 == 1;
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i43);
    $p70 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(32, 1)), $mul.ref($i68, 4));
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i43);
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p4, $mul.ref($i72, 4));
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i71);
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    $i74 := $i43;
    goto $bb21;

  $bb13:
    assume $i53 == 1;
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i43);
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($add.ref($p24, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref($i54, 20)), $mul.ref(0, 1));
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    call {:si_unique_call 1720} {:cexpr "_max2"} boogie_si_record_i32($i58);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    $i59 := $ugt.i32($i51, $i58);
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i59 == 1);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $i60 := $i58;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i43);
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p4, $mul.ref($i61, 4));
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i60);
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $i63 := $i43;
    goto $bb18;

  $bb15:
    assume $i59 == 1;
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    $i60 := $i51;
    goto $bb17;

  $bb4:
    assume $i34 == 1;
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} $p17 := fimc_find_format($p16, $0.ref, 7, $sub.i32(0, 1));
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $i22 := $mul.i32($i19, $i21);
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    call {:si_unique_call 1717} {:cexpr "wh"} boogie_si_record_i64($i23);
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $p24, $p25, $i26 := $p14, $p17, $i23;
    goto $bb3;

  $bb25_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10605;
}



const buffer_prepare: ref;

axiom buffer_prepare == $sub.ref(0, 667058);

procedure buffer_prepare($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation buffer_prepare($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i1;
  var $i20: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p36: ref;
  var $p37: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i1;
  var $i19: i32;
  var $i11: i32;
  var vslice_dummy_var_104: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 928)), $mul.ref(600, 1));
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 848)), $mul.ref(48, 1));
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, 0);
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb8;

  $bb8:
    call $i20, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i39, $p40, $p41, $i42, $i43, $i44, $i19 := buffer_prepare_loop_$bb8($p0, $p5, $p13, $i20, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i39, $p40, $p41, $i42, $i43, $i44, $i19);
    goto $bb8_last;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(32, 1)), $mul.ref($i20, 4));
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    call {:si_unique_call 1723} {:cexpr "size"} boogie_si_record_i64($i25);
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} $i26 := vb2_plane_size($p0, $i19);
    call {:si_unique_call 1725} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    $i27 := $ult.i64($i26, $i25);
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    $i28, $i29 := $i19, $i25;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} vb2_set_plane_payload($p0, $i19, $i25);
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i19, 1);
    call {:si_unique_call 1730} {:cexpr "i"} boogie_si_record_i32($i39);
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p13);
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    $i44 := $sgt.i32($i43, $i39);
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i44 == 1);
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i19 := $i39;
    goto $bb13_dummy;

  $bb10:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} $i30 := vb2_plane_size($p0, $i28);
    call {:si_unique_call 1727} {:cexpr "tmp"} boogie_si_record_i64($i30);
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($add.ref($p32, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(1600, 1));
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} vslice_dummy_var_104 := printk.ref.ref.i64.i64(.str.109, $p37, $i30, $i29);
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10698;
}



const start_streaming___0: ref;

axiom start_streaming___0 == $sub.ref(0, 668090);

procedure start_streaming___0($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.28, $CurrAddr, $M.29, $M.32, $M.27, $M.25, $M.36, assertsPassed;



implementation start_streaming___0($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i12: i32;
  var vslice_dummy_var_105: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} {:cexpr "start_streaming___0:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 848)), $mul.ref(48, 1));
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3264, 1));
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} $i9 := fimc_capture_hw_init($p6);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    call {:si_unique_call 1733} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} set_bit(5, $p13);
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3268, 1));
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i32($i16, 1);
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $i18 := (if $i17 == 1 then 2 else 1);
    call {:si_unique_call 1736} {:cexpr "min_bufs"} boogie_si_record_i32($i18);
    $p19 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3256, 1));
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    $i21 := $sge.i32($i20, $i18);
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} $i23 := test_and_set_bit(7, $p22);
    call {:si_unique_call 1738} {:cexpr "tmp___3"} boogie_si_record_i32($i23);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} fimc_activate_capture($p4);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} $i26 := test_and_set_bit(8, $p25);
    call {:si_unique_call 1741} {:cexpr "tmp___2"} boogie_si_record_i32($i26);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb9:
    assume $i27 == 1;
    $p28 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1));
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i59 := $sub.i32(0, 2);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    $i12 := $i59;
    goto $bb3;

  $bb11:
    assume $i30 == 1;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_10767;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(0, 515);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb19;

  $bb13:
    assume $i37 == 1;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb15;

  $bb16:
    assume $i46 == 1;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    $p55 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    call {:si_unique_call 1742} $i57 := devirtbounce.7($p53, $p56, 1);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    call {:si_unique_call 1743} {:cexpr "tmp"} boogie_si_record_i32($i57);
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb18;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} vslice_dummy_var_105 := fimc_capture_state_cleanup($p6, 0);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb3;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;
}



const stop_streaming___0: ref;

axiom stop_streaming___0 == $sub.ref(0, 669122);

procedure stop_streaming___0($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.28, $M.29, $M.32, $M.27, $M.25, $M.36, assertsPassed;



implementation stop_streaming___0($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var vslice_dummy_var_106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 848)), $mul.ref(48, 1));
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} $i6 := fimc_capture_active($p5);
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 1745} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} vslice_dummy_var_106 := fimc_stop_capture($p5, 0);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;
}



const vb2_plane_size: ref;

axiom vb2_plane_size == $sub.ref(0, 670154);

procedure vb2_plane_size($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation vb2_plane_size($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} {:cexpr "vb2_plane_size:arg:plane_no"} boogie_si_record_i32($i1);
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 928)), $mul.ref(608, 1));
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    $i4 := $ugt.i32($i3, $i1);
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i1);
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 928)), $mul.ref(88, 1)), $mul.ref($i5, 64)), $mul.ref(4, 1));
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const __fimc_pipeline_open: ref;

axiom __fimc_pipeline_open == $sub.ref(0, 671186);

procedure __fimc_pipeline_open($p0: ref, $p1: ref, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $CurrAddr, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.28, $M.32, $M.27, $M.25, $M.36, assertsPassed;



implementation __fimc_pipeline_open($p0: ref, $p1: ref, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i64;
  var $i10: i1;
  var $i8: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i1;
  var $i34: i8;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i1;
  var $i55: i8;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p65: ref;
  var $p66: ref;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1748} {:cexpr "__fimc_pipeline_open:arg:prepare"} boogie_si_record_i1($i2);
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} $p4 := entity_to_fimc_mdev($p1);
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    $i8 := 1;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_10841;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    $i8 := $i10;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i8);
    call {:si_unique_call 1750} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i11);
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 1752} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 1755} {:cexpr "tmp___1"} boogie_si_record_i64($i20);
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i3);
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(376, 1)), $mul.ref(1, 8));
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} $i33 := IS_ERR($p32);
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i8($i33);
    call {:si_unique_call 1758} {:cexpr "tmp___2"} boogie_si_record_i8($i34);
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} $i48 := fimc_pipeline_s_power($p5, 1);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    call {:si_unique_call 1762} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(376, 1)), $mul.ref(1, 8));
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} $i54 := IS_ERR($p53);
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i8($i54);
    call {:si_unique_call 1764} {:cexpr "tmp___4"} boogie_si_record_i8($i55);
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1($i55);
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := 1;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i22 := $i48;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb35:
    assume $i58 == 1;
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(3, 8));
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb37;

  $bb38:
    assume $i63 == 1;
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(376, 1)), $mul.ref(1, 8));
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} clk_disable_unprepare($p66);
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume $i56 == 1;
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb34;

  $bb29:
    assume $i49 == 1;
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb9;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i37 == 1;
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(3, 8));
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb22;

  $bb23:
    assume $i42 == 1;
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(376, 1)), $mul.ref(1, 8));
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} $i46 := clk_prepare_enable($p45);
    call {:si_unique_call 1760} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 0);
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i47 == 1;
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    $i22 := $i46;
    goto $bb9;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb19;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 22);
    goto $bb9;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} fimc_pipeline_prepare($p5, $p1);
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 22);
    goto $bb9;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} warn_slowpath_null(.str.132, 205);
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const __fimc_pipeline_close: ref;

axiom __fimc_pipeline_close == $sub.ref(0, 672218);

procedure __fimc_pipeline_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.0, $CurrAddr, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.28, $M.32, $M.27, $M.25, $M.36, assertsPassed;



implementation __fimc_pipeline_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i1;
  var $i33: i32;
  var $i11: i32;
  var vslice_dummy_var_107: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    $p7 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} $i12 := fimc_pipeline_s_power($p1, 0);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    call {:si_unique_call 1768} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} $p14 := entity_to_fimc_mdev($p13);
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 3216)), $mul.ref(376, 1)), $mul.ref(1, 8));
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} $i19 := IS_ERR($p18);
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 1771} {:cexpr "tmp"} boogie_si_record_i8($i20);
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i12, $sub.i32(0, 6));
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    $i11 := $i33;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    $i33 := $i12;
    goto $bb19;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(3, 8));
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb13;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 3216)), $mul.ref(376, 1)), $mul.ref(1, 8));
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} clk_disable_unprepare($p31);
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb10;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} vslice_dummy_var_107 := printk.ref.ref(.str.160, .str.161);
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const __fimc_pipeline_s_stream: ref;

axiom __fimc_pipeline_s_stream == $sub.ref(0, 673250);

procedure __fimc_pipeline_s_stream($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.29, $M.32, $M.27, $M.25, $M.36, assertsPassed;



implementation __fimc_pipeline_s_stream($p0: ref, $i1: i1) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i44: i64;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $i54: i64;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $i66: i64;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $p78: ref;
  var $p79: ref;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $i92: i64;
  var $i93: i1;
  var $i94: i32;
  var $i95: i64;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i64;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $i105: i1;
  var $i106: i64;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $i116: i64;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i64;
  var $i127: i1;
  var $i128: i64;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i64;
  var $p140: ref;
  var $p141: ref;
  var $i142: i1;
  var $i143: i1;
  var $i144: i32;
  var $i146: i32;
  var $i147: i1;
  var $i91: i32;
  var $i30: i32;
  var $i148: i1;
  var $i149: i32;
  var $i150: i64;
  var $p152: ref;
  var $i153: i8;
  var $i154: i32;
  var $i155: i64;
  var $p157: ref;
  var $p158: ref;
  var $i159: i64;
  var $i160: i1;
  var $i162: i64;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i64;
  var $i171: i1;
  var $i172: i64;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i182: i64;
  var $i183: i1;
  var $i185: i64;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i64;
  var $p197: ref;
  var $p198: ref;
  var $i199: i1;
  var $i200: i32;
  var $i201: i32;
  var $i184: i32;
  var $i161: i32;
  var $i202: i1;
  var $i203: i1;
  var $i204: i1;
  var $i205: i1;
  var $i206: i32;
  var $i207: i64;
  var $p209: ref;
  var $i210: i8;
  var $i211: i32;
  var $i212: i64;
  var $p214: ref;
  var $p215: ref;
  var $i216: i64;
  var $i217: i1;
  var $i219: i64;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $i227: i64;
  var $i228: i1;
  var $i229: i64;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $i239: i64;
  var $i240: i1;
  var $i242: i64;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $i252: i64;
  var $p254: ref;
  var $p255: ref;
  var $i256: i1;
  var $i257: i32;
  var $i258: i32;
  var $i241: i32;
  var $i218: i32;
  var $i259: i1;
  var $i260: i1;
  var $i261: i1;
  var $i262: i1;
  var $i263: i32;
  var $i264: i64;
  var $p266: ref;
  var $i267: i8;
  var $i268: i32;
  var $i269: i64;
  var $p271: ref;
  var $p272: ref;
  var $i273: i64;
  var $i274: i1;
  var $i276: i64;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $i284: i64;
  var $i285: i1;
  var $i286: i64;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $p294: ref;
  var $p295: ref;
  var $i296: i64;
  var $i297: i1;
  var $i299: i64;
  var $p301: ref;
  var $p302: ref;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $i309: i64;
  var $p311: ref;
  var $p312: ref;
  var $i313: i1;
  var $i314: i32;
  var $i315: i32;
  var $i298: i32;
  var $i275: i32;
  var $i316: i1;
  var $i317: i1;
  var $i318: i1;
  var $i319: i1;
  var $i320: i32;
  var $i321: i64;
  var $p323: ref;
  var $i324: i8;
  var $i325: i32;
  var $i326: i64;
  var $p328: ref;
  var $p329: ref;
  var $i330: i64;
  var $i331: i1;
  var $i333: i64;
  var $p335: ref;
  var $p336: ref;
  var $p337: ref;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $i341: i64;
  var $i342: i1;
  var $i343: i64;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $p350: ref;
  var $p351: ref;
  var $p352: ref;
  var $i353: i64;
  var $i354: i1;
  var $i356: i64;
  var $p358: ref;
  var $p359: ref;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $p363: ref;
  var $p364: ref;
  var $p365: ref;
  var $i366: i64;
  var $p368: ref;
  var $p369: ref;
  var $i370: i1;
  var $i371: i32;
  var $i372: i32;
  var $i355: i32;
  var $i332: i32;
  var $i373: i1;
  var $i374: i1;
  var $i375: i1;
  var vslice_dummy_var_108: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} $p2 := $alloc($mul.ref(10, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i1);
    call {:si_unique_call 1774} {:cexpr "__fimc_pipeline_s_stream:arg:on"} boogie_si_record_i1($i1);
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 10)), $mul.ref(0, 5)), $mul.ref(0, 1));
    goto corral_source_split_10977;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p5, 4);
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 10)), $mul.ref(0, 5)), $mul.ref(1, 1));
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p7, 0);
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 10)), $mul.ref(0, 5)), $mul.ref(2, 1));
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p9, 3);
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 10)), $mul.ref(0, 5)), $mul.ref(3, 1));
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p11, 1);
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 10)), $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p13, 2);
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 10)), $mul.ref(1, 5)), $mul.ref(0, 1));
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p15, 1);
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 10)), $mul.ref(1, 5)), $mul.ref(1, 1));
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p17, 2);
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 10)), $mul.ref(1, 5)), $mul.ref(2, 1));
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p19, 4);
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 10)), $mul.ref(1, 5)), $mul.ref(3, 1));
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p21, 0);
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 10)), $mul.ref(1, 5)), $mul.ref(4, 1));
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p23, 3);
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p0);
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i3);
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 10)), $mul.ref($i33, 5)), $mul.ref(0, 1));
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.28, $p35);
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    call {:si_unique_call 1775} {:cexpr "idx"} boogie_si_record_i32($i37);
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i37);
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i38, 8));
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i84 := $sub.i32(0, 19);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i84, 0);
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i8.i1($i3);
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    $i149 := $zext.i1.i32($i148);
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    $i150 := $sext.i32.i64($i149);
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 10)), $mul.ref($i150, 5)), $mul.ref(1, 1));
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    $i153 := $load.i8($M.28, $p152);
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i32($i153);
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    $i155 := $zext.i32.i64($i154);
    goto corral_source_split_11080;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i155, 8));
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.0, $p157);
    goto corral_source_split_11082;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    $i159 := $p2i.ref.i64($p158);
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    $i160 := $ne.i64($i159, 0);
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 19);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    $i202 := $slt.i32($i161, 0);
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i202 == 1);
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i205 := $trunc.i8.i1($i3);
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    $i206 := $zext.i1.i32($i205);
    goto corral_source_split_11201;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    $i207 := $sext.i32.i64($i206);
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 10)), $mul.ref($i207, 5)), $mul.ref(2, 1));
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    $i210 := $load.i8($M.28, $p209);
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    $i211 := $zext.i8.i32($i210);
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    $i212 := $zext.i32.i64($i211);
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i212, 8));
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.0, $p214);
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    $i216 := $p2i.ref.i64($p215);
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    $i217 := $ne.i64($i216, 0);
    goto corral_source_split_11210;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i217} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    $i218 := $sub.i32(0, 19);
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    $i259 := $slt.i32($i218, 0);
    goto corral_source_split_11224;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i259 == 1);
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i262 := $trunc.i8.i1($i3);
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    $i263 := $zext.i1.i32($i262);
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    $i264 := $sext.i32.i64($i263);
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 10)), $mul.ref($i264, 5)), $mul.ref(3, 1));
    goto corral_source_split_11266;

  corral_source_split_11266:
    assume {:verifier.code 0} true;
    $i267 := $load.i8($M.28, $p266);
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    $i268 := $zext.i8.i32($i267);
    goto corral_source_split_11268;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    $i269 := $zext.i32.i64($i268);
    goto corral_source_split_11269;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i269, 8));
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    $p272 := $load.ref($M.0, $p271);
    goto corral_source_split_11271;

  corral_source_split_11271:
    assume {:verifier.code 0} true;
    $i273 := $p2i.ref.i64($p272);
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    $i274 := $ne.i64($i273, 0);
    goto corral_source_split_11273;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i274} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    $i275 := $sub.i32(0, 19);
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    $i316 := $slt.i32($i275, 0);
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i316} true;
    goto $bb90, $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume !($i316 == 1);
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i319 := $trunc.i8.i1($i3);
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    $i320 := $zext.i1.i32($i319);
    goto corral_source_split_11327;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    $i321 := $sext.i32.i64($i320);
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 10)), $mul.ref($i321, 5)), $mul.ref(4, 1));
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    $i324 := $load.i8($M.28, $p323);
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    $i325 := $zext.i8.i32($i324);
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    $i326 := $zext.i32.i64($i325);
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i326, 8));
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    $p329 := $load.ref($M.0, $p328);
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    $i330 := $p2i.ref.i64($p329);
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    $i331 := $ne.i64($i330, 0);
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i331} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    $i332 := $sub.i32(0, 19);
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    $i373 := $slt.i32($i332, 0);
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i373} true;
    goto $bb108, $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    assume !($i373 == 1);
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb108:
    assume $i373 == 1;
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    $i374 := $ne.i32($i332, $sub.i32(0, 515));
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i374} true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !($i374 == 1);
    goto $bb110;

  $bb111:
    assume $i374 == 1;
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    $i375 := $ne.i32($i332, $sub.i32(0, 19));
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    $i88, $i89 := 4, $i332;
    assume {:branchcond $i375} true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i375 == 1);
    goto $bb110;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i375 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i90 := $sge.i32($i88, 0);
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i30 := $i89;
    goto $bb3;

  $bb28:
    assume $i90 == 1;
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    $i91 := $i88;
    goto $bb31;

  $bb31:
    call $i92, $i93, $i94, $i95, $p97, $i98, $i99, $i100, $p102, $p103, $i104, $i105, $i106, $p108, $p109, $p110, $p111, $p112, $p113, $i114, $i115, $i116, $p118, $p119, $p120, $p121, $p122, $p123, $p124, $p125, $i126, $i127, $i128, $p130, $p131, $p132, $p133, $p134, $p135, $p136, $p137, $i138, $p140, $p141, $i142, $i143, $i144, $i146, $i147, $i91, vslice_dummy_var_108 := __fimc_pipeline_s_stream_loop_$bb31($p2, $i3, $p24, $i92, $i93, $i94, $i95, $p97, $i98, $i99, $i100, $p102, $p103, $i104, $i105, $i106, $p108, $p109, $p110, $p111, $p112, $p113, $i114, $i115, $i116, $p118, $p119, $p120, $p121, $p122, $p123, $p124, $p125, $i126, $i127, $i128, $p130, $p131, $p132, $p133, $p134, $p135, $p136, $p137, $i138, $p140, $p141, $i142, $i143, $i144, $i146, $i147, $i91, vslice_dummy_var_108);
    goto $bb31_last;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i91);
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i8.i1($i3);
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    $i94 := $zext.i1.i32($i93);
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i94);
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 10)), $mul.ref($i95, 5)), $mul.ref($i92, 1));
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.28, $p97);
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    call {:si_unique_call 1778} {:cexpr "idx___0"} boogie_si_record_i32($i99);
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    $i100 := $zext.i32.i64($i99);
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i100, 8));
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($p103);
    goto corral_source_split_11100;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i146 := $sub.i32($i91, 1);
    call {:si_unique_call 1780} {:cexpr "i"} boogie_si_record_i32($i146);
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    $i147 := $sge.i32($i146, 0);
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i147 == 1);
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb42:
    assume $i147 == 1;
    assume {:verifier.code 0} true;
    $i91 := $i146;
    goto $bb42_dummy;

  $bb33:
    assume $i105 == 1;
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    $i106 := $zext.i32.i64($i99);
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i106, 8));
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p111, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p113);
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, 0);
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb35:
    assume $i115 == 1;
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    $i116 := $zext.i32.i64($i99);
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i116, 8));
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p119, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p125);
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb37;

  $bb38:
    assume $i127 == 1;
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    $i128 := $zext.i32.i64($i99);
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i128, 8));
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p131, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11131;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p133, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p135, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    $i138 := $zext.i32.i64($i99);
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i138, 8));
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i8.i1($i3);
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    $i143 := $xor.i1($i142, 1);
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    $i144 := $zext.i1.i32($i143);
    call {:si_unique_call 1779} vslice_dummy_var_108 := devirtbounce.13($p137, $p141, $i144);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb99:
    assume $i331 == 1;
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    $i333 := $zext.i32.i64($i325);
    goto corral_source_split_11339;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i333, 8));
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    $p336 := $load.ref($M.0, $p335);
    goto corral_source_split_11341;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p336, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    $p338 := $load.ref($M.0, $p337);
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p338, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    $p340 := $load.ref($M.0, $p339);
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    $i341 := $p2i.ref.i64($p340);
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    $i342 := $ne.i64($i341, 0);
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i342} true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i342 == 1);
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i355 := $sub.i32(0, 515);
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    $i332 := $i355;
    goto $bb101;

  $bb102:
    assume $i342 == 1;
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    $i343 := $zext.i32.i64($i325);
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i343, 8));
    goto corral_source_split_11354;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    $p346 := $load.ref($M.0, $p345);
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p346, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11356;

  corral_source_split_11356:
    assume {:verifier.code 0} true;
    $p348 := $load.ref($M.0, $p347);
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p348, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    $p350 := $load.ref($M.0, $p349);
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p350, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    $p352 := $load.ref($M.0, $p351);
    goto corral_source_split_11361;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    $i353 := $p2i.ref.i64($p352);
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    $i354 := $ne.i64($i353, 0);
    goto corral_source_split_11363;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i354} true;
    goto $bb105, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i354 == 1);
    goto $bb104;

  $bb105:
    assume $i354 == 1;
    goto corral_source_split_11365;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    $i356 := $zext.i32.i64($i325);
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i356, 8));
    goto corral_source_split_11367;

  corral_source_split_11367:
    assume {:verifier.code 0} true;
    $p359 := $load.ref($M.0, $p358);
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p359, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    $p361 := $load.ref($M.0, $p360);
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p361, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    $p363 := $load.ref($M.0, $p362);
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p363, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.0, $p364);
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    $i366 := $zext.i32.i64($i325);
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i366, 8));
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    $p369 := $load.ref($M.0, $p368);
    goto corral_source_split_11377;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    $i370 := $trunc.i8.i1($i3);
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    $i371 := $zext.i1.i32($i370);
    call {:si_unique_call 1784} $i372 := devirtbounce.13($p365, $p369, $i371);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    $i355 := $i372;
    goto $bb107;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb90:
    assume $i316 == 1;
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    $i317 := $ne.i32($i275, $sub.i32(0, 515));
    goto corral_source_split_11321;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i317} true;
    goto $bb93, $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume !($i317 == 1);
    goto $bb92;

  $bb93:
    assume $i317 == 1;
    goto corral_source_split_11323;

  corral_source_split_11323:
    assume {:verifier.code 0} true;
    $i318 := $ne.i32($i275, $sub.i32(0, 19));
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    $i88, $i89 := 3, $i275;
    assume {:branchcond $i318} true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i318 == 1);
    goto $bb92;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i318 == 1;
    goto $bb22;

  $bb81:
    assume $i274 == 1;
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    $i276 := $zext.i32.i64($i268);
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i276, 8));
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    $p279 := $load.ref($M.0, $p278);
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p279, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    $p281 := $load.ref($M.0, $p280);
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p281, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    $i284 := $p2i.ref.i64($p283);
    goto corral_source_split_11283;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    $i285 := $ne.i64($i284, 0);
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i285} true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i285 == 1);
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i298 := $sub.i32(0, 515);
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    $i275 := $i298;
    goto $bb83;

  $bb84:
    assume $i285 == 1;
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    $i286 := $zext.i32.i64($i268);
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i286, 8));
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    $p289 := $load.ref($M.0, $p288);
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p289, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    $p291 := $load.ref($M.0, $p290);
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p291, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    $p293 := $load.ref($M.0, $p292);
    goto corral_source_split_11296;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p293, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    $p295 := $load.ref($M.0, $p294);
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    $i296 := $p2i.ref.i64($p295);
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    $i297 := $ne.i64($i296, 0);
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i297} true;
    goto $bb87, $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume !($i297 == 1);
    goto $bb86;

  $bb87:
    assume $i297 == 1;
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    $i299 := $zext.i32.i64($i268);
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i299, 8));
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    $p302 := $load.ref($M.0, $p301);
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p302, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    $p304 := $load.ref($M.0, $p303);
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p304, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11308;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    $p306 := $load.ref($M.0, $p305);
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p306, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    $p308 := $load.ref($M.0, $p307);
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    $i309 := $zext.i32.i64($i268);
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i309, 8));
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    $p312 := $load.ref($M.0, $p311);
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    $i313 := $trunc.i8.i1($i3);
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    $i314 := $zext.i1.i32($i313);
    call {:si_unique_call 1783} $i315 := devirtbounce.13($p308, $p312, $i314);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    $i298 := $i315;
    goto $bb89;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb72:
    assume $i259 == 1;
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    $i260 := $ne.i32($i218, $sub.i32(0, 515));
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    assume {:branchcond $i260} true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i260 == 1);
    goto $bb74;

  $bb75:
    assume $i260 == 1;
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    $i261 := $ne.i32($i218, $sub.i32(0, 19));
    goto corral_source_split_11261;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    $i88, $i89 := 2, $i218;
    assume {:branchcond $i261} true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i261 == 1);
    goto $bb74;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i261 == 1;
    goto $bb22;

  $bb63:
    assume $i217 == 1;
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    $i219 := $zext.i32.i64($i211);
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i219, 8));
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p222, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.0, $p223);
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p224, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11218;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    $p226 := $load.ref($M.0, $p225);
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    $i227 := $p2i.ref.i64($p226);
    goto corral_source_split_11220;

  corral_source_split_11220:
    assume {:verifier.code 0} true;
    $i228 := $ne.i64($i227, 0);
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i228} true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i228 == 1);
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i241 := $sub.i32(0, 515);
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    $i218 := $i241;
    goto $bb65;

  $bb66:
    assume $i228 == 1;
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    $i229 := $zext.i32.i64($i211);
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i229, 8));
    goto corral_source_split_11228;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    $p232 := $load.ref($M.0, $p231);
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p232, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    $p234 := $load.ref($M.0, $p233);
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p234, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11232;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    $p236 := $load.ref($M.0, $p235);
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p236, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.0, $p237);
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    $i239 := $p2i.ref.i64($p238);
    goto corral_source_split_11236;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    $i240 := $ne.i64($i239, 0);
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i240} true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i240 == 1);
    goto $bb68;

  $bb69:
    assume $i240 == 1;
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    $i242 := $zext.i32.i64($i211);
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i242, 8));
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    $p245 := $load.ref($M.0, $p244);
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p245, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    $p247 := $load.ref($M.0, $p246);
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p247, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    $p249 := $load.ref($M.0, $p248);
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p249, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    $p251 := $load.ref($M.0, $p250);
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    $i252 := $zext.i32.i64($i211);
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i252, 8));
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    $p255 := $load.ref($M.0, $p254);
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    $i256 := $trunc.i8.i1($i3);
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    $i257 := $zext.i1.i32($i256);
    call {:si_unique_call 1782} $i258 := devirtbounce.13($p251, $p255, $i257);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    $i241 := $i258;
    goto $bb71;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i202 == 1;
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    $i203 := $ne.i32($i161, $sub.i32(0, 515));
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i203 == 1);
    goto $bb56;

  $bb57:
    assume $i203 == 1;
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    $i204 := $ne.i32($i161, $sub.i32(0, 19));
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    $i88, $i89 := 1, $i161;
    assume {:branchcond $i204} true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i204 == 1);
    goto $bb56;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i204 == 1;
    goto $bb22;

  $bb45:
    assume $i160 == 1;
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $i162 := $zext.i32.i64($i154);
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i162, 8));
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.0, $p164);
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p165, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.0, $p166);
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p167, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    $i170 := $p2i.ref.i64($p169);
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    $i171 := $ne.i64($i170, 0);
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i171 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i184 := $sub.i32(0, 515);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    $i161 := $i184;
    goto $bb47;

  $bb48:
    assume $i171 == 1;
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    $i172 := $zext.i32.i64($i154);
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i172, 8));
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.0, $p174);
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p175, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p177, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.0, $p178);
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p179, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    $i182 := $p2i.ref.i64($p181);
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    $i183 := $ne.i64($i182, 0);
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i183 == 1);
    goto $bb50;

  $bb51:
    assume $i183 == 1;
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    $i185 := $zext.i32.i64($i154);
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i185, 8));
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p188, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p190, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p192, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    $p194 := $load.ref($M.0, $p193);
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    $i195 := $zext.i32.i64($i154);
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i195, 8));
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.0, $p197);
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    $i199 := $trunc.i8.i1($i3);
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    $i200 := $zext.i1.i32($i199);
    call {:si_unique_call 1781} $i201 := devirtbounce.13($p194, $p198, $i200);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    $i184 := $i201;
    goto $bb53;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i85 == 1;
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i84, $sub.i32(0, 515));
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb18;

  $bb19:
    assume $i86 == 1;
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i84, $sub.i32(0, 19));
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    $i88, $i89 := 0, $i84;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb18;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb22;

  $bb7:
    assume $i43 == 1;
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    $i44 := $zext.i32.i64($i37);
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i44, 8));
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i83 := $sub.i32(0, 515);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    $i84 := $i83;
    goto $bb15;

  $bb9:
    assume $i53 == 1;
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    $i54 := $zext.i32.i64($i37);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i54, 8));
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb11;

  $bb12:
    assume $i65 == 1;
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    $i66 := $zext.i32.i64($i37);
    goto corral_source_split_11044;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i66, 8));
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    $i76 := $zext.i32.i64($i37);
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i76, 8));
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i8.i1($i3);
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    $i81 := $zext.i1.i32($i80);
    call {:si_unique_call 1776} $i82 := devirtbounce.13($p75, $p79, $i81);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    call {:si_unique_call 1777} {:cexpr "tmp"} boogie_si_record_i32($i82);
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    $i83 := $i82;
    goto $bb14;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 19);
    goto $bb3;

  $bb42_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11088;
}



const fimc_pipeline_s_power: ref;

axiom fimc_pipeline_s_power == $sub.ref(0, 674282);

procedure fimc_pipeline_s_power($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.0, $CurrAddr, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.28, $M.32, $M.27, $M.25, $M.36, assertsPassed;



implementation fimc_pipeline_s_power($p0: ref, $i1: i1) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i46: i64;
  var $i47: i1;
  var $i48: i32;
  var $i49: i64;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i64;
  var $p56: ref;
  var $p57: ref;
  var $i58: i1;
  var $i59: i1;
  var $i60: i32;
  var $i62: i32;
  var $i63: i1;
  var $i45: i32;
  var $i25: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i64;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i64;
  var $p73: ref;
  var $p74: ref;
  var $i75: i1;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i32;
  var $i82: i64;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i64;
  var $p89: ref;
  var $p90: ref;
  var $i91: i1;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i32;
  var $i98: i64;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i64;
  var $p105: ref;
  var $p106: ref;
  var $i107: i1;
  var $i108: i32;
  var $i109: i32;
  var $i110: i1;
  var $i111: i1;
  var vslice_dummy_var_109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i1);
    call {:si_unique_call 1786} {:cexpr "fimc_pipeline_s_power:arg:on"} boogie_si_record_i1($i1);
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p5, 3);
    goto corral_source_split_11391;

  corral_source_split_11391:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p7, 0);
    goto corral_source_split_11393;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p9, 1);
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p11, 2);
    goto corral_source_split_11397;

  corral_source_split_11397:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p13, 1);
    goto corral_source_split_11399;

  corral_source_split_11399:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(1, 1));
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p15, 2);
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p17, 0);
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 4)), $mul.ref(3, 1));
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p19, 3);
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_11406;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i3);
    goto corral_source_split_11415;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref($i28, 4)), $mul.ref(0, 1));
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.29, $p30);
    goto corral_source_split_11419;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    call {:si_unique_call 1787} {:cexpr "idx"} boogie_si_record_i32($i32);
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    goto corral_source_split_11421;

  corral_source_split_11421:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i33, 8));
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_11423;

  corral_source_split_11423:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($i3);
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i32($i37);
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} $i39 := __subdev_set_power($p36, $i38);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    call {:si_unique_call 1789} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 0);
    goto corral_source_split_11427;

  corral_source_split_11427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i8.i1($i3);
    goto corral_source_split_11436;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    $i65 := $zext.i1.i32($i64);
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i65);
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref($i66, 4)), $mul.ref(1, 1));
    goto corral_source_split_11439;

  corral_source_split_11439:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.29, $p68);
    goto corral_source_split_11440;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    $i71 := $zext.i32.i64($i70);
    goto corral_source_split_11442;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i71, 8));
    goto corral_source_split_11443;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i8.i1($i3);
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    $i76 := $zext.i1.i32($i75);
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} $i77 := __subdev_set_power($p74, $i76);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_11447;

  corral_source_split_11447:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i77, 0);
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i8.i1($i3);
    goto corral_source_split_11476;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    $i81 := $zext.i1.i32($i80);
    goto corral_source_split_11477;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i81);
    goto corral_source_split_11478;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref($i82, 4)), $mul.ref(2, 1));
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.29, $p84);
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    $i87 := $zext.i32.i64($i86);
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i87, 8));
    goto corral_source_split_11483;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i8.i1($i3);
    goto corral_source_split_11485;

  corral_source_split_11485:
    assume {:verifier.code 0} true;
    $i92 := $zext.i1.i32($i91);
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} $i93 := __subdev_set_power($p90, $i92);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i93, 0);
    goto corral_source_split_11488;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i8.i1($i3);
    goto corral_source_split_11493;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    $i97 := $zext.i1.i32($i96);
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i97);
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref($i98, 4)), $mul.ref(3, 1));
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.29, $p100);
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_11498;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    $i103 := $zext.i32.i64($i102);
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i103, 8));
    goto corral_source_split_11500;

  corral_source_split_11500:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i8.i1($i3);
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    $i108 := $zext.i1.i32($i107);
    goto corral_source_split_11503;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} $i109 := __subdev_set_power($p106, $i108);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i109, 0);
    goto corral_source_split_11505;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb39:
    assume $i110 == 1;
    goto corral_source_split_11507;

  corral_source_split_11507:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i109, $sub.i32(0, 6));
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    $i42, $i43 := 3, $i109;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb41;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i111 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11432;

  corral_source_split_11432:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i44 := $sge.i32($i42, 0);
    goto corral_source_split_11434;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i25 := $i43;
    goto $bb3;

  $bb17:
    assume $i44 == 1;
    goto corral_source_split_11450;

  corral_source_split_11450:
    assume {:verifier.code 0} true;
    $i45 := $i42;
    goto $bb20;

  $bb20:
    call $i46, $i47, $i48, $i49, $p51, $i52, $i53, $i54, $p56, $p57, $i58, $i59, $i60, $i62, $i63, $i45, vslice_dummy_var_109 := fimc_pipeline_s_power_loop_$bb20($p0, $p2, $i3, $i46, $i47, $i48, $i49, $p51, $i52, $i53, $i54, $p56, $p57, $i58, $i59, $i60, $i62, $i63, $i45, vslice_dummy_var_109);
    goto $bb20_last;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i45);
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i8.i1($i3);
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    goto corral_source_split_11456;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref($i49, 4)), $mul.ref($i46, 1));
    goto corral_source_split_11458;

  corral_source_split_11458:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.29, $p51);
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    call {:si_unique_call 1791} {:cexpr "idx___0"} boogie_si_record_i32($i53);
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    $i54 := $zext.i32.i64($i53);
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref($i54, 8));
    goto corral_source_split_11462;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_11463;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i3);
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    $i59 := $xor.i1($i58, 1);
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i32($i59);
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} vslice_dummy_var_109 := __subdev_set_power($p57, $i60);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32($i45, 1);
    call {:si_unique_call 1793} {:cexpr "i"} boogie_si_record_i32($i62);
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    $i63 := $sge.i32($i62, 0);
    goto corral_source_split_11469;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i63 == 1);
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb22:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i45 := $i62;
    goto $bb22_dummy;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i94 == 1;
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i93, $sub.i32(0, 6));
    goto corral_source_split_11491;

  corral_source_split_11491:
    assume {:verifier.code 0} true;
    $i42, $i43 := 2, $i93;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb34;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb11;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i78 == 1;
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i77, $sub.i32(0, 6));
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    $i42, $i43 := 1, $i77;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb27;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb11;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i40 == 1;
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i39, $sub.i32(0, 6));
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    $i42, $i43 := 0, $i39;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb9;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb11;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_11411;

  corral_source_split_11411:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 6);
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11452;
}



const entity_to_fimc_mdev: ref;

axiom entity_to_fimc_mdev == $sub.ref(0, 675314);

procedure entity_to_fimc_mdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation entity_to_fimc_mdev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_11511;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_11514;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_11516;

  corral_source_split_11516:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 472), 3216));
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    $p9 := $p8;
    goto $bb3;
}



const clk_disable_unprepare: ref;

axiom clk_disable_unprepare == $sub.ref(0, 676346);

procedure clk_disable_unprepare($p0: ref);
  free requires assertsPassed;



implementation clk_disable_unprepare($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11524;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} clk_disable($p0);
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} clk_unprepare($p0);
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    return;
}



const __subdev_set_power: ref;

axiom __subdev_set_power == $sub.ref(0, 677378);

procedure __subdev_set_power($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.28, $CurrAddr, $M.29, $M.32, $M.27, $M.25, $M.36, assertsPassed;



implementation __subdev_set_power($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p6: ref;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} {:cexpr "__subdev_set_power:arg:on"} boogie_si_record_i32($i1);
    goto corral_source_split_11528;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(100, 1));
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i1, 0);
    goto corral_source_split_11537;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i1, 0);
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_11570;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 19);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, $sub.i32(0, 515));
    goto corral_source_split_11601;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i44 == 1);
    goto corral_source_split_11605;

  corral_source_split_11605:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_11607;

  corral_source_split_11607:
    assume {:verifier.code 0} true;
    $i4 := $i45;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb29:
    assume $i44 == 1;
    goto corral_source_split_11603;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    $i45 := $i43;
    goto $bb31;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_11572;

  corral_source_split_11572:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_11577;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_11578;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 515);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_11598;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb28;

  $bb22:
    assume $i26 == 1;
    goto corral_source_split_11580;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_11582;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_11583;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_11584;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 168)), $mul.ref(136, 1));
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_11586;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_11588;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb24;

  $bb25:
    assume $i34 == 1;
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_11592;

  corral_source_split_11592:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 168)), $mul.ref(136, 1));
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    call {:si_unique_call 1800} $i41 := devirtbounce.13($p40, $p0, $i1);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    call {:si_unique_call 1801} {:cexpr "tmp___0"} boogie_si_record_i32($i41);
    goto corral_source_split_11596;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb27;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p6);
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i14 == 1);
    goto corral_source_split_11560;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p6);
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i15, 1);
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i16);
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p6);
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, 0);
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb14:
    assume $i18 == 1;
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb12:
    assume $i14 == 1;
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_11539;

  corral_source_split_11539:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p6);
    call {:si_unique_call 1799} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_11540;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p6);
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 1);
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i10);
    goto corral_source_split_11543;

  corral_source_split_11543:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i8, 0);
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_11548;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 6);
    goto $bb3;
}



const fimc_pipeline_prepare: ref;

axiom fimc_pipeline_prepare == $sub.ref(0, 678410);

procedure fimc_pipeline_prepare($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_pipeline_prepare($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p22: ref;
  var $i28: i32;
  var $i29: i16;
  var $i30: i32;
  var $i31: i1;
  var $p12: ref;
  var $i13: i32;
  var $p32: ref;
  var $p11: ref;
  var $p27: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i58: i1;
  var $p57: ref;
  var $p60: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p61: ref;
  var $p71: ref;
  var $i72: i16;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p36: ref;
  var $i76: i64;
  var $i77: i1;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11609;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} $p2 := entity_to_fimc_mdev($p1);
    goto corral_source_split_11610;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $0.ref);
    goto corral_source_split_11613;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(1, 8));
    goto corral_source_split_11615;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p87, $0.ref);
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(2, 8));
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p89, $0.ref);
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(3, 8));
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p91, $0.ref);
    goto corral_source_split_11721;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(4, 8));
    goto corral_source_split_11723;

  corral_source_split_11723:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p93, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5, $p6 := $0.ref, $p1;
    goto $bb5;

  $bb5:
    call $p5, $p6, $p7, $i8, $i9, $i10, $p14, $p15, $i16, $p17, $p18, $i19, $i20, $i21, $p23, $i24, $i25, $p26, $p22, $i28, $i29, $i30, $i31, $p12, $i13, $p32, $p11, $p27, $i33, $i34, $p35, $p37, $p38, $i39, $i40, $p41, $p42, $p43, $p44, $p45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i58, $p57, $p60, $p63, $p65, $p67, $p69, $p61, $p71, $i72, $i73, $i74, $p75 := fimc_pipeline_prepare_loop_$bb5($p0, $p5, $p6, $p7, $i8, $i9, $i10, $p14, $p15, $i16, $p17, $p18, $i19, $i20, $i21, $p23, $i24, $i25, $p26, $p22, $i28, $i29, $i30, $i31, $p12, $i13, $p32, $p11, $p27, $i33, $i34, $p35, $p37, $p38, $i39, $i40, $p41, $p42, $p43, $p44, $p45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i58, $p57, $p60, $p63, $p65, $p67, $p69, $p61, $p71, $i72, $i73, $i74, $p75);
    goto $bb5_last;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(60, 1));
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_11620;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i9, 0);
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p27 := $p11;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p27);
    goto corral_source_split_11652;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_11653;

  corral_source_split_11653:
    assume {:verifier.code 0} true;
    $p35 := $p5;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i34 == 1);
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p27, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_11661;

  corral_source_split_11661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} $i39 := media_entity_type($p38);
    call {:si_unique_call 1806} {:cexpr "tmp___0"} boogie_si_record_i32($i39);
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 131072);
    goto corral_source_split_11663;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    $p41 := $p5;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p27, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_11672;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_11673;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 304)), $mul.ref(216, 1));
    goto corral_source_split_11674;

  corral_source_split_11674:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 4096);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i46, 8192);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i46, 16384);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i46, 16384);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p61 := $p5;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_11698;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p44, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(60, 1));
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    $i72 := $load.i16($M.0, $p71);
    goto corral_source_split_11700;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i72);
    goto corral_source_split_11701;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 1);
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    $p75 := $p61;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p5, $p6 := $p61, $p43;
    goto $bb58_dummy;

  $bb56:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    $p36 := $p75;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p36);
    goto corral_source_split_11666;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_11667;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    return;

  $bb59:
    assume $i77 == 1;
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(4, 8));
    goto corral_source_split_11707;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_11708;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_11709;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_11710;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb61;

  $bb62:
    assume $i82 == 1;
    goto corral_source_split_11712;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(4, 8));
    goto corral_source_split_11713;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_11714;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} __setup_sensor_notification($p2, $p36, $p85);
    goto corral_source_split_11715;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb36:
    assume $i50 == 1;
    goto corral_source_split_11676;

  corral_source_split_11676:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(3, 8));
    goto corral_source_split_11677;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, $p43);
    goto corral_source_split_11678;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    $p61 := $p5;
    goto $bb54;

  $bb34:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i46, 8192);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb38;

  $bb39:
    assume $i51 == 1;
    goto corral_source_split_11680;

  corral_source_split_11680:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(2, 8));
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p65, $p43);
    goto corral_source_split_11682;

  corral_source_split_11682:
    assume {:verifier.code 0} true;
    $p61 := $p5;
    goto $bb54;

  $bb32:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i46, 4096);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb38;

  $bb41:
    assume $i52 == 1;
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(4, 8));
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, $p43);
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    $p61 := $p5;
    goto $bb54;

  $bb30:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i46, 512);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i46, 2048);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i46, 2048);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb38;

  $bb47:
    assume $i55 == 1;
    goto corral_source_split_11688;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(1, 8));
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p63, $p43);
    goto corral_source_split_11690;

  corral_source_split_11690:
    assume {:verifier.code 0} true;
    $p61 := $p5;
    goto $bb54;

  $bb45:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i46, 512);
    assume {:verifier.code 0} true;
    $p57 := $p5;
    assume true;
    goto $bb49, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb38;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_11692;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $p43);
    goto corral_source_split_11694;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    $p61 := $p57;
    goto $bb54;

  $bb43:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i46, 256);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb38;

  $bb52:
    assume $i58 == 1;
    goto corral_source_split_11696;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    $p57 := $p43;
    goto $bb50;

  $bb25:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    $p36 := $p41;
    goto $bb24;

  $bb22:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    $p36 := $p35;
    goto $bb24;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_11624;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    $p12, $i13 := $0.ref, 0;
    goto $bb9;

  $bb9:
    call $p14, $p15, $i16, $p17, $p18, $i19, $i20, $i21, $p23, $i24, $i25, $p26, $p22, $i28, $i29, $i30, $i31, $p12, $i13, $p32 := fimc_pipeline_prepare_loop_$bb9($p6, $p7, $p14, $p15, $i16, $p17, $p18, $i19, $i20, $i21, $p23, $i24, $i25, $p26, $p22, $i28, $i29, $i30, $i31, $p12, $i13, $p32);
    goto $bb9_last;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_11628;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i13);
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p15, $mul.ref($i16, 24));
    goto corral_source_split_11631;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref($i16, 24)), $mul.ref(16, 1));
    goto corral_source_split_11632;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_11634;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_11635;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} $p23 := media_entity_remote_pad($p17);
    goto corral_source_split_11645;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    $p26 := $p23;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p22 := $p23;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i13, 1);
    call {:si_unique_call 1803} {:cexpr "i"} boogie_si_record_i32($i28);
    goto corral_source_split_11640;

  corral_source_split_11640:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p7);
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_11642;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i30, $i28);
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    $p32 := $p22;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_11655;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    $p11 := $p32;
    goto $bb8;

  $bb19:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $p12, $i13 := $p22, $i28;
    goto $bb19_dummy;

  $bb15:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_11649;

  corral_source_split_11649:
    assume {:verifier.code 0} true;
    $p27 := $p26;
    goto $bb17;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    $p22 := $p12;
    goto $bb13;

  $bb19_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11626;

  $bb58_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11618;
}



const clk_prepare_enable: ref;

axiom clk_prepare_enable == $sub.ref(0, 679442);

procedure clk_prepare_enable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation clk_prepare_enable($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11725;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} $i1 := clk_prepare($p0);
    call {:si_unique_call 1809} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11727;

  corral_source_split_11727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} $i4 := clk_enable($p0);
    call {:si_unique_call 1811} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_11733;

  corral_source_split_11733:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} clk_unprepare($p0);
    goto corral_source_split_11737;

  corral_source_split_11737:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11729;

  corral_source_split_11729:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const __setup_sensor_notification: ref;

axiom __setup_sensor_notification == $sub.ref(0, 680474);

procedure __setup_sensor_notification($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __setup_sensor_notification($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11739;

  corral_source_split_11739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} $p3 := v4l2_get_subdev_hostdata($p1);
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11741;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_11742;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_11743;

  corral_source_split_11743:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_11748;

  corral_source_split_11748:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_11749;

  corral_source_split_11749:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 1814} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_11751;

  corral_source_split_11751:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_11753;

  corral_source_split_11753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 1816} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_11754;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_11755;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_11760;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_11761;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1819} {:cexpr "tmp___1"} boogie_si_record_i64($i18);
    goto corral_source_split_11763;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_11764;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} $p20 := source_to_sensor_info($p4);
    goto corral_source_split_11768;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(3128, 1));
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} $p22 := spinlock_check($p21);
    goto corral_source_split_11770;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} $i23 := _raw_spin_lock_irqsave($p22);
    call {:si_unique_call 1823} {:cexpr "flags"} boogie_si_record_i64($i23);
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} $p24 := v4l2_get_subdevdata($p2);
    goto corral_source_split_11772;

  corral_source_split_11772:
    assume {:verifier.code 0} true;
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p20, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_11774;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p24);
    goto corral_source_split_11775;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(3128, 1));
    goto corral_source_split_11776;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} spin_unlock_irqrestore($p27, $i23);
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_11757;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} warn_slowpath_null(.str.132, 52);
    goto corral_source_split_11758;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_11745;

  corral_source_split_11745:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const source_to_sensor_info: ref;

axiom source_to_sensor_info == $sub.ref(0, 681506);

procedure source_to_sensor_info($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation source_to_sensor_info($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11780;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const fimc_md_sysfs_show: ref;

axiom fimc_md_sysfs_show == $sub.ref(0, 682538);

procedure fimc_md_sysfs_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation fimc_md_sysfs_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $i10: i64;
  var $i12: i64;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_11783;

  corral_source_split_11783:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 16), 1480));
    goto corral_source_split_11784;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} $p5 := platform_get_drvdata($p4);
    goto corral_source_split_11785;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_11786;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3216)), $mul.ref(3120, 1));
    goto corral_source_split_11787;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.30, $p7);
    goto corral_source_split_11788;

  corral_source_split_11788:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} $i12 := strlcpy($p2, .str.159, 4096);
    call {:si_unique_call 1830} {:cexpr "tmp___1"} boogie_si_record_i64($i12);
    goto corral_source_split_11796;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    $i11 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11794;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_11791;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} $i10 := strlcpy($p2, .str.158, 4096);
    call {:si_unique_call 1828} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_11792;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const fimc_md_sysfs_store: ref;

axiom fimc_md_sysfs_store == $sub.ref(0, 683570);

procedure fimc_md_sysfs_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.30, $M.31;



implementation fimc_md_sysfs_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $i10: i8;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p26: ref;
  var $i27: i8;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $i33: i1;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $i39: i8;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $i51: i8;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $i57: i1;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $i63: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} {:cexpr "fimc_md_sysfs_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_11799;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 16), 1480));
    goto corral_source_split_11800;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} $p6 := platform_get_drvdata($p5);
    goto corral_source_split_11801;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_11802;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} $i8 := strcmp($p2, .str.156);
    call {:si_unique_call 1834} {:cexpr "tmp___1"} boogie_si_record_i32($i8);
    goto corral_source_split_11803;

  corral_source_split_11803:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_11804;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} $i11 := strcmp($p2, .str.157);
    call {:si_unique_call 1836} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_11810;

  corral_source_split_11810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_11820;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_11818;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11812;

  corral_source_split_11812:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i10);
    goto corral_source_split_11813;

  corral_source_split_11813:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 3216)), $mul.ref(3120, 1));
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i13);
    goto corral_source_split_11815;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    $M.30 := $store.i8($M.30, $p14, $i15);
    goto corral_source_split_11816;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(0, 8));
    goto corral_source_split_11822;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.30, $p17);
    goto corral_source_split_11823;

  corral_source_split_11823:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_11824;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(1, 8));
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.30, $p29);
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_11837;

  corral_source_split_11837:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_11838;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(2, 8));
    goto corral_source_split_11848;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.30, $p41);
    goto corral_source_split_11849;

  corral_source_split_11849:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_11850;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_11851;

  corral_source_split_11851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(3, 8));
    goto corral_source_split_11861;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.30, $p53);
    goto corral_source_split_11862;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_11863;

  corral_source_split_11863:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_11864;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb23:
    assume $i56 == 1;
    goto corral_source_split_11866;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i8.i1($i10);
    goto corral_source_split_11867;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(3, 8));
    goto corral_source_split_11868;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.30, $p59);
    goto corral_source_split_11869;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3284, 1));
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i8($i57);
    goto corral_source_split_11871;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    $M.31 := $store.i8($M.31, $p62, $i63);
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb19:
    assume $i44 == 1;
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i10);
    goto corral_source_split_11854;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(2, 8));
    goto corral_source_split_11855;

  corral_source_split_11855:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.30, $p47);
    goto corral_source_split_11856;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p48, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3284, 1));
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i8($i45);
    goto corral_source_split_11858;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    $M.31 := $store.i8($M.31, $p50, $i51);
    goto corral_source_split_11859;

  corral_source_split_11859:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume $i32 == 1;
    goto corral_source_split_11840;

  corral_source_split_11840:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i10);
    goto corral_source_split_11841;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(1, 8));
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.30, $p35);
    goto corral_source_split_11843;

  corral_source_split_11843:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3284, 1));
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i8($i33);
    goto corral_source_split_11845;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    $M.31 := $store.i8($M.31, $p38, $i39);
    goto corral_source_split_11846;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i10);
    goto corral_source_split_11828;

  corral_source_split_11828:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(0, 8));
    goto corral_source_split_11829;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.30, $p23);
    goto corral_source_split_11830;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3284, 1));
    goto corral_source_split_11831;

  corral_source_split_11831:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i21);
    goto corral_source_split_11832;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    $M.31 := $store.i8($M.31, $p26, $i27);
    goto corral_source_split_11833;

  corral_source_split_11833:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_11806;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0, 684602);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const cam_clk_prepare: ref;

axiom cam_clk_prepare == $sub.ref(0, 685634);

procedure cam_clk_prepare($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cam_clk_prepare($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11875;

  corral_source_split_11875:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_11876;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_11877;

  corral_source_split_11877:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3216)), $mul.ref(464, 1));
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_11879;

  corral_source_split_11879:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_11880;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_11881;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_11887;

  corral_source_split_11887:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_11888;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 3216)), $mul.ref(464, 1));
    goto corral_source_split_11889;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_11890;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} $i13 := pm_runtime_get_sync($p12);
    call {:si_unique_call 1838} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_11891;

  corral_source_split_11891:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32(0, $i13);
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    goto corral_source_split_11896;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    $i8 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11885;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_11883;

  corral_source_split_11883:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;
}



const cam_clk_unprepare: ref;

axiom cam_clk_unprepare == $sub.ref(0, 686666);

procedure cam_clk_unprepare($p0: ref);
  free requires assertsPassed;



implementation cam_clk_unprepare($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var vslice_dummy_var_110: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11900;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11901;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_11903;

  corral_source_split_11903:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3216)), $mul.ref(464, 1));
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_11905;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_11907;

  corral_source_split_11907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_11911;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_11912;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 3216)), $mul.ref(464, 1));
    goto corral_source_split_11913;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_11914;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} vslice_dummy_var_110 := pm_runtime_put_sync($p11);
    goto corral_source_split_11915;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_11909;

  corral_source_split_11909:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fimc_md_probe: ref;

axiom fimc_md_probe == $sub.ref(0, 687698);

procedure fimc_md_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.36, $M.1, assertsPassed;



implementation fimc_md_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i1;
  var $p33: ref;
  var $i34: i8;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i49: i32;
  var $i50: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i1;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p68: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $i80: i32;
  var $p101: ref;
  var $i55: i32;
  var $i69: i32;
  var $i51: i32;
  var $p102: ref;
  var $i48: i32;
  var $p103: ref;
  var $i7: i32;
  var vslice_dummy_var_111: ref;
  var vslice_dummy_var_112: i64;
  var vslice_dummy_var_113: i64;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_11918;

  corral_source_split_11918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} $p3 := devm_kzalloc($p2, 3208, 208);
    goto corral_source_split_11919;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11920;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_11921;

  corral_source_split_11921:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_11922;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(3128, 1));
    goto corral_source_split_11928;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} vslice_dummy_var_111 := spinlock_check($p8);
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(3128, 1)), $mul.ref(0, 1));
    goto corral_source_split_11930;

  corral_source_split_11930:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} __raw_spin_lock_init($p12, .str.114, $p1);
    goto corral_source_split_11932;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(3200, 1));
    goto corral_source_split_11933;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} INIT_LIST_HEAD($p13);
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(2848, 1));
    goto corral_source_split_11935;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p0);
    goto corral_source_split_11936;

  corral_source_split_11936:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(472, 1)), $mul.ref(1808, 1));
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_11938;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} vslice_dummy_var_112 := strlcpy($p17, .str.115, 32);
    goto corral_source_split_11939;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(472, 1)), $mul.ref(2176, 1));
    goto corral_source_split_11940;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, fimc_md_link_notify);
    goto corral_source_split_11941;

  corral_source_split_11941:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(472, 1)), $mul.ref(0, 1));
    goto corral_source_split_11942;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p2);
    goto corral_source_split_11943;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    goto corral_source_split_11944;

  corral_source_split_11944:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(472, 1));
    $p25 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(8, 1));
    goto corral_source_split_11945;

  corral_source_split_11945:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p24);
    $p26 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(144, 1));
    goto corral_source_split_11946;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, fimc_sensor_notify);
    $p27 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(104, 1));
    goto corral_source_split_11947;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_11948;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} vslice_dummy_var_113 := strlcpy($p28, .str.116, 36);
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1240, 1));
    goto corral_source_split_11949;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_11950;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} $i32 := fimc_md_is_isp_available($p31);
    goto corral_source_split_11951;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(456, 1));
    goto corral_source_split_11952;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i8($i32);
    goto corral_source_split_11953;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i34);
    goto corral_source_split_11954;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(3120, 1));
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 1);
    goto corral_source_split_11956;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(2656, 1));
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} $i37 := v4l2_device_register($p2, $p36);
    call {:si_unique_call 1849} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_11959;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(472, 1));
    goto corral_source_split_11965;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} $i43 := __media_device_register($p42, __this_module);
    call {:si_unique_call 1852} {:cexpr "ret"} boogie_si_record_i32($i43);
    goto corral_source_split_11966;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 0);
    goto corral_source_split_11967;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} $i49 := fimc_md_get_clocks($p4);
    call {:si_unique_call 1856} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_11977;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} $i52 := fimc_md_get_pinctrl($p4);
    call {:si_unique_call 1859} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i52, 0);
    goto corral_source_split_11987;

  corral_source_split_11987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p4);
    goto corral_source_split_11998;

  corral_source_split_11998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} platform_set_drvdata($p0, $p56);
    goto corral_source_split_11999;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(472, 1)), $mul.ref(2016, 1));
    goto corral_source_split_12000;

  corral_source_split_12000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} mutex_lock_nested($p58, 0);
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1240, 1));
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_12002;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} $i61 := fimc_md_register_platform_entities($p4, $p60);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    call {:si_unique_call 1865} {:cexpr "ret"} boogie_si_record_i32($i61);
    goto corral_source_split_12003;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_12004;

  corral_source_split_12004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} $i65 := fimc_md_register_sensor_entities($p4);
    call {:si_unique_call 1868} {:cexpr "ret"} boogie_si_record_i32($i65);
    goto corral_source_split_12010;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_12011;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(472, 1)), $mul.ref(2016, 1));
    goto corral_source_split_12020;

  corral_source_split_12020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} mutex_unlock($p71);
    goto corral_source_split_12021;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_12022;

  corral_source_split_12022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} $i73 := device_create_file($p72, dev_attr_subdev_conf_mode);
    call {:si_unique_call 1873} {:cexpr "ret"} boogie_si_record_i32($i73);
    goto corral_source_split_12023;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_12024;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} $i75 := fimc_md_register_clk_provider($p4);
    call {:si_unique_call 1875} {:cexpr "ret"} boogie_si_record_i32($i75);
    goto corral_source_split_12028;

  corral_source_split_12028:
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i75, 0);
    goto corral_source_split_12029;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(320, 1));
    goto corral_source_split_12039;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_12040;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    $i83 := $sgt.i32($i82, 0);
    goto corral_source_split_12041;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb37:
    assume $i83 == 1;
    goto corral_source_split_12043;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(3088, 1));
    goto corral_source_split_12044;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    goto corral_source_split_12045;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(2992, 1)), $mul.ref(8, 1));
    goto corral_source_split_12046;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p87, $p84);
    goto corral_source_split_12047;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(320, 1));
    goto corral_source_split_12048;

  corral_source_split_12048:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_12049;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(2992, 1)), $mul.ref(0, 1));
    goto corral_source_split_12050;

  corral_source_split_12050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, $i89);
    goto corral_source_split_12051;

  corral_source_split_12051:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(2992, 1)), $mul.ref(72, 1));
    goto corral_source_split_12052;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p93, subdev_notifier_bound);
    goto corral_source_split_12053;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(2992, 1)), $mul.ref(80, 1));
    goto corral_source_split_12054;

  corral_source_split_12054:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p95, subdev_notifier_complete);
    goto corral_source_split_12055;

  corral_source_split_12055:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(320, 1));
    goto corral_source_split_12056;

  corral_source_split_12056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, 0);
    goto corral_source_split_12057;

  corral_source_split_12057:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(2656, 1));
    goto corral_source_split_12058;

  corral_source_split_12058:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(2992, 1));
    goto corral_source_split_12059;

  corral_source_split_12059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} $i99 := v4l2_async_notifier_register($p97, $p98);
    call {:si_unique_call 1879} {:cexpr "ret"} boogie_si_record_i32($i99);
    goto corral_source_split_12060;

  corral_source_split_12060:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_12061;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb39:
    assume $i100 == 1;
    goto corral_source_split_12063;

  corral_source_split_12063:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} fimc_md_unregister_clk_provider($p4);
    goto corral_source_split_12065;

  corral_source_split_12065:
    assume {:verifier.code 0} true;
    $i80 := $i99;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_12035;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_12036;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} device_remove_file($p101, dev_attr_subdev_conf_mode);
    goto corral_source_split_12037;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    $i55 := $i80;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_11995;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} fimc_md_put_clocks($p4);
    goto corral_source_split_11996;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    $i69 := $i55;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_12017;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} fimc_md_unregister_entities($p4);
    goto corral_source_split_12018;

  corral_source_split_12018:
    assume {:verifier.code 0} true;
    $i51 := $i69;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_11982;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(472, 1));
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} media_device_unregister($p102);
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    $i48 := $i51;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_11973;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(2656, 1));
    goto corral_source_split_11974;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} v4l2_device_unregister($p103);
    goto corral_source_split_11975;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    $i7 := $i48;
    goto $bb3;

  $bb33:
    assume $i76 == 1;
    $p77 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(104, 1));
    goto corral_source_split_12031;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_12032;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} vslice_dummy_var_116 := printk.ref.ref(.str.120, $p78);
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    $i80 := $i75;
    goto $bb35;

  $bb30:
    assume $i74 == 1;
    goto corral_source_split_12026;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    $i69 := $i73;
    goto $bb28;

  $bb26:
    assume $i66 == 1;
    goto corral_source_split_12013;

  corral_source_split_12013:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(472, 1)), $mul.ref(2016, 1));
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} mutex_unlock($p68);
    goto corral_source_split_12015;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    $i69 := $i65;
    goto $bb28;

  $bb23:
    assume $i62 == 1;
    goto corral_source_split_12006;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(472, 1)), $mul.ref(2016, 1));
    goto corral_source_split_12007;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} mutex_unlock($p64);
    goto corral_source_split_12008;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    $i55 := $i61;
    goto $bb21;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i53 == 1;
    goto corral_source_split_11989;

  corral_source_split_11989:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i52, 517);
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i55 := $i52;
    goto $bb21;

  $bb18:
    assume $i54 == 1;
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} dev_err.ref.ref.i32($p2, .str.119, $i52);
    goto corral_source_split_11993;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb12:
    assume $i50 == 1;
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    $i51 := $i49;
    goto $bb14;

  $bb8:
    assume $i44 == 1;
    $p45 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(104, 1));
    goto corral_source_split_11969;

  corral_source_split_11969:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} vslice_dummy_var_115 := printk.ref.ref.i32(.str.118, $p46, $i43);
    goto corral_source_split_11971;

  corral_source_split_11971:
    assume {:verifier.code 0} true;
    $i48 := $i43;
    goto $bb10;

  $bb5:
    assume $i38 == 1;
    $p39 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(104, 1));
    goto corral_source_split_11961;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_11962;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} vslice_dummy_var_114 := printk.ref.ref.i32(.str.117, $p40, $i37);
    goto corral_source_split_11963;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    $i7 := $i37;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_11924;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;
}



const fimc_md_remove: ref;

axiom fimc_md_remove == $sub.ref(0, 688730);

procedure fimc_md_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_md_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12067;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} $p1 := platform_get_drvdata($p0);
    goto corral_source_split_12068;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_12069;

  corral_source_split_12069:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_12070;

  corral_source_split_12070:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_12071;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} fimc_md_unregister_clk_provider($p2);
    goto corral_source_split_12075;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 3216)), $mul.ref(2992, 1));
    goto corral_source_split_12076;

  corral_source_split_12076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} v4l2_async_notifier_unregister($p5);
    goto corral_source_split_12077;

  corral_source_split_12077:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 3216)), $mul.ref(2656, 1));
    goto corral_source_split_12078;

  corral_source_split_12078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} v4l2_device_unregister($p6);
    goto corral_source_split_12079;

  corral_source_split_12079:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_12080;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} device_remove_file($p7, dev_attr_subdev_conf_mode);
    goto corral_source_split_12081;

  corral_source_split_12081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} fimc_md_unregister_entities($p2);
    goto corral_source_split_12082;

  corral_source_split_12082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} fimc_md_pipelines_free($p2);
    goto corral_source_split_12083;

  corral_source_split_12083:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 3216)), $mul.ref(472, 1));
    goto corral_source_split_12084;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} media_device_unregister($p8);
    goto corral_source_split_12085;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} fimc_md_put_clocks($p2);
    goto corral_source_split_12086;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_12073;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fimc_md_unregister_clk_provider: ref;

axiom fimc_md_unregister_clk_provider == $sub.ref(0, 689762);

procedure fimc_md_unregister_clk_provider($p0: ref);
  free requires assertsPassed;



implementation fimc_md_unregister_clk_provider($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12088;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(32, 1));
    goto corral_source_split_12089;

  corral_source_split_12089:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_12090;

  corral_source_split_12090:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_12091;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_12092;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(104, 1));
    goto corral_source_split_12098;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_12099;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i32($i9, 0);
    goto corral_source_split_12100;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_12102;

  corral_source_split_12102:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb7;

  $bb7:
    call $i12, $p14, $p15, $i16, $i17, $i18, $i11 := fimc_md_unregister_clk_provider_loop_$bb7($p0, $p8, $i12, $p14, $p15, $i16, $i17, $i18, $i11);
    goto $bb7_last;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(0, 1)), $mul.ref($i12, 8));
    goto corral_source_split_12106;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_12107;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} clk_unregister($p15);
    goto corral_source_split_12108;

  corral_source_split_12108:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i11, 1);
    call {:si_unique_call 1892} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_12109;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p8);
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i32($i17, $i16);
    goto corral_source_split_12111;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    goto corral_source_split_12113;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb9:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb9_dummy;

  $bb1:
    assume $i5 == 1;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(32, 1));
    goto corral_source_split_12094;

  corral_source_split_12094:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_12095;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} of_clk_del_provider($p7);
    goto corral_source_split_12096;

  corral_source_split_12096:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_12104;
}



const v4l2_async_notifier_unregister: ref;

axiom v4l2_async_notifier_unregister == $sub.ref(0, 690794);

procedure v4l2_async_notifier_unregister($p0: ref);
  free requires assertsPassed;



implementation v4l2_async_notifier_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12115;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    return;
}



const v4l2_device_unregister: ref;

axiom v4l2_device_unregister == $sub.ref(0, 691826);

procedure v4l2_device_unregister($p0: ref);
  free requires assertsPassed;



implementation v4l2_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12117;

  corral_source_split_12117:
    assume {:verifier.code 0} true;
    return;
}



const device_remove_file: ref;

axiom device_remove_file == $sub.ref(0, 692858);

procedure device_remove_file($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation device_remove_file($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12119;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    return;
}



const fimc_md_unregister_entities: ref;

axiom fimc_md_unregister_entities == $sub.ref(0, 693890);

procedure fimc_md_unregister_entities($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_md_unregister_entities($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p31: ref;
  var $p32: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p56: ref;
  var $p57: ref;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p68: ref;
  var $p70: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p87: ref;
  var $p90: ref;
  var $p92: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $i97: i1;
  var $p99: ref;
  var $p102: ref;
  var $p104: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $i109: i1;
  var $p111: ref;
  var $p114: ref;
  var $p116: ref;
  var vslice_dummy_var_117: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12121;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(0, 8));
    goto corral_source_split_12123;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_12124;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_12126;

  corral_source_split_12126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1));
    goto corral_source_split_12130;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} v4l2_device_unregister_subdev($p7);
    goto corral_source_split_12131;

  corral_source_split_12131:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_12132;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $0.ref);
    goto corral_source_split_12133;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(0, 8));
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $0.ref);
    goto corral_source_split_12135;

  corral_source_split_12135:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(1, 8));
    goto corral_source_split_12137;

  corral_source_split_12137:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_12138;

  corral_source_split_12138:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_12139;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    $i85 := $eq.i64($i84, 0);
    goto corral_source_split_12140;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p83, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1));
    goto corral_source_split_12227;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} v4l2_device_unregister_subdev($p87);
    goto corral_source_split_12228;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($add.ref($p83, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_12229;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p90, $0.ref);
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(1, 8));
    goto corral_source_split_12231;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p92, $0.ref);
    goto corral_source_split_12232;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(2, 8));
    goto corral_source_split_12234;

  corral_source_split_12234:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p95);
    goto corral_source_split_12236;

  corral_source_split_12236:
    assume {:verifier.code 0} true;
    $i97 := $eq.i64($i96, 0);
    goto corral_source_split_12237;

  corral_source_split_12237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p95, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1));
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} v4l2_device_unregister_subdev($p99);
    goto corral_source_split_12242;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($add.ref($p95, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p102, $0.ref);
    goto corral_source_split_12244;

  corral_source_split_12244:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(2, 8));
    goto corral_source_split_12245;

  corral_source_split_12245:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p104, $0.ref);
    goto corral_source_split_12246;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(3, 8));
    goto corral_source_split_12248;

  corral_source_split_12248:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_12249;

  corral_source_split_12249:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p107);
    goto corral_source_split_12250;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    $i109 := $eq.i64($i108, 0);
    goto corral_source_split_12251;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p107, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1));
    goto corral_source_split_12255;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} v4l2_device_unregister_subdev($p111);
    goto corral_source_split_12256;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p107, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(1840, 1));
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p114, $0.ref);
    goto corral_source_split_12258;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(3, 8));
    goto corral_source_split_12259;

  corral_source_split_12259:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p116, $0.ref);
    goto corral_source_split_12260;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(392, 1)), $mul.ref(0, 8));
    goto corral_source_split_12142;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_12143;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_12144;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_12145;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref(0, 4048)), $mul.ref(2056, 1));
    goto corral_source_split_12149;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} v4l2_device_unregister_subdev($p18);
    goto corral_source_split_12150;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 4048)), $mul.ref(16, 1)), $mul.ref(1840, 1));
    goto corral_source_split_12151;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $0.ref);
    goto corral_source_split_12152;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(392, 1)), $mul.ref(0, 8));
    goto corral_source_split_12153;

  corral_source_split_12153:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $0.ref);
    goto corral_source_split_12154;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(392, 1)), $mul.ref(1, 8));
    goto corral_source_split_12156;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_12157;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    $i65 := $eq.i64($i64, 0);
    goto corral_source_split_12159;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p63, $mul.ref(0, 4048)), $mul.ref(2056, 1));
    goto corral_source_split_12204;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} v4l2_device_unregister_subdev($p66);
    goto corral_source_split_12205;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 4048)), $mul.ref(16, 1)), $mul.ref(1840, 1));
    goto corral_source_split_12206;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $0.ref);
    goto corral_source_split_12207;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(392, 1)), $mul.ref(1, 8));
    goto corral_source_split_12208;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, $0.ref);
    goto corral_source_split_12209;

  corral_source_split_12209:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(392, 1)), $mul.ref(2, 8));
    goto corral_source_split_12211;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_12212;

  corral_source_split_12212:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p73);
    goto corral_source_split_12213;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    $i75 := $eq.i64($i74, 0);
    goto corral_source_split_12214;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p73, $mul.ref(0, 4048)), $mul.ref(2056, 1));
    goto corral_source_split_12218;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} v4l2_device_unregister_subdev($p76);
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p73, $mul.ref(0, 4048)), $mul.ref(16, 1)), $mul.ref(1840, 1));
    goto corral_source_split_12220;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p78, $0.ref);
    goto corral_source_split_12221;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(392, 1)), $mul.ref(2, 8));
    goto corral_source_split_12222;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p80, $0.ref);
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(0, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12161;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_12162;

  corral_source_split_12162:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_12163;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_12164;

  corral_source_split_12164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(0, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12168;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_12169;

  corral_source_split_12169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} v4l2_device_unregister_subdev($p32);
    goto corral_source_split_12170;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(0, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12171;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $0.ref);
    goto corral_source_split_12172;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(0, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_12174;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_12175;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_12176;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_12177;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(0, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_12196;

  corral_source_split_12196:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_12197;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} v4l2_device_unregister_subdev($p57);
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(0, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_12199;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $0.ref);
    goto corral_source_split_12200;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(448, 1));
    goto corral_source_split_12179;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_12180;

  corral_source_split_12180:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_12181;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_12182;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(104, 1));
    goto corral_source_split_12190;

  corral_source_split_12190:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} vslice_dummy_var_117 := printk.ref.ref(.str.154, $p46);
    goto corral_source_split_12192;

  corral_source_split_12192:
    assume {:verifier.code 0} true;
    return;

  $bb25:
    assume $i39 == 1;
    goto corral_source_split_12184;

  corral_source_split_12184:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(448, 1));
    goto corral_source_split_12185;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_12186;

  corral_source_split_12186:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 12320)), $mul.ref(168, 1)), $mul.ref(16, 1));
    goto corral_source_split_12187;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} v4l2_device_unregister_subdev($p43);
    goto corral_source_split_12188;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb28:
    assume $i53 == 1;
    goto corral_source_split_12194;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb19:
    assume $i28 == 1;
    goto corral_source_split_12166;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb37:
    assume $i75 == 1;
    goto corral_source_split_12216;

  corral_source_split_12216:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume $i65 == 1;
    goto corral_source_split_12202;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_12147;

  corral_source_split_12147:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb51:
    assume $i109 == 1;
    goto corral_source_split_12253;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb46:
    assume $i97 == 1;
    goto corral_source_split_12239;

  corral_source_split_12239:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb41:
    assume $i85 == 1;
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_12128;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const fimc_md_pipelines_free: ref;

axiom fimc_md_pipelines_free == $sub.ref(0, 694922);

procedure fimc_md_pipelines_free($p0: ref);
  free requires assertsPassed;



implementation fimc_md_pipelines_free($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(3200, 1));
    goto corral_source_split_12263;

  corral_source_split_12263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} $i2 := list_empty($p1);
    call {:si_unique_call 1905} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_12264;

  corral_source_split_12264:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_12265;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p5, $p6, $p7, $p8, $p9, $p10, $i11, $i12 := fimc_md_pipelines_free_loop_$bb4($p0, $p1, $p5, $p6, $p7, $p8, $p9, $p10, $i11, $i12);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(3200, 1)), $mul.ref(0, 1));
    goto corral_source_split_12269;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_12270;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_12271;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 8), 72));
    goto corral_source_split_12272;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 8), 72)), $mul.ref(8, 1));
    goto corral_source_split_12273;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} list_del($p9);
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p8);
    goto corral_source_split_12275;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} kfree($p10);
    goto corral_source_split_12276;

  corral_source_split_12276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} $i11 := list_empty($p1);
    call {:si_unique_call 1909} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_12277;

  corral_source_split_12277:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_12280;

  corral_source_split_12280:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const media_device_unregister: ref;

axiom media_device_unregister == $sub.ref(0, 695954);

procedure media_device_unregister($p0: ref);
  free requires assertsPassed;



implementation media_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12282;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    return;
}



const fimc_md_put_clocks: ref;

axiom fimc_md_put_clocks == $sub.ref(0, 696986);

procedure fimc_md_put_clocks($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_md_put_clocks($p0: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p45: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i1;
  var $i52: i8;
  var $i53: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p62: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12284;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(328, 1)), $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_12287;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_12288;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} $i6 := IS_ERR($p5);
    goto corral_source_split_12289;

  corral_source_split_12289:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 1911} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_12290;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(328, 1)), $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_12302;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_12303;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} clk_put($p12);
    goto corral_source_split_12304;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} $p13 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_12305;

  corral_source_split_12305:
    assume {:verifier.code 0} true;
    goto corral_source_split_12306;

  corral_source_split_12306:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(328, 1)), $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_12307;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p13);
    goto corral_source_split_12308;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(328, 1)), $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12295;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_12296;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_12297;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} $i51 := IS_ERR($p50);
    goto corral_source_split_12298;

  corral_source_split_12298:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i8($i51);
    goto corral_source_split_12299;

  corral_source_split_12299:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i8.i1($i52);
    goto corral_source_split_12300;

  corral_source_split_12300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(328, 1)), $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12346;

  corral_source_split_12346:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_12347;

  corral_source_split_12347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} clk_put($p57);
    goto corral_source_split_12348;

  corral_source_split_12348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} $p58 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_12349;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    goto corral_source_split_12350;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(328, 1)), $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12351;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, $p58);
    goto corral_source_split_12352;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(376, 1)), $mul.ref(0, 8));
    goto corral_source_split_12310;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_12311;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_12312;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} $i22 := IS_ERR($p21);
    goto corral_source_split_12313;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    call {:si_unique_call 1916} {:cexpr "tmp___1"} boogie_si_record_i8($i23);
    goto corral_source_split_12314;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(376, 1)), $mul.ref(0, 8));
    goto corral_source_split_12319;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_12320;

  corral_source_split_12320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} clk_put($p27);
    goto corral_source_split_12321;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} $p28 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_12322;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    goto corral_source_split_12323;

  corral_source_split_12323:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(376, 1)), $mul.ref(0, 8));
    goto corral_source_split_12324;

  corral_source_split_12324:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p28);
    goto corral_source_split_12325;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(376, 1)), $mul.ref(1, 8));
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_12328;

  corral_source_split_12328:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_12329;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} $i36 := IS_ERR($p35);
    goto corral_source_split_12330;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    goto corral_source_split_12331;

  corral_source_split_12331:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_12332;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(376, 1)), $mul.ref(1, 8));
    goto corral_source_split_12336;

  corral_source_split_12336:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_12337;

  corral_source_split_12337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} clk_put($p41);
    goto corral_source_split_12338;

  corral_source_split_12338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} $p42 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_12339;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    goto corral_source_split_12340;

  corral_source_split_12340:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(376, 1)), $mul.ref(1, 8));
    goto corral_source_split_12341;

  corral_source_split_12341:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p42);
    goto corral_source_split_12342;

  corral_source_split_12342:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i38 == 1;
    goto corral_source_split_12334;

  corral_source_split_12334:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_12317;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb21:
    assume $i53 == 1;
    goto corral_source_split_12344;

  corral_source_split_12344:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const of_clk_del_provider: ref;

axiom of_clk_del_provider == $sub.ref(0, 698018);

procedure of_clk_del_provider($p0: ref);
  free requires assertsPassed;



implementation of_clk_del_provider($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12354;

  corral_source_split_12354:
    assume {:verifier.code 0} true;
    return;
}



const clk_unregister: ref;

axiom clk_unregister == $sub.ref(0, 699050);

procedure clk_unregister($p0: ref);
  free requires assertsPassed;



implementation clk_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12356;

  corral_source_split_12356:
    assume {:verifier.code 0} true;
    return;
}



const fimc_md_link_notify: ref;

axiom fimc_md_link_notify == $sub.ref(0, 700082);

procedure fimc_md_link_notify($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const fimc_sensor_notify: ref;

axiom fimc_sensor_notify == $sub.ref(0, 701114);

procedure fimc_sensor_notify($p0: ref, $i1: i32, $p2: ref);



const fimc_md_is_isp_available: ref;

axiom fimc_md_is_isp_available == $sub.ref(0, 702146);

procedure fimc_md_is_isp_available($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation fimc_md_is_isp_available($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12358;

  corral_source_split_12358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} $p1 := of_get_child_by_name($p0, .str.121);
    goto corral_source_split_12359;

  corral_source_split_12359:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_12360;

  corral_source_split_12360:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_12374;

  corral_source_split_12374:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_12375;

  corral_source_split_12375:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_12363;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} $i4 := of_device_is_available($p1);
    goto corral_source_split_12364;

  corral_source_split_12364:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 1926} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_12365;

  corral_source_split_12365:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_12366;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_12367;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_12368;

  corral_source_split_12368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_12372;

  corral_source_split_12372:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb6;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_12370;

  corral_source_split_12370:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb5;
}



const v4l2_device_register: ref;

axiom v4l2_device_register == $sub.ref(0, 703178);

procedure v4l2_device_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_device_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12377;

  corral_source_split_12377:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1927} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1928} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_12378;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __media_device_register: ref;

axiom __media_device_register == $sub.ref(0, 704210);

procedure __media_device_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __media_device_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12380;

  corral_source_split_12380:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1929} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1930} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_12381;

  corral_source_split_12381:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fimc_md_get_clocks: ref;

axiom fimc_md_get_clocks == $sub.ref(0, 705242);

procedure fimc_md_get_clocks($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fimc_md_get_clocks($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i32;
  var $p26: ref;
  var $i23: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i8;
  var $i30: i1;
  var $p32: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i1;
  var $i42: i8;
  var $i43: i1;
  var $p44: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i32;
  var $p55: ref;
  var $i53: i32;
  var $i56: i1;
  var $i31: i32;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i1;
  var $i63: i8;
  var $i64: i1;
  var $p67: ref;
  var $p68: ref;
  var $p72: ref;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_12383;

  corral_source_split_12383:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2848, 1));
    goto corral_source_split_12384;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_12385;

  corral_source_split_12385:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_12386;

  corral_source_split_12386:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} $p5 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_12388;

  corral_source_split_12388:
    assume {:verifier.code 0} true;
    goto corral_source_split_12389;

  corral_source_split_12389:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(328, 1)), $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12390;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p5);
    goto corral_source_split_12391;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} $p68 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_12393;

  corral_source_split_12393:
    assume {:verifier.code 0} true;
    goto corral_source_split_12394;

  corral_source_split_12394:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(328, 1)), $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_12395;

  corral_source_split_12395:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p72, $p68);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_12397;

  corral_source_split_12397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} vslice_dummy_var_118 := snprintf.ref.i64.ref.i32($p10, 32, .str.122, 0);
    goto corral_source_split_12398;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_12399;

  corral_source_split_12399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} $p13 := clk_get($p4, $p12);
    goto corral_source_split_12400;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_12401;

  corral_source_split_12401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} $i15 := IS_ERR($p14);
    goto corral_source_split_12402;

  corral_source_split_12402:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i8($i15);
    call {:si_unique_call 1937} {:cexpr "tmp___1"} boogie_si_record_i8($i16);
    goto corral_source_split_12403;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_12404;

  corral_source_split_12404:
    assume {:verifier.code 0} true;
    $p18 := $p13;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(328, 1)), $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_12416;

  corral_source_split_12416:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p13);
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p1);
    goto corral_source_split_12419;

  corral_source_split_12419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} vslice_dummy_var_119 := snprintf.ref.i64.ref.i32($p57, 32, .str.122, 1);
    goto corral_source_split_12420;

  corral_source_split_12420:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p1);
    goto corral_source_split_12421;

  corral_source_split_12421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} $p60 := clk_get($p4, $p59);
    goto corral_source_split_12422;

  corral_source_split_12422:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_12423;

  corral_source_split_12423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} $i62 := IS_ERR($p61);
    goto corral_source_split_12424;

  corral_source_split_12424:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i8($i62);
    goto corral_source_split_12425;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i8.i1($i63);
    goto corral_source_split_12426;

  corral_source_split_12426:
    assume {:verifier.code 0} true;
    $p18 := $p60;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(328, 1)), $mul.ref(1, 24)), $mul.ref(0, 1));
    goto corral_source_split_12470;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, $p60);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_12413;

  corral_source_split_12413:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i23, 0);
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(456, 1));
    goto corral_source_split_12431;

  corral_source_split_12431:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_12432;

  corral_source_split_12432:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i29);
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_12437;

  corral_source_split_12437:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb17:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} $p32 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_12439;

  corral_source_split_12439:
    assume {:verifier.code 0} true;
    goto corral_source_split_12440;

  corral_source_split_12440:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(376, 1)), $mul.ref(0, 8));
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p32);
    goto corral_source_split_12442;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p1);
    goto corral_source_split_12444;

  corral_source_split_12444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} vslice_dummy_var_120 := snprintf.ref.i64.ref.i32($p36, 32, .str.124, 1);
    goto corral_source_split_12445;

  corral_source_split_12445:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p1);
    goto corral_source_split_12446;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} $p39 := clk_get($p4, $p38);
    goto corral_source_split_12447;

  corral_source_split_12447:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_12448;

  corral_source_split_12448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} $i41 := IS_ERR($p40);
    goto corral_source_split_12449;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i8($i41);
    call {:si_unique_call 1950} {:cexpr "tmp___4"} boogie_si_record_i8($i42);
    goto corral_source_split_12450;

  corral_source_split_12450:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i8.i1($i42);
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    $p44 := $p39;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(376, 1)), $mul.ref(1, 8));
    goto corral_source_split_12465;

  corral_source_split_12465:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, $p39);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i53 := $i23;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i53, 0);
    goto corral_source_split_12463;

  corral_source_split_12463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i31 := $i53;
    goto $bb19;

  $bb28:
    assume $i56 == 1;
    goto corral_source_split_12467;

  corral_source_split_12467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} fimc_md_put_clocks($p0);
    goto corral_source_split_12468;

  corral_source_split_12468:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb23:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_12453;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(104, 1));
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_12455;

  corral_source_split_12455:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p1);
    goto corral_source_split_12456;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} vslice_dummy_var_121 := printk.ref.ref.ref(.str.125, $p47, $p48);
    goto corral_source_split_12457;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p44);
    goto corral_source_split_12458;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} $i51 := PTR_ERR($p50);
    call {:si_unique_call 1953} {:cexpr "tmp___3"} boogie_si_record_i64($i51);
    goto corral_source_split_12459;

  corral_source_split_12459:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i51);
    call {:si_unique_call 1954} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_12460;

  corral_source_split_12460:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb25;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_12428;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} fimc_md_put_clocks($p0);
    goto corral_source_split_12429;

  corral_source_split_12429:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_12406;

  corral_source_split_12406:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_12407;

  corral_source_split_12407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} dev_err.ref.ref.ref($p4, .str.123, $p19);
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p18);
    goto corral_source_split_12409;

  corral_source_split_12409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} $i21 := PTR_ERR($p20);
    call {:si_unique_call 1940} {:cexpr "tmp___0"} boogie_si_record_i64($i21);
    goto corral_source_split_12410;

  corral_source_split_12410:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    call {:si_unique_call 1941} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_12411;

  corral_source_split_12411:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb10;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb8;
}



const fimc_md_get_pinctrl: ref;

axiom fimc_md_get_pinctrl == $sub.ref(0, 706274);

procedure fimc_md_get_pinctrl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fimc_md_get_pinctrl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12472;

  corral_source_split_12472:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2848, 1));
    goto corral_source_split_12473;

  corral_source_split_12473:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    goto corral_source_split_12476;

  corral_source_split_12476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} $p5 := devm_pinctrl_get($p3);
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2856, 1)), $mul.ref(0, 1));
    goto corral_source_split_12477;

  corral_source_split_12477:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p5);
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2856, 1)), $mul.ref(0, 1));
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_12479;

  corral_source_split_12479:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_12480;

  corral_source_split_12480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} $i10 := IS_ERR($p9);
    goto corral_source_split_12481;

  corral_source_split_12481:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 1958} {:cexpr "tmp___0"} boogie_si_record_i8($i11);
    goto corral_source_split_12482;

  corral_source_split_12482:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2856, 1)), $mul.ref(0, 1));
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_12494;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} $p21 := pinctrl_lookup_state($p20, .str.126);
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2856, 1)), $mul.ref(8, 1));
    goto corral_source_split_12495;

  corral_source_split_12495:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p21);
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2856, 1)), $mul.ref(8, 1));
    goto corral_source_split_12496;

  corral_source_split_12496:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_12497;

  corral_source_split_12497:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} $i26 := IS_ERR($p25);
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 1963} {:cexpr "tmp___2"} boogie_si_record_i8($i27);
    goto corral_source_split_12500;

  corral_source_split_12500:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_12501;

  corral_source_split_12501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2856, 1)), $mul.ref(0, 1));
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_12510;

  corral_source_split_12510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} $p36 := pinctrl_lookup_state($p35, .str.127);
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2856, 1)), $mul.ref(16, 1));
    goto corral_source_split_12511;

  corral_source_split_12511:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p36);
    goto corral_source_split_12512;

  corral_source_split_12512:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12491;

  corral_source_split_12491:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb5:
    assume $i28 == 1;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2856, 1)), $mul.ref(8, 1));
    goto corral_source_split_12503;

  corral_source_split_12503:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_12504;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_12505;

  corral_source_split_12505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} $i32 := PTR_ERR($p31);
    call {:si_unique_call 1965} {:cexpr "tmp___1"} boogie_si_record_i64($i32);
    goto corral_source_split_12506;

  corral_source_split_12506:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i32);
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    $i18 := $i33;
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2856, 1)), $mul.ref(0, 1));
    goto corral_source_split_12485;

  corral_source_split_12485:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_12486;

  corral_source_split_12486:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} $i16 := PTR_ERR($p15);
    call {:si_unique_call 1960} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_12488;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_12489;

  corral_source_split_12489:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb3;
}



const fimc_md_register_platform_entities: ref;

axiom fimc_md_register_platform_entities == $sub.ref(0, 707306);

procedure fimc_md_register_platform_entities($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.36, $M.1, $CurrAddr, assertsPassed;



implementation fimc_md_register_platform_entities($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i8;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i26: i32;
  var $i21: i32;
  var $i16: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i1;
  var $i43: i32;
  var $i11: i32;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p6: ref;
  var $i7: i32;
  var $i48: i32;
  var $i5: i32;
  var $i44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12514;

  corral_source_split_12514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} $p2 := of_get_next_available_child($p1, $0.ref);
    goto corral_source_split_12515;

  corral_source_split_12515:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_12516;

  corral_source_split_12516:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_12517;

  corral_source_split_12517:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i44 := $i5;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_12590;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_12519;

  corral_source_split_12519:
    assume {:verifier.code 0} true;
    $p6, $i7 := $p2, 0;
    goto $bb4;

  $bb4:
    call $p8, $i9, $i10, $p12, $p13, $i14, $i15, $p17, $p18, $i19, $i20, $p22, $p23, $i24, $i25, $p27, $p28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i26, $i21, $i16, $i38, $i39, $i40, $p41, $i42, $i43, $i11, $p45, $i46, $i47, $p6, $i7, $i48 := fimc_md_register_platform_entities_loop_$bb4($p0, $p1, $p8, $i9, $i10, $p12, $p13, $i14, $i15, $p17, $p18, $i19, $i20, $p22, $p23, $i24, $i25, $p27, $p28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i26, $i21, $i16, $i38, $i39, $i40, $p41, $i42, $i43, $i11, $p45, $i46, $i47, $p6, $i7, $i48);
    goto $bb4_last;

  corral_source_split_12521:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} $p8 := of_find_device_by_node($p6);
    goto corral_source_split_12523;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_12524;

  corral_source_split_12524:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_12525;

  corral_source_split_12525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_12534;

  corral_source_split_12534:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_12535;

  corral_source_split_12535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} $i14 := strcmp($p13, .str.128);
    call {:si_unique_call 1971} {:cexpr "tmp___4"} boogie_si_record_i32($i14);
    goto corral_source_split_12536;

  corral_source_split_12536:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_12537;

  corral_source_split_12537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    goto corral_source_split_12541;

  corral_source_split_12541:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_12542;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_12543;

  corral_source_split_12543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} $i19 := strcmp($p18, .str.121);
    call {:si_unique_call 1973} {:cexpr "tmp___3"} boogie_si_record_i32($i19);
    goto corral_source_split_12544;

  corral_source_split_12544:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_12545;

  corral_source_split_12545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i20 == 1);
    goto corral_source_split_12552;

  corral_source_split_12552:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_12553;

  corral_source_split_12553:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_12554;

  corral_source_split_12554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} $i24 := strcmp($p23, .str.129);
    call {:si_unique_call 1975} {:cexpr "tmp___2"} boogie_si_record_i32($i24);
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_12556;

  corral_source_split_12556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i25 == 1);
    goto corral_source_split_12560;

  corral_source_split_12560:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_12561;

  corral_source_split_12561:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_12562;

  corral_source_split_12562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} $i29 := strcmp($p28, .str.76);
    call {:si_unique_call 1977} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_12563;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_12564;

  corral_source_split_12564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i37 := $sub.i32(0, 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i26 := $i37;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i21 := $i26;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i16 := $i21;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_12547;

  corral_source_split_12547:
    assume {:verifier.code 0} true;
    $i38 := $sge.i32($i16, 0);
    goto corral_source_split_12548;

  corral_source_split_12548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i40 := $i7;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_12583;

  corral_source_split_12583:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p8, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_12584;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} put_device($p41);
    goto corral_source_split_12585;

  corral_source_split_12585:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i40, 0);
    goto corral_source_split_12586;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    $i43 := $i40;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i11 := $i40;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_12529;

  corral_source_split_12529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} $p45 := of_get_next_available_child($p1, $p6);
    goto corral_source_split_12530;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_12531;

  corral_source_split_12531:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_12532;

  corral_source_split_12532:
    assume {:verifier.code 0} true;
    $i48 := $i11;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_12592;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    $i5 := $i48;
    goto $bb3;

  $bb35:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $p6, $i7 := $p45, $i11;
    goto $bb35_dummy;

  $bb31:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_12588;

  corral_source_split_12588:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb33;

  $bb28:
    assume $i38 == 1;
    goto corral_source_split_12580;

  corral_source_split_12580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} $i39 := fimc_md_register_platform_entity($p0, $p8, $i16);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    call {:si_unique_call 1981} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_12581;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb30;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i30 == 1;
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} $i31 := of_property_read_bool($p6, .str.67);
    goto corral_source_split_12567;

  corral_source_split_12567:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i8($i31);
    call {:si_unique_call 1979} {:cexpr "tmp___0"} boogie_si_record_i8($i32);
    goto corral_source_split_12568;

  corral_source_split_12568:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_12569;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_12573;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_12574;

  corral_source_split_12574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb27;

  $bb24:
    assume $i35 == 1;
    goto corral_source_split_12576;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    $i36 := 4;
    goto $bb26;

  $bb21:
    assume $i33 == 1;
    goto corral_source_split_12571;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb23;

  $bb16:
    assume $i25 == 1;
    goto corral_source_split_12558;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    $i26 := 2;
    goto $bb18;

  $bb13:
    assume $i20 == 1;
    goto corral_source_split_12550;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    $i21 := 3;
    goto $bb15;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_12539;

  corral_source_split_12539:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb12;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_12527;

  corral_source_split_12527:
    assume {:verifier.code 0} true;
    $i11 := $i7;
    goto $bb8;

  $bb35_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12521;
}



const fimc_md_register_sensor_entities: ref;

axiom fimc_md_register_sensor_entities == $sub.ref(0, 708338);

procedure fimc_md_register_sensor_entities($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fimc_md_register_sensor_entities($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i37: i32;
  var $i28: i32;
  var $i29: i32;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i41: i32;
  var $i42: i32;
  var $i19: i32;
  var $i20: i32;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i56: i32;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $i50: i32;
  var $p51: ref;
  var $i60: i32;
  var $i49: i32;
  var $i55: i32;
  var $i36: i32;
  var $p61: ref;
  var $p62: ref;
  var $i10: i32;
  var vslice_dummy_var_122: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12594;

  corral_source_split_12594:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2848, 1));
    goto corral_source_split_12595;

  corral_source_split_12595:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_12596;

  corral_source_split_12596:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1240, 1));
    goto corral_source_split_12597;

  corral_source_split_12597:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_12598;

  corral_source_split_12598:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(464, 1));
    goto corral_source_split_12599;

  corral_source_split_12599:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_12600;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_12601;

  corral_source_split_12601:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_12602;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(464, 1));
    goto corral_source_split_12608;

  corral_source_split_12608:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_12609;

  corral_source_split_12609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} $i13 := pm_runtime_get_sync($p12);
    call {:si_unique_call 1984} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_12610;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_12611;

  corral_source_split_12611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(320, 1));
    goto corral_source_split_12615;

  corral_source_split_12615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 0);
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} $p16 := of_get_next_available_child($p5, $0.ref);
    goto corral_source_split_12617;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_12618;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_12619;

  corral_source_split_12619:
    assume {:verifier.code 0} true;
    $i19, $i20 := 0, $i13;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1994} $p43 := of_get_child_by_name($p5, .str.139);
    goto corral_source_split_12657;

  corral_source_split_12657:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_12658;

  corral_source_split_12658:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_12659;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} $p46 := of_get_next_child($p43, $0.ref);
    goto corral_source_split_12663;

  corral_source_split_12663:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_12664;

  corral_source_split_12664:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_12665;

  corral_source_split_12665:
    assume {:verifier.code 0} true;
    $i49 := $i20;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i55 := $i49;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_12676;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    $i36 := $i55;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_12648;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(464, 1));
    goto corral_source_split_12649;

  corral_source_split_12649:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_12650;

  corral_source_split_12650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} vslice_dummy_var_122 := pm_runtime_put($p62);
    goto corral_source_split_12651;

  corral_source_split_12651:
    assume {:verifier.code 0} true;
    $i10 := $i36;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12606;

  corral_source_split_12606:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb30:
    assume $i48 == 1;
    goto corral_source_split_12667;

  corral_source_split_12667:
    assume {:verifier.code 0} true;
    $i50, $p51 := $i19, $p46;
    goto $bb33;

  $bb33:
    call $i52, $i53, $i54, $i56, $p57, $i58, $i59, $i50, $p51, $i60 := fimc_md_register_sensor_entities_loop_$bb33($p0, $p43, $i52, $i53, $i54, $i56, $p57, $i58, $i59, $i50, $p51, $i60);
    goto $bb33_last;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} $i52 := fimc_md_parse_port_node($p0, $p51, $i50);
    call {:si_unique_call 1997} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_12671;

  corral_source_split_12671:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i52, 0);
    goto corral_source_split_12672;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    $i54 := $i52;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i50, 1);
    call {:si_unique_call 1998} {:cexpr "index"} boogie_si_record_i32($i56);
    goto corral_source_split_12678;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} $p57 := of_get_next_child($p43, $p51);
    goto corral_source_split_12679;

  corral_source_split_12679:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_12680;

  corral_source_split_12680:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_12681;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    $i60 := $i52;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_12683;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    $i49 := $i60;
    goto $bb32;

  $bb39:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i50, $p51 := $i56, $p57;
    goto $bb39_dummy;

  $bb35:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_12674;

  corral_source_split_12674:
    assume {:verifier.code 0} true;
    $i55 := $i54;
    goto $bb37;

  $bb27:
    assume $i45 == 1;
    goto corral_source_split_12661;

  corral_source_split_12661:
    assume {:verifier.code 0} true;
    $i36 := $i20;
    goto $bb22;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_12621;

  corral_source_split_12621:
    assume {:verifier.code 0} true;
    $i21, $i22, $p23 := $i13, 0, $p16;
    goto $bb11;

  $bb11:
    call $p24, $p25, $i26, $i27, $p30, $i31, $i32, $i33, $i34, $i35, $i37, $i28, $i29, $p38, $i39, $i40, $i21, $i22, $p23, $i41, $i42 := fimc_md_register_sensor_entities_loop_$bb11($p0, $p5, $p24, $p25, $i26, $i27, $p30, $i31, $i32, $i33, $i34, $i35, $i37, $i28, $i29, $p38, $i39, $i40, $i21, $i22, $p23, $i41, $i42);
    goto $bb11_last;

  corral_source_split_12623:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_12625;

  corral_source_split_12625:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_12626;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} $i26 := strcasecmp($p25, .str.128);
    call {:si_unique_call 1987} {:cexpr "tmp"} boogie_si_record_i32($i26);
    goto corral_source_split_12627;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_12628;

  corral_source_split_12628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} $p30 := of_get_next_child($p23, $0.ref);
    goto corral_source_split_12637;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_12638;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_12639;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} $i33 := fimc_md_parse_port_node($p0, $p30, $i22);
    call {:si_unique_call 1991} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_12643;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_12644;

  corral_source_split_12644:
    assume {:verifier.code 0} true;
    $i35 := $i33;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i22, 1);
    call {:si_unique_call 1993} {:cexpr "index"} boogie_si_record_i32($i37);
    goto corral_source_split_12653;

  corral_source_split_12653:
    assume {:verifier.code 0} true;
    $i28, $i29 := $i37, $i33;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12632;

  corral_source_split_12632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} $p38 := of_get_next_available_child($p5, $p23);
    goto corral_source_split_12633;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_12634;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_12635;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    $i41, $i42 := $i28, $i29;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12655;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    $i19, $i20 := $i41, $i42;
    goto $bb10;

  $bb24:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i21, $i22, $p23 := $i29, $i28, $p38;
    goto $bb24_dummy;

  $bb20:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_12646;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb22;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_12641;

  corral_source_split_12641:
    assume {:verifier.code 0} true;
    $i28, $i29 := $i22, $i21;
    goto $bb15;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_12630;

  corral_source_split_12630:
    assume {:verifier.code 0} true;
    $i28, $i29 := $i22, $i21;
    goto $bb15;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_12613;

  corral_source_split_12613:
    assume {:verifier.code 0} true;
    $i10 := $i13;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_12604;

  corral_source_split_12604:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 6);
    goto $bb3;

  $bb39_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12669;

  $bb24_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12623;
}



const device_create_file: ref;

axiom device_create_file == $sub.ref(0, 709370);

procedure device_create_file($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_create_file($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12685;

  corral_source_split_12685:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2000} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2001} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_12686;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fimc_md_register_clk_provider: ref;

axiom fimc_md_register_clk_provider == $sub.ref(0, 710402);

procedure fimc_md_register_clk_provider($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fimc_md_register_clk_provider($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p34: ref;
  var $i35: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i1;
  var $i41: i8;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $i7: i32;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p70: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $i59: i32;
  var $i69: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_12688;

  corral_source_split_12688:
    assume {:verifier.code 0} true;
    goto corral_source_split_12689;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2848, 1));
    goto corral_source_split_12690;

  corral_source_split_12690:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_12691;

  corral_source_split_12691:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_12692;

  corral_source_split_12692:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb1;

  $bb1:
    call $p8, $p9, $i10, $p12, $p13, $p14, $i15, $i16, $i17, $p20, $p21, $p22, $p23, $p24, $p25, $p26, $p28, $p29, $p30, $p31, $i32, $p34, $i35, $p37, $p38, $p39, $i40, $i41, $i42, $i43, $p60, $i61, $i62, $p63, $i64, $i65, $i7 := fimc_md_register_clk_provider_loop_$bb1($p0, $p1, $p2, $p5, $p8, $p9, $i10, $p12, $p13, $p14, $i15, $i16, $i17, $p20, $p21, $p22, $p23, $p24, $p25, $p26, $p28, $p29, $p30, $p31, $i32, $p34, $i35, $p37, $p38, $p39, $i40, $i41, $i42, $i43, $p60, $i61, $i62, $p63, $i64, $i65, $i7);
    goto $bb1_last;

  corral_source_split_12694:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(40, 1));
    goto corral_source_split_12696;

  corral_source_split_12696:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_12697;

  corral_source_split_12697:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i7);
    goto corral_source_split_12698;

  corral_source_split_12698:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1240, 1));
    goto corral_source_split_12699;

  corral_source_split_12699:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_12700;

  corral_source_split_12700:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12701;

  corral_source_split_12701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} $i15 := of_property_read_string_index($p13, .str.144, $i7, $p14);
    call {:si_unique_call 2005} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_12702;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_12703;

  corral_source_split_12703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i7);
    goto corral_source_split_12711;

  corral_source_split_12711:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(328, 1)), $mul.ref($i17, 24)), $mul.ref(0, 1));
    goto corral_source_split_12712;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_12713;

  corral_source_split_12713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} $p22 := __clk_get_name($p21);
    goto corral_source_split_12714;

  corral_source_split_12714:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p22);
    goto corral_source_split_12715;

  corral_source_split_12715:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12716;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p2);
    goto corral_source_split_12717;

  corral_source_split_12717:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12718;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 1);
    goto corral_source_split_12719;

  corral_source_split_12719:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12720;

  corral_source_split_12720:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, cam_clk_ops);
    goto corral_source_split_12721;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12722;

  corral_source_split_12722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p26, 4);
    goto corral_source_split_12723;

  corral_source_split_12723:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p9, $mul.ref($i10, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_12724;

  corral_source_split_12724:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p1);
    goto corral_source_split_12725;

  corral_source_split_12725:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p9, $mul.ref($i10, 32)), $mul.ref(24, 1));
    goto corral_source_split_12726;

  corral_source_split_12726:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p0);
    goto corral_source_split_12727;

  corral_source_split_12727:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p9, $mul.ref($i10, 32)), $mul.ref(0, 1));
    goto corral_source_split_12728;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} $p31 := clk_register($0.ref, $p30);
    goto corral_source_split_12729;

  corral_source_split_12729:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i7);
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(0, 1)), $mul.ref($i32, 8));
    goto corral_source_split_12730;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p31);
    goto corral_source_split_12731;

  corral_source_split_12731:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i7);
    $p37 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(0, 1)), $mul.ref($i35, 8));
    goto corral_source_split_12732;

  corral_source_split_12732:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_12733;

  corral_source_split_12733:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_12734;

  corral_source_split_12734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} $i40 := IS_ERR($p39);
    goto corral_source_split_12735;

  corral_source_split_12735:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i8($i40);
    call {:si_unique_call 2009} {:cexpr "tmp___1"} boogie_si_record_i8($i41);
    goto corral_source_split_12736;

  corral_source_split_12736:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i41);
    goto corral_source_split_12737;

  corral_source_split_12737:
    assume {:verifier.code 0} true;
    $i43 := $i7;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(104, 1));
    goto corral_source_split_12756;

  corral_source_split_12756:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_12757;

  corral_source_split_12757:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i61, 1);
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(104, 1));
    goto corral_source_split_12758;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    goto corral_source_split_12759;

  corral_source_split_12759:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i7, 1);
    call {:si_unique_call 2017} {:cexpr "i"} boogie_si_record_i32($i64);
    goto corral_source_split_12760;

  corral_source_split_12760:
    assume {:verifier.code 0} true;
    $i65 := $sle.i32($i64, 1);
    goto corral_source_split_12761;

  corral_source_split_12761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(104, 1));
    goto corral_source_split_12707;

  corral_source_split_12707:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_12708;

  corral_source_split_12708:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    goto corral_source_split_12709;

  corral_source_split_12709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(0, 1));
    goto corral_source_split_12768;

  corral_source_split_12768:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_12769;

  corral_source_split_12769:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, $p70);
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(104, 1));
    goto corral_source_split_12770;

  corral_source_split_12770:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    $p77 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_12771;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, $i75);
    $p78 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1240, 1));
    goto corral_source_split_12772;

  corral_source_split_12772:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(32, 1));
    goto corral_source_split_12773;

  corral_source_split_12773:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p80, $p79);
    $p81 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1240, 1));
    goto corral_source_split_12774;

  corral_source_split_12774:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    $p83 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(16, 1));
    goto corral_source_split_12775;

  corral_source_split_12775:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_12776;

  corral_source_split_12776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} $i85 := of_clk_add_provider($p82, of_clk_src_onecell_get, $p84);
    call {:si_unique_call 2020} {:cexpr "ret"} boogie_si_record_i32($i85);
    goto corral_source_split_12777;

  corral_source_split_12777:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 0);
    goto corral_source_split_12778;

  corral_source_split_12778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i59 := $i85;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_12753;

  corral_source_split_12753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} fimc_md_unregister_clk_provider($p0);
    goto corral_source_split_12754;

  corral_source_split_12754:
    assume {:verifier.code 0} true;
    $i69 := $i59;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_12766;

  corral_source_split_12766:
    assume {:verifier.code 0} true;
    $r := $i69;
    return;

  $bb18:
    assume $i86 == 1;
    goto corral_source_split_12780;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb16;

  $bb14:
    assume $i68 == 1;
    goto corral_source_split_12763;

  corral_source_split_12763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} dev_warn.ref.ref($p6, .str.146);
    goto corral_source_split_12764;

  corral_source_split_12764:
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb16;

  $bb11:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i64;
    goto $bb11_dummy;

  $bb7:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_12739;

  corral_source_split_12739:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    $p46 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(0, 1)), $mul.ref($i44, 8));
    goto corral_source_split_12740;

  corral_source_split_12740:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_12741;

  corral_source_split_12741:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_12742;

  corral_source_split_12742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2010} $i49 := PTR_ERR($p48);
    call {:si_unique_call 2011} {:cexpr "tmp"} boogie_si_record_i64($i49);
    goto corral_source_split_12743;

  corral_source_split_12743:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12744;

  corral_source_split_12744:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_12745;

  corral_source_split_12745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} dev_err.ref.ref.ref.i64($p6, .str.145, $p51, $i49);
    goto corral_source_split_12746;

  corral_source_split_12746:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i43);
    $p54 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(0, 1)), $mul.ref($i52, 8));
    goto corral_source_split_12747;

  corral_source_split_12747:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_12748;

  corral_source_split_12748:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_12749;

  corral_source_split_12749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} $i57 := PTR_ERR($p56);
    call {:si_unique_call 2014} {:cexpr "tmp___0"} boogie_si_record_i64($i57);
    goto corral_source_split_12750;

  corral_source_split_12750:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i64.i32($i57);
    call {:si_unique_call 2015} {:cexpr "ret"} boogie_si_record_i32($i58);
    goto corral_source_split_12751;

  corral_source_split_12751:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb9;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_12705;

  corral_source_split_12705:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_12694;
}



const subdev_notifier_bound: ref;

axiom subdev_notifier_bound == $sub.ref(0, 711434);

procedure subdev_notifier_bound($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation subdev_notifier_bound($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p20: ref;
  var $i21: i64;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $i24: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p60: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p78: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p22: ref;
  var vslice_dummy_var_123: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12782;

  corral_source_split_12782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} $p3 := notifier_to_fimc_md($p0);
    goto corral_source_split_12783;

  corral_source_split_12783:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3216)), $mul.ref(32, 1)), $mul.ref(0, 72)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_12785;

  corral_source_split_12785:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_12786;

  corral_source_split_12786:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_12787;

  corral_source_split_12787:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_12788;

  corral_source_split_12788:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_12789;

  corral_source_split_12789:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(248, 1));
    goto corral_source_split_12790;

  corral_source_split_12790:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_12791;

  corral_source_split_12791:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1424)), $mul.ref(1240, 1));
    goto corral_source_split_12792;

  corral_source_split_12792:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_12793;

  corral_source_split_12793:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_12794;

  corral_source_split_12794:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i11, $i16);
    goto corral_source_split_12795;

  corral_source_split_12795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $p20 := $0.ref;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_12801;

  corral_source_split_12801:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3216)), $mul.ref(32, 1)), $mul.ref(1, 72)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_12803;

  corral_source_split_12803:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_12804;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_12805;

  corral_source_split_12805:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_12806;

  corral_source_split_12806:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_12807;

  corral_source_split_12807:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(248, 1));
    goto corral_source_split_12808;

  corral_source_split_12808:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_12809;

  corral_source_split_12809:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 1424)), $mul.ref(1240, 1));
    goto corral_source_split_12810;

  corral_source_split_12810:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_12811;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_12812;

  corral_source_split_12812:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i53, $i58);
    goto corral_source_split_12813;

  corral_source_split_12813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $p60 := $p20;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_12856;

  corral_source_split_12856:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3216)), $mul.ref(32, 1)), $mul.ref(2, 72)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_12858;

  corral_source_split_12858:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_12859;

  corral_source_split_12859:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_12860;

  corral_source_split_12860:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_12861;

  corral_source_split_12861:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_12862;

  corral_source_split_12862:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(248, 1));
    goto corral_source_split_12863;

  corral_source_split_12863:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_12864;

  corral_source_split_12864:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 1424)), $mul.ref(1240, 1));
    goto corral_source_split_12865;

  corral_source_split_12865:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_12866;

  corral_source_split_12866:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_12867;

  corral_source_split_12867:
    assume {:verifier.code 0} true;
    $i77 := $eq.i64($i71, $i76);
    goto corral_source_split_12868;

  corral_source_split_12868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $p78 := $p60;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_12875;

  corral_source_split_12875:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3216)), $mul.ref(32, 1)), $mul.ref(3, 72)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_12877;

  corral_source_split_12877:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_12878;

  corral_source_split_12878:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_12879;

  corral_source_split_12879:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_12880;

  corral_source_split_12880:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_12881;

  corral_source_split_12881:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(248, 1));
    goto corral_source_split_12882;

  corral_source_split_12882:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_12883;

  corral_source_split_12883:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 1424)), $mul.ref(1240, 1));
    goto corral_source_split_12884;

  corral_source_split_12884:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_12885;

  corral_source_split_12885:
    assume {:verifier.code 0} true;
    $i94 := $p2i.ref.i64($p93);
    goto corral_source_split_12886;

  corral_source_split_12886:
    assume {:verifier.code 0} true;
    $i95 := $eq.i64($i89, $i94);
    goto corral_source_split_12887;

  corral_source_split_12887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $p22 := $p78;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p22);
    goto corral_source_split_12815;

  corral_source_split_12815:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i21, 0);
    goto corral_source_split_12816;

  corral_source_split_12816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p22, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_12822;

  corral_source_split_12822:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_12823;

  corral_source_split_12823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} v4l2_set_subdev_hostdata($p1, $p26);
    goto corral_source_split_12824;

  corral_source_split_12824:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_12825;

  corral_source_split_12825:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_12826;

  corral_source_split_12826:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 5);
    goto corral_source_split_12827;

  corral_source_split_12827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    goto corral_source_split_12833;

  corral_source_split_12833:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(216, 1));
    goto corral_source_split_12834;

  corral_source_split_12834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 256);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p22, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_12836;

  corral_source_split_12836:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p1);
    goto corral_source_split_12837;

  corral_source_split_12837:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(104, 1));
    goto corral_source_split_12838;

  corral_source_split_12838:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_12839;

  corral_source_split_12839:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(184, 1));
    goto corral_source_split_12840;

  corral_source_split_12840:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_12841;

  corral_source_split_12841:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 3216)), $mul.ref(320, 1));
    goto corral_source_split_12842;

  corral_source_split_12842:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_12843;

  corral_source_split_12843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} vslice_dummy_var_123 := printk.ref.ref.ref.i32(.str.147, $p36, $p38, $i40);
    goto corral_source_split_12844;

  corral_source_split_12844:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 3216)), $mul.ref(320, 1));
    goto corral_source_split_12845;

  corral_source_split_12845:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_12846;

  corral_source_split_12846:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 1);
    goto corral_source_split_12847;

  corral_source_split_12847:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 3216)), $mul.ref(320, 1));
    goto corral_source_split_12848;

  corral_source_split_12848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_12849;

  corral_source_split_12849:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_12820;

  corral_source_split_12820:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb12:
    assume $i30 == 1;
    goto corral_source_split_12829;

  corral_source_split_12829:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(216, 1));
    goto corral_source_split_12830;

  corral_source_split_12830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 512);
    goto corral_source_split_12831;

  corral_source_split_12831:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_12818;

  corral_source_split_12818:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb10;

  $bb23:
    assume $i95 == 1;
    goto corral_source_split_12889;

  corral_source_split_12889:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 3216)), $mul.ref(32, 1));
    goto corral_source_split_12890;

  corral_source_split_12890:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_12891;

  corral_source_split_12891:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p97, $mul.ref(3, 72));
    goto corral_source_split_12892;

  corral_source_split_12892:
    assume {:verifier.code 0} true;
    $p22 := $p98;
    goto $bb25;

  $bb19:
    assume $i77 == 1;
    goto corral_source_split_12870;

  corral_source_split_12870:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 3216)), $mul.ref(32, 1));
    goto corral_source_split_12871;

  corral_source_split_12871:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_12872;

  corral_source_split_12872:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p80, $mul.ref(2, 72));
    goto corral_source_split_12873;

  corral_source_split_12873:
    assume {:verifier.code 0} true;
    $p78 := $p81;
    goto $bb21;

  $bb15:
    assume $i59 == 1;
    goto corral_source_split_12851;

  corral_source_split_12851:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 3216)), $mul.ref(32, 1));
    goto corral_source_split_12852;

  corral_source_split_12852:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_12853;

  corral_source_split_12853:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p62, $mul.ref(1, 72));
    goto corral_source_split_12854;

  corral_source_split_12854:
    assume {:verifier.code 0} true;
    $p60 := $p63;
    goto $bb17;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_12797;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 3216)), $mul.ref(32, 1));
    goto corral_source_split_12798;

  corral_source_split_12798:
    assume {:verifier.code 0} true;
    goto corral_source_split_12799;

  corral_source_split_12799:
    assume {:verifier.code 0} true;
    $p20 := $p18;
    goto $bb5;
}



const subdev_notifier_complete: ref;

axiom subdev_notifier_complete == $sub.ref(0, 712466);

procedure subdev_notifier_complete($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, $CurrAddr, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0;



implementation subdev_notifier_complete($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i6: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12894;

  corral_source_split_12894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} $p1 := notifier_to_fimc_md($p0);
    goto corral_source_split_12895;

  corral_source_split_12895:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 3216)), $mul.ref(472, 1)), $mul.ref(2016, 1));
    goto corral_source_split_12896;

  corral_source_split_12896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} mutex_lock_nested($p3, 0);
    goto corral_source_split_12897;

  corral_source_split_12897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} $i4 := fimc_md_create_links($p1);
    call {:si_unique_call 2027} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_12898;

  corral_source_split_12898:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_12899;

  corral_source_split_12899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 3216)), $mul.ref(2656, 1));
    goto corral_source_split_12907;

  corral_source_split_12907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} $i8 := v4l2_device_register_subdev_nodes($p7);
    call {:si_unique_call 2030} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_12908;

  corral_source_split_12908:
    assume {:verifier.code 0} true;
    $i6 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12903;

  corral_source_split_12903:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 3216)), $mul.ref(472, 1)), $mul.ref(2016, 1));
    goto corral_source_split_12904;

  corral_source_split_12904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} mutex_unlock($p10);
    goto corral_source_split_12905;

  corral_source_split_12905:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_12901;

  corral_source_split_12901:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const v4l2_async_notifier_register: ref;

axiom v4l2_async_notifier_register == $sub.ref(0, 713498);

procedure v4l2_async_notifier_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_async_notifier_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12910;

  corral_source_split_12910:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2031} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2032} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_12911;

  corral_source_split_12911:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const notifier_to_fimc_md: ref;

axiom notifier_to_fimc_md == $sub.ref(0, 714530);

procedure notifier_to_fimc_md($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation notifier_to_fimc_md($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12913;

  corral_source_split_12913:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_12914;

  corral_source_split_12914:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 2984), 3216));
    goto corral_source_split_12915;

  corral_source_split_12915:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fimc_md_create_links: ref;

axiom fimc_md_create_links == $sub.ref(0, 715562);

procedure fimc_md_create_links($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, $CurrAddr, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0;



implementation fimc_md_create_links($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i10: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i18: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i64;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $i69: i1;
  var $i70: i32;
  var $i71: i64;
  var $i72: i64;
  var $i73: i1;
  var $p75: ref;
  var $i76: i16;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $i82: i16;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $p88: ref;
  var $p89: ref;
  var $p91: ref;
  var $p92: ref;
  var $p94: ref;
  var $p95: ref;
  var $p97: ref;
  var $i98: i16;
  var $i99: i32;
  var $i100: i64;
  var $p101: ref;
  var $p31: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $i102: i32;
  var $p103: ref;
  var $i111: i64;
  var $i112: i1;
  var $i113: i32;
  var $i114: i32;
  var $i115: i32;
  var $i17: i32;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i8: i32;
  var $i9: i32;
  var $i119: i32;
  var $i7: i32;
  var $p122: ref;
  var $p123: ref;
  var $i124: i64;
  var $i125: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $i136: i32;
  var $i126: i32;
  var $p138: ref;
  var $p139: ref;
  var $i140: i64;
  var $i141: i1;
  var $p143: ref;
  var $p144: ref;
  var $p147: ref;
  var $p149: ref;
  var $p150: ref;
  var $p154: ref;
  var $i155: i32;
  var $i156: i1;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $i160: i8;
  var $i161: i1;
  var $i162: i32;
  var $i163: i32;
  var $i52: i32;
  var $p165: ref;
  var $p166: ref;
  var $i167: i64;
  var $i168: i1;
  var $p170: ref;
  var $p171: ref;
  var $p174: ref;
  var $p176: ref;
  var $p177: ref;
  var $p181: ref;
  var $i182: i32;
  var $i183: i1;
  var $p185: ref;
  var $p186: ref;
  var $i187: i64;
  var $i188: i1;
  var $p190: ref;
  var $p191: ref;
  var $p194: ref;
  var $p196: ref;
  var $p197: ref;
  var $p201: ref;
  var $i202: i32;
  var $i203: i1;
  var $p205: ref;
  var $p206: ref;
  var $i207: i64;
  var $i208: i1;
  var $p210: ref;
  var $p211: ref;
  var $p214: ref;
  var $p216: ref;
  var $p217: ref;
  var $p221: ref;
  var $i222: i32;
  var $i223: i1;
  var $p226: ref;
  var $p227: ref;
  var $i228: i64;
  var $i229: i1;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $i237: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_12917;

  corral_source_split_12917:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 8));
    goto corral_source_split_12918;

  corral_source_split_12918:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p2, $0.ref);
    goto corral_source_split_12919;

  corral_source_split_12919:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 8));
    goto corral_source_split_12921;

  corral_source_split_12921:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p3, $0.ref);
    goto corral_source_split_12922;

  corral_source_split_12922:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(320, 1));
    goto corral_source_split_12924;

  corral_source_split_12924:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_12925;

  corral_source_split_12925:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_12926;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(0, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13060;

  corral_source_split_13060:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_13061;

  corral_source_split_13061:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p123);
    goto corral_source_split_13062;

  corral_source_split_13062:
    assume {:verifier.code 0} true;
    $i125 := $eq.i64($i124, 0);
    goto corral_source_split_13063;

  corral_source_split_13063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(0, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13069;

  corral_source_split_13069:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_13070;

  corral_source_split_13070:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p130, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_13071;

  corral_source_split_13071:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 8));
    goto corral_source_split_13072;

  corral_source_split_13072:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.32, $p132);
    goto corral_source_split_13073;

  corral_source_split_13073:
    assume {:verifier.code 0} true;
    $i134 := $add.i32($i7, 1);
    call {:si_unique_call 2057} {:cexpr "fimc_id"} boogie_si_record_i32($i134);
    goto corral_source_split_13074;

  corral_source_split_13074:
    assume {:verifier.code 0} true;
    $i135 := $shl.i32(1, $i7);
    call {:si_unique_call 2058} {:cexpr "link_mask"} boogie_si_record_i32($i135);
    goto corral_source_split_13075;

  corral_source_split_13075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} $i136 := __fimc_md_create_fimc_sink_links($p0, $p131, $p133, 1, $i135);
    call {:si_unique_call 2060} {:cexpr "ret"} boogie_si_record_i32($i136);
    goto corral_source_split_13076;

  corral_source_split_13076:
    assume {:verifier.code 0} true;
    $i126 := $i134;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_13067;

  corral_source_split_13067:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(0, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_13078;

  corral_source_split_13078:
    assume {:verifier.code 0} true;
    $p227 := $load.ref($M.0, $p226);
    goto corral_source_split_13079;

  corral_source_split_13079:
    assume {:verifier.code 0} true;
    $i228 := $p2i.ref.i64($p227);
    goto corral_source_split_13080;

  corral_source_split_13080:
    assume {:verifier.code 0} true;
    $i229 := $eq.i64($i228, 0);
    goto corral_source_split_13081;

  corral_source_split_13081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i229} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(0, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_13163;

  corral_source_split_13163:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.0, $p232);
    goto corral_source_split_13164;

  corral_source_split_13164:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p233, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_13165;

  corral_source_split_13165:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 8));
    goto corral_source_split_13166;

  corral_source_split_13166:
    assume {:verifier.code 0} true;
    $p236 := $load.ref($M.32, $p235);
    goto corral_source_split_13167;

  corral_source_split_13167:
    assume {:verifier.code 0} true;
    $i237 := $shl.i32(1, $i126);
    goto corral_source_split_13168;

  corral_source_split_13168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} vslice_dummy_var_126 := __fimc_md_create_fimc_sink_links($p0, $p234, $p236, 1, $i237);
    goto corral_source_split_13169;

  corral_source_split_13169:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(0, 8));
    goto corral_source_split_13083;

  corral_source_split_13083:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_13084;

  corral_source_split_13084:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p139);
    goto corral_source_split_13085;

  corral_source_split_13085:
    assume {:verifier.code 0} true;
    $i141 := $eq.i64($i140, 0);
    goto corral_source_split_13086;

  corral_source_split_13086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(0, 8));
    goto corral_source_split_13090;

  corral_source_split_13090:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_13091;

  corral_source_split_13091:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($add.ref($p144, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_13092;

  corral_source_split_13092:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(0, 8));
    goto corral_source_split_13093;

  corral_source_split_13093:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_13094;

  corral_source_split_13094:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($add.ref($add.ref($p150, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13095;

  corral_source_split_13095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} $i155 := media_entity_create_link($p147, 2, $p154, 0, 3);
    call {:si_unique_call 2062} {:cexpr "ret"} boogie_si_record_i32($i155);
    goto corral_source_split_13096;

  corral_source_split_13096:
    assume {:verifier.code 0} true;
    $i156 := $ne.i32($i155, 0);
    goto corral_source_split_13097;

  corral_source_split_13097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb64;

  $bb64:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(1, 8));
    goto corral_source_split_13102;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.0, $p165);
    goto corral_source_split_13103;

  corral_source_split_13103:
    assume {:verifier.code 0} true;
    $i167 := $p2i.ref.i64($p166);
    goto corral_source_split_13104;

  corral_source_split_13104:
    assume {:verifier.code 0} true;
    $i168 := $eq.i64($i167, 0);
    goto corral_source_split_13105;

  corral_source_split_13105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(1, 8));
    goto corral_source_split_13120;

  corral_source_split_13120:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.0, $p170);
    goto corral_source_split_13121;

  corral_source_split_13121:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($add.ref($p171, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_13122;

  corral_source_split_13122:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(1, 8));
    goto corral_source_split_13123;

  corral_source_split_13123:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_13124;

  corral_source_split_13124:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($add.ref($add.ref($p177, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13125;

  corral_source_split_13125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} $i182 := media_entity_create_link($p174, 2, $p181, 0, 3);
    goto corral_source_split_13126;

  corral_source_split_13126:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i182, 0);
    goto corral_source_split_13127;

  corral_source_split_13127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(2, 8));
    goto corral_source_split_13129;

  corral_source_split_13129:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.0, $p185);
    goto corral_source_split_13130;

  corral_source_split_13130:
    assume {:verifier.code 0} true;
    $i187 := $p2i.ref.i64($p186);
    goto corral_source_split_13131;

  corral_source_split_13131:
    assume {:verifier.code 0} true;
    $i188 := $eq.i64($i187, 0);
    goto corral_source_split_13132;

  corral_source_split_13132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(2, 8));
    goto corral_source_split_13136;

  corral_source_split_13136:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_13137;

  corral_source_split_13137:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($add.ref($add.ref($p191, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_13138;

  corral_source_split_13138:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(2, 8));
    goto corral_source_split_13139;

  corral_source_split_13139:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.0, $p196);
    goto corral_source_split_13140;

  corral_source_split_13140:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($add.ref($add.ref($p197, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13141;

  corral_source_split_13141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} $i202 := media_entity_create_link($p194, 2, $p201, 0, 3);
    goto corral_source_split_13142;

  corral_source_split_13142:
    assume {:verifier.code 0} true;
    $i203 := $ne.i32($i202, 0);
    goto corral_source_split_13143;

  corral_source_split_13143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(3, 8));
    goto corral_source_split_13145;

  corral_source_split_13145:
    assume {:verifier.code 0} true;
    $p206 := $load.ref($M.0, $p205);
    goto corral_source_split_13146;

  corral_source_split_13146:
    assume {:verifier.code 0} true;
    $i207 := $p2i.ref.i64($p206);
    goto corral_source_split_13147;

  corral_source_split_13147:
    assume {:verifier.code 0} true;
    $i208 := $eq.i64($i207, 0);
    goto corral_source_split_13148;

  corral_source_split_13148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(3, 8));
    goto corral_source_split_13152;

  corral_source_split_13152:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.0, $p210);
    goto corral_source_split_13153;

  corral_source_split_13153:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($add.ref($p211, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_13154;

  corral_source_split_13154:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(3, 8));
    goto corral_source_split_13155;

  corral_source_split_13155:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_13156;

  corral_source_split_13156:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($add.ref($add.ref($p217, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(320, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13157;

  corral_source_split_13157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} $i222 := media_entity_create_link($p214, 2, $p221, 0, 3);
    goto corral_source_split_13158;

  corral_source_split_13158:
    assume {:verifier.code 0} true;
    $i223 := $ne.i32($i222, 0);
    goto corral_source_split_13159;

  corral_source_split_13159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} $i157 := __fimc_md_create_flite_source_links($p0);
    call {:si_unique_call 2064} {:cexpr "ret"} boogie_si_record_i32($i157);
    goto corral_source_split_13099;

  corral_source_split_13099:
    assume {:verifier.code 0} true;
    $i158 := $slt.i32($i157, 0);
    goto corral_source_split_13100;

  corral_source_split_13100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(456, 1));
    goto corral_source_split_13109;

  corral_source_split_13109:
    assume {:verifier.code 0} true;
    $i160 := $load.i8($M.0, $p159);
    goto corral_source_split_13110;

  corral_source_split_13110:
    assume {:verifier.code 0} true;
    $i161 := $trunc.i8.i1($i160);
    goto corral_source_split_13111;

  corral_source_split_13111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    $i163 := $i157;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_13116;

  corral_source_split_13116:
    assume {:verifier.code 0} true;
    $i52 := $i163;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_12986;

  corral_source_split_12986:
    assume {:verifier.code 0} true;
    $r := $i52;
    return;

  $bb72:
    assume $i161 == 1;
    goto corral_source_split_13113;

  corral_source_split_13113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} $i162 := __fimc_md_create_fimc_is_links($p0);
    call {:si_unique_call 2066} {:cexpr "ret"} boogie_si_record_i32($i162);
    goto corral_source_split_13114;

  corral_source_split_13114:
    assume {:verifier.code 0} true;
    $i163 := $i162;
    goto $bb74;

  $bb69:
    assume $i158 == 1;
    goto corral_source_split_13107;

  corral_source_split_13107:
    assume {:verifier.code 0} true;
    $i52 := $i157;
    goto $bb29;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i223 == 1;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb91:
    assume $i208 == 1;
    goto corral_source_split_13150;

  corral_source_split_13150:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i203 == 1;
    goto $bb63;

  $bb83:
    assume $i188 == 1;
    goto corral_source_split_13134;

  corral_source_split_13134:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i183 == 1;
    goto $bb63;

  $bb75:
    assume $i168 == 1;
    goto corral_source_split_13118;

  corral_source_split_13118:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i156 == 1;
    goto $bb63;

  $bb58:
    assume $i141 == 1;
    goto corral_source_split_13088;

  corral_source_split_13088:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb98:
    assume $i229 == 1;
    goto corral_source_split_13161;

  corral_source_split_13161:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb50:
    assume $i125 == 1;
    goto corral_source_split_13065;

  corral_source_split_13065:
    assume {:verifier.code 0} true;
    $i126 := $i7;
    goto $bb52;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_12928;

  corral_source_split_12928:
    assume {:verifier.code 0} true;
    $i8, $i9 := 0, 0;
    goto $bb7;

  $bb7:
    call $i10, $p13, $p14, $i15, $i16, $i18, $p21, $p22, $p23, $p24, $i25, $i26, $p27, $i28, $i29, $i30, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $p53, $i54, $i55, $i56, $p59, $p60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $p75, $i76, $i77, $i78, $p79, $i80, $i81, $i82, $p83, $i84, $i85, $i86, $p88, $p89, $p91, $p92, $p94, $p95, $p97, $i98, $i99, $i100, $p101, $p31, $i102, $p103, $i111, $i112, $i113, $i114, $i115, $i17, $i116, $i117, $i118, $i8, $i9, $i119, vslice_dummy_var_124 := fimc_md_create_links_loop_$bb7($p0, $p1, $p4, $i10, $p13, $p14, $i15, $i16, $i18, $p21, $p22, $p23, $p24, $i25, $i26, $p27, $i28, $i29, $i30, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $p53, $i54, $i55, $i56, $p59, $p60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $p75, $i76, $i77, $i78, $p79, $i80, $i81, $i82, $p83, $i84, $i85, $i86, $p88, $p89, $p91, $p92, $p94, $p95, $p97, $i98, $i99, $i100, $p101, $p31, $i102, $p103, $i111, $i112, $i113, $i114, $i115, $i17, $i116, $i117, $i118, $i8, $i9, $i119, vslice_dummy_var_124);
    goto $bb7_last;

  corral_source_split_12930:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_12932;

  corral_source_split_12932:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(32, 1)), $mul.ref($i10, 72)), $mul.ref(56, 1));
    goto corral_source_split_12933;

  corral_source_split_12933:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_12934;

  corral_source_split_12934:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_12935;

  corral_source_split_12935:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_12936;

  corral_source_split_12936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i9);
    goto corral_source_split_12945;

  corral_source_split_12945:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(32, 1)), $mul.ref($i18, 72)), $mul.ref(56, 1));
    goto corral_source_split_12946;

  corral_source_split_12946:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_12947;

  corral_source_split_12947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} $p23 := v4l2_get_subdev_hostdata($p22);
    goto corral_source_split_12948;

  corral_source_split_12948:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_12949;

  corral_source_split_12949:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_12950;

  corral_source_split_12950:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_12951;

  corral_source_split_12951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p24, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_12955;

  corral_source_split_12955:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i28, 3);
    assume {:verifier.code 0} true;
    $p31 := $p23;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(104, 1));
    goto corral_source_split_13046;

  corral_source_split_13046:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_13047;

  corral_source_split_13047:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p31, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_13048;

  corral_source_split_13048:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    goto corral_source_split_13049;

  corral_source_split_13049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} vslice_dummy_var_125 := printk.ref.ref.i32(.str.151, $p107, $i109);
    goto corral_source_split_13050;

  corral_source_split_13050:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32(0, 22);
    goto $bb29;

  $bb19:
    assume $i30 == 1;
    goto corral_source_split_12957;

  corral_source_split_12957:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p24, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_12958;

  corral_source_split_12958:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_12959;

  corral_source_split_12959:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_12960;

  corral_source_split_12960:
    assume {:verifier.code 0} true;
    $i37 := $ugt.i32($i36, 1);
    goto corral_source_split_12961;

  corral_source_split_12961:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i32($i37);
    call {:si_unique_call 2036} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i38);
    goto corral_source_split_12962;

  corral_source_split_12962:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_12963;

  corral_source_split_12963:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    goto corral_source_split_12964;

  corral_source_split_12964:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_12965;

  corral_source_split_12965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 2038} {:cexpr "tmp___1"} boogie_si_record_i64($i42);
    goto corral_source_split_12966;

  corral_source_split_12966:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_12967;

  corral_source_split_12967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i38, 0);
    goto corral_source_split_12978;

  corral_source_split_12978:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    goto corral_source_split_12979;

  corral_source_split_12979:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_12980;

  corral_source_split_12980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 2041} {:cexpr "tmp___2"} boogie_si_record_i64($i50);
    goto corral_source_split_12981;

  corral_source_split_12981:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_12982;

  corral_source_split_12982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p24, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_12988;

  corral_source_split_12988:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.0, $p53);
    goto corral_source_split_12989;

  corral_source_split_12989:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_12990;

  corral_source_split_12990:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i55);
    goto corral_source_split_12991;

  corral_source_split_12991:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(0, 1)), $mul.ref($i56, 16)), $mul.ref(0, 1));
    goto corral_source_split_12992;

  corral_source_split_12992:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_12993;

  corral_source_split_12993:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_12994;

  corral_source_split_12994:
    assume {:verifier.code 0} true;
    $i62 := $eq.i64($i61, 0);
    goto corral_source_split_12995;

  corral_source_split_12995:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i32($i62);
    call {:si_unique_call 2042} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i63);
    goto corral_source_split_12996;

  corral_source_split_12996:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_12997;

  corral_source_split_12997:
    assume {:verifier.code 0} true;
    $i65 := $zext.i1.i32($i64);
    goto corral_source_split_12998;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i65);
    goto corral_source_split_12999;

  corral_source_split_12999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} $i67 := ldv__builtin_expect($i66, 0);
    call {:si_unique_call 2044} {:cexpr "tmp___3"} boogie_si_record_i64($i67);
    goto corral_source_split_13000;

  corral_source_split_13000:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_13001;

  corral_source_split_13001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i63, 0);
    goto corral_source_split_13006;

  corral_source_split_13006:
    assume {:verifier.code 0} true;
    $i70 := $zext.i1.i32($i69);
    goto corral_source_split_13007;

  corral_source_split_13007:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i70);
    goto corral_source_split_13008;

  corral_source_split_13008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} $i72 := ldv__builtin_expect($i71, 0);
    call {:si_unique_call 2047} {:cexpr "tmp___4"} boogie_si_record_i64($i72);
    goto corral_source_split_13009;

  corral_source_split_13009:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_13010;

  corral_source_split_13010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(60, 1));
    goto corral_source_split_13014;

  corral_source_split_13014:
    assume {:verifier.code 0} true;
    $i76 := $load.i16($M.0, $p75);
    goto corral_source_split_13015;

  corral_source_split_13015:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i76);
    goto corral_source_split_13016;

  corral_source_split_13016:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i77, $sub.i32(0, 1));
    call {:si_unique_call 2048} {:cexpr "pad"} boogie_si_record_i32($i78);
    goto corral_source_split_13017;

  corral_source_split_13017:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p22, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_13018;

  corral_source_split_13018:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i16($i78);
    goto corral_source_split_13019;

  corral_source_split_13019:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_13020;

  corral_source_split_13020:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i16($i81);
    goto corral_source_split_13021;

  corral_source_split_13021:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p60, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_13022;

  corral_source_split_13022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} $i84 := media_entity_create_link($p79, $i82, $p83, 0, 3);
    call {:si_unique_call 2050} {:cexpr "ret"} boogie_si_record_i32($i84);
    goto corral_source_split_13023;

  corral_source_split_13023:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_13024;

  corral_source_split_13024:
    assume {:verifier.code 0} true;
    $i86 := $i84;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(104, 1));
    goto corral_source_split_13028;

  corral_source_split_13028:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_13029;

  corral_source_split_13029:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_13030;

  corral_source_split_13030:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_13031;

  corral_source_split_13031:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_13032;

  corral_source_split_13032:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_13033;

  corral_source_split_13033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} vslice_dummy_var_124 := printk.ref.ref.ref.ref(.str.150, $p89, $p92, $p95);
    goto corral_source_split_13034;

  corral_source_split_13034:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p24, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_13035;

  corral_source_split_13035:
    assume {:verifier.code 0} true;
    $i98 := $load.i16($M.0, $p97);
    goto corral_source_split_13036;

  corral_source_split_13036:
    assume {:verifier.code 0} true;
    $i99 := $zext.i16.i32($i98);
    goto corral_source_split_13037;

  corral_source_split_13037:
    assume {:verifier.code 0} true;
    $i100 := $sext.i32.i64($i99);
    goto corral_source_split_13038;

  corral_source_split_13038:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref($i100, 8));
    goto corral_source_split_13039;

  corral_source_split_13039:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p101, $p22);
    goto corral_source_split_13040;

  corral_source_split_13040:
    assume {:verifier.code 0} true;
    $i102, $p103 := $i78, $0.ref;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_13042;

  corral_source_split_13042:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p103);
    goto corral_source_split_13043;

  corral_source_split_13043:
    assume {:verifier.code 0} true;
    $i112 := $eq.i64($i111, 0);
    goto corral_source_split_13044;

  corral_source_split_13044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i8, 1);
    call {:si_unique_call 2053} {:cexpr "fimc_id"} boogie_si_record_i32($i113);
    goto corral_source_split_13054;

  corral_source_split_13054:
    assume {:verifier.code 0} true;
    $i114 := $shl.i32(1, $i8);
    call {:si_unique_call 2054} {:cexpr "link_mask"} boogie_si_record_i32($i114);
    goto corral_source_split_13055;

  corral_source_split_13055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} $i115 := __fimc_md_create_fimc_sink_links($p0, $p103, $p22, $i102, $i114);
    call {:si_unique_call 2056} {:cexpr "ret"} boogie_si_record_i32($i115);
    goto corral_source_split_13056;

  corral_source_split_13056:
    assume {:verifier.code 0} true;
    $i17 := $i113;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_12940;

  corral_source_split_12940:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i9, 1);
    call {:si_unique_call 2034} {:cexpr "i"} boogie_si_record_i32($i116);
    goto corral_source_split_12941;

  corral_source_split_12941:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p4);
    goto corral_source_split_12942;

  corral_source_split_12942:
    assume {:verifier.code 0} true;
    $i118 := $sgt.i32($i117, $i116);
    goto corral_source_split_12943;

  corral_source_split_12943:
    assume {:verifier.code 0} true;
    $i119 := $i17;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_13058;

  corral_source_split_13058:
    assume {:verifier.code 0} true;
    $i7 := $i119;
    goto $bb6;

  $bb45:
    assume $i118 == 1;
    assume {:verifier.code 0} true;
    $i8, $i9 := $i17, $i116;
    goto $bb45_dummy;

  $bb42:
    assume $i112 == 1;
    goto corral_source_split_13052;

  corral_source_split_13052:
    assume {:verifier.code 0} true;
    $i17 := $i8;
    goto $bb11;

  $bb37:
    assume $i85 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_13026;

  corral_source_split_13026:
    assume {:verifier.code 0} true;
    $i52 := $i86;
    goto $bb29;

  $bb34:
    assume $i73 == 1;
    goto corral_source_split_13012;

  corral_source_split_13012:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32(0, 22);
    goto $bb29;

  $bb31:
    assume $i68 == 1;
    goto corral_source_split_13003;

  corral_source_split_13003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} warn_slowpath_fmt.ref.i32.ref(.str.132, 872, .str.149);
    goto corral_source_split_13004;

  corral_source_split_13004:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb27:
    assume $i51 == 1;
    goto corral_source_split_12984;

  corral_source_split_12984:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32(0, 22);
    goto $bb29;

  $bb24:
    assume $i43 == 1;
    goto corral_source_split_12972;

  corral_source_split_12972:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p24, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_12973;

  corral_source_split_12973:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    goto corral_source_split_12974;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_12975;

  corral_source_split_12975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} warn_slowpath_fmt.ref.i32.ref.i32(.str.132, 866, .str.148, $i46);
    goto corral_source_split_12976;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb17:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i28, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    $i33 := $ule.i32($i32, 1);
    assume {:verifier.code 0} true;
    $p31 := $p23;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb21;

  $bb22:
    assume $i33 == 1;
    goto corral_source_split_12969;

  corral_source_split_12969:
    assume {:verifier.code 0} true;
    goto corral_source_split_12970;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    $i102, $p103 := 0, $p22;
    goto $bb40;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_12953;

  corral_source_split_12953:
    assume {:verifier.code 0} true;
    $i17 := $i8;
    goto $bb11;

  $bb9:
    assume $i16 == 1;
    goto corral_source_split_12938;

  corral_source_split_12938:
    assume {:verifier.code 0} true;
    $i17 := $i8;
    goto $bb11;

  $bb45_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12930;
}



const v4l2_device_register_subdev_nodes: ref;

axiom v4l2_device_register_subdev_nodes == $sub.ref(0, 716594);

procedure v4l2_device_register_subdev_nodes($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_device_register_subdev_nodes($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13171;

  corral_source_split_13171:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2071} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2072} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_13172;

  corral_source_split_13172:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const media_entity_create_link: ref;

axiom media_entity_create_link == $sub.ref(0, 717626);

procedure media_entity_create_link($p0: ref, $i1: i16, $p2: ref, $i3: i16, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation media_entity_create_link($p0: ref, $i1: i16, $p2: ref, $i3: i16, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2073} {:cexpr "media_entity_create_link:arg:arg1"} boogie_si_record_i16($i1);
    call {:si_unique_call 2074} {:cexpr "media_entity_create_link:arg:arg3"} boogie_si_record_i16($i3);
    call {:si_unique_call 2075} {:cexpr "media_entity_create_link:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_13174;

  corral_source_split_13174:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2076} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 2077} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_13175;

  corral_source_split_13175:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __fimc_md_create_fimc_sink_links: ref;

axiom __fimc_md_create_fimc_sink_links == $sub.ref(0, 718658);

procedure __fimc_md_create_fimc_sink_links($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $CurrAddr;



implementation __fimc_md_create_fimc_sink_links($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i19: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i26: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i64;
  var $p41: ref;
  var $p42: ref;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i16;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i1;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $i25: i32;
  var $i86: i32;
  var $i87: i1;
  var $i17: i32;
  var $i18: i32;
  var $i88: i1;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $i99: i16;
  var $i100: i32;
  var $i101: i16;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i64;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i52: i32;
  var $p137: ref;
  var $p138: ref;
  var $i139: i64;
  var $i140: i1;
  var $p142: ref;
  var $p143: ref;
  var $p145: ref;
  var $i146: i16;
  var $i147: i32;
  var $i148: i16;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $p152: ref;
  var $i153: i64;
  var $i154: i1;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i64;
  var $i160: i1;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i64;
  var $p171: ref;
  var $i172: i32;
  var $i161: i32;
  var $i173: i1;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i64;
  var $i186: i1;
  var $p188: ref;
  var $p189: ref;
  var $p191: ref;
  var $i192: i16;
  var $i193: i32;
  var $i194: i16;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $p198: ref;
  var $i199: i64;
  var $i200: i1;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $i205: i64;
  var $i206: i1;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $i216: i64;
  var $p217: ref;
  var $i218: i32;
  var $i207: i32;
  var $i219: i1;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} {:cexpr "__fimc_md_create_fimc_sink_links:arg:pad"} boogie_si_record_i32($i3);
    call {:si_unique_call 2079} {:cexpr "__fimc_md_create_fimc_sink_links:arg:link_mask"} boogie_si_record_i32($i4);
    goto corral_source_split_13177;

  corral_source_split_13177:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p2);
    goto corral_source_split_13178;

  corral_source_split_13178:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13179;

  corral_source_split_13179:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_13196;

  corral_source_split_13196:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_13197;

  corral_source_split_13197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(392, 1)), $mul.ref(0, 8));
    goto corral_source_split_13287;

  corral_source_split_13287:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_13288;

  corral_source_split_13288:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    goto corral_source_split_13289;

  corral_source_split_13289:
    assume {:verifier.code 0} true;
    $i93 := $eq.i64($i92, 0);
    goto corral_source_split_13290;

  corral_source_split_13290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(392, 1)), $mul.ref(0, 8));
    goto corral_source_split_13294;

  corral_source_split_13294:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_13295;

  corral_source_split_13295:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p96, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(0, 1));
    goto corral_source_split_13296;

  corral_source_split_13296:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i16($i3);
    goto corral_source_split_13297;

  corral_source_split_13297:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i99);
    goto corral_source_split_13298;

  corral_source_split_13298:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i16($i100);
    goto corral_source_split_13299;

  corral_source_split_13299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} $i102 := media_entity_create_link($p1, $i101, $p98, 0, 0);
    call {:si_unique_call 2089} {:cexpr "ret"} boogie_si_record_i32($i102);
    goto corral_source_split_13300;

  corral_source_split_13300:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_13301;

  corral_source_split_13301:
    assume {:verifier.code 0} true;
    $i104 := $i102;
    assume {:branchcond $i103} true;
    goto $bb47, $bb49;

  $bb49:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    $p105 := $add.ref($add.ref($add.ref($add.ref($p96, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_13305;

  corral_source_split_13305:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_13306;

  corral_source_split_13306:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_13307;

  corral_source_split_13307:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_13308;

  corral_source_split_13308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i126 := $sub.i32(0, 515);
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_13327;

  corral_source_split_13327:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_13328;

  corral_source_split_13328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb59;

  $bb59:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(104, 1));
    goto corral_source_split_13330;

  corral_source_split_13330:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p129);
    goto corral_source_split_13331;

  corral_source_split_13331:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(32, 1));
    goto corral_source_split_13332;

  corral_source_split_13332:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    $p133 := $add.ref($add.ref($add.ref($add.ref($p96, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_13333;

  corral_source_split_13333:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_13334;

  corral_source_split_13334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2092} vslice_dummy_var_128 := printk.ref.ref.ref.ref(.str.153, $p130, $p132, $p134);
    goto corral_source_split_13335;

  corral_source_split_13335:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(392, 1)), $mul.ref(1, 8));
    goto corral_source_split_13337;

  corral_source_split_13337:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_13338;

  corral_source_split_13338:
    assume {:verifier.code 0} true;
    $i139 := $p2i.ref.i64($p138);
    goto corral_source_split_13339;

  corral_source_split_13339:
    assume {:verifier.code 0} true;
    $i140 := $eq.i64($i139, 0);
    goto corral_source_split_13340;

  corral_source_split_13340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(392, 1)), $mul.ref(1, 8));
    goto corral_source_split_13344;

  corral_source_split_13344:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_13345;

  corral_source_split_13345:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p143, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(0, 1));
    goto corral_source_split_13346;

  corral_source_split_13346:
    assume {:verifier.code 0} true;
    $i146 := $trunc.i32.i16($i3);
    goto corral_source_split_13347;

  corral_source_split_13347:
    assume {:verifier.code 0} true;
    $i147 := $zext.i16.i32($i146);
    goto corral_source_split_13348;

  corral_source_split_13348:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i32.i16($i147);
    goto corral_source_split_13349;

  corral_source_split_13349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} $i149 := media_entity_create_link($p1, $i148, $p145, 0, 0);
    goto corral_source_split_13350;

  corral_source_split_13350:
    assume {:verifier.code 0} true;
    $i150 := $ne.i32($i149, 0);
    goto corral_source_split_13351;

  corral_source_split_13351:
    assume {:verifier.code 0} true;
    $i104 := $i149;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    $p151 := $add.ref($add.ref($add.ref($add.ref($p143, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_13353;

  corral_source_split_13353:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_13354;

  corral_source_split_13354:
    assume {:verifier.code 0} true;
    $i153 := $p2i.ref.i64($p152);
    goto corral_source_split_13355;

  corral_source_split_13355:
    assume {:verifier.code 0} true;
    $i154 := $ne.i64($i153, 0);
    goto corral_source_split_13356;

  corral_source_split_13356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i154 == 1);
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32(0, 515);
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_13375;

  corral_source_split_13375:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i161, 0);
    goto corral_source_split_13376;

  corral_source_split_13376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(104, 1));
    goto corral_source_split_13378;

  corral_source_split_13378:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p175);
    goto corral_source_split_13379;

  corral_source_split_13379:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(32, 1));
    goto corral_source_split_13380;

  corral_source_split_13380:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.0, $p177);
    $p179 := $add.ref($add.ref($add.ref($add.ref($p143, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_13381;

  corral_source_split_13381:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.0, $p179);
    goto corral_source_split_13382;

  corral_source_split_13382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} vslice_dummy_var_129 := printk.ref.ref.ref.ref(.str.153, $p176, $p178, $p180);
    goto corral_source_split_13383;

  corral_source_split_13383:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(392, 1)), $mul.ref(2, 8));
    goto corral_source_split_13385;

  corral_source_split_13385:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_13386;

  corral_source_split_13386:
    assume {:verifier.code 0} true;
    $i185 := $p2i.ref.i64($p184);
    goto corral_source_split_13387;

  corral_source_split_13387:
    assume {:verifier.code 0} true;
    $i186 := $eq.i64($i185, 0);
    goto corral_source_split_13388;

  corral_source_split_13388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(392, 1)), $mul.ref(2, 8));
    goto corral_source_split_13392;

  corral_source_split_13392:
    assume {:verifier.code 0} true;
    $p189 := $load.ref($M.0, $p188);
    goto corral_source_split_13393;

  corral_source_split_13393:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p189, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(0, 1));
    goto corral_source_split_13394;

  corral_source_split_13394:
    assume {:verifier.code 0} true;
    $i192 := $trunc.i32.i16($i3);
    goto corral_source_split_13395;

  corral_source_split_13395:
    assume {:verifier.code 0} true;
    $i193 := $zext.i16.i32($i192);
    goto corral_source_split_13396;

  corral_source_split_13396:
    assume {:verifier.code 0} true;
    $i194 := $trunc.i32.i16($i193);
    goto corral_source_split_13397;

  corral_source_split_13397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2096} $i195 := media_entity_create_link($p1, $i194, $p191, 0, 0);
    goto corral_source_split_13398;

  corral_source_split_13398:
    assume {:verifier.code 0} true;
    $i196 := $ne.i32($i195, 0);
    goto corral_source_split_13399;

  corral_source_split_13399:
    assume {:verifier.code 0} true;
    $i104 := $i195;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    $p197 := $add.ref($add.ref($add.ref($add.ref($p189, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_13401;

  corral_source_split_13401:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.0, $p197);
    goto corral_source_split_13402;

  corral_source_split_13402:
    assume {:verifier.code 0} true;
    $i199 := $p2i.ref.i64($p198);
    goto corral_source_split_13403;

  corral_source_split_13403:
    assume {:verifier.code 0} true;
    $i200 := $ne.i64($i199, 0);
    goto corral_source_split_13404;

  corral_source_split_13404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb87, $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume !($i200 == 1);
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i207 := $sub.i32(0, 515);
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto corral_source_split_13423;

  corral_source_split_13423:
    assume {:verifier.code 0} true;
    $i219 := $ne.i32($i207, 0);
    goto corral_source_split_13424;

  corral_source_split_13424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(104, 1));
    goto corral_source_split_13426;

  corral_source_split_13426:
    assume {:verifier.code 0} true;
    $p222 := $bitcast.ref.ref($p221);
    goto corral_source_split_13427;

  corral_source_split_13427:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(32, 1));
    goto corral_source_split_13428;

  corral_source_split_13428:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.0, $p223);
    $p225 := $add.ref($add.ref($add.ref($add.ref($p189, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_13429;

  corral_source_split_13429:
    assume {:verifier.code 0} true;
    $p226 := $load.ref($M.0, $p225);
    goto corral_source_split_13430;

  corral_source_split_13430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} vslice_dummy_var_130 := printk.ref.ref.ref.ref(.str.153, $p222, $p224, $p226);
    goto corral_source_split_13431;

  corral_source_split_13431:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_13243;

  corral_source_split_13243:
    assume {:verifier.code 0} true;
    $r := $i52;
    return;

  $bb93:
    assume {:verifier.code 0} true;
    assume $i219 == 1;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb87:
    assume $i200 == 1;
    $p201 := $add.ref($add.ref($add.ref($add.ref($p189, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_13406;

  corral_source_split_13406:
    assume {:verifier.code 0} true;
    $p202 := $load.ref($M.0, $p201);
    goto corral_source_split_13407;

  corral_source_split_13407:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p202, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13408;

  corral_source_split_13408:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.0, $p203);
    goto corral_source_split_13409;

  corral_source_split_13409:
    assume {:verifier.code 0} true;
    $i205 := $p2i.ref.i64($p204);
    goto corral_source_split_13410;

  corral_source_split_13410:
    assume {:verifier.code 0} true;
    $i206 := $ne.i64($i205, 0);
    goto corral_source_split_13411;

  corral_source_split_13411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume !($i206 == 1);
    goto $bb89;

  $bb90:
    assume $i206 == 1;
    $p208 := $add.ref($add.ref($add.ref($add.ref($p189, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_13413;

  corral_source_split_13413:
    assume {:verifier.code 0} true;
    $p209 := $load.ref($M.0, $p208);
    goto corral_source_split_13414;

  corral_source_split_13414:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p209, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13415;

  corral_source_split_13415:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.0, $p210);
    $p212 := $add.ref($add.ref($add.ref($add.ref($p189, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_13416;

  corral_source_split_13416:
    assume {:verifier.code 0} true;
    $p213 := $load.ref($M.0, $p212);
    goto corral_source_split_13417;

  corral_source_split_13417:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_13418;

  corral_source_split_13418:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.0, $p214);
    goto corral_source_split_13419;

  corral_source_split_13419:
    assume {:verifier.code 0} true;
    $i216 := $sext.i32.i64($i3);
    goto corral_source_split_13420;

  corral_source_split_13420:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($p215, $mul.ref($i216, 24));
    call {:si_unique_call 2097} $i218 := devirtbounce.14($p211, $p191, $p213, $p217, 0);
    goto corral_source_split_13421;

  corral_source_split_13421:
    assume {:verifier.code 0} true;
    $i207 := $i218;
    goto $bb92;

  $bb84:
    assume {:verifier.code 0} true;
    assume $i196 == 1;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_13303;

  corral_source_split_13303:
    assume {:verifier.code 0} true;
    $i52 := $i104;
    goto $bb24;

  $bb81:
    assume $i186 == 1;
    goto corral_source_split_13390;

  corral_source_split_13390:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i173 == 1;
    goto $bb58;

  $bb70:
    assume $i154 == 1;
    $p155 := $add.ref($add.ref($add.ref($add.ref($p143, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_13358;

  corral_source_split_13358:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_13359;

  corral_source_split_13359:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p156, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13360;

  corral_source_split_13360:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.0, $p157);
    goto corral_source_split_13361;

  corral_source_split_13361:
    assume {:verifier.code 0} true;
    $i159 := $p2i.ref.i64($p158);
    goto corral_source_split_13362;

  corral_source_split_13362:
    assume {:verifier.code 0} true;
    $i160 := $ne.i64($i159, 0);
    goto corral_source_split_13363;

  corral_source_split_13363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i160 == 1);
    goto $bb72;

  $bb73:
    assume $i160 == 1;
    $p162 := $add.ref($add.ref($add.ref($add.ref($p143, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_13365;

  corral_source_split_13365:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.0, $p162);
    goto corral_source_split_13366;

  corral_source_split_13366:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p163, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13367;

  corral_source_split_13367:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.0, $p164);
    $p166 := $add.ref($add.ref($add.ref($add.ref($p143, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_13368;

  corral_source_split_13368:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.0, $p166);
    goto corral_source_split_13369;

  corral_source_split_13369:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_13370;

  corral_source_split_13370:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_13371;

  corral_source_split_13371:
    assume {:verifier.code 0} true;
    $i170 := $sext.i32.i64($i3);
    goto corral_source_split_13372;

  corral_source_split_13372:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($p169, $mul.ref($i170, 24));
    call {:si_unique_call 2094} $i172 := devirtbounce.14($p165, $p145, $p167, $p171, 0);
    goto corral_source_split_13373;

  corral_source_split_13373:
    assume {:verifier.code 0} true;
    $i161 := $i172;
    goto $bb75;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i150 == 1;
    goto $bb48;

  $bb64:
    assume $i140 == 1;
    goto corral_source_split_13342;

  corral_source_split_13342:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i127 == 1;
    goto $bb58;

  $bb51:
    assume $i108 == 1;
    $p109 := $add.ref($add.ref($add.ref($add.ref($p96, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_13310;

  corral_source_split_13310:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_13311;

  corral_source_split_13311:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13312;

  corral_source_split_13312:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_13313;

  corral_source_split_13313:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    goto corral_source_split_13314;

  corral_source_split_13314:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i113, 0);
    goto corral_source_split_13315;

  corral_source_split_13315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb53;

  $bb54:
    assume $i114 == 1;
    $p115 := $add.ref($add.ref($add.ref($add.ref($p96, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_13317;

  corral_source_split_13317:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_13318;

  corral_source_split_13318:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p116, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13319;

  corral_source_split_13319:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    $p119 := $add.ref($add.ref($add.ref($add.ref($p96, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_13320;

  corral_source_split_13320:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_13321;

  corral_source_split_13321:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_13322;

  corral_source_split_13322:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_13323;

  corral_source_split_13323:
    assume {:verifier.code 0} true;
    $i123 := $sext.i32.i64($i3);
    goto corral_source_split_13324;

  corral_source_split_13324:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($p122, $mul.ref($i123, 24));
    call {:si_unique_call 2090} $i125 := devirtbounce.14($p118, $p98, $p120, $p124, 0);
    call {:si_unique_call 2091} {:cexpr "tmp___1"} boogie_si_record_i32($i125);
    goto corral_source_split_13325;

  corral_source_split_13325:
    assume {:verifier.code 0} true;
    $i126 := $i125;
    goto $bb56;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i103 == 1;
    goto $bb48;

  $bb43:
    assume $i93 == 1;
    goto corral_source_split_13292;

  corral_source_split_13292:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_13199;

  corral_source_split_13199:
    assume {:verifier.code 0} true;
    $i17, $i18 := $i15, 0;
    goto $bb13;

  $bb13:
    call $i19, $p21, $p22, $i23, $i24, $i26, $p28, $p29, $p30, $p31, $p32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $p41, $p42, $p45, $i46, $i47, $i48, $i49, $i50, $i51, $p53, $p54, $i55, $i56, $p57, $p58, $p59, $p60, $i61, $i62, $p63, $p64, $p65, $p66, $p67, $p68, $p69, $p70, $i71, $p72, $i73, $i74, $i75, $p77, $p78, $p79, $p80, $i81, $i82, $p83, $p84, $i25, $i86, $i87, $i17, $i18, $i88, vslice_dummy_var_127 := __fimc_md_create_fimc_sink_links_loop_$bb13($p0, $p1, $i3, $i4, $i19, $p21, $p22, $i23, $i24, $i26, $p28, $p29, $p30, $p31, $p32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $p41, $p42, $p45, $i46, $i47, $i48, $i49, $i50, $i51, $p53, $p54, $i55, $i56, $p57, $p58, $p59, $p60, $i61, $i62, $p63, $p64, $p65, $p66, $p67, $p68, $p69, $p70, $i71, $p72, $i73, $i74, $i75, $p77, $p78, $p79, $p80, $i81, $i82, $p83, $p84, $i25, $i86, $i87, $i17, $i18, $i88, vslice_dummy_var_127);
    goto $bb13_last;

  corral_source_split_13201:
    assume {:verifier.code 0} true;
    $i88 := $sle.i32($i18, 3);
    goto corral_source_split_13202;

  corral_source_split_13202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i88 == 1);
    goto corral_source_split_13285;

  corral_source_split_13285:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb38:
    assume $i88 == 1;
    goto corral_source_split_13283;

  corral_source_split_13283:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_13204;

  corral_source_split_13204:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref($i19, 8));
    goto corral_source_split_13205;

  corral_source_split_13205:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_13206;

  corral_source_split_13206:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_13207;

  corral_source_split_13207:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_13208;

  corral_source_split_13208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i18);
    goto corral_source_split_13216;

  corral_source_split_13216:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref($i26, 8));
    goto corral_source_split_13217;

  corral_source_split_13217:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_13218;

  corral_source_split_13218:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 5568)), $mul.ref(256, 1));
    goto corral_source_split_13219;

  corral_source_split_13219:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_13220;

  corral_source_split_13220:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_13221;

  corral_source_split_13221:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref(0, 1));
    goto corral_source_split_13222;

  corral_source_split_13222:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_13223;

  corral_source_split_13223:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_13224;

  corral_source_split_13224:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_13225;

  corral_source_split_13225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i37 := $ashr.i32($i4, $i18);
    goto corral_source_split_13229;

  corral_source_split_13229:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 1);
    call {:si_unique_call 2082} {:cexpr "flags"} boogie_si_record_i32($i38);
    goto corral_source_split_13230;

  corral_source_split_13230:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i18);
    goto corral_source_split_13231;

  corral_source_split_13231:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref($i39, 8));
    goto corral_source_split_13232;

  corral_source_split_13232:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_13233;

  corral_source_split_13233:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p42, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_13234;

  corral_source_split_13234:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i3);
    goto corral_source_split_13235;

  corral_source_split_13235:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_13236;

  corral_source_split_13236:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_13237;

  corral_source_split_13237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} $i49 := media_entity_create_link($p1, $i48, $p45, 0, $i38);
    call {:si_unique_call 2084} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_13238;

  corral_source_split_13238:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_13239;

  corral_source_split_13239:
    assume {:verifier.code 0} true;
    $i51 := $i49;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    $p53 := $add.ref($add.ref($add.ref($add.ref($add.ref($p42, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_13245;

  corral_source_split_13245:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_13246;

  corral_source_split_13246:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_13247;

  corral_source_split_13247:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_13248;

  corral_source_split_13248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i74 := $sub.i32(0, 515);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_13267;

  corral_source_split_13267:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_13268;

  corral_source_split_13268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(104, 1));
    goto corral_source_split_13272;

  corral_source_split_13272:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_13273;

  corral_source_split_13273:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(32, 1));
    goto corral_source_split_13274;

  corral_source_split_13274:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_13275;

  corral_source_split_13275:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i38, 0);
    goto corral_source_split_13276;

  corral_source_split_13276:
    assume {:verifier.code 0} true;
    $i82 := (if $i81 == 1 then 61 else 45);
    $p83 := $add.ref($add.ref($add.ref($add.ref($add.ref($p42, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_13277;

  corral_source_split_13277:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_13278;

  corral_source_split_13278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} vslice_dummy_var_127 := printk.ref.ref.ref.i32.ref(.str.152, $p78, $p80, $i82, $p84);
    goto corral_source_split_13279;

  corral_source_split_13279:
    assume {:verifier.code 0} true;
    $i25 := $i74;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_13212;

  corral_source_split_13212:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i18, 1);
    call {:si_unique_call 2081} {:cexpr "i"} boogie_si_record_i32($i86);
    goto corral_source_split_13213;

  corral_source_split_13213:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i25, 0);
    goto corral_source_split_13214;

  corral_source_split_13214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i87 == 1);
    goto corral_source_split_13281;

  corral_source_split_13281:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb36:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i17, $i18 := $i25, $i86;
    goto $bb36_dummy;

  $bb32:
    assume $i75 == 1;
    goto corral_source_split_13270;

  corral_source_split_13270:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb26:
    assume $i56 == 1;
    $p57 := $add.ref($add.ref($add.ref($add.ref($add.ref($p42, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_13250;

  corral_source_split_13250:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_13251;

  corral_source_split_13251:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13252;

  corral_source_split_13252:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_13253;

  corral_source_split_13253:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_13254;

  corral_source_split_13254:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_13255;

  corral_source_split_13255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb28;

  $bb29:
    assume $i62 == 1;
    $p63 := $add.ref($add.ref($add.ref($add.ref($add.ref($p42, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_13257;

  corral_source_split_13257:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_13258;

  corral_source_split_13258:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13259;

  corral_source_split_13259:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    $p67 := $add.ref($add.ref($add.ref($add.ref($add.ref($p42, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_13260;

  corral_source_split_13260:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_13261;

  corral_source_split_13261:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_13262;

  corral_source_split_13262:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_13263;

  corral_source_split_13263:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i3);
    goto corral_source_split_13264;

  corral_source_split_13264:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p70, $mul.ref($i71, 24));
    call {:si_unique_call 2085} $i73 := devirtbounce.14($p66, $p45, $p68, $p72, $i38);
    call {:si_unique_call 2086} {:cexpr "tmp___0"} boogie_si_record_i32($i73);
    goto corral_source_split_13265;

  corral_source_split_13265:
    assume {:verifier.code 0} true;
    $i74 := $i73;
    goto $bb31;

  $bb22:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_13241;

  corral_source_split_13241:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb24;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_13227;

  corral_source_split_13227:
    assume {:verifier.code 0} true;
    $i25 := $i17;
    goto $bb17;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_13210;

  corral_source_split_13210:
    assume {:verifier.code 0} true;
    $i25 := $i17;
    goto $bb17;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_13181;

  corral_source_split_13181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2080} $p7 := v4l2_get_subdev_hostdata($p2);
    goto corral_source_split_13182;

  corral_source_split_13182:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_13183;

  corral_source_split_13183:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_13184;

  corral_source_split_13184:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_13185;

  corral_source_split_13185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_13194;

  corral_source_split_13194:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb9;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_13187;

  corral_source_split_13187:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_13188;

  corral_source_split_13188:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_13189;

  corral_source_split_13189:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 5);
    goto corral_source_split_13190;

  corral_source_split_13190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb5;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_13192;

  corral_source_split_13192:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb8;

  $bb36_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_13201;
}



const __fimc_md_create_flite_source_links: ref;

axiom __fimc_md_create_flite_source_links == $sub.ref(0, 719690);

procedure __fimc_md_create_flite_source_links($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __fimc_md_create_flite_source_links($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $p16: ref;
  var $p17: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i6: i32;
  var $i15: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p51: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13433;

  corral_source_split_13433:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(392, 1)), $mul.ref(0, 8));
    goto corral_source_split_13435;

  corral_source_split_13435:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_13436;

  corral_source_split_13436:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_13437;

  corral_source_split_13437:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_13438;

  corral_source_split_13438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(0, 1));
    goto corral_source_split_13444;

  corral_source_split_13444:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 4048)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13445;

  corral_source_split_13445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} $i12 := media_entity_create_link($p8, 1, $p11, 0, 0);
    call {:si_unique_call 2100} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_13446;

  corral_source_split_13446:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_13447;

  corral_source_split_13447:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(448, 1));
    goto corral_source_split_13453;

  corral_source_split_13453:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_13454;

  corral_source_split_13454:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 12320)), $mul.ref(168, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_13455;

  corral_source_split_13455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} $i21 := media_entity_create_link($p8, 2, $p20, 0, 0);
    call {:si_unique_call 2102} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_13456;

  corral_source_split_13456:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_13457;

  corral_source_split_13457:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i6 := $i21;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_13442;

  corral_source_split_13442:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(392, 1)), $mul.ref(1, 8));
    goto corral_source_split_13461;

  corral_source_split_13461:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_13462;

  corral_source_split_13462:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_13463;

  corral_source_split_13463:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_13464;

  corral_source_split_13464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(0, 1));
    goto corral_source_split_13468;

  corral_source_split_13468:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p27, $mul.ref(0, 4048)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13469;

  corral_source_split_13469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} $i35 := media_entity_create_link($p31, 1, $p34, 0, 0);
    goto corral_source_split_13470;

  corral_source_split_13470:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_13471;

  corral_source_split_13471:
    assume {:verifier.code 0} true;
    $i14 := $i35;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(448, 1));
    goto corral_source_split_13473;

  corral_source_split_13473:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_13474;

  corral_source_split_13474:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 12320)), $mul.ref(168, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_13475;

  corral_source_split_13475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} $i42 := media_entity_create_link($p31, 2, $p41, 0, 0);
    goto corral_source_split_13476;

  corral_source_split_13476:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_13477;

  corral_source_split_13477:
    assume {:verifier.code 0} true;
    $i23 := $i42;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i44 := $i42;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_13479;

  corral_source_split_13479:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(392, 1)), $mul.ref(2, 8));
    goto corral_source_split_13481;

  corral_source_split_13481:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_13482;

  corral_source_split_13482:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_13483;

  corral_source_split_13483:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i48, 0);
    goto corral_source_split_13484;

  corral_source_split_13484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p47, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(0, 1));
    goto corral_source_split_13488;

  corral_source_split_13488:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p47, $mul.ref(0, 4048)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13489;

  corral_source_split_13489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} $i55 := media_entity_create_link($p51, 1, $p54, 0, 0);
    goto corral_source_split_13490;

  corral_source_split_13490:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_13491;

  corral_source_split_13491:
    assume {:verifier.code 0} true;
    $i14 := $i55;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(448, 1));
    goto corral_source_split_13493;

  corral_source_split_13493:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_13494;

  corral_source_split_13494:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($add.ref($p58, $mul.ref(0, 12320)), $mul.ref(168, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_13495;

  corral_source_split_13495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2106} $i62 := media_entity_create_link($p51, 2, $p61, 0, 0);
    goto corral_source_split_13496;

  corral_source_split_13496:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_13497;

  corral_source_split_13497:
    assume {:verifier.code 0} true;
    $i23 := $i62;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i24 := $i62;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i15 := $i24;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_13451;

  corral_source_split_13451:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_13459;

  corral_source_split_13459:
    assume {:verifier.code 0} true;
    $i15 := $i23;
    goto $bb10;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_13449;

  corral_source_split_13449:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb10;

  $bb29:
    assume $i49 == 1;
    goto corral_source_split_13486;

  corral_source_split_13486:
    assume {:verifier.code 0} true;
    $i24 := $i44;
    goto $bb38;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb13;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb8;

  $bb18:
    assume $i29 == 1;
    goto corral_source_split_13466;

  corral_source_split_13466:
    assume {:verifier.code 0} true;
    $i44 := $i6;
    goto $bb27;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb13;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb8;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_13440;

  corral_source_split_13440:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb5;
}



const __fimc_md_create_fimc_is_links: ref;

axiom __fimc_md_create_fimc_is_links == $sub.ref(0, 720722);

procedure __fimc_md_create_fimc_is_links($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __fimc_md_create_fimc_is_links($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i20: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $p62: ref;
  var $p63: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13499;

  corral_source_split_13499:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(448, 1));
    goto corral_source_split_13500;

  corral_source_split_13500:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_13501;

  corral_source_split_13501:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 12320)), $mul.ref(168, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_13502;

  corral_source_split_13502:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(0, 8));
    goto corral_source_split_13504;

  corral_source_split_13504:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_13505;

  corral_source_split_13505:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_13506;

  corral_source_split_13506:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_13507;

  corral_source_split_13507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(0, 8));
    goto corral_source_split_13511;

  corral_source_split_13511:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_13512;

  corral_source_split_13512:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_13513;

  corral_source_split_13513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} $i17 := media_entity_create_link($p5, 1, $p16, 1, 0);
    call {:si_unique_call 2108} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_13514;

  corral_source_split_13514:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_13515;

  corral_source_split_13515:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(1, 8));
    goto corral_source_split_13521;

  corral_source_split_13521:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_13522;

  corral_source_split_13522:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_13523;

  corral_source_split_13523:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_13524;

  corral_source_split_13524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(1, 8));
    goto corral_source_split_13537;

  corral_source_split_13537:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_13538;

  corral_source_split_13538:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p37, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_13539;

  corral_source_split_13539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} $i41 := media_entity_create_link($p5, 1, $p40, 1, 0);
    goto corral_source_split_13540;

  corral_source_split_13540:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_13541;

  corral_source_split_13541:
    assume {:verifier.code 0} true;
    $i19 := $i41;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(2, 8));
    goto corral_source_split_13543;

  corral_source_split_13543:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_13544;

  corral_source_split_13544:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_13545;

  corral_source_split_13545:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_13546;

  corral_source_split_13546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(2, 8));
    goto corral_source_split_13550;

  corral_source_split_13550:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_13551;

  corral_source_split_13551:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p50, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_13552;

  corral_source_split_13552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2112} $i54 := media_entity_create_link($p5, 1, $p53, 1, 0);
    goto corral_source_split_13553;

  corral_source_split_13553:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_13554;

  corral_source_split_13554:
    assume {:verifier.code 0} true;
    $i19 := $i54;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(3, 8));
    goto corral_source_split_13556;

  corral_source_split_13556:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_13557;

  corral_source_split_13557:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_13558;

  corral_source_split_13558:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i59, 0);
    goto corral_source_split_13559;

  corral_source_split_13559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(3, 8));
    goto corral_source_split_13563;

  corral_source_split_13563:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_13564;

  corral_source_split_13564:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p63, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_13565;

  corral_source_split_13565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} $i67 := media_entity_create_link($p5, 1, $p66, 1, 0);
    goto corral_source_split_13566;

  corral_source_split_13566:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_13567;

  corral_source_split_13567:
    assume {:verifier.code 0} true;
    $i19 := $i67;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    $p24 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 12320)), $mul.ref(168, 1)), $mul.ref(1184, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    $p25 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 12320)), $mul.ref(168, 1)), $mul.ref(1184, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(60, 1));
    goto corral_source_split_13526;

  corral_source_split_13526:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_13527;

  corral_source_split_13527:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_13528;

  corral_source_split_13528:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_13529;

  corral_source_split_13529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} $i29 := media_entity_create_link($p5, 2, $p24, 0, 0);
    call {:si_unique_call 2110} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_13533;

  corral_source_split_13533:
    assume {:verifier.code 0} true;
    $i20 := $i29;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_13519;

  corral_source_split_13519:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_13531;

  corral_source_split_13531:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb10;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_13517;

  corral_source_split_13517:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb10;

  $bb33:
    assume $i60 == 1;
    goto corral_source_split_13561;

  corral_source_split_13561:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb8;

  $bb25:
    assume $i47 == 1;
    goto corral_source_split_13548;

  corral_source_split_13548:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb8;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_13535;

  corral_source_split_13535:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb8;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_13509;

  corral_source_split_13509:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const v4l2_set_subdev_hostdata: ref;

axiom v4l2_set_subdev_hostdata == $sub.ref(0, 721754);

procedure v4l2_set_subdev_hostdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation v4l2_set_subdev_hostdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13569;

  corral_source_split_13569:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(232, 1));
    goto corral_source_split_13570;

  corral_source_split_13570:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_13571;

  corral_source_split_13571:
    assume {:verifier.code 0} true;
    return;
}



const of_property_read_string_index: ref;

axiom of_property_read_string_index == $sub.ref(0, 722786);

procedure of_property_read_string_index($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation of_property_read_string_index($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} {:cexpr "of_property_read_string_index:arg:index"} boogie_si_record_i32($i2);
    goto corral_source_split_13573;

  corral_source_split_13573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} $i4 := of_property_read_string_helper($p0, $p1, $p3, 1, $i2);
    call {:si_unique_call 2116} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_13574;

  corral_source_split_13574:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32(0, $i4);
    goto corral_source_split_13575;

  corral_source_split_13575:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_13579;

  corral_source_split_13579:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13581;

  corral_source_split_13581:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_13577;

  corral_source_split_13577:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const __clk_get_name: ref;

axiom __clk_get_name == $sub.ref(0, 723818);

procedure __clk_get_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __clk_get_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13583;

  corral_source_split_13583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} $p1 := external_alloc();
    goto corral_source_split_13584;

  corral_source_split_13584:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const clk_register: ref;

axiom clk_register == $sub.ref(0, 724850);

procedure clk_register($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation clk_register($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13586;

  corral_source_split_13586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} $p2 := external_alloc();
    goto corral_source_split_13587;

  corral_source_split_13587:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_13588;

  corral_source_split_13588:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 725882);

procedure dev_warn.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13590;

  corral_source_split_13590:
    assume {:verifier.code 0} true;
    return;
}



const of_clk_src_onecell_get: ref;

axiom of_clk_src_onecell_get == $sub.ref(0, 726914);

procedure of_clk_src_onecell_get($p0: ref, $p1: ref) returns ($r: ref);



const of_clk_add_provider: ref;

axiom of_clk_add_provider == $sub.ref(0, 727946);

procedure of_clk_add_provider($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation of_clk_add_provider($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13592;

  corral_source_split_13592:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2119} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2120} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_13593;

  corral_source_split_13593:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const of_property_read_string_helper: ref;

axiom of_property_read_string_helper == $sub.ref(0, 728978);

procedure of_property_read_string_helper($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation of_property_read_string_helper($p0: ref, $p1: ref, $p2: ref, $i3: i64, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2121} {:cexpr "of_property_read_string_helper:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 2122} {:cexpr "of_property_read_string_helper:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_13595;

  corral_source_split_13595:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2123} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 2124} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_13596;

  corral_source_split_13596:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const of_get_next_available_child: ref;

axiom of_get_next_available_child == $sub.ref(0, 730010);

procedure of_get_next_available_child($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation of_get_next_available_child($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13598;

  corral_source_split_13598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} $p2 := external_alloc();
    goto corral_source_split_13599;

  corral_source_split_13599:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_13600;

  corral_source_split_13600:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const strcasecmp: ref;

axiom strcasecmp == $sub.ref(0, 731042);

procedure strcasecmp($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation strcasecmp($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13602;

  corral_source_split_13602:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2126} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2127} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_13603;

  corral_source_split_13603:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const of_get_next_child: ref;

axiom of_get_next_child == $sub.ref(0, 732074);

procedure of_get_next_child($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation of_get_next_child($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13605;

  corral_source_split_13605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} $p2 := external_alloc();
    goto corral_source_split_13606;

  corral_source_split_13606:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_13607;

  corral_source_split_13607:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const fimc_md_parse_port_node: ref;

axiom fimc_md_parse_port_node == $sub.ref(0, 733106);

procedure fimc_md_parse_port_node($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fimc_md_parse_port_node($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i16;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i16;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i16;
  var $p65: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p76: ref;
  var $p77: ref;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $p97: ref;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i64;
  var $i103: i64;
  var $i104: i1;
  var $i105: i1;
  var $i106: i32;
  var $i107: i64;
  var $i108: i64;
  var $i109: i1;
  var $i110: i64;
  var $p114: ref;
  var $i115: i64;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $p125: ref;
  var $i126: i64;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $p132: ref;
  var $i11: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} $p3 := $alloc($mul.ref(56, $zext.i32.i64(1)));
    call {:si_unique_call 2130} {:cexpr "fimc_md_parse_port_node:arg:index"} boogie_si_record_i32($i2);
    goto corral_source_split_13609;

  corral_source_split_13609:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i2);
    goto corral_source_split_13610;

  corral_source_split_13610:
    assume {:verifier.code 0} true;
    goto corral_source_split_13611;

  corral_source_split_13611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} $p8 := of_get_next_child($p1, $0.ref);
    goto corral_source_split_13612;

  corral_source_split_13612:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_13613;

  corral_source_split_13613:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_13614;

  corral_source_split_13614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} vslice_dummy_var_131 := v4l2_of_parse_endpoint($p8, $p3);
    goto corral_source_split_13620;

  corral_source_split_13620:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13621;

  corral_source_split_13621:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.33, $p14);
    goto corral_source_split_13622;

  corral_source_split_13622:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_13623;

  corral_source_split_13623:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    call {:si_unique_call 2133} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i17);
    goto corral_source_split_13624;

  corral_source_split_13624:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_13625;

  corral_source_split_13625:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_13626;

  corral_source_split_13626:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_13627;

  corral_source_split_13627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 2135} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_13628;

  corral_source_split_13628:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_13629;

  corral_source_split_13629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i17, 0);
    goto corral_source_split_13634;

  corral_source_split_13634:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_13635;

  corral_source_split_13635:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_13636;

  corral_source_split_13636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 2138} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_13637;

  corral_source_split_13637:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_13638;

  corral_source_split_13638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i27 == 1);
    goto corral_source_split_13640;

  corral_source_split_13640:
    assume {:verifier.code 0} true;
    $i28 := $ugt.i32($i2, 3);
    goto corral_source_split_13641;

  corral_source_split_13641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13643;

  corral_source_split_13643:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.33, $p30);
    goto corral_source_split_13644;

  corral_source_split_13644:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_13645;

  corral_source_split_13645:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_13646;

  corral_source_split_13646:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32($i33, 1);
    goto corral_source_split_13647;

  corral_source_split_13647:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 1);
    goto corral_source_split_13648;

  corral_source_split_13648:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    $p37 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(32, 1)), $mul.ref($i4, 72)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_13649;

  corral_source_split_13649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p37, $i36);
    goto corral_source_split_13650;

  corral_source_split_13650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} $p38 := of_graph_get_remote_port_parent($p8);
    goto corral_source_split_13651;

  corral_source_split_13651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2140} of_node_put($p8);
    goto corral_source_split_13652;

  corral_source_split_13652:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_13653;

  corral_source_split_13653:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_13654;

  corral_source_split_13654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13663;

  corral_source_split_13663:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.33, $p48);
    goto corral_source_split_13664;

  corral_source_split_13664:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 1);
    goto corral_source_split_13665;

  corral_source_split_13665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i50 == 1);
    goto corral_source_split_13671;

  corral_source_split_13671:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13672;

  corral_source_split_13672:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.33, $p52);
    goto corral_source_split_13673;

  corral_source_split_13673:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 2);
    goto corral_source_split_13674;

  corral_source_split_13674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i54 == 1);
    goto corral_source_split_13676;

  corral_source_split_13676:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13677;

  corral_source_split_13677:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.33, $p67);
    goto corral_source_split_13678;

  corral_source_split_13678:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 3);
    goto corral_source_split_13679;

  corral_source_split_13679:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i69 == 1);
    goto corral_source_split_13700;

  corral_source_split_13700:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13701;

  corral_source_split_13701:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.33, $p71);
    goto corral_source_split_13702;

  corral_source_split_13702:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 4);
    goto corral_source_split_13703;

  corral_source_split_13703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i73 == 1);
    goto corral_source_split_13705;

  corral_source_split_13705:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(104, 1));
    goto corral_source_split_13706;

  corral_source_split_13706:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_13707;

  corral_source_split_13707:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13708;

  corral_source_split_13708:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.33, $p79);
    goto corral_source_split_13709;

  corral_source_split_13709:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p38, $mul.ref(0, 400)), $mul.ref(24, 1));
    goto corral_source_split_13710;

  corral_source_split_13710:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_13711;

  corral_source_split_13711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} vslice_dummy_var_133 := printk.ref.ref.i32.ref(.str.141, $p77, $i80, $p82);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2142} $p84 := of_get_parent($p38);
    goto corral_source_split_13693;

  corral_source_split_13693:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_13694;

  corral_source_split_13694:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_13695;

  corral_source_split_13695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i86 == 1);
    $p95 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(32, 1)), $mul.ref($i4, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_13719;

  corral_source_split_13719:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    $p97 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(32, 1)), $mul.ref($i4, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13720;

  corral_source_split_13720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p97, $i96);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i98 := $ugt.i32($i2, 3);
    goto corral_source_split_13728;

  corral_source_split_13728:
    assume {:verifier.code 0} true;
    $i99 := $zext.i1.i32($i98);
    call {:si_unique_call 2146} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i99);
    goto corral_source_split_13729;

  corral_source_split_13729:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_13730;

  corral_source_split_13730:
    assume {:verifier.code 0} true;
    $i101 := $zext.i1.i32($i100);
    goto corral_source_split_13731;

  corral_source_split_13731:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i101);
    goto corral_source_split_13732;

  corral_source_split_13732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} $i103 := ldv__builtin_expect($i102, 0);
    call {:si_unique_call 2148} {:cexpr "tmp___2"} boogie_si_record_i64($i103);
    goto corral_source_split_13733;

  corral_source_split_13733:
    assume {:verifier.code 0} true;
    $i104 := $ne.i64($i103, 0);
    goto corral_source_split_13734;

  corral_source_split_13734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i99, 0);
    goto corral_source_split_13739;

  corral_source_split_13739:
    assume {:verifier.code 0} true;
    $i106 := $zext.i1.i32($i105);
    goto corral_source_split_13740;

  corral_source_split_13740:
    assume {:verifier.code 0} true;
    $i107 := $sext.i32.i64($i106);
    goto corral_source_split_13741;

  corral_source_split_13741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2150} $i108 := ldv__builtin_expect($i107, 0);
    call {:si_unique_call 2151} {:cexpr "tmp___3"} boogie_si_record_i64($i108);
    goto corral_source_split_13742;

  corral_source_split_13742:
    assume {:verifier.code 0} true;
    $i109 := $ne.i64($i108, 0);
    goto corral_source_split_13743;

  corral_source_split_13743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i110 := $zext.i32.i64($i2);
    goto corral_source_split_13747;

  corral_source_split_13747:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(32, 1)), $mul.ref($i110, 72)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_13748;

  corral_source_split_13748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p114, 3);
    goto corral_source_split_13749;

  corral_source_split_13749:
    assume {:verifier.code 0} true;
    $i115 := $zext.i32.i64($i2);
    goto corral_source_split_13750;

  corral_source_split_13750:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(32, 1)), $mul.ref($i115, 72)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_13751;

  corral_source_split_13751:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p119);
    goto corral_source_split_13752;

  corral_source_split_13752:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p120, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_13753;

  corral_source_split_13753:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p121, $p38);
    goto corral_source_split_13754;

  corral_source_split_13754:
    assume {:verifier.code 0} true;
    $i122 := $zext.i32.i64($i2);
    goto corral_source_split_13755;

  corral_source_split_13755:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(32, 1)), $mul.ref($i122, 72)), $mul.ref(16, 1));
    goto corral_source_split_13756;

  corral_source_split_13756:
    assume {:verifier.code 0} true;
    $i126 := $zext.i32.i64($i2);
    goto corral_source_split_13757;

  corral_source_split_13757:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(3088, 1)), $mul.ref($i126, 8));
    goto corral_source_split_13758;

  corral_source_split_13758:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p128, $p125);
    goto corral_source_split_13759;

  corral_source_split_13759:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(320, 1));
    goto corral_source_split_13760;

  corral_source_split_13760:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_13761;

  corral_source_split_13761:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i130, 1);
    goto corral_source_split_13762;

  corral_source_split_13762:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(320, 1));
    goto corral_source_split_13763;

  corral_source_split_13763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p132, $i131);
    goto corral_source_split_13764;

  corral_source_split_13764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2152} of_node_put($p38);
    goto corral_source_split_13765;

  corral_source_split_13765:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13618;

  corral_source_split_13618:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb41:
    assume $i109 == 1;
    goto corral_source_split_13745;

  corral_source_split_13745:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb38:
    assume $i104 == 1;
    goto corral_source_split_13736;

  corral_source_split_13736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} warn_slowpath_null(.str.132, 387);
    goto corral_source_split_13737;

  corral_source_split_13737:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume $i86 == 1;
    goto corral_source_split_13713;

  corral_source_split_13713:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p84, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_13714;

  corral_source_split_13714:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_13715;

  corral_source_split_13715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2144} $i89 := strcasecmp($p88, .str.142);
    call {:si_unique_call 2145} {:cexpr "tmp___1"} boogie_si_record_i32($i89);
    goto corral_source_split_13716;

  corral_source_split_13716:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 0);
    goto corral_source_split_13717;

  corral_source_split_13717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i90 == 1);
    $p92 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(32, 1)), $mul.ref($i4, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_13725;

  corral_source_split_13725:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    $p94 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(32, 1)), $mul.ref($i4, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13726;

  corral_source_split_13726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i93);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i90 == 1;
    $p91 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(32, 1)), $mul.ref($i4, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_13722;

  corral_source_split_13722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, 5);
    goto corral_source_split_13723;

  corral_source_split_13723:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb27;

  $bb27:
    $p74 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(32, 1)), $mul.ref($i4, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_13697;

  corral_source_split_13697:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, 3);
    goto corral_source_split_13698;

  corral_source_split_13698:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i69 == 1;
    goto $bb27;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_13667;

  corral_source_split_13667:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.34, $p55);
    goto corral_source_split_13668;

  corral_source_split_13668:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_13669;

  corral_source_split_13669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i57 == 1);
    $p59 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(32, 1)), $mul.ref($i4, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_13684;

  corral_source_split_13684:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 2);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_13686;

  corral_source_split_13686:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_13687;

  corral_source_split_13687:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_13688;

  corral_source_split_13688:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.35, $p62);
    goto corral_source_split_13689;

  corral_source_split_13689:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i63);
    $p65 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(32, 1)), $mul.ref($i4, 72)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_13690;

  corral_source_split_13690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p65, $i64);
    goto corral_source_split_13691;

  corral_source_split_13691:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i57 == 1;
    $p58 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(32, 1)), $mul.ref($i4, 72)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_13681;

  corral_source_split_13681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 1);
    goto corral_source_split_13682;

  corral_source_split_13682:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb18;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_13656;

  corral_source_split_13656:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(104, 1));
    goto corral_source_split_13657;

  corral_source_split_13657:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_13658;

  corral_source_split_13658:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p8, $mul.ref(0, 400)), $mul.ref(24, 1));
    goto corral_source_split_13659;

  corral_source_split_13659:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_13660;

  corral_source_split_13660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} vslice_dummy_var_132 := printk.ref.ref.ref(.str.140, $p43, $p45);
    goto corral_source_split_13661;

  corral_source_split_13661:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb9;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_13631;

  corral_source_split_13631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} warn_slowpath_null(.str.132, 343);
    goto corral_source_split_13632;

  corral_source_split_13632:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_13616;

  corral_source_split_13616:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;
}



const of_get_child_by_name: ref;

axiom of_get_child_by_name == $sub.ref(0, 734138);

procedure of_get_child_by_name($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation of_get_child_by_name($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13767;

  corral_source_split_13767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} $p2 := external_alloc();
    goto corral_source_split_13768;

  corral_source_split_13768:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_13769;

  corral_source_split_13769:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const v4l2_of_parse_endpoint: ref;

axiom v4l2_of_parse_endpoint == $sub.ref(0, 735170);

procedure v4l2_of_parse_endpoint($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_of_parse_endpoint($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13771;

  corral_source_split_13771:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2154} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2155} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_13772;

  corral_source_split_13772:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const of_graph_get_remote_port_parent: ref;

axiom of_graph_get_remote_port_parent == $sub.ref(0, 736202);

procedure of_graph_get_remote_port_parent($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation of_graph_get_remote_port_parent($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13774;

  corral_source_split_13774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} $p1 := external_alloc();
    goto corral_source_split_13775;

  corral_source_split_13775:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13776;

  corral_source_split_13776:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const of_node_put: ref;

axiom of_node_put == $sub.ref(0, 737234);

procedure of_node_put($p0: ref);
  free requires assertsPassed;



implementation of_node_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13778;

  corral_source_split_13778:
    assume {:verifier.code 0} true;
    return;
}



const of_get_parent: ref;

axiom of_get_parent == $sub.ref(0, 738266);

procedure of_get_parent($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation of_get_parent($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13780;

  corral_source_split_13780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} $p1 := external_alloc();
    goto corral_source_split_13781;

  corral_source_split_13781:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13782;

  corral_source_split_13782:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const of_find_device_by_node: ref;

axiom of_find_device_by_node == $sub.ref(0, 739298);

procedure of_find_device_by_node($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation of_find_device_by_node($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13784;

  corral_source_split_13784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2158} $p1 := external_alloc();
    goto corral_source_split_13785;

  corral_source_split_13785:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_13786;

  corral_source_split_13786:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const fimc_md_register_platform_entity: ref;

axiom fimc_md_register_platform_entity == $sub.ref(0, 740330);

procedure fimc_md_register_platform_entity($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.36, $M.1, $CurrAddr, assertsPassed;



implementation fimc_md_register_platform_entity($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i28: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i8: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} {:cexpr "fimc_md_register_platform_entity:arg:plat_entity"} boogie_si_record_i32($i2);
    goto corral_source_split_13788;

  corral_source_split_13788:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_13789;

  corral_source_split_13789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} device_lock($p3);
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(496, 1));
    goto corral_source_split_13790;

  corral_source_split_13790:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_13791;

  corral_source_split_13791:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_13792;

  corral_source_split_13792:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_13793;

  corral_source_split_13793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(496, 1));
    goto corral_source_split_13797;

  corral_source_split_13797:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_13798;

  corral_source_split_13798:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_13799;

  corral_source_split_13799:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_13800;

  corral_source_split_13800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2161} $i13 := ldv_try_module_get_25($p12);
    goto corral_source_split_13801;

  corral_source_split_13801:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 2162} {:cexpr "tmp"} boogie_si_record_i8($i14);
    goto corral_source_split_13802;

  corral_source_split_13802:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_13803;

  corral_source_split_13803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_13811;

  corral_source_split_13811:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_13812;

  corral_source_split_13812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2164} $p18 := dev_get_drvdata($p3);
    goto corral_source_split_13816;

  corral_source_split_13816:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_13817;

  corral_source_split_13817:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_13818;

  corral_source_split_13818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 517);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(496, 1));
    goto corral_source_split_13838;

  corral_source_split_13838:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_13839;

  corral_source_split_13839:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 120)), $mul.ref(16, 1));
    goto corral_source_split_13840;

  corral_source_split_13840:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_13841;

  corral_source_split_13841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} ldv_module_put_26($p39);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_13842;

  corral_source_split_13842:
    assume {:verifier.code 0} true;
    $i8 := $i35;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13805;

  corral_source_split_13805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2163} device_unlock($p3);
    goto corral_source_split_13806;

  corral_source_split_13806:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i8, $sub.i32(0, 517));
    goto corral_source_split_13807;

  corral_source_split_13807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i40 == 1);
    goto corral_source_split_13851;

  corral_source_split_13851:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i8, 0);
    goto corral_source_split_13852;

  corral_source_split_13852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb32:
    assume $i45 == 1;
    goto corral_source_split_13854;

  corral_source_split_13854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} $p46 := dev_name($p3);
    goto corral_source_split_13855;

  corral_source_split_13855:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2848, 1));
    goto corral_source_split_13856;

  corral_source_split_13856:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_13857;

  corral_source_split_13857:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_13858;

  corral_source_split_13858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} dev_err.ref.ref.ref.i32($p49, .str.131, $p46, $i8);
    goto corral_source_split_13859;

  corral_source_split_13859:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i40 == 1;
    goto corral_source_split_13844;

  corral_source_split_13844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2174} $p41 := dev_name($p3);
    goto corral_source_split_13845;

  corral_source_split_13845:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2848, 1));
    goto corral_source_split_13846;

  corral_source_split_13846:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_13847;

  corral_source_split_13847:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_13848;

  corral_source_split_13848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} _dev_info.ref.ref.ref($p44, .str.130, $p41);
    goto corral_source_split_13849;

  corral_source_split_13849:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 19);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_13836;

  corral_source_split_13836:
    assume {:verifier.code 0} true;
    $i35 := $i28;
    goto $bb28;

  $bb18:
    assume $i23 == 1;
    goto corral_source_split_13824;

  corral_source_split_13824:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p18);
    goto corral_source_split_13825;

  corral_source_split_13825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} $i27 := register_fimc_entity($p0, $p26);
    call {:si_unique_call 2168} {:cexpr "ret"} boogie_si_record_i32($i27);
    goto corral_source_split_13826;

  corral_source_split_13826:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb25;

  $bb16:
    assume $i22 == 1;
    goto corral_source_split_13820;

  corral_source_split_13820:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p18);
    goto corral_source_split_13821;

  corral_source_split_13821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} $i34 := register_fimc_is_entity($p0, $p33);
    call {:si_unique_call 2166} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_13822;

  corral_source_split_13822:
    assume {:verifier.code 0} true;
    $i28 := $i34;
    goto $bb25;

  $bb14:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i24 == 1);
    goto corral_source_split_13828;

  corral_source_split_13828:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p18);
    goto corral_source_split_13829;

  corral_source_split_13829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2169} $i30 := register_fimc_lite_entity($p0, $p29);
    call {:si_unique_call 2170} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_13830;

  corral_source_split_13830:
    assume {:verifier.code 0} true;
    $i28 := $i30;
    goto $bb25;

  $bb21:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb20;

  $bb23:
    assume $i25 == 1;
    goto corral_source_split_13832;

  corral_source_split_13832:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p18);
    goto corral_source_split_13833;

  corral_source_split_13833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} $i32 := register_csis_entity($p0, $p1, $p31);
    call {:si_unique_call 2172} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_13834;

  corral_source_split_13834:
    assume {:verifier.code 0} true;
    $i28 := $i32;
    goto $bb25;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_13814;

  corral_source_split_13814:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 517);
    goto $bb3;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_13809;

  corral_source_split_13809:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_13795;

  corral_source_split_13795:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 517);
    goto $bb3;
}



const put_device: ref;

axiom put_device == $sub.ref(0, 741362);

procedure put_device($p0: ref);
  free requires assertsPassed;



implementation put_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13861;

  corral_source_split_13861:
    assume {:verifier.code 0} true;
    return;
}



const device_lock: ref;

axiom device_lock == $sub.ref(0, 742394);

procedure device_lock($p0: ref);
  free requires assertsPassed;



implementation device_lock($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13863;

  corral_source_split_13863:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(328, 1));
    goto corral_source_split_13864;

  corral_source_split_13864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} mutex_lock_nested($p1, 0);
    goto corral_source_split_13865;

  corral_source_split_13865:
    assume {:verifier.code 0} true;
    return;
}



const ldv_try_module_get_25: ref;

axiom ldv_try_module_get_25 == $sub.ref(0, 743426);

procedure ldv_try_module_get_25($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.36;



implementation ldv_try_module_get_25($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13867;

  corral_source_split_13867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 2180} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_13868;

  corral_source_split_13868:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_13869;

  corral_source_split_13869:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const register_fimc_entity: ref;

axiom register_fimc_entity == $sub.ref(0, 744458);

procedure register_fimc_entity($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation register_fimc_entity($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i5: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i1;
  var $p57: ref;
  var $i58: i8;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i25: i32;
  var vslice_dummy_var_134: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13871;

  corral_source_split_13871:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 5568)), $mul.ref(272, 1));
    goto corral_source_split_13872;

  corral_source_split_13872:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_13873;

  corral_source_split_13873:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 3);
    goto corral_source_split_13874;

  corral_source_split_13874:
    assume {:verifier.code 0} true;
    $i5 := 1;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_13884;

  corral_source_split_13884:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 5568)), $mul.ref(272, 1));
    goto corral_source_split_13885;

  corral_source_split_13885:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_13886;

  corral_source_split_13886:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_13887;

  corral_source_split_13887:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref($i8, 8));
    goto corral_source_split_13888;

  corral_source_split_13888:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_13889;

  corral_source_split_13889:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_13890;

  corral_source_split_13890:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_13891;

  corral_source_split_13891:
    assume {:verifier.code 0} true;
    $i5 := $i13;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_13876;

  corral_source_split_13876:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i5);
    call {:si_unique_call 2181} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i14);
    goto corral_source_split_13877;

  corral_source_split_13877:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_13878;

  corral_source_split_13878:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_13879;

  corral_source_split_13879:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_13880;

  corral_source_split_13880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 2183} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_13881;

  corral_source_split_13881:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_13882;

  corral_source_split_13882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i14, 0);
    goto corral_source_split_13896;

  corral_source_split_13896:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_13897;

  corral_source_split_13897:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_13898;

  corral_source_split_13898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 2186} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_13899;

  corral_source_split_13899:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_13900;

  corral_source_split_13900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1));
    $p28 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(216, 1));
    goto corral_source_split_13906;

  corral_source_split_13906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 4096);
    goto corral_source_split_13907;

  corral_source_split_13907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2187} $p29 := fimc_md_pipeline_create($p0);
    goto corral_source_split_13908;

  corral_source_split_13908:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_13909;

  corral_source_split_13909:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_13910;

  corral_source_split_13910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p29);
    goto corral_source_split_13914;

  corral_source_split_13914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} v4l2_set_subdev_hostdata($p27, $p32);
    goto corral_source_split_13915;

  corral_source_split_13915:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2656, 1));
    goto corral_source_split_13916;

  corral_source_split_13916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} $i34 := v4l2_device_register_subdev($p33, $p27);
    call {:si_unique_call 2190} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_13917;

  corral_source_split_13917:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_13918;

  corral_source_split_13918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    goto corral_source_split_13926;

  corral_source_split_13926:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(104, 1));
    goto corral_source_split_13927;

  corral_source_split_13927:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_13928;

  corral_source_split_13928:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 5568)), $mul.ref(272, 1));
    goto corral_source_split_13929;

  corral_source_split_13929:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_13930;

  corral_source_split_13930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2191} vslice_dummy_var_134 := printk.ref.ref.i32.i32(.str.133, $p61, $i63, $i34);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i25 := $i34;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_13904;

  corral_source_split_13904:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_13920;

  corral_source_split_13920:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(464, 1));
    goto corral_source_split_13921;

  corral_source_split_13921:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_13922;

  corral_source_split_13922:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_13923;

  corral_source_split_13923:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_13924;

  corral_source_split_13924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 5568)), $mul.ref(272, 1));
    goto corral_source_split_13945;

  corral_source_split_13945:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_13946;

  corral_source_split_13946:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_13947;

  corral_source_split_13947:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref($i50, 8));
    goto corral_source_split_13948;

  corral_source_split_13948:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $p1);
    goto corral_source_split_13949;

  corral_source_split_13949:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(3120, 1));
    goto corral_source_split_13950;

  corral_source_split_13950:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_13951;

  corral_source_split_13951:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i8.i1($i54);
    goto corral_source_split_13952;

  corral_source_split_13952:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(3284, 1));
    goto corral_source_split_13953;

  corral_source_split_13953:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i8($i55);
    goto corral_source_split_13954;

  corral_source_split_13954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, $i58);
    goto corral_source_split_13955;

  corral_source_split_13955:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i39 == 1;
    goto corral_source_split_13932;

  corral_source_split_13932:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 5568)), $mul.ref(232, 1));
    goto corral_source_split_13933;

  corral_source_split_13933:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_13934;

  corral_source_split_13934:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_13935;

  corral_source_split_13935:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_13936;

  corral_source_split_13936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb18;

  $bb19:
    assume $i43 == 1;
    goto corral_source_split_13938;

  corral_source_split_13938:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 5568)), $mul.ref(232, 1));
    goto corral_source_split_13939;

  corral_source_split_13939:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_13940;

  corral_source_split_13940:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_13941;

  corral_source_split_13941:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(464, 1));
    goto corral_source_split_13942;

  corral_source_split_13942:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, $p46);
    goto corral_source_split_13943;

  corral_source_split_13943:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_13912;

  corral_source_split_13912:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 12);
    goto $bb9;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_13902;

  corral_source_split_13902:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 16);
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_13893;

  corral_source_split_13893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} warn_slowpath_null(.str.132, 503);
    goto corral_source_split_13894;

  corral_source_split_13894:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const register_fimc_lite_entity: ref;

axiom register_fimc_lite_entity == $sub.ref(0, 745490);

procedure register_fimc_lite_entity($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation register_fimc_lite_entity($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i5: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i25: i32;
  var vslice_dummy_var_135: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13957;

  corral_source_split_13957:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4048)), $mul.ref(2712, 1));
    goto corral_source_split_13958;

  corral_source_split_13958:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_13959;

  corral_source_split_13959:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 2);
    goto corral_source_split_13960;

  corral_source_split_13960:
    assume {:verifier.code 0} true;
    $i5 := 1;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_13970;

  corral_source_split_13970:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 4048)), $mul.ref(2712, 1));
    goto corral_source_split_13971;

  corral_source_split_13971:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_13972;

  corral_source_split_13972:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_13973;

  corral_source_split_13973:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(392, 1)), $mul.ref($i8, 8));
    goto corral_source_split_13974;

  corral_source_split_13974:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_13975;

  corral_source_split_13975:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_13976;

  corral_source_split_13976:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_13977;

  corral_source_split_13977:
    assume {:verifier.code 0} true;
    $i5 := $i13;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_13962;

  corral_source_split_13962:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i5);
    call {:si_unique_call 2192} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i14);
    goto corral_source_split_13963;

  corral_source_split_13963:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_13964;

  corral_source_split_13964:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_13965;

  corral_source_split_13965:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_13966;

  corral_source_split_13966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2193} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 2194} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_13967;

  corral_source_split_13967:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_13968;

  corral_source_split_13968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i14, 0);
    goto corral_source_split_13982;

  corral_source_split_13982:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_13983;

  corral_source_split_13983:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_13984;

  corral_source_split_13984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 2197} {:cexpr "tmp___0"} boogie_si_record_i64($i23);
    goto corral_source_split_13985;

  corral_source_split_13985:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_13986;

  corral_source_split_13986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 4048)), $mul.ref(2056, 1));
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 4048)), $mul.ref(2056, 1)), $mul.ref(216, 1));
    goto corral_source_split_13992;

  corral_source_split_13992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 8192);
    goto corral_source_split_13993;

  corral_source_split_13993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2198} $p28 := fimc_md_pipeline_create($p0);
    goto corral_source_split_13994;

  corral_source_split_13994:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_13995;

  corral_source_split_13995:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_13996;

  corral_source_split_13996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p28);
    goto corral_source_split_14000;

  corral_source_split_14000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2199} v4l2_set_subdev_hostdata($p26, $p31);
    goto corral_source_split_14001;

  corral_source_split_14001:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2656, 1));
    goto corral_source_split_14002;

  corral_source_split_14002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} $i33 := v4l2_device_register_subdev($p32, $p26);
    call {:si_unique_call 2201} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_14003;

  corral_source_split_14003:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_14004;

  corral_source_split_14004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    goto corral_source_split_14013;

  corral_source_split_14013:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(104, 1));
    goto corral_source_split_14014;

  corral_source_split_14014:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_14015;

  corral_source_split_14015:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 4048)), $mul.ref(2712, 1));
    goto corral_source_split_14016;

  corral_source_split_14016:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_14017;

  corral_source_split_14017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2202} vslice_dummy_var_135 := printk.ref.ref.i32(.str.134, $p42, $i44);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i25 := $i33;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_13990;

  corral_source_split_13990:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_14006;

  corral_source_split_14006:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 4048)), $mul.ref(2712, 1));
    goto corral_source_split_14007;

  corral_source_split_14007:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_14008;

  corral_source_split_14008:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_14009;

  corral_source_split_14009:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(392, 1)), $mul.ref($i37, 8));
    goto corral_source_split_14010;

  corral_source_split_14010:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p1);
    goto corral_source_split_14011;

  corral_source_split_14011:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_13998;

  corral_source_split_13998:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 12);
    goto $bb9;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_13988;

  corral_source_split_13988:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 16);
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_13979;

  corral_source_split_13979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} warn_slowpath_null(.str.132, 476);
    goto corral_source_split_13980;

  corral_source_split_13980:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const register_csis_entity: ref;

axiom register_csis_entity == $sub.ref(0, 746522);

procedure register_csis_entity($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr;



implementation register_csis_entity($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i9: i32;
  var $i14: i1;
  var $i16: i1;
  var $i15: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i29: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i64;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $i28: i32;
  var vslice_dummy_var_136: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14019;

  corral_source_split_14019:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1240, 1));
    goto corral_source_split_14020;

  corral_source_split_14020:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_14021;

  corral_source_split_14021:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_14022;

  corral_source_split_14022:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_14023;

  corral_source_split_14023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_14028;

  corral_source_split_14028:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 1480)), $mul.ref(8, 1));
    goto corral_source_split_14029;

  corral_source_split_14029:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 2205} {:cexpr "_max2"} boogie_si_record_i32($i11);
    goto corral_source_split_14030;

  corral_source_split_14030:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32(0, $i11);
    goto corral_source_split_14031;

  corral_source_split_14031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_14038;

  corral_source_split_14038:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i9 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14033;

  corral_source_split_14033:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i9, 0);
    goto corral_source_split_14034;

  corral_source_split_14034:
    assume {:verifier.code 0} true;
    $i15 := 1;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i14 == 1);
    goto corral_source_split_14048;

  corral_source_split_14048:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i9, 1);
    goto corral_source_split_14049;

  corral_source_split_14049:
    assume {:verifier.code 0} true;
    $i15 := $i16;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_14040;

  corral_source_split_14040:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i15);
    call {:si_unique_call 2206} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i17);
    goto corral_source_split_14041;

  corral_source_split_14041:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_14042;

  corral_source_split_14042:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_14043;

  corral_source_split_14043:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_14044;

  corral_source_split_14044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2207} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 2208} {:cexpr "tmp___0"} boogie_si_record_i64($i21);
    goto corral_source_split_14045;

  corral_source_split_14045:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_14046;

  corral_source_split_14046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i17, 0);
    goto corral_source_split_14054;

  corral_source_split_14054:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_14055;

  corral_source_split_14055:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_14056;

  corral_source_split_14056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 2211} {:cexpr "tmp___1"} boogie_si_record_i64($i26);
    goto corral_source_split_14057;

  corral_source_split_14057:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_14058;

  corral_source_split_14058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i9);
    goto corral_source_split_14064;

  corral_source_split_14064:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(0, 1)), $mul.ref($i29, 16)), $mul.ref(0, 1));
    goto corral_source_split_14065;

  corral_source_split_14065:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_14066;

  corral_source_split_14066:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_14067;

  corral_source_split_14067:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_14068;

  corral_source_split_14068:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i32($i35);
    call {:si_unique_call 2212} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i36);
    goto corral_source_split_14069;

  corral_source_split_14069:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_14070;

  corral_source_split_14070:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i32($i37);
    goto corral_source_split_14071;

  corral_source_split_14071:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    goto corral_source_split_14072;

  corral_source_split_14072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 2214} {:cexpr "tmp___2"} boogie_si_record_i64($i40);
    goto corral_source_split_14073;

  corral_source_split_14073:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_14074;

  corral_source_split_14074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i36, 0);
    goto corral_source_split_14079;

  corral_source_split_14079:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    goto corral_source_split_14080;

  corral_source_split_14080:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_14081;

  corral_source_split_14081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2216} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 2217} {:cexpr "tmp___3"} boogie_si_record_i64($i45);
    goto corral_source_split_14082;

  corral_source_split_14082:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_14083;

  corral_source_split_14083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 304)), $mul.ref(216, 1));
    goto corral_source_split_14087;

  corral_source_split_14087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, 2048);
    goto corral_source_split_14088;

  corral_source_split_14088:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2656, 1));
    goto corral_source_split_14089;

  corral_source_split_14089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} $i49 := v4l2_device_register_subdev($p48, $p2);
    call {:si_unique_call 2219} {:cexpr "ret"} boogie_si_record_i32($i49);
    goto corral_source_split_14090;

  corral_source_split_14090:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_14091;

  corral_source_split_14091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i50 == 1);
    goto corral_source_split_14098;

  corral_source_split_14098:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(104, 1));
    goto corral_source_split_14099;

  corral_source_split_14099:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_14100;

  corral_source_split_14100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} vslice_dummy_var_136 := printk.ref.ref.i32.i32(.str.135, $p57, $i9, $i49);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i28 := $i49;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_14062;

  corral_source_split_14062:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb23:
    assume $i50 == 1;
    goto corral_source_split_14093;

  corral_source_split_14093:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i9);
    goto corral_source_split_14094;

  corral_source_split_14094:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(0, 1)), $mul.ref($i51, 16)), $mul.ref(0, 1));
    goto corral_source_split_14095;

  corral_source_split_14095:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, $p2);
    goto corral_source_split_14096;

  corral_source_split_14096:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_14085;

  corral_source_split_14085:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 16);
    goto $bb15;

  $bb17:
    assume $i41 == 1;
    goto corral_source_split_14076;

  corral_source_split_14076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} warn_slowpath_null(.str.132, 540);
    goto corral_source_split_14077;

  corral_source_split_14077:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume $i27 == 1;
    goto corral_source_split_14060;

  corral_source_split_14060:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 2);
    goto $bb15;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_14051;

  corral_source_split_14051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2209} warn_slowpath_null(.str.132, 537);
    goto corral_source_split_14052;

  corral_source_split_14052:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb8;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_14036;

  corral_source_split_14036:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_14025;

  corral_source_split_14025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2203} $i8 := __of_get_csis_id($p5);
    call {:si_unique_call 2204} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_14026;

  corral_source_split_14026:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const register_fimc_is_entity: ref;

axiom register_fimc_is_entity == $sub.ref(0, 747554);

procedure register_fimc_is_entity($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation register_fimc_is_entity($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i7: i32;
  var vslice_dummy_var_137: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14102;

  corral_source_split_14102:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 12320)), $mul.ref(168, 1)), $mul.ref(16, 1));
    goto corral_source_split_14103;

  corral_source_split_14103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2221} $p4 := fimc_md_pipeline_create($p0);
    goto corral_source_split_14104;

  corral_source_split_14104:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_14105;

  corral_source_split_14105:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_14106;

  corral_source_split_14106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p4);
    goto corral_source_split_14112;

  corral_source_split_14112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} v4l2_set_subdev_hostdata($p3, $p8);
    goto corral_source_split_14113;

  corral_source_split_14113:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2656, 1));
    goto corral_source_split_14114;

  corral_source_split_14114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2223} $i10 := v4l2_device_register_subdev($p9, $p3);
    call {:si_unique_call 2224} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_14115;

  corral_source_split_14115:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_14116;

  corral_source_split_14116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(448, 1));
    goto corral_source_split_14123;

  corral_source_split_14123:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p1);
    goto corral_source_split_14124;

  corral_source_split_14124:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14110;

  corral_source_split_14110:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_14118;

  corral_source_split_14118:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(104, 1));
    goto corral_source_split_14119;

  corral_source_split_14119:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_14120;

  corral_source_split_14120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2225} vslice_dummy_var_137 := printk.ref.ref.i32(.str.138, $p14, $i10);
    goto corral_source_split_14121;

  corral_source_split_14121:
    assume {:verifier.code 0} true;
    $i7 := $i10;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_14108;

  corral_source_split_14108:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;
}



const ldv_module_put_26: ref;

axiom ldv_module_put_26 == $sub.ref(0, 748586);

procedure ldv_module_put_26($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_module_put_26($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14126;

  corral_source_split_14126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2226} ldv_module_put($p0);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_14127;

  corral_source_split_14127:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const device_unlock: ref;

axiom device_unlock == $sub.ref(0, 749618);

procedure device_unlock($p0: ref);
  free requires assertsPassed;



implementation device_unlock($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14129;

  corral_source_split_14129:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(328, 1));
    goto corral_source_split_14130;

  corral_source_split_14130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2227} mutex_unlock($p1);
    goto corral_source_split_14131;

  corral_source_split_14131:
    assume {:verifier.code 0} true;
    return;
}



const ldv_module_put: ref;

axiom ldv_module_put == $sub.ref(0, 750650);

procedure ldv_module_put($p0: ref);
  free requires assertsPassed;
  modifies $M.36, assertsPassed;



implementation ldv_module_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14133;

  corral_source_split_14133:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_14134;

  corral_source_split_14134:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_14135;

  corral_source_split_14135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_14137;

  corral_source_split_14137:
    assume {:verifier.code 0} true;
    $i3 := $M.36;
    goto corral_source_split_14138;

  corral_source_split_14138:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 1);
    goto corral_source_split_14139;

  corral_source_split_14139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $M.36;
    goto corral_source_split_14144;

  corral_source_split_14144:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_14145;

  corral_source_split_14145:
    assume {:verifier.code 0} true;
    $M.36 := $i6;
    call {:si_unique_call 2229} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_14146;

  corral_source_split_14146:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_14141;

  corral_source_split_14141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} ldv_error();
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_14142;

  corral_source_split_14142:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_301:
    assume !assertsPassed;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 751682);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14148;

  corral_source_split_14148:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2230} __VERIFIER_error();
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_14150;

  corral_source_split_14150:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;
}



const fimc_md_pipeline_create: ref;

axiom fimc_md_pipeline_create == $sub.ref(0, 752714);

procedure fimc_md_pipeline_create($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fimc_md_pipeline_create($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14152;

  corral_source_split_14152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2231} $p1 := kzalloc(72, 208);
    goto corral_source_split_14153;

  corral_source_split_14153:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_14154;

  corral_source_split_14154:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_14155;

  corral_source_split_14155:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_14156;

  corral_source_split_14156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_14162;

  corral_source_split_14162:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3216)), $mul.ref(3200, 1));
    goto corral_source_split_14163;

  corral_source_split_14163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2232} list_add_tail($p6, $p7);
    goto corral_source_split_14164;

  corral_source_split_14164:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_14165;

  corral_source_split_14165:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, fimc_pipeline_ops);
    goto corral_source_split_14166;

  corral_source_split_14166:
    assume {:verifier.code 0} true;
    goto corral_source_split_14167;

  corral_source_split_14167:
    assume {:verifier.code 0} true;
    $p5 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14160;

  corral_source_split_14160:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_14158;

  corral_source_split_14158:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;
}



const v4l2_device_register_subdev: ref;

axiom v4l2_device_register_subdev == $sub.ref(0, 753746);

procedure v4l2_device_register_subdev($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation v4l2_device_register_subdev($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14169;

  corral_source_split_14169:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2233} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2234} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_14170;

  corral_source_split_14170:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __of_get_csis_id: ref;

axiom __of_get_csis_id == $sub.ref(0, 754778);

procedure __of_get_csis_id($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation __of_get_csis_id($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i7: i32;
  var $i8: i32;
  var $i5: i32;
  var vslice_dummy_var_138: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_14172;

  corral_source_split_14172:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p1, 0);
    goto corral_source_split_14173;

  corral_source_split_14173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} $p2 := of_get_child_by_name($p0, .str.136);
    goto corral_source_split_14174;

  corral_source_split_14174:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_14175;

  corral_source_split_14175:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_14176;

  corral_source_split_14176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2237} vslice_dummy_var_138 := of_property_read_u32($p2, .str.137, $p1);
    goto corral_source_split_14182;

  corral_source_split_14182:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p1);
    goto corral_source_split_14183;

  corral_source_split_14183:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i7, 3);
    goto corral_source_split_14184;

  corral_source_split_14184:
    assume {:verifier.code 0} true;
    $i5 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14180;

  corral_source_split_14180:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_14178;

  corral_source_split_14178:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const ldv_try_module_get: ref;

axiom ldv_try_module_get == $sub.ref(0, 755810);

procedure ldv_try_module_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.36;



implementation ldv_try_module_get($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14186;

  corral_source_split_14186:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_14187;

  corral_source_split_14187:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_14188;

  corral_source_split_14188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_14201;

  corral_source_split_14201:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_14190;

  corral_source_split_14190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} $i3 := ldv_undef_int();
    call {:si_unique_call 2239} {:cexpr "module_get_succeeded"} boogie_si_record_i32($i3);
    goto corral_source_split_14191;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_14192;

  corral_source_split_14192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    goto corral_source_split_14199;

  corral_source_split_14199:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_14194;

  corral_source_split_14194:
    assume {:verifier.code 0} true;
    $i5 := $M.36;
    goto corral_source_split_14195;

  corral_source_split_14195:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_14196;

  corral_source_split_14196:
    assume {:verifier.code 0} true;
    $M.36 := $i6;
    call {:si_unique_call 2240} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_14197;

  corral_source_split_14197:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb5;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 756842);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14203;

  corral_source_split_14203:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2241} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2242} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2243} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_14204;

  corral_source_split_14204:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const devm_pinctrl_get: ref;

axiom devm_pinctrl_get == $sub.ref(0, 757874);

procedure devm_pinctrl_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devm_pinctrl_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14206;

  corral_source_split_14206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2244} $p1 := external_alloc();
    goto corral_source_split_14207;

  corral_source_split_14207:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_14208;

  corral_source_split_14208:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pinctrl_lookup_state: ref;

axiom pinctrl_lookup_state == $sub.ref(0, 758906);

procedure pinctrl_lookup_state($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pinctrl_lookup_state($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14210;

  corral_source_split_14210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2245} $p2 := external_alloc();
    goto corral_source_split_14211;

  corral_source_split_14211:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_14212;

  corral_source_split_14212:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const of_device_is_available: ref;

axiom of_device_is_available == $sub.ref(0, 759938);

procedure of_device_is_available($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation of_device_is_available($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14214;

  corral_source_split_14214:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2246} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 2247} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_14215;

  corral_source_split_14215:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __fimc_md_modify_pipelines: ref;

axiom __fimc_md_modify_pipelines == $sub.ref(0, 760970);

procedure __fimc_md_modify_pipelines($p0: ref, $i1: i1) returns ($r: i32);



const media_entity_graph_walk_start: ref;

axiom media_entity_graph_walk_start == $sub.ref(0, 762002);

procedure media_entity_graph_walk_start($p0: ref, $p1: ref);



const __fimc_md_modify_pipeline: ref;

axiom __fimc_md_modify_pipeline == $sub.ref(0, 763034);

procedure __fimc_md_modify_pipeline($p0: ref, $i1: i1) returns ($r: i32);



const media_entity_graph_walk_next: ref;

axiom media_entity_graph_walk_next == $sub.ref(0, 764066);

procedure media_entity_graph_walk_next($p0: ref) returns ($r: ref);



const vdev_to_exynos_video_entity: ref;

axiom vdev_to_exynos_video_entity == $sub.ref(0, 765098);

procedure vdev_to_exynos_video_entity($p0: ref) returns ($r: ref);



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 766130);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_14217;

  corral_source_split_14217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2249} $p1 := calloc(1, $i0);
    goto corral_source_split_14218;

  corral_source_split_14218:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_14219;

  corral_source_split_14219:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_14220;

  corral_source_split_14220:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_14221;

  corral_source_split_14221:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2250} __VERIFIER_assume($i4);
    goto corral_source_split_14222;

  corral_source_split_14222:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 767162);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.37;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2251} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 2252} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_14224;

  corral_source_split_14224:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_14225;

  corral_source_split_14225:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_59 := $M.37;
    call {:si_unique_call 2253} cmdloc_dummy_var_60 := $memset.i8(cmdloc_dummy_var_59, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.37 := cmdloc_dummy_var_60;
    goto corral_source_split_14226;

  corral_source_split_14226:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const fimc_register_driver: ref;

axiom fimc_register_driver == $sub.ref(0, 768194);

procedure fimc_register_driver() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.39, $M.0, $CurrAddr;



implementation fimc_register_driver() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14228;

  corral_source_split_14228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} $i0 := ldv___platform_driver_register_5(fimc_driver, __this_module);
    call {:si_unique_call 2255} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_14229;

  corral_source_split_14229:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv___platform_driver_register_5: ref;

axiom ldv___platform_driver_register_5 == $sub.ref(0, 769226);

procedure ldv___platform_driver_register_5($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.39, $M.0, $CurrAddr;



implementation ldv___platform_driver_register_5($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14231;

  corral_source_split_14231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2256} $i2 := __platform_driver_register($p0, $p1);
    call {:si_unique_call 2257} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_14232;

  corral_source_split_14232:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 2258} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_14233;

  corral_source_split_14233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2259} ldv_platform_driver_init_1();
    goto corral_source_split_14234;

  corral_source_split_14234:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __platform_driver_register: ref;

axiom __platform_driver_register == $sub.ref(0, 770258);

procedure __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14236;

  corral_source_split_14236:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2260} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2261} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_14237;

  corral_source_split_14237:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_platform_driver_init_1: ref;

axiom ldv_platform_driver_init_1 == $sub.ref(0, 771290);

procedure ldv_platform_driver_init_1();
  free requires assertsPassed;
  modifies $M.39, $M.0, $CurrAddr;



implementation ldv_platform_driver_init_1()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14239;

  corral_source_split_14239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} $p0 := ldv_init_zalloc(1472);
    goto corral_source_split_14240;

  corral_source_split_14240:
    assume {:verifier.code 0} true;
    goto corral_source_split_14241;

  corral_source_split_14241:
    assume {:verifier.code 0} true;
    $M.39 := $p0;
    goto corral_source_split_14242;

  corral_source_split_14242:
    assume {:verifier.code 0} true;
    return;
}



const fimc_unregister_driver: ref;

axiom fimc_unregister_driver == $sub.ref(0, 772322);

procedure fimc_unregister_driver();
  free requires assertsPassed;
  modifies $M.38;



implementation fimc_unregister_driver()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14244;

  corral_source_split_14244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2263} ldv_platform_driver_unregister_6(fimc_driver);
    goto corral_source_split_14245;

  corral_source_split_14245:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_driver_unregister_6: ref;

axiom ldv_platform_driver_unregister_6 == $sub.ref(0, 773354);

procedure ldv_platform_driver_unregister_6($p0: ref);
  free requires assertsPassed;
  modifies $M.38;



implementation ldv_platform_driver_unregister_6($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14247;

  corral_source_split_14247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} platform_driver_unregister($p0);
    goto corral_source_split_14248;

  corral_source_split_14248:
    assume {:verifier.code 0} true;
    $M.38 := 0;
    call {:si_unique_call 2265} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_14249;

  corral_source_split_14249:
    assume {:verifier.code 0} true;
    return;
}



const platform_driver_unregister: ref;

axiom platform_driver_unregister == $sub.ref(0, 774386);

procedure platform_driver_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14251;

  corral_source_split_14251:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dev_pm_ops_16: ref;

axiom ldv_dev_pm_ops_16 == $sub.ref(0, 775418);

procedure ldv_dev_pm_ops_16();
  free requires assertsPassed;
  modifies $M.40, $M.0, $CurrAddr;



implementation ldv_dev_pm_ops_16()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14253;

  corral_source_split_14253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_14254;

  corral_source_split_14254:
    assume {:verifier.code 0} true;
    goto corral_source_split_14255;

  corral_source_split_14255:
    assume {:verifier.code 0} true;
    $M.40 := $p0;
    goto corral_source_split_14256;

  corral_source_split_14256:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_16: ref;

axiom ldv_main_exported_16 == $sub.ref(0, 776450);

procedure ldv_main_exported_16();
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.42, $M.41, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.0, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.29, $M.32, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation ldv_main_exported_16()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i32;
  var $i110: i1;
  var $i111: i32;
  var $i112: i32;
  var $i113: i32;
  var $i114: i1;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i1;
  var $i120: i32;
  var $i121: i32;
  var $i122: i1;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i1;
  var $i130: i32;
  var $i131: i32;
  var $i132: i1;
  var $i133: i32;
  var $i134: i1;
  var $i135: i32;
  var $i136: i32;
  var $i137: i1;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $i143: i32;
  var $i144: i1;
  var $i146: i32;
  var $i147: i32;
  var vslice_dummy_var_139: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14258;

  corral_source_split_14258:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2267} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2268} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2269} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 19);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 20);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, 21);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 21);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} ldv_stop();
    goto corral_source_split_14561;

  corral_source_split_14561:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i6 == 1;
    goto corral_source_split_14268;

  corral_source_split_14268:
    assume {:verifier.code 0} true;
    $i143 := $M.41;
    goto corral_source_split_14269;

  corral_source_split_14269:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 16);
    goto corral_source_split_14270;

  corral_source_split_14270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb176:
    assume $i144 == 1;
    goto corral_source_split_14554;

  corral_source_split_14554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2336} vslice_dummy_var_139 := ldv_complete_16();
    goto corral_source_split_14555;

  corral_source_split_14555:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 2337} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_14556;

  corral_source_split_14556:
    assume {:verifier.code 0} true;
    $i146 := $M.43;
    goto corral_source_split_14557;

  corral_source_split_14557:
    assume {:verifier.code 0} true;
    $i147 := $sub.i32($i146, 1);
    goto corral_source_split_14558;

  corral_source_split_14558:
    assume {:verifier.code 0} true;
    $M.43 := $i147;
    call {:si_unique_call 2338} {:cexpr "ref_cnt"} boogie_si_record_i32($i147);
    goto corral_source_split_14559;

  corral_source_split_14559:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb10:
    assume $i5 == 1;
    goto corral_source_split_14264;

  corral_source_split_14264:
    assume {:verifier.code 0} true;
    $i138 := $M.41;
    goto corral_source_split_14265;

  corral_source_split_14265:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 4);
    goto corral_source_split_14266;

  corral_source_split_14266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb170:
    assume $i139 == 1;
    goto corral_source_split_14545;

  corral_source_split_14545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2333} $i140 := ldv_suspend_noirq_16();
    goto corral_source_split_14546;

  corral_source_split_14546:
    assume {:verifier.code 0} true;
    $M.63 := $i140;
    call {:si_unique_call 2334} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i140);
    goto corral_source_split_14547;

  corral_source_split_14547:
    assume {:verifier.code 0} true;
    $i141 := $M.63;
    goto corral_source_split_14548;

  corral_source_split_14548:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 0);
    goto corral_source_split_14549;

  corral_source_split_14549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb172:
    assume $i142 == 1;
    goto corral_source_split_14551;

  corral_source_split_14551:
    assume {:verifier.code 0} true;
    $M.41 := 8;
    call {:si_unique_call 2335} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(8);
    goto corral_source_split_14552;

  corral_source_split_14552:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb8:
    assume $i4 == 1;
    goto corral_source_split_14260;

  corral_source_split_14260:
    assume {:verifier.code 0} true;
    $i133 := $M.41;
    goto corral_source_split_14261;

  corral_source_split_14261:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 9);
    goto corral_source_split_14262;

  corral_source_split_14262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb164:
    assume $i134 == 1;
    goto corral_source_split_14536;

  corral_source_split_14536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2330} $i135 := ldv_restore_noirq_16();
    goto corral_source_split_14537;

  corral_source_split_14537:
    assume {:verifier.code 0} true;
    $M.62 := $i135;
    call {:si_unique_call 2331} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i135);
    goto corral_source_split_14538;

  corral_source_split_14538:
    assume {:verifier.code 0} true;
    $i136 := $M.62;
    goto corral_source_split_14539;

  corral_source_split_14539:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 0);
    goto corral_source_split_14540;

  corral_source_split_14540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb166:
    assume $i137 == 1;
    goto corral_source_split_14542;

  corral_source_split_14542:
    assume {:verifier.code 0} true;
    $M.41 := 14;
    call {:si_unique_call 2332} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(14);
    goto corral_source_split_14543;

  corral_source_split_14543:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb6:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i0, 17);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i0, 18);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i8 == 1);
    goto corral_source_split_14280;

  corral_source_split_14280:
    assume {:verifier.code 0} true;
    $i128 := $M.41;
    goto corral_source_split_14281;

  corral_source_split_14281:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 5);
    goto corral_source_split_14282;

  corral_source_split_14282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb158:
    assume $i129 == 1;
    goto corral_source_split_14527;

  corral_source_split_14527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2327} $i130 := ldv_poweroff_late_16();
    goto corral_source_split_14528;

  corral_source_split_14528:
    assume {:verifier.code 0} true;
    $M.61 := $i130;
    call {:si_unique_call 2328} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i130);
    goto corral_source_split_14529;

  corral_source_split_14529:
    assume {:verifier.code 0} true;
    $i131 := $M.61;
    goto corral_source_split_14530;

  corral_source_split_14530:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 0);
    goto corral_source_split_14531;

  corral_source_split_14531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb160:
    assume $i132 == 1;
    goto corral_source_split_14533;

  corral_source_split_14533:
    assume {:verifier.code 0} true;
    $M.41 := 10;
    call {:si_unique_call 2329} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(10);
    goto corral_source_split_14534;

  corral_source_split_14534:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb17:
    assume $i8 == 1;
    goto corral_source_split_14276;

  corral_source_split_14276:
    assume {:verifier.code 0} true;
    $i123 := $M.41;
    goto corral_source_split_14277;

  corral_source_split_14277:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 5);
    goto corral_source_split_14278;

  corral_source_split_14278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb152:
    assume $i124 == 1;
    goto corral_source_split_14518;

  corral_source_split_14518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} $i125 := ldv_poweroff_noirq_16();
    goto corral_source_split_14519;

  corral_source_split_14519:
    assume {:verifier.code 0} true;
    $M.60 := $i125;
    call {:si_unique_call 2325} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i125);
    goto corral_source_split_14520;

  corral_source_split_14520:
    assume {:verifier.code 0} true;
    $i126 := $M.60;
    goto corral_source_split_14521;

  corral_source_split_14521:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 0);
    goto corral_source_split_14522;

  corral_source_split_14522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb154:
    assume $i127 == 1;
    goto corral_source_split_14524;

  corral_source_split_14524:
    assume {:verifier.code 0} true;
    $M.41 := 9;
    call {:si_unique_call 2326} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(9);
    goto corral_source_split_14525;

  corral_source_split_14525:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb15:
    assume $i7 == 1;
    goto corral_source_split_14272;

  corral_source_split_14272:
    assume {:verifier.code 0} true;
    $i118 := $M.41;
    goto corral_source_split_14273;

  corral_source_split_14273:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 11);
    goto corral_source_split_14274;

  corral_source_split_14274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb146:
    assume $i119 == 1;
    goto corral_source_split_14509;

  corral_source_split_14509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} $i120 := ldv_thaw_noirq_16();
    goto corral_source_split_14510;

  corral_source_split_14510:
    assume {:verifier.code 0} true;
    $M.59 := $i120;
    call {:si_unique_call 2322} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i120);
    goto corral_source_split_14511;

  corral_source_split_14511:
    assume {:verifier.code 0} true;
    $i121 := $M.59;
    goto corral_source_split_14512;

  corral_source_split_14512:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 0);
    goto corral_source_split_14513;

  corral_source_split_14513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb148:
    assume $i122 == 1;
    goto corral_source_split_14515;

  corral_source_split_14515:
    assume {:verifier.code 0} true;
    $M.41 := 15;
    call {:si_unique_call 2323} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(15);
    goto corral_source_split_14516;

  corral_source_split_14516:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i0, 13);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i0, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i0, 15);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i11 == 1);
    goto corral_source_split_14292;

  corral_source_split_14292:
    assume {:verifier.code 0} true;
    $i113 := $M.41;
    goto corral_source_split_14293;

  corral_source_split_14293:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 6);
    goto corral_source_split_14294;

  corral_source_split_14294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb140:
    assume $i114 == 1;
    goto corral_source_split_14500;

  corral_source_split_14500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2318} $i115 := ldv_freeze_late_16();
    goto corral_source_split_14501;

  corral_source_split_14501:
    assume {:verifier.code 0} true;
    $M.58 := $i115;
    call {:si_unique_call 2319} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i115);
    goto corral_source_split_14502;

  corral_source_split_14502:
    assume {:verifier.code 0} true;
    $i116 := $M.58;
    goto corral_source_split_14503;

  corral_source_split_14503:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 0);
    goto corral_source_split_14504;

  corral_source_split_14504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb142:
    assume $i117 == 1;
    goto corral_source_split_14506;

  corral_source_split_14506:
    assume {:verifier.code 0} true;
    $M.41 := 12;
    call {:si_unique_call 2320} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(12);
    goto corral_source_split_14507;

  corral_source_split_14507:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb23:
    assume $i11 == 1;
    goto corral_source_split_14288;

  corral_source_split_14288:
    assume {:verifier.code 0} true;
    $i106 := $M.41;
    goto corral_source_split_14289;

  corral_source_split_14289:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 1);
    goto corral_source_split_14290;

  corral_source_split_14290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb134:
    assume $i107 == 1;
    goto corral_source_split_14488;

  corral_source_split_14488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2314} $i108 := ldv_prepare_16();
    goto corral_source_split_14489;

  corral_source_split_14489:
    assume {:verifier.code 0} true;
    $M.57 := $i108;
    call {:si_unique_call 2315} {:cexpr "ldv_retval_9"} boogie_si_record_i32($i108);
    goto corral_source_split_14490;

  corral_source_split_14490:
    assume {:verifier.code 0} true;
    $i109 := $M.57;
    goto corral_source_split_14491;

  corral_source_split_14491:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 0);
    goto corral_source_split_14492;

  corral_source_split_14492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb136:
    assume $i110 == 1;
    goto corral_source_split_14494;

  corral_source_split_14494:
    assume {:verifier.code 0} true;
    $M.41 := 3;
    call {:si_unique_call 2316} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(3);
    goto corral_source_split_14495;

  corral_source_split_14495:
    assume {:verifier.code 0} true;
    $i111 := $M.43;
    goto corral_source_split_14496;

  corral_source_split_14496:
    assume {:verifier.code 0} true;
    $i112 := $add.i32($i111, 1);
    goto corral_source_split_14497;

  corral_source_split_14497:
    assume {:verifier.code 0} true;
    $M.43 := $i112;
    call {:si_unique_call 2317} {:cexpr "ref_cnt"} boogie_si_record_i32($i112);
    goto corral_source_split_14498;

  corral_source_split_14498:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb21:
    assume $i10 == 1;
    goto corral_source_split_14284;

  corral_source_split_14284:
    assume {:verifier.code 0} true;
    $i101 := $M.41;
    goto corral_source_split_14285;

  corral_source_split_14285:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 6);
    goto corral_source_split_14286;

  corral_source_split_14286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb128:
    assume $i102 == 1;
    goto corral_source_split_14479;

  corral_source_split_14479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2311} $i103 := ldv_freeze_noirq_16();
    goto corral_source_split_14480;

  corral_source_split_14480:
    assume {:verifier.code 0} true;
    $M.56 := $i103;
    call {:si_unique_call 2312} {:cexpr "ldv_retval_10"} boogie_si_record_i32($i103);
    goto corral_source_split_14481;

  corral_source_split_14481:
    assume {:verifier.code 0} true;
    $i104 := $M.56;
    goto corral_source_split_14482;

  corral_source_split_14482:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 0);
    goto corral_source_split_14483;

  corral_source_split_14483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb130:
    assume $i105 == 1;
    goto corral_source_split_14485;

  corral_source_split_14485:
    assume {:verifier.code 0} true;
    $M.41 := 11;
    call {:si_unique_call 2313} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(11);
    goto corral_source_split_14486;

  corral_source_split_14486:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb19:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i0, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i12 == 1);
    goto corral_source_split_14300;

  corral_source_split_14300:
    assume {:verifier.code 0} true;
    $i96 := $M.41;
    goto corral_source_split_14301;

  corral_source_split_14301:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 8);
    goto corral_source_split_14302;

  corral_source_split_14302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb122:
    assume $i97 == 1;
    goto corral_source_split_14470;

  corral_source_split_14470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} $i98 := ldv_resume_noirq_16();
    goto corral_source_split_14471;

  corral_source_split_14471:
    assume {:verifier.code 0} true;
    $M.55 := $i98;
    call {:si_unique_call 2309} {:cexpr "ldv_retval_11"} boogie_si_record_i32($i98);
    goto corral_source_split_14472;

  corral_source_split_14472:
    assume {:verifier.code 0} true;
    $i99 := $M.55;
    goto corral_source_split_14473;

  corral_source_split_14473:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 0);
    goto corral_source_split_14474;

  corral_source_split_14474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb124:
    assume $i100 == 1;
    goto corral_source_split_14476;

  corral_source_split_14476:
    assume {:verifier.code 0} true;
    $M.41 := 13;
    call {:si_unique_call 2310} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(13);
    goto corral_source_split_14477;

  corral_source_split_14477:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb25:
    assume $i12 == 1;
    goto corral_source_split_14296;

  corral_source_split_14296:
    assume {:verifier.code 0} true;
    $i91 := $M.41;
    goto corral_source_split_14297;

  corral_source_split_14297:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 12);
    goto corral_source_split_14298;

  corral_source_split_14298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb116:
    assume $i92 == 1;
    goto corral_source_split_14461;

  corral_source_split_14461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2305} $i93 := ldv_thaw_early_16();
    goto corral_source_split_14462;

  corral_source_split_14462:
    assume {:verifier.code 0} true;
    $M.54 := $i93;
    call {:si_unique_call 2306} {:cexpr "ldv_retval_12"} boogie_si_record_i32($i93);
    goto corral_source_split_14463;

  corral_source_split_14463:
    assume {:verifier.code 0} true;
    $i94 := $M.54;
    goto corral_source_split_14464;

  corral_source_split_14464:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 0);
    goto corral_source_split_14465;

  corral_source_split_14465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb118:
    assume $i95 == 1;
    goto corral_source_split_14467;

  corral_source_split_14467:
    assume {:verifier.code 0} true;
    $M.41 := 15;
    call {:si_unique_call 2307} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(15);
    goto corral_source_split_14468;

  corral_source_split_14468:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i0, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i0, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i0, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i0, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i16 == 1);
    goto corral_source_split_14312;

  corral_source_split_14312:
    assume {:verifier.code 0} true;
    $i86 := $M.41;
    goto corral_source_split_14313;

  corral_source_split_14313:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 7);
    goto corral_source_split_14314;

  corral_source_split_14314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb110:
    assume $i87 == 1;
    goto corral_source_split_14452;

  corral_source_split_14452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2302} $i88 := ldv_resume_early_16();
    goto corral_source_split_14453;

  corral_source_split_14453:
    assume {:verifier.code 0} true;
    $M.53 := $i88;
    call {:si_unique_call 2303} {:cexpr "ldv_retval_13"} boogie_si_record_i32($i88);
    goto corral_source_split_14454;

  corral_source_split_14454:
    assume {:verifier.code 0} true;
    $i89 := $M.53;
    goto corral_source_split_14455;

  corral_source_split_14455:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 0);
    goto corral_source_split_14456;

  corral_source_split_14456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb112:
    assume $i90 == 1;
    goto corral_source_split_14458;

  corral_source_split_14458:
    assume {:verifier.code 0} true;
    $M.41 := 13;
    call {:si_unique_call 2304} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(13);
    goto corral_source_split_14459;

  corral_source_split_14459:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb33:
    assume $i16 == 1;
    goto corral_source_split_14308;

  corral_source_split_14308:
    assume {:verifier.code 0} true;
    $i81 := $M.41;
    goto corral_source_split_14309;

  corral_source_split_14309:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 10);
    goto corral_source_split_14310;

  corral_source_split_14310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb104:
    assume $i82 == 1;
    goto corral_source_split_14443;

  corral_source_split_14443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2299} $i83 := ldv_restore_early_16();
    goto corral_source_split_14444;

  corral_source_split_14444:
    assume {:verifier.code 0} true;
    $M.52 := $i83;
    call {:si_unique_call 2300} {:cexpr "ldv_retval_14"} boogie_si_record_i32($i83);
    goto corral_source_split_14445;

  corral_source_split_14445:
    assume {:verifier.code 0} true;
    $i84 := $M.52;
    goto corral_source_split_14446;

  corral_source_split_14446:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 0);
    goto corral_source_split_14447;

  corral_source_split_14447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb106:
    assume $i85 == 1;
    goto corral_source_split_14449;

  corral_source_split_14449:
    assume {:verifier.code 0} true;
    $M.41 := 14;
    call {:si_unique_call 2301} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(14);
    goto corral_source_split_14450;

  corral_source_split_14450:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb31:
    assume $i15 == 1;
    goto corral_source_split_14304;

  corral_source_split_14304:
    assume {:verifier.code 0} true;
    $i76 := $M.41;
    goto corral_source_split_14305;

  corral_source_split_14305:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 4);
    goto corral_source_split_14306;

  corral_source_split_14306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb98:
    assume $i77 == 1;
    goto corral_source_split_14434;

  corral_source_split_14434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2296} $i78 := ldv_suspend_late_16();
    goto corral_source_split_14435;

  corral_source_split_14435:
    assume {:verifier.code 0} true;
    $M.51 := $i78;
    call {:si_unique_call 2297} {:cexpr "ldv_retval_15"} boogie_si_record_i32($i78);
    goto corral_source_split_14436;

  corral_source_split_14436:
    assume {:verifier.code 0} true;
    $i79 := $M.51;
    goto corral_source_split_14437;

  corral_source_split_14437:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 0);
    goto corral_source_split_14438;

  corral_source_split_14438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb100:
    assume $i80 == 1;
    goto corral_source_split_14440;

  corral_source_split_14440:
    assume {:verifier.code 0} true;
    $M.41 := 7;
    call {:si_unique_call 2298} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(7);
    goto corral_source_split_14441;

  corral_source_split_14441:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb29:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i0, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i0, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i18 == 1);
    goto corral_source_split_14324;

  corral_source_split_14324:
    assume {:verifier.code 0} true;
    $i70 := $M.41;
    goto corral_source_split_14325;

  corral_source_split_14325:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 13);
    goto corral_source_split_14326;

  corral_source_split_14326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb92:
    assume $i71 == 1;
    goto corral_source_split_14424;

  corral_source_split_14424:
    assume {:verifier.code 0} true;
    $p72 := $M.40;
    goto corral_source_split_14425;

  corral_source_split_14425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2293} $i73 := fimc_resume($p72);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_14426;

  corral_source_split_14426:
    assume {:verifier.code 0} true;
    $M.50 := $i73;
    call {:si_unique_call 2294} {:cexpr "ldv_retval_16"} boogie_si_record_i32($i73);
    goto corral_source_split_14427;

  corral_source_split_14427:
    assume {:verifier.code 0} true;
    $i74 := $M.50;
    goto corral_source_split_14428;

  corral_source_split_14428:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 0);
    goto corral_source_split_14429;

  corral_source_split_14429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb94:
    assume $i75 == 1;
    goto corral_source_split_14431;

  corral_source_split_14431:
    assume {:verifier.code 0} true;
    $M.41 := 16;
    call {:si_unique_call 2295} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(16);
    goto corral_source_split_14432;

  corral_source_split_14432:
    assume {:verifier.code 0} true;
    goto $bb96;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i18 == 1;
    goto corral_source_split_14320;

  corral_source_split_14320:
    assume {:verifier.code 0} true;
    $i64 := $M.41;
    goto corral_source_split_14321;

  corral_source_split_14321:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 3);
    goto corral_source_split_14322;

  corral_source_split_14322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb86:
    assume $i65 == 1;
    goto corral_source_split_14414;

  corral_source_split_14414:
    assume {:verifier.code 0} true;
    $p66 := $M.40;
    goto corral_source_split_14415;

  corral_source_split_14415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2290} $i67 := fimc_suspend($p66);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_14416;

  corral_source_split_14416:
    assume {:verifier.code 0} true;
    $M.49 := $i67;
    call {:si_unique_call 2291} {:cexpr "ldv_retval_17"} boogie_si_record_i32($i67);
    goto corral_source_split_14417;

  corral_source_split_14417:
    assume {:verifier.code 0} true;
    $i68 := $M.49;
    goto corral_source_split_14418;

  corral_source_split_14418:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_14419;

  corral_source_split_14419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb88:
    assume $i69 == 1;
    goto corral_source_split_14421;

  corral_source_split_14421:
    assume {:verifier.code 0} true;
    $M.41 := 6;
    call {:si_unique_call 2292} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(6);
    goto corral_source_split_14422;

  corral_source_split_14422:
    assume {:verifier.code 0} true;
    goto $bb90;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i17 == 1;
    goto corral_source_split_14316;

  corral_source_split_14316:
    assume {:verifier.code 0} true;
    $i58 := $M.41;
    goto corral_source_split_14317;

  corral_source_split_14317:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 3);
    goto corral_source_split_14318;

  corral_source_split_14318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb80:
    assume $i59 == 1;
    goto corral_source_split_14404;

  corral_source_split_14404:
    assume {:verifier.code 0} true;
    $p60 := $M.40;
    goto corral_source_split_14405;

  corral_source_split_14405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2287} $i61 := fimc_suspend($p60);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_14406;

  corral_source_split_14406:
    assume {:verifier.code 0} true;
    $M.48 := $i61;
    call {:si_unique_call 2288} {:cexpr "ldv_retval_18"} boogie_si_record_i32($i61);
    goto corral_source_split_14407;

  corral_source_split_14407:
    assume {:verifier.code 0} true;
    $i62 := $M.48;
    goto corral_source_split_14408;

  corral_source_split_14408:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 0);
    goto corral_source_split_14409;

  corral_source_split_14409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb82:
    assume $i63 == 1;
    goto corral_source_split_14411;

  corral_source_split_14411:
    assume {:verifier.code 0} true;
    $M.41 := 5;
    call {:si_unique_call 2289} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(5);
    goto corral_source_split_14412;

  corral_source_split_14412:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i21 == 1);
    goto corral_source_split_14336;

  corral_source_split_14336:
    assume {:verifier.code 0} true;
    $i50 := $M.41;
    goto corral_source_split_14337;

  corral_source_split_14337:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 1);
    goto corral_source_split_14338;

  corral_source_split_14338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb74:
    assume $i51 == 1;
    goto corral_source_split_14391;

  corral_source_split_14391:
    assume {:verifier.code 0} true;
    $p52 := $M.40;
    goto corral_source_split_14392;

  corral_source_split_14392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} $i53 := fimc_runtime_suspend($p52);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_14393;

  corral_source_split_14393:
    assume {:verifier.code 0} true;
    $M.47 := $i53;
    call {:si_unique_call 2284} {:cexpr "ldv_retval_19"} boogie_si_record_i32($i53);
    goto corral_source_split_14394;

  corral_source_split_14394:
    assume {:verifier.code 0} true;
    $i54 := $M.47;
    goto corral_source_split_14395;

  corral_source_split_14395:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_14396;

  corral_source_split_14396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb76:
    assume $i55 == 1;
    goto corral_source_split_14398;

  corral_source_split_14398:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 2285} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(2);
    goto corral_source_split_14399;

  corral_source_split_14399:
    assume {:verifier.code 0} true;
    $i56 := $M.43;
    goto corral_source_split_14400;

  corral_source_split_14400:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i56, 1);
    goto corral_source_split_14401;

  corral_source_split_14401:
    assume {:verifier.code 0} true;
    $M.43 := $i57;
    call {:si_unique_call 2286} {:cexpr "ref_cnt"} boogie_si_record_i32($i57);
    goto corral_source_split_14402;

  corral_source_split_14402:
    assume {:verifier.code 0} true;
    goto $bb78;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i21 == 1;
    goto corral_source_split_14332;

  corral_source_split_14332:
    assume {:verifier.code 0} true;
    $i44 := $M.41;
    goto corral_source_split_14333;

  corral_source_split_14333:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 14);
    goto corral_source_split_14334;

  corral_source_split_14334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb68:
    assume $i45 == 1;
    goto corral_source_split_14381;

  corral_source_split_14381:
    assume {:verifier.code 0} true;
    $p46 := $M.40;
    goto corral_source_split_14382;

  corral_source_split_14382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2280} $i47 := fimc_resume($p46);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_14383;

  corral_source_split_14383:
    assume {:verifier.code 0} true;
    $M.46 := $i47;
    call {:si_unique_call 2281} {:cexpr "ldv_retval_20"} boogie_si_record_i32($i47);
    goto corral_source_split_14384;

  corral_source_split_14384:
    assume {:verifier.code 0} true;
    $i48 := $M.46;
    goto corral_source_split_14385;

  corral_source_split_14385:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_14386;

  corral_source_split_14386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb70:
    assume $i49 == 1;
    goto corral_source_split_14388;

  corral_source_split_14388:
    assume {:verifier.code 0} true;
    $M.41 := 16;
    call {:si_unique_call 2282} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(16);
    goto corral_source_split_14389;

  corral_source_split_14389:
    assume {:verifier.code 0} true;
    goto $bb72;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i20 == 1;
    goto corral_source_split_14328;

  corral_source_split_14328:
    assume {:verifier.code 0} true;
    $i38 := $M.41;
    goto corral_source_split_14329;

  corral_source_split_14329:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 3);
    goto corral_source_split_14330;

  corral_source_split_14330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb62:
    assume $i39 == 1;
    goto corral_source_split_14371;

  corral_source_split_14371:
    assume {:verifier.code 0} true;
    $p40 := $M.40;
    goto corral_source_split_14372;

  corral_source_split_14372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} $i41 := fimc_suspend($p40);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_14373;

  corral_source_split_14373:
    assume {:verifier.code 0} true;
    $M.45 := $i41;
    call {:si_unique_call 2278} {:cexpr "ldv_retval_21"} boogie_si_record_i32($i41);
    goto corral_source_split_14374;

  corral_source_split_14374:
    assume {:verifier.code 0} true;
    $i42 := $M.45;
    goto corral_source_split_14375;

  corral_source_split_14375:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_14376;

  corral_source_split_14376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb64:
    assume $i43 == 1;
    goto corral_source_split_14378;

  corral_source_split_14378:
    assume {:verifier.code 0} true;
    $M.41 := 4;
    call {:si_unique_call 2279} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(4);
    goto corral_source_split_14379;

  corral_source_split_14379:
    assume {:verifier.code 0} true;
    goto $bb66;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i22 == 1);
    goto corral_source_split_14340;

  corral_source_split_14340:
    assume {:verifier.code 0} true;
    $i32 := $M.41;
    goto corral_source_split_14341;

  corral_source_split_14341:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 15);
    goto corral_source_split_14342;

  corral_source_split_14342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb56:
    assume $i33 == 1;
    goto corral_source_split_14361;

  corral_source_split_14361:
    assume {:verifier.code 0} true;
    $p34 := $M.40;
    goto corral_source_split_14362;

  corral_source_split_14362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} $i35 := fimc_resume($p34);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_14363;

  corral_source_split_14363:
    assume {:verifier.code 0} true;
    $M.44 := $i35;
    call {:si_unique_call 2275} {:cexpr "ldv_retval_22"} boogie_si_record_i32($i35);
    goto corral_source_split_14364;

  corral_source_split_14364:
    assume {:verifier.code 0} true;
    $i36 := $M.44;
    goto corral_source_split_14365;

  corral_source_split_14365:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_14366;

  corral_source_split_14366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb58:
    assume $i37 == 1;
    goto corral_source_split_14368;

  corral_source_split_14368:
    assume {:verifier.code 0} true;
    $M.41 := 16;
    call {:si_unique_call 2276} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(16);
    goto corral_source_split_14369;

  corral_source_split_14369:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb14;

  $bb47:
    assume $i23 == 1;
    goto corral_source_split_14344;

  corral_source_split_14344:
    assume {:verifier.code 0} true;
    $i24 := $M.41;
    goto corral_source_split_14345;

  corral_source_split_14345:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 2);
    goto corral_source_split_14346;

  corral_source_split_14346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb49:
    assume $i25 == 1;
    goto corral_source_split_14348;

  corral_source_split_14348:
    assume {:verifier.code 0} true;
    $p26 := $M.40;
    goto corral_source_split_14349;

  corral_source_split_14349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} $i27 := fimc_runtime_resume($p26);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_14350;

  corral_source_split_14350:
    assume {:verifier.code 0} true;
    $M.42 := $i27;
    call {:si_unique_call 2271} {:cexpr "ldv_retval_23"} boogie_si_record_i32($i27);
    goto corral_source_split_14351;

  corral_source_split_14351:
    assume {:verifier.code 0} true;
    $i28 := $M.42;
    goto corral_source_split_14352;

  corral_source_split_14352:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_14353;

  corral_source_split_14353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb51:
    assume $i29 == 1;
    goto corral_source_split_14355;

  corral_source_split_14355:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 2272} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_14356;

  corral_source_split_14356:
    assume {:verifier.code 0} true;
    $i30 := $M.43;
    goto corral_source_split_14357;

  corral_source_split_14357:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i30, 1);
    goto corral_source_split_14358;

  corral_source_split_14358:
    assume {:verifier.code 0} true;
    $M.43 := $i31;
    call {:si_unique_call 2273} {:cexpr "ref_cnt"} boogie_si_record_i32($i31);
    goto corral_source_split_14359;

  corral_source_split_14359:
    assume {:verifier.code 0} true;
    goto $bb53;

  SeqInstr_307:
    assume !assertsPassed;
    return;
}



const ldv_suspend_late_16: ref;

axiom ldv_suspend_late_16 == $sub.ref(0, 777482);

procedure ldv_suspend_late_16() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_late_16() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14563;

  corral_source_split_14563:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2340} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2341} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14564;

  corral_source_split_14564:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_early_16: ref;

axiom ldv_restore_early_16 == $sub.ref(0, 778514);

procedure ldv_restore_early_16() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_early_16() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14566;

  corral_source_split_14566:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2342} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2343} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14567;

  corral_source_split_14567:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_early_16: ref;

axiom ldv_resume_early_16 == $sub.ref(0, 779546);

procedure ldv_resume_early_16() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_early_16() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14569;

  corral_source_split_14569:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2344} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2345} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14570;

  corral_source_split_14570:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_early_16: ref;

axiom ldv_thaw_early_16 == $sub.ref(0, 780578);

procedure ldv_thaw_early_16() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_early_16() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14572;

  corral_source_split_14572:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2346} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2347} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14573;

  corral_source_split_14573:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_noirq_16: ref;

axiom ldv_resume_noirq_16 == $sub.ref(0, 781610);

procedure ldv_resume_noirq_16() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_noirq_16() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14575;

  corral_source_split_14575:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2348} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2349} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14576;

  corral_source_split_14576:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_noirq_16: ref;

axiom ldv_freeze_noirq_16 == $sub.ref(0, 782642);

procedure ldv_freeze_noirq_16() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_noirq_16() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14578;

  corral_source_split_14578:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2350} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2351} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14579;

  corral_source_split_14579:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_prepare_16: ref;

axiom ldv_prepare_16 == $sub.ref(0, 783674);

procedure ldv_prepare_16() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_prepare_16() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14581;

  corral_source_split_14581:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2352} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2353} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14582;

  corral_source_split_14582:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_late_16: ref;

axiom ldv_freeze_late_16 == $sub.ref(0, 784706);

procedure ldv_freeze_late_16() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_late_16() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14584;

  corral_source_split_14584:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2354} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2355} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14585;

  corral_source_split_14585:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_noirq_16: ref;

axiom ldv_thaw_noirq_16 == $sub.ref(0, 785738);

procedure ldv_thaw_noirq_16() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_noirq_16() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14587;

  corral_source_split_14587:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2356} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2357} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14588;

  corral_source_split_14588:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_noirq_16: ref;

axiom ldv_poweroff_noirq_16 == $sub.ref(0, 786770);

procedure ldv_poweroff_noirq_16() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_noirq_16() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14590;

  corral_source_split_14590:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2358} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2359} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14591;

  corral_source_split_14591:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_late_16: ref;

axiom ldv_poweroff_late_16 == $sub.ref(0, 787802);

procedure ldv_poweroff_late_16() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_late_16() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14593;

  corral_source_split_14593:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2360} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2361} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14594;

  corral_source_split_14594:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_noirq_16: ref;

axiom ldv_restore_noirq_16 == $sub.ref(0, 788834);

procedure ldv_restore_noirq_16() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_noirq_16() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14596;

  corral_source_split_14596:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2362} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2363} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14597;

  corral_source_split_14597:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_suspend_noirq_16: ref;

axiom ldv_suspend_noirq_16 == $sub.ref(0, 789866);

procedure ldv_suspend_noirq_16() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_noirq_16() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14599;

  corral_source_split_14599:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2364} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2365} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14600;

  corral_source_split_14600:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_complete_16: ref;

axiom ldv_complete_16 == $sub.ref(0, 790898);

procedure ldv_complete_16() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_complete_16() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14602;

  corral_source_split_14602:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2366} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2367} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_14603;

  corral_source_split_14603:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 791930);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14605;

  corral_source_split_14605:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_main_exported_17: ref;

axiom ldv_main_exported_17 == $sub.ref(0, 792962);

procedure ldv_main_exported_17();
  free requires assertsPassed;
  modifies $M.64, $M.0, $CurrAddr;



implementation ldv_main_exported_17()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var vslice_dummy_var_140: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14607;

  corral_source_split_14607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} $p0 := ldv_init_zalloc(208);
    goto corral_source_split_14608;

  corral_source_split_14608:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_14609;

  corral_source_split_14609:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2369} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2370} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 2371} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} ldv_stop();
    goto corral_source_split_14619;

  corral_source_split_14619:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i3 == 1;
    goto corral_source_split_14611;

  corral_source_split_14611:
    assume {:verifier.code 0} true;
    $i4 := $M.64;
    goto corral_source_split_14612;

  corral_source_split_14612:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_14613;

  corral_source_split_14613:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_14615;

  corral_source_split_14615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2372} vslice_dummy_var_140 := fimc_s_ctrl($p1);
    goto corral_source_split_14616;

  corral_source_split_14616:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 2373} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_14617;

  corral_source_split_14617:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_15: ref;

axiom ldv_main_exported_15 == $sub.ref(0, 793994);

procedure ldv_main_exported_15();
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.67, $M.65, $M.43, $M.68, $M.69, $CurrAddr;



implementation ldv_main_exported_15()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14621;

  corral_source_split_14621:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2375} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2376} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2377} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2393} ldv_stop();
    goto corral_source_split_14684;

  corral_source_split_14684:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_14623;

  corral_source_split_14623:
    assume {:verifier.code 0} true;
    $i12 := $M.65;
    goto corral_source_split_14624;

  corral_source_split_14624:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 2);
    goto corral_source_split_14625;

  corral_source_split_14625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i22 := $M.65;
    goto corral_source_split_14663;

  corral_source_split_14663:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 1);
    goto corral_source_split_14664;

  corral_source_split_14664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb25:
    assume $i23 == 1;
    goto corral_source_split_14666;

  corral_source_split_14666:
    assume {:verifier.code 0} true;
    $i24 := $M.68;
    goto corral_source_split_14667;

  corral_source_split_14667:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 1);
    goto corral_source_split_14668;

  corral_source_split_14668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb27;

  $bb28:
    assume $i25 == 1;
    goto corral_source_split_14670;

  corral_source_split_14670:
    assume {:verifier.code 0} true;
    $p26 := $M.66;
    goto corral_source_split_14671;

  corral_source_split_14671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2388} $i27 := fimc_remove($p26);
    goto corral_source_split_14672;

  corral_source_split_14672:
    assume {:verifier.code 0} true;
    $M.69 := $i27;
    call {:si_unique_call 2389} {:cexpr "ldv_retval_26"} boogie_si_record_i32($i27);
    goto corral_source_split_14673;

  corral_source_split_14673:
    assume {:verifier.code 0} true;
    $i28 := $M.69;
    goto corral_source_split_14674;

  corral_source_split_14674:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_14675;

  corral_source_split_14675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i29 == 1;
    goto corral_source_split_14677;

  corral_source_split_14677:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 2390} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_14678;

  corral_source_split_14678:
    assume {:verifier.code 0} true;
    $i30 := $M.43;
    goto corral_source_split_14679;

  corral_source_split_14679:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i30, 1);
    goto corral_source_split_14680;

  corral_source_split_14680:
    assume {:verifier.code 0} true;
    $M.43 := $i31;
    call {:si_unique_call 2391} {:cexpr "ref_cnt"} boogie_si_record_i32($i31);
    goto corral_source_split_14681;

  corral_source_split_14681:
    assume {:verifier.code 0} true;
    $M.68 := 0;
    call {:si_unique_call 2392} {:cexpr "probed_15"} boogie_si_record_i32(0);
    goto corral_source_split_14682;

  corral_source_split_14682:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb16:
    assume $i13 == 1;
    goto corral_source_split_14645;

  corral_source_split_14645:
    assume {:verifier.code 0} true;
    $i14 := $M.68;
    goto corral_source_split_14646;

  corral_source_split_14646:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_14647;

  corral_source_split_14647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb18;

  $bb19:
    assume $i15 == 1;
    goto corral_source_split_14649;

  corral_source_split_14649:
    assume {:verifier.code 0} true;
    $p16 := $M.66;
    goto corral_source_split_14650;

  corral_source_split_14650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} $i17 := fimc_remove($p16);
    goto corral_source_split_14651;

  corral_source_split_14651:
    assume {:verifier.code 0} true;
    $M.69 := $i17;
    call {:si_unique_call 2384} {:cexpr "ldv_retval_26"} boogie_si_record_i32($i17);
    goto corral_source_split_14652;

  corral_source_split_14652:
    assume {:verifier.code 0} true;
    $i18 := $M.69;
    goto corral_source_split_14653;

  corral_source_split_14653:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_14654;

  corral_source_split_14654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i19 == 1;
    goto corral_source_split_14656;

  corral_source_split_14656:
    assume {:verifier.code 0} true;
    $M.65 := 1;
    call {:si_unique_call 2385} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_14657;

  corral_source_split_14657:
    assume {:verifier.code 0} true;
    $i20 := $M.43;
    goto corral_source_split_14658;

  corral_source_split_14658:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i20, 1);
    goto corral_source_split_14659;

  corral_source_split_14659:
    assume {:verifier.code 0} true;
    $M.43 := $i21;
    call {:si_unique_call 2386} {:cexpr "ref_cnt"} boogie_si_record_i32($i21);
    goto corral_source_split_14660;

  corral_source_split_14660:
    assume {:verifier.code 0} true;
    $M.68 := 0;
    call {:si_unique_call 2387} {:cexpr "probed_15"} boogie_si_record_i32(0);
    goto corral_source_split_14661;

  corral_source_split_14661:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb6;

  $bb7:
    assume $i3 == 1;
    goto corral_source_split_14627;

  corral_source_split_14627:
    assume {:verifier.code 0} true;
    $i4 := $M.65;
    goto corral_source_split_14628;

  corral_source_split_14628:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_14629;

  corral_source_split_14629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i5 == 1;
    goto corral_source_split_14631;

  corral_source_split_14631:
    assume {:verifier.code 0} true;
    $p6 := $M.66;
    goto corral_source_split_14632;

  corral_source_split_14632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2378} $i7 := fimc_probe($p6);
    goto corral_source_split_14633;

  corral_source_split_14633:
    assume {:verifier.code 0} true;
    $M.67 := $i7;
    call {:si_unique_call 2379} {:cexpr "ldv_retval_27"} boogie_si_record_i32($i7);
    goto corral_source_split_14634;

  corral_source_split_14634:
    assume {:verifier.code 0} true;
    $i8 := $M.67;
    goto corral_source_split_14635;

  corral_source_split_14635:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_14636;

  corral_source_split_14636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_14638;

  corral_source_split_14638:
    assume {:verifier.code 0} true;
    $M.65 := 2;
    call {:si_unique_call 2380} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(2);
    goto corral_source_split_14639;

  corral_source_split_14639:
    assume {:verifier.code 0} true;
    $i10 := $M.43;
    goto corral_source_split_14640;

  corral_source_split_14640:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_14641;

  corral_source_split_14641:
    assume {:verifier.code 0} true;
    $M.43 := $i11;
    call {:si_unique_call 2381} {:cexpr "ref_cnt"} boogie_si_record_i32($i11);
    goto corral_source_split_14642;

  corral_source_split_14642:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 2382} {:cexpr "probed_15"} boogie_si_record_i32(1);
    goto corral_source_split_14643;

  corral_source_split_14643:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const ldv_initialize_vb2_ops_14: ref;

axiom ldv_initialize_vb2_ops_14 == $sub.ref(0, 795026);

procedure ldv_initialize_vb2_ops_14();
  free requires assertsPassed;
  modifies $M.70, $M.71, $M.0, $CurrAddr;



implementation ldv_initialize_vb2_ops_14()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14686;

  corral_source_split_14686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} $p0 := ldv_init_zalloc(848);
    goto corral_source_split_14687;

  corral_source_split_14687:
    assume {:verifier.code 0} true;
    goto corral_source_split_14688;

  corral_source_split_14688:
    assume {:verifier.code 0} true;
    $M.70 := $p0;
    goto corral_source_split_14689;

  corral_source_split_14689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2395} $p2 := ldv_init_zalloc(928);
    goto corral_source_split_14690;

  corral_source_split_14690:
    assume {:verifier.code 0} true;
    goto corral_source_split_14691;

  corral_source_split_14691:
    assume {:verifier.code 0} true;
    $M.71 := $p2;
    goto corral_source_split_14692;

  corral_source_split_14692:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_v4l2_file_operations_12: ref;

axiom ldv_initialize_v4l2_file_operations_12 == $sub.ref(0, 796058);

procedure ldv_initialize_v4l2_file_operations_12();
  free requires assertsPassed;
  modifies $M.72;



implementation ldv_initialize_v4l2_file_operations_12()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14694;

  corral_source_split_14694:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2396} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 2397} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_14695;

  corral_source_split_14695:
    assume {:verifier.code 0} true;
    goto corral_source_split_14696;

  corral_source_split_14696:
    assume {:verifier.code 0} true;
    $M.72 := $p0;
    goto corral_source_split_14697;

  corral_source_split_14697:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_v4l2_ioctl_ops_13: ref;

axiom ldv_initialize_v4l2_ioctl_ops_13 == $sub.ref(0, 797090);

procedure ldv_initialize_v4l2_ioctl_ops_13();
  free requires assertsPassed;
  modifies $M.73, $M.74, $M.75, $M.76, $M.0, $CurrAddr;



implementation ldv_initialize_v4l2_ioctl_ops_13()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14699;

  corral_source_split_14699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2398} $p0 := ldv_init_zalloc(208);
    goto corral_source_split_14700;

  corral_source_split_14700:
    assume {:verifier.code 0} true;
    goto corral_source_split_14701;

  corral_source_split_14701:
    assume {:verifier.code 0} true;
    $M.73 := $p0;
    goto corral_source_split_14702;

  corral_source_split_14702:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2399} $p2 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 2400} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p2);
    goto corral_source_split_14703;

  corral_source_split_14703:
    assume {:verifier.code 0} true;
    goto corral_source_split_14704;

  corral_source_split_14704:
    assume {:verifier.code 0} true;
    $M.74 := $p2;
    goto corral_source_split_14705;

  corral_source_split_14705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2401} $p4 := ldv_init_zalloc(88);
    goto corral_source_split_14706;

  corral_source_split_14706:
    assume {:verifier.code 0} true;
    goto corral_source_split_14707;

  corral_source_split_14707:
    assume {:verifier.code 0} true;
    $M.75 := $p4;
    goto corral_source_split_14708;

  corral_source_split_14708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2402} $p6 := ldv_init_zalloc(64);
    goto corral_source_split_14709;

  corral_source_split_14709:
    assume {:verifier.code 0} true;
    goto corral_source_split_14710;

  corral_source_split_14710:
    assume {:verifier.code 0} true;
    $M.76 := $p6;
    goto corral_source_split_14711;

  corral_source_split_14711:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_11: ref;

axiom ldv_main_exported_11 == $sub.ref(0, 798122);

procedure ldv_main_exported_11();
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.77, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.29, $M.32, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation ldv_main_exported_11()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14713;

  corral_source_split_14713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2403} $p0 := ldv_init_zalloc(1);
    goto corral_source_split_14714;

  corral_source_split_14714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2404} $p1 := ldv_init_zalloc(1);
    goto corral_source_split_14715;

  corral_source_split_14715:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2405} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2406} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 2407} {:cexpr "tmp___1"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2412} ldv_stop();
    goto corral_source_split_14733;

  corral_source_split_14733:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_14717;

  corral_source_split_14717:
    assume {:verifier.code 0} true;
    $i8 := $M.77;
    goto corral_source_split_14718;

  corral_source_split_14718:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_14719;

  corral_source_split_14719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_14729;

  corral_source_split_14729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2410} fimc_job_abort($p0);
    goto corral_source_split_14730;

  corral_source_split_14730:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2411} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_14731;

  corral_source_split_14731:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb6;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_14721;

  corral_source_split_14721:
    assume {:verifier.code 0} true;
    $i6 := $M.77;
    goto corral_source_split_14722;

  corral_source_split_14722:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_14723;

  corral_source_split_14723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_14725;

  corral_source_split_14725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2408} fimc_device_run($p1);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_14726;

  corral_source_split_14726:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2409} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_14727;

  corral_source_split_14727:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_331:
    assume !assertsPassed;
    return;
}



const ldv_main_exported_13: ref;

axiom ldv_main_exported_13 == $sub.ref(0, 799154);

procedure ldv_main_exported_13();
  free requires assertsPassed;
  modifies $M.37, $M.78, $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr;



implementation ldv_main_exported_13()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $p126: ref;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $i145: i32;
  var vslice_dummy_var_141: ref;
  var vslice_dummy_var_142: ref;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2413} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2414} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_14735;

  corral_source_split_14735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2415} $p2 := ldv_init_zalloc(1);
    goto corral_source_split_14736;

  corral_source_split_14736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2416} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_14737;

  corral_source_split_14737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2417} $p4 := ldv_init_zalloc(1);
    goto corral_source_split_14738;

  corral_source_split_14738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2418} $p5 := ldv_init_zalloc(1);
    goto corral_source_split_14739;

  corral_source_split_14739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2419} $p6 := ldv_init_zalloc(1);
    goto corral_source_split_14740;

  corral_source_split_14740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2420} $p7 := ldv_init_zalloc(1);
    goto corral_source_split_14741;

  corral_source_split_14741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2421} $p8 := ldv_init_zalloc(44);
    goto corral_source_split_14742;

  corral_source_split_14742:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_14743;

  corral_source_split_14743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2422} $p10 := ldv_init_zalloc(1);
    goto corral_source_split_14744;

  corral_source_split_14744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2423} $p11 := ldv_init_zalloc(104);
    goto corral_source_split_14745;

  corral_source_split_14745:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_14746;

  corral_source_split_14746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2424} $p13 := ldv_init_zalloc(64);
    goto corral_source_split_14747;

  corral_source_split_14747:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_14748;

  corral_source_split_14748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2425} $p15 := ldv_init_zalloc(1);
    goto corral_source_split_14749;

  corral_source_split_14749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2426} $p16 := ldv_init_zalloc(1);
    goto corral_source_split_14750;

  corral_source_split_14750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2427} $p17 := ldv_init_zalloc(20);
    goto corral_source_split_14751;

  corral_source_split_14751:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_14752;

  corral_source_split_14752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2428} $p19 := ldv_init_zalloc(1);
    goto corral_source_split_14753;

  corral_source_split_14753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} $p20 := ldv_init_zalloc(20);
    goto corral_source_split_14754;

  corral_source_split_14754:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_14755;

  corral_source_split_14755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2430} $p22 := ldv_init_zalloc(1);
    goto corral_source_split_14756;

  corral_source_split_14756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2431} $p23 := ldv_init_zalloc(1);
    goto corral_source_split_14757;

  corral_source_split_14757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2432} $p24 := ldv_init_zalloc(1);
    goto corral_source_split_14758;

  corral_source_split_14758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2433} $p25 := ldv_init_zalloc(1);
    goto corral_source_split_14759;

  corral_source_split_14759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2434} $p26 := ldv_init_zalloc(1);
    goto corral_source_split_14760;

  corral_source_split_14760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2435} $p27 := ldv_init_zalloc(1);
    goto corral_source_split_14761;

  corral_source_split_14761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2436} $p28 := ldv_init_zalloc(1);
    goto corral_source_split_14762;

  corral_source_split_14762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2437} $p29 := ldv_init_zalloc(20);
    goto corral_source_split_14763;

  corral_source_split_14763:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_14764;

  corral_source_split_14764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2438} $p31 := ldv_init_zalloc(1);
    goto corral_source_split_14765;

  corral_source_split_14765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2439} $p32 := ldv_init_zalloc(1);
    goto corral_source_split_14766;

  corral_source_split_14766:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p0);
    goto corral_source_split_14767;

  corral_source_split_14767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2440} vslice_dummy_var_141 := ldv_memset($p33, 0, 4);
    goto corral_source_split_14768;

  corral_source_split_14768:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p1);
    goto corral_source_split_14769;

  corral_source_split_14769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2441} vslice_dummy_var_142 := ldv_memset($p35, 0, 4);
    goto corral_source_split_14770;

  corral_source_split_14770:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2442} $i37 := __VERIFIER_nondet_int();
    call {:si_unique_call 2443} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i37);
    call {:si_unique_call 2444} {:cexpr "tmp___24"} boogie_si_record_i32($i37);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i37, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i37, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i37, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i37, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i37, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2483} ldv_stop();
    goto corral_source_split_14956;

  corral_source_split_14956:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i43 == 1;
    goto corral_source_split_14780;

  corral_source_split_14780:
    assume {:verifier.code 0} true;
    $i142 := $M.78;
    goto corral_source_split_14781;

  corral_source_split_14781:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 1);
    goto corral_source_split_14782;

  corral_source_split_14782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb98:
    assume $i143 == 1;
    goto corral_source_split_14950;

  corral_source_split_14950:
    assume {:verifier.code 0} true;
    $p144 := $M.74;
    goto corral_source_split_14951;

  corral_source_split_14951:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.37, $p1);
    goto corral_source_split_14952;

  corral_source_split_14952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2481} vslice_dummy_var_161 := v4l2_m2m_ioctl_streamon($p144, $p24, $i145);
    goto corral_source_split_14953;

  corral_source_split_14953:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2482} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_14954;

  corral_source_split_14954:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb10:
    assume $i42 == 1;
    goto corral_source_split_14776;

  corral_source_split_14776:
    assume {:verifier.code 0} true;
    $i137 := $M.78;
    goto corral_source_split_14777;

  corral_source_split_14777:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 1);
    goto corral_source_split_14778;

  corral_source_split_14778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb95:
    assume $i138 == 1;
    goto corral_source_split_14944;

  corral_source_split_14944:
    assume {:verifier.code 0} true;
    $p139 := $M.74;
    goto corral_source_split_14945;

  corral_source_split_14945:
    assume {:verifier.code 0} true;
    $p140 := $M.76;
    goto corral_source_split_14946;

  corral_source_split_14946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2479} vslice_dummy_var_160 := fimc_m2m_enum_fmt_mplane($p139, $p19, $p140);
    goto corral_source_split_14947;

  corral_source_split_14947:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2480} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_14948;

  corral_source_split_14948:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb8:
    assume $i41 == 1;
    goto corral_source_split_14772;

  corral_source_split_14772:
    assume {:verifier.code 0} true;
    $i133 := $M.78;
    goto corral_source_split_14773;

  corral_source_split_14773:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 1);
    goto corral_source_split_14774;

  corral_source_split_14774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb92:
    assume $i134 == 1;
    goto corral_source_split_14939;

  corral_source_split_14939:
    assume {:verifier.code 0} true;
    $p135 := $M.74;
    goto corral_source_split_14940;

  corral_source_split_14940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2477} vslice_dummy_var_159 := fimc_m2m_s_crop($p135, $p31, $p21);
    goto corral_source_split_14941;

  corral_source_split_14941:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2478} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_14942;

  corral_source_split_14942:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb6:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i37, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i44 == 1);
    goto corral_source_split_14788;

  corral_source_split_14788:
    assume {:verifier.code 0} true;
    $i128 := $M.78;
    goto corral_source_split_14789;

  corral_source_split_14789:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 1);
    goto corral_source_split_14790;

  corral_source_split_14790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb89:
    assume $i129 == 1;
    goto corral_source_split_14933;

  corral_source_split_14933:
    assume {:verifier.code 0} true;
    $p130 := $M.74;
    goto corral_source_split_14934;

  corral_source_split_14934:
    assume {:verifier.code 0} true;
    $p131 := $M.73;
    goto corral_source_split_14935;

  corral_source_split_14935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2475} vslice_dummy_var_158 := fimc_m2m_try_fmt_mplane($p130, $p25, $p131);
    goto corral_source_split_14936;

  corral_source_split_14936:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2476} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_14937;

  corral_source_split_14937:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb15:
    assume $i44 == 1;
    goto corral_source_split_14784;

  corral_source_split_14784:
    assume {:verifier.code 0} true;
    $i123 := $M.78;
    goto corral_source_split_14785;

  corral_source_split_14785:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 1);
    goto corral_source_split_14786;

  corral_source_split_14786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb86:
    assume $i124 == 1;
    goto corral_source_split_14927;

  corral_source_split_14927:
    assume {:verifier.code 0} true;
    $p125 := $M.74;
    goto corral_source_split_14928;

  corral_source_split_14928:
    assume {:verifier.code 0} true;
    $p126 := $M.73;
    goto corral_source_split_14929;

  corral_source_split_14929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2473} vslice_dummy_var_157 := fimc_m2m_g_fmt_mplane($p125, $p23, $p126);
    goto corral_source_split_14930;

  corral_source_split_14930:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2474} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_14931;

  corral_source_split_14931:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb4:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i37, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i37, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i37, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i47 == 1);
    goto corral_source_split_14800;

  corral_source_split_14800:
    assume {:verifier.code 0} true;
    $i118 := $M.78;
    goto corral_source_split_14801;

  corral_source_split_14801:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 1);
    goto corral_source_split_14802;

  corral_source_split_14802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb83:
    assume $i119 == 1;
    goto corral_source_split_14921;

  corral_source_split_14921:
    assume {:verifier.code 0} true;
    $p120 := $M.74;
    goto corral_source_split_14922;

  corral_source_split_14922:
    assume {:verifier.code 0} true;
    $p121 := $M.76;
    goto corral_source_split_14923;

  corral_source_split_14923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2471} vslice_dummy_var_156 := fimc_m2m_enum_fmt_mplane($p120, $p6, $p121);
    goto corral_source_split_14924;

  corral_source_split_14924:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2472} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_14925;

  corral_source_split_14925:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb21:
    assume $i47 == 1;
    goto corral_source_split_14796;

  corral_source_split_14796:
    assume {:verifier.code 0} true;
    $i114 := $M.78;
    goto corral_source_split_14797;

  corral_source_split_14797:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 1);
    goto corral_source_split_14798;

  corral_source_split_14798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb80:
    assume $i115 == 1;
    goto corral_source_split_14916;

  corral_source_split_14916:
    assume {:verifier.code 0} true;
    $p116 := $M.74;
    goto corral_source_split_14917;

  corral_source_split_14917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2469} vslice_dummy_var_155 := fimc_m2m_querycap($p116, $p10, $p12);
    goto corral_source_split_14918;

  corral_source_split_14918:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2470} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_14919;

  corral_source_split_14919:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb19:
    assume $i46 == 1;
    goto corral_source_split_14792;

  corral_source_split_14792:
    assume {:verifier.code 0} true;
    $i109 := $M.78;
    goto corral_source_split_14793;

  corral_source_split_14793:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 1);
    goto corral_source_split_14794;

  corral_source_split_14794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb77:
    assume $i110 == 1;
    goto corral_source_split_14910;

  corral_source_split_14910:
    assume {:verifier.code 0} true;
    $p111 := $M.74;
    goto corral_source_split_14911;

  corral_source_split_14911:
    assume {:verifier.code 0} true;
    $p112 := $M.73;
    goto corral_source_split_14912;

  corral_source_split_14912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2467} vslice_dummy_var_154 := fimc_m2m_s_fmt_mplane($p111, $p5, $p112);
    goto corral_source_split_14913;

  corral_source_split_14913:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2468} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_14914;

  corral_source_split_14914:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb17:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i37, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i48 == 1);
    goto corral_source_split_14808;

  corral_source_split_14808:
    assume {:verifier.code 0} true;
    $i104 := $M.78;
    goto corral_source_split_14809;

  corral_source_split_14809:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 1);
    goto corral_source_split_14810;

  corral_source_split_14810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb74:
    assume $i105 == 1;
    goto corral_source_split_14904;

  corral_source_split_14904:
    assume {:verifier.code 0} true;
    $p106 := $M.74;
    goto corral_source_split_14905;

  corral_source_split_14905:
    assume {:verifier.code 0} true;
    $p107 := $M.73;
    goto corral_source_split_14906;

  corral_source_split_14906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2465} vslice_dummy_var_153 := fimc_m2m_g_fmt_mplane($p106, $p32, $p107);
    goto corral_source_split_14907;

  corral_source_split_14907:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2466} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_14908;

  corral_source_split_14908:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb23:
    assume $i48 == 1;
    goto corral_source_split_14804;

  corral_source_split_14804:
    assume {:verifier.code 0} true;
    $i99 := $M.78;
    goto corral_source_split_14805;

  corral_source_split_14805:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 1);
    goto corral_source_split_14806;

  corral_source_split_14806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb71:
    assume $i100 == 1;
    goto corral_source_split_14898;

  corral_source_split_14898:
    assume {:verifier.code 0} true;
    $p101 := $M.74;
    goto corral_source_split_14899;

  corral_source_split_14899:
    assume {:verifier.code 0} true;
    $p102 := $M.73;
    goto corral_source_split_14900;

  corral_source_split_14900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2463} vslice_dummy_var_152 := fimc_m2m_try_fmt_mplane($p101, $p3, $p102);
    goto corral_source_split_14901;

  corral_source_split_14901:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2464} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_14902;

  corral_source_split_14902:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb2:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i37, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i37, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i37, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i37, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i52 == 1);
    goto corral_source_split_14820;

  corral_source_split_14820:
    assume {:verifier.code 0} true;
    $i94 := $M.78;
    goto corral_source_split_14821;

  corral_source_split_14821:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 1);
    goto corral_source_split_14822;

  corral_source_split_14822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb68:
    assume $i95 == 1;
    goto corral_source_split_14892;

  corral_source_split_14892:
    assume {:verifier.code 0} true;
    $p96 := $M.74;
    goto corral_source_split_14893;

  corral_source_split_14893:
    assume {:verifier.code 0} true;
    $p97 := $M.75;
    goto corral_source_split_14894;

  corral_source_split_14894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2461} vslice_dummy_var_151 := v4l2_m2m_ioctl_qbuf($p96, $p27, $p97);
    goto corral_source_split_14895;

  corral_source_split_14895:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2462} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_14896;

  corral_source_split_14896:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb31:
    assume $i52 == 1;
    goto corral_source_split_14816;

  corral_source_split_14816:
    assume {:verifier.code 0} true;
    $i90 := $M.78;
    goto corral_source_split_14817;

  corral_source_split_14817:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 1);
    goto corral_source_split_14818;

  corral_source_split_14818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb65:
    assume $i91 == 1;
    goto corral_source_split_14887;

  corral_source_split_14887:
    assume {:verifier.code 0} true;
    $p92 := $M.74;
    goto corral_source_split_14888;

  corral_source_split_14888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2459} vslice_dummy_var_150 := fimc_m2m_cropcap($p92, $p4, $p9);
    goto corral_source_split_14889;

  corral_source_split_14889:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2460} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_14890;

  corral_source_split_14890:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb29:
    assume $i51 == 1;
    goto corral_source_split_14812;

  corral_source_split_14812:
    assume {:verifier.code 0} true;
    $i85 := $M.78;
    goto corral_source_split_14813;

  corral_source_split_14813:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 1);
    goto corral_source_split_14814;

  corral_source_split_14814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb62:
    assume $i86 == 1;
    goto corral_source_split_14881;

  corral_source_split_14881:
    assume {:verifier.code 0} true;
    $p87 := $M.74;
    goto corral_source_split_14882;

  corral_source_split_14882:
    assume {:verifier.code 0} true;
    $p88 := $M.73;
    goto corral_source_split_14883;

  corral_source_split_14883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} vslice_dummy_var_149 := fimc_m2m_s_fmt_mplane($p87, $p26, $p88);
    goto corral_source_split_14884;

  corral_source_split_14884:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2458} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_14885;

  corral_source_split_14885:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb27:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i37, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i53 == 1);
    goto corral_source_split_14828;

  corral_source_split_14828:
    assume {:verifier.code 0} true;
    $i80 := $M.78;
    goto corral_source_split_14829;

  corral_source_split_14829:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 1);
    goto corral_source_split_14830;

  corral_source_split_14830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb59:
    assume $i81 == 1;
    goto corral_source_split_14875;

  corral_source_split_14875:
    assume {:verifier.code 0} true;
    $p82 := $M.74;
    goto corral_source_split_14876;

  corral_source_split_14876:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.37, $p0);
    goto corral_source_split_14877;

  corral_source_split_14877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2455} vslice_dummy_var_148 := v4l2_m2m_ioctl_streamoff($p82, $p7, $i83);
    goto corral_source_split_14878;

  corral_source_split_14878:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2456} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_14879;

  corral_source_split_14879:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb33:
    assume $i53 == 1;
    goto corral_source_split_14824;

  corral_source_split_14824:
    assume {:verifier.code 0} true;
    $i75 := $M.78;
    goto corral_source_split_14825;

  corral_source_split_14825:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 1);
    goto corral_source_split_14826;

  corral_source_split_14826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb56:
    assume $i76 == 1;
    goto corral_source_split_14869;

  corral_source_split_14869:
    assume {:verifier.code 0} true;
    $p77 := $M.74;
    goto corral_source_split_14870;

  corral_source_split_14870:
    assume {:verifier.code 0} true;
    $p78 := $M.75;
    goto corral_source_split_14871;

  corral_source_split_14871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2453} vslice_dummy_var_147 := v4l2_m2m_ioctl_dqbuf($p77, $p16, $p78);
    goto corral_source_split_14872;

  corral_source_split_14872:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2454} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_14873;

  corral_source_split_14873:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb25:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i37, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i37, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i55 == 1);
    goto corral_source_split_14836;

  corral_source_split_14836:
    assume {:verifier.code 0} true;
    $i71 := $M.78;
    goto corral_source_split_14837;

  corral_source_split_14837:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 1);
    goto corral_source_split_14838;

  corral_source_split_14838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb53:
    assume $i72 == 1;
    goto corral_source_split_14864;

  corral_source_split_14864:
    assume {:verifier.code 0} true;
    $p73 := $M.74;
    goto corral_source_split_14865;

  corral_source_split_14865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2451} vslice_dummy_var_146 := fimc_m2m_g_crop($p73, $p2, $p18);
    goto corral_source_split_14866;

  corral_source_split_14866:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2452} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_14867;

  corral_source_split_14867:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb37:
    assume $i55 == 1;
    goto corral_source_split_14832;

  corral_source_split_14832:
    assume {:verifier.code 0} true;
    $i66 := $M.78;
    goto corral_source_split_14833;

  corral_source_split_14833:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 1);
    goto corral_source_split_14834;

  corral_source_split_14834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb50:
    assume $i67 == 1;
    goto corral_source_split_14858;

  corral_source_split_14858:
    assume {:verifier.code 0} true;
    $p68 := $M.74;
    goto corral_source_split_14859;

  corral_source_split_14859:
    assume {:verifier.code 0} true;
    $p69 := $M.75;
    goto corral_source_split_14860;

  corral_source_split_14860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2449} vslice_dummy_var_145 := v4l2_m2m_ioctl_querybuf($p68, $p22, $p69);
    goto corral_source_split_14861;

  corral_source_split_14861:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2450} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_14862;

  corral_source_split_14862:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb35:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i37, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i56 == 1);
    goto corral_source_split_14840;

  corral_source_split_14840:
    assume {:verifier.code 0} true;
    $i62 := $M.78;
    goto corral_source_split_14841;

  corral_source_split_14841:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 1);
    goto corral_source_split_14842;

  corral_source_split_14842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb47:
    assume $i63 == 1;
    goto corral_source_split_14853;

  corral_source_split_14853:
    assume {:verifier.code 0} true;
    $p64 := $M.74;
    goto corral_source_split_14854;

  corral_source_split_14854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} vslice_dummy_var_144 := v4l2_m2m_ioctl_expbuf($p64, $p28, $p14);
    goto corral_source_split_14855;

  corral_source_split_14855:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2448} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_14856;

  corral_source_split_14856:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb39:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i37, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb14;

  $bb41:
    assume $i57 == 1;
    goto corral_source_split_14844;

  corral_source_split_14844:
    assume {:verifier.code 0} true;
    $i58 := $M.78;
    goto corral_source_split_14845;

  corral_source_split_14845:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 1);
    goto corral_source_split_14846;

  corral_source_split_14846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb43:
    assume $i59 == 1;
    goto corral_source_split_14848;

  corral_source_split_14848:
    assume {:verifier.code 0} true;
    $p60 := $M.74;
    goto corral_source_split_14849;

  corral_source_split_14849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2445} vslice_dummy_var_143 := v4l2_m2m_ioctl_reqbufs($p60, $p15, $p30);
    goto corral_source_split_14850;

  corral_source_split_14850:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2446} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_14851;

  corral_source_split_14851:
    assume {:verifier.code 0} true;
    goto $bb45;
}



const ldv_main_exported_12: ref;

axiom ldv_main_exported_12 == $sub.ref(0, 800186);

procedure ldv_main_exported_12();
  free requires assertsPassed;
  modifies $M.37, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $M.80, $M.79, $M.43, $CurrAddr;



implementation ldv_main_exported_12()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i64;
  var vslice_dummy_var_162: ref;
  var vslice_dummy_var_163: ref;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i64;
  var vslice_dummy_var_170: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2484} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2485} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_14958;

  corral_source_split_14958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2486} $p2 := ldv_init_zalloc(16);
    goto corral_source_split_14959;

  corral_source_split_14959:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_14960;

  corral_source_split_14960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2487} $p4 := ldv_init_zalloc(184);
    goto corral_source_split_14961;

  corral_source_split_14961:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_14962;

  corral_source_split_14962:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_14963;

  corral_source_split_14963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2488} vslice_dummy_var_162 := ldv_memset($p6, 0, 8);
    goto corral_source_split_14964;

  corral_source_split_14964:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_14965;

  corral_source_split_14965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2489} vslice_dummy_var_163 := ldv_memset($p8, 0, 4);
    goto corral_source_split_14966;

  corral_source_split_14966:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2490} $i10 := __VERIFIER_nondet_int();
    call {:si_unique_call 2491} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i10);
    call {:si_unique_call 2492} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i10, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2512} ldv_stop();
    goto corral_source_split_15052;

  corral_source_split_15052:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_14976;

  corral_source_split_14976:
    assume {:verifier.code 0} true;
    $i47 := $M.79;
    goto corral_source_split_14977;

  corral_source_split_14977:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 2);
    goto corral_source_split_14978;

  corral_source_split_14978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i53 := $M.79;
    goto corral_source_split_15042;

  corral_source_split_15042:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 1);
    goto corral_source_split_15043;

  corral_source_split_15043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb40:
    assume $i54 == 1;
    goto corral_source_split_15045;

  corral_source_split_15045:
    assume {:verifier.code 0} true;
    $p55 := $M.72;
    goto corral_source_split_15046;

  corral_source_split_15046:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.37, $p1);
    goto corral_source_split_15047;

  corral_source_split_15047:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.37, $p0);
    goto corral_source_split_15048;

  corral_source_split_15048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2510} vslice_dummy_var_170 := video_ioctl2($p55, $i56, $i57);
    goto corral_source_split_15049;

  corral_source_split_15049:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2511} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_15050;

  corral_source_split_15050:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i48 == 1;
    goto corral_source_split_15035;

  corral_source_split_15035:
    assume {:verifier.code 0} true;
    $p49 := $M.72;
    goto corral_source_split_15036;

  corral_source_split_15036:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.37, $p1);
    goto corral_source_split_15037;

  corral_source_split_15037:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.37, $p0);
    goto corral_source_split_15038;

  corral_source_split_15038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2508} vslice_dummy_var_169 := video_ioctl2($p49, $i50, $i51);
    goto corral_source_split_15039;

  corral_source_split_15039:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 2509} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_15040;

  corral_source_split_15040:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_14972;

  corral_source_split_14972:
    assume {:verifier.code 0} true;
    $i39 := $M.79;
    goto corral_source_split_14973;

  corral_source_split_14973:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 2);
    goto corral_source_split_14974;

  corral_source_split_14974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i43 := $M.79;
    goto corral_source_split_15027;

  corral_source_split_15027:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 1);
    goto corral_source_split_15028;

  corral_source_split_15028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb34:
    assume $i44 == 1;
    goto corral_source_split_15030;

  corral_source_split_15030:
    assume {:verifier.code 0} true;
    $p45 := $M.72;
    goto corral_source_split_15031;

  corral_source_split_15031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2506} vslice_dummy_var_168 := v4l2_m2m_fop_poll($p45, $p3);
    goto corral_source_split_15032;

  corral_source_split_15032:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2507} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_15033;

  corral_source_split_15033:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i40 == 1;
    goto corral_source_split_15022;

  corral_source_split_15022:
    assume {:verifier.code 0} true;
    $p41 := $M.72;
    goto corral_source_split_15023;

  corral_source_split_15023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2504} vslice_dummy_var_167 := v4l2_m2m_fop_poll($p41, $p3);
    goto corral_source_split_15024;

  corral_source_split_15024:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 2505} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_15025;

  corral_source_split_15025:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_14968;

  corral_source_split_14968:
    assume {:verifier.code 0} true;
    $i33 := $M.79;
    goto corral_source_split_14969;

  corral_source_split_14969:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 2);
    goto corral_source_split_14970;

  corral_source_split_14970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28:
    assume $i34 == 1;
    goto corral_source_split_15014;

  corral_source_split_15014:
    assume {:verifier.code 0} true;
    $p35 := $M.72;
    goto corral_source_split_15015;

  corral_source_split_15015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} vslice_dummy_var_166 := fimc_m2m_release($p35);
    goto corral_source_split_15016;

  corral_source_split_15016:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2502} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_15017;

  corral_source_split_15017:
    assume {:verifier.code 0} true;
    $i37 := $M.43;
    goto corral_source_split_15018;

  corral_source_split_15018:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32($i37, 1);
    goto corral_source_split_15019;

  corral_source_split_15019:
    assume {:verifier.code 0} true;
    $M.43 := $i38;
    call {:si_unique_call 2503} {:cexpr "ref_cnt"} boogie_si_record_i32($i38);
    goto corral_source_split_15020;

  corral_source_split_15020:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb2:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i10, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    goto corral_source_split_14980;

  corral_source_split_14980:
    assume {:verifier.code 0} true;
    $i25 := $M.79;
    goto corral_source_split_14981;

  corral_source_split_14981:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_14982;

  corral_source_split_14982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i29 := $M.79;
    goto corral_source_split_15006;

  corral_source_split_15006:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_15007;

  corral_source_split_15007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb25:
    assume $i30 == 1;
    goto corral_source_split_15009;

  corral_source_split_15009:
    assume {:verifier.code 0} true;
    $p31 := $M.72;
    goto corral_source_split_15010;

  corral_source_split_15010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2499} vslice_dummy_var_165 := v4l2_m2m_fop_mmap($p31, $p5);
    goto corral_source_split_15011;

  corral_source_split_15011:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2500} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_15012;

  corral_source_split_15012:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i26 == 1;
    goto corral_source_split_15001;

  corral_source_split_15001:
    assume {:verifier.code 0} true;
    $p27 := $M.72;
    goto corral_source_split_15002;

  corral_source_split_15002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} vslice_dummy_var_164 := v4l2_m2m_fop_mmap($p27, $p5);
    goto corral_source_split_15003;

  corral_source_split_15003:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 2498} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_15004;

  corral_source_split_15004:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb11:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i10, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_14984;

  corral_source_split_14984:
    assume {:verifier.code 0} true;
    $i17 := $M.79;
    goto corral_source_split_14985;

  corral_source_split_14985:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_14986;

  corral_source_split_14986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume $i18 == 1;
    goto corral_source_split_14988;

  corral_source_split_14988:
    assume {:verifier.code 0} true;
    $p19 := $M.72;
    goto corral_source_split_14989;

  corral_source_split_14989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} $i20 := fimc_m2m_open($p19);
    goto corral_source_split_14990;

  corral_source_split_14990:
    assume {:verifier.code 0} true;
    $M.80 := $i20;
    call {:si_unique_call 2494} {:cexpr "ldv_retval_25"} boogie_si_record_i32($i20);
    goto corral_source_split_14991;

  corral_source_split_14991:
    assume {:verifier.code 0} true;
    $i21 := $M.80;
    goto corral_source_split_14992;

  corral_source_split_14992:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_14993;

  corral_source_split_14993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i22 == 1;
    goto corral_source_split_14995;

  corral_source_split_14995:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 2495} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(2);
    goto corral_source_split_14996;

  corral_source_split_14996:
    assume {:verifier.code 0} true;
    $i23 := $M.43;
    goto corral_source_split_14997;

  corral_source_split_14997:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 1);
    goto corral_source_split_14998;

  corral_source_split_14998:
    assume {:verifier.code 0} true;
    $M.43 := $i24;
    call {:si_unique_call 2496} {:cexpr "ref_cnt"} boogie_si_record_i32($i24);
    goto corral_source_split_14999;

  corral_source_split_14999:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const ldv_main_exported_14: ref;

axiom ldv_main_exported_14 == $sub.ref(0, 801218);

procedure ldv_main_exported_14();
  free requires assertsPassed;
  modifies $M.37, $M.81, $M.0, $CurrAddr;



implementation ldv_main_exported_14()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var vslice_dummy_var_171: ref;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2513} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_15054;

  corral_source_split_15054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2514} $p1 := ldv_init_zalloc(8);
    goto corral_source_split_15055;

  corral_source_split_15055:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_15056;

  corral_source_split_15056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2515} $p3 := ldv_init_zalloc(208);
    goto corral_source_split_15057;

  corral_source_split_15057:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_15058;

  corral_source_split_15058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2516} $p5 := ldv_init_zalloc(4);
    goto corral_source_split_15059;

  corral_source_split_15059:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_15060;

  corral_source_split_15060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2517} $p7 := ldv_init_zalloc(4);
    goto corral_source_split_15061;

  corral_source_split_15061:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_15062;

  corral_source_split_15062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2518} $p9 := ldv_init_zalloc(4);
    goto corral_source_split_15063;

  corral_source_split_15063:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_15064;

  corral_source_split_15064:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_15065;

  corral_source_split_15065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} vslice_dummy_var_171 := ldv_memset($p11, 0, 4);
    goto corral_source_split_15066;

  corral_source_split_15066:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2520} $i13 := __VERIFIER_nondet_int();
    call {:si_unique_call 2521} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i13);
    call {:si_unique_call 2522} {:cexpr "tmp___4"} boogie_si_record_i32($i13);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i13, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i13, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2537} ldv_stop();
    goto corral_source_split_15132;

  corral_source_split_15132:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_15072;

  corral_source_split_15072:
    assume {:verifier.code 0} true;
    $i42 := $M.81;
    goto corral_source_split_15073;

  corral_source_split_15073:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 1);
    goto corral_source_split_15074;

  corral_source_split_15074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb38:
    assume $i43 == 1;
    goto corral_source_split_15126;

  corral_source_split_15126:
    assume {:verifier.code 0} true;
    $p44 := $M.70;
    goto corral_source_split_15127;

  corral_source_split_15127:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.37, $p0);
    goto corral_source_split_15128;

  corral_source_split_15128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2535} vslice_dummy_var_174 := start_streaming($p44, $i45);
    goto corral_source_split_15129;

  corral_source_split_15129:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2536} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_15130;

  corral_source_split_15130:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_15068;

  corral_source_split_15068:
    assume {:verifier.code 0} true;
    $i39 := $M.81;
    goto corral_source_split_15069;

  corral_source_split_15069:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 1);
    goto corral_source_split_15070;

  corral_source_split_15070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb35:
    assume $i40 == 1;
    goto corral_source_split_15121;

  corral_source_split_15121:
    assume {:verifier.code 0} true;
    $p41 := $M.70;
    goto corral_source_split_15122;

  corral_source_split_15122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2533} stop_streaming($p41);
    goto corral_source_split_15123;

  corral_source_split_15123:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2534} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_15124;

  corral_source_split_15124:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb4:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i13, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    goto corral_source_split_15080;

  corral_source_split_15080:
    assume {:verifier.code 0} true;
    $i36 := $M.81;
    goto corral_source_split_15081;

  corral_source_split_15081:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 1);
    goto corral_source_split_15082;

  corral_source_split_15082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb32:
    assume $i37 == 1;
    goto corral_source_split_15116;

  corral_source_split_15116:
    assume {:verifier.code 0} true;
    $p38 := $M.71;
    goto corral_source_split_15117;

  corral_source_split_15117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2531} fimc_buf_queue($p38);
    goto corral_source_split_15118;

  corral_source_split_15118:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2532} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_15119;

  corral_source_split_15119:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_15076;

  corral_source_split_15076:
    assume {:verifier.code 0} true;
    $i33 := $M.81;
    goto corral_source_split_15077;

  corral_source_split_15077:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 1);
    goto corral_source_split_15078;

  corral_source_split_15078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb29:
    assume $i34 == 1;
    goto corral_source_split_15111;

  corral_source_split_15111:
    assume {:verifier.code 0} true;
    $p35 := $M.70;
    goto corral_source_split_15112;

  corral_source_split_15112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2529} vb2_ops_wait_finish($p35);
    goto corral_source_split_15113;

  corral_source_split_15113:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2530} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_15114;

  corral_source_split_15114:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb2:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i13, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i13, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i20 == 1);
    goto corral_source_split_15088;

  corral_source_split_15088:
    assume {:verifier.code 0} true;
    $i29 := $M.81;
    goto corral_source_split_15089;

  corral_source_split_15089:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_15090;

  corral_source_split_15090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume $i30 == 1;
    goto corral_source_split_15106;

  corral_source_split_15106:
    assume {:verifier.code 0} true;
    $p31 := $M.70;
    goto corral_source_split_15107;

  corral_source_split_15107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2527} vslice_dummy_var_173 := fimc_queue_setup($p31, $p4, $p6, $p10, $p8, $p2);
    goto corral_source_split_15108;

  corral_source_split_15108:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2528} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_15109;

  corral_source_split_15109:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb15:
    assume $i20 == 1;
    goto corral_source_split_15084;

  corral_source_split_15084:
    assume {:verifier.code 0} true;
    $i25 := $M.81;
    goto corral_source_split_15085;

  corral_source_split_15085:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_15086;

  corral_source_split_15086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23:
    assume $i26 == 1;
    goto corral_source_split_15101;

  corral_source_split_15101:
    assume {:verifier.code 0} true;
    $p27 := $M.71;
    goto corral_source_split_15102;

  corral_source_split_15102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2525} vslice_dummy_var_172 := fimc_buf_prepare($p27);
    goto corral_source_split_15103;

  corral_source_split_15103:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2526} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_15104;

  corral_source_split_15104:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb13:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i13, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb10;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_15092;

  corral_source_split_15092:
    assume {:verifier.code 0} true;
    $i22 := $M.81;
    goto corral_source_split_15093;

  corral_source_split_15093:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 1);
    goto corral_source_split_15094;

  corral_source_split_15094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i23 == 1;
    goto corral_source_split_15096;

  corral_source_split_15096:
    assume {:verifier.code 0} true;
    $p24 := $M.70;
    goto corral_source_split_15097;

  corral_source_split_15097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2523} vb2_ops_wait_prepare($p24);
    goto corral_source_split_15098;

  corral_source_split_15098:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2524} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_15099;

  corral_source_split_15099:
    assume {:verifier.code 0} true;
    goto $bb21;
}



const ldv_initialize_v4l2_subdev_pad_ops_6: ref;

axiom ldv_initialize_v4l2_subdev_pad_ops_6 == $sub.ref(0, 802250);

procedure ldv_initialize_v4l2_subdev_pad_ops_6();
  free requires assertsPassed;
  modifies $M.82, $M.83, $M.84, $M.85, $M.0, $CurrAddr;



implementation ldv_initialize_v4l2_subdev_pad_ops_6()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15134;

  corral_source_split_15134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2538} $p0 := ldv_init_zalloc(88);
    goto corral_source_split_15135;

  corral_source_split_15135:
    assume {:verifier.code 0} true;
    goto corral_source_split_15136;

  corral_source_split_15136:
    assume {:verifier.code 0} true;
    $M.82 := $p0;
    goto corral_source_split_15137;

  corral_source_split_15137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2539} $p2 := ldv_init_zalloc(304);
    goto corral_source_split_15138;

  corral_source_split_15138:
    assume {:verifier.code 0} true;
    goto corral_source_split_15139;

  corral_source_split_15139:
    assume {:verifier.code 0} true;
    $M.83 := $p2;
    goto corral_source_split_15140;

  corral_source_split_15140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2540} $p4 := ldv_init_zalloc(64);
    goto corral_source_split_15141;

  corral_source_split_15141:
    assume {:verifier.code 0} true;
    goto corral_source_split_15142;

  corral_source_split_15142:
    assume {:verifier.code 0} true;
    $M.84 := $p4;
    goto corral_source_split_15143;

  corral_source_split_15143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2541} $p6 := ldv_init_zalloc(80);
    goto corral_source_split_15144;

  corral_source_split_15144:
    assume {:verifier.code 0} true;
    goto corral_source_split_15145;

  corral_source_split_15145:
    assume {:verifier.code 0} true;
    $M.85 := $p6;
    goto corral_source_split_15146;

  corral_source_split_15146:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_vb2_ops_10: ref;

axiom ldv_initialize_vb2_ops_10 == $sub.ref(0, 803282);

procedure ldv_initialize_vb2_ops_10();
  free requires assertsPassed;
  modifies $M.86, $M.87, $M.0, $CurrAddr;



implementation ldv_initialize_vb2_ops_10()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15148;

  corral_source_split_15148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2542} $p0 := ldv_init_zalloc(848);
    goto corral_source_split_15149;

  corral_source_split_15149:
    assume {:verifier.code 0} true;
    goto corral_source_split_15150;

  corral_source_split_15150:
    assume {:verifier.code 0} true;
    $M.86 := $p0;
    goto corral_source_split_15151;

  corral_source_split_15151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} $p2 := ldv_init_zalloc(928);
    goto corral_source_split_15152;

  corral_source_split_15152:
    assume {:verifier.code 0} true;
    goto corral_source_split_15153;

  corral_source_split_15153:
    assume {:verifier.code 0} true;
    $M.87 := $p2;
    goto corral_source_split_15154;

  corral_source_split_15154:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_v4l2_subdev_internal_ops_5: ref;

axiom ldv_initialize_v4l2_subdev_internal_ops_5 == $sub.ref(0, 804314);

procedure ldv_initialize_v4l2_subdev_internal_ops_5();
  free requires assertsPassed;
  modifies $M.88, $M.0, $CurrAddr;



implementation ldv_initialize_v4l2_subdev_internal_ops_5()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15156;

  corral_source_split_15156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2544} $p0 := ldv_init_zalloc(304);
    goto corral_source_split_15157;

  corral_source_split_15157:
    assume {:verifier.code 0} true;
    goto corral_source_split_15158;

  corral_source_split_15158:
    assume {:verifier.code 0} true;
    $M.88 := $p0;
    goto corral_source_split_15159;

  corral_source_split_15159:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_v4l2_file_operations_9: ref;

axiom ldv_initialize_v4l2_file_operations_9 == $sub.ref(0, 805346);

procedure ldv_initialize_v4l2_file_operations_9();
  free requires assertsPassed;
  modifies $M.89;



implementation ldv_initialize_v4l2_file_operations_9()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15161;

  corral_source_split_15161:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2545} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 2546} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_15162;

  corral_source_split_15162:
    assume {:verifier.code 0} true;
    goto corral_source_split_15163;

  corral_source_split_15163:
    assume {:verifier.code 0} true;
    $M.89 := $p0;
    goto corral_source_split_15164;

  corral_source_split_15164:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_v4l2_ioctl_ops_8: ref;

axiom ldv_initialize_v4l2_ioctl_ops_8 == $sub.ref(0, 806378);

procedure ldv_initialize_v4l2_ioctl_ops_8();
  free requires assertsPassed;
  modifies $M.90, $M.91, $M.92, $M.93, $M.0, $CurrAddr;



implementation ldv_initialize_v4l2_ioctl_ops_8()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15166;

  corral_source_split_15166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2547} $p0 := ldv_init_zalloc(208);
    goto corral_source_split_15167;

  corral_source_split_15167:
    assume {:verifier.code 0} true;
    goto corral_source_split_15168;

  corral_source_split_15168:
    assume {:verifier.code 0} true;
    $M.90 := $p0;
    goto corral_source_split_15169;

  corral_source_split_15169:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2548} $p2 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 2549} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p2);
    goto corral_source_split_15170;

  corral_source_split_15170:
    assume {:verifier.code 0} true;
    goto corral_source_split_15171;

  corral_source_split_15171:
    assume {:verifier.code 0} true;
    $M.91 := $p2;
    goto corral_source_split_15172;

  corral_source_split_15172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2550} $p4 := ldv_init_zalloc(88);
    goto corral_source_split_15173;

  corral_source_split_15173:
    assume {:verifier.code 0} true;
    goto corral_source_split_15174;

  corral_source_split_15174:
    assume {:verifier.code 0} true;
    $M.92 := $p4;
    goto corral_source_split_15175;

  corral_source_split_15175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} $p6 := ldv_init_zalloc(64);
    goto corral_source_split_15176;

  corral_source_split_15176:
    assume {:verifier.code 0} true;
    goto corral_source_split_15177;

  corral_source_split_15177:
    assume {:verifier.code 0} true;
    $M.93 := $p6;
    goto corral_source_split_15178;

  corral_source_split_15178:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_8: ref;

axiom ldv_main_exported_8 == $sub.ref(0, 807410);

procedure ldv_main_exported_8();
  free requires assertsPassed;
  modifies $M.37, $M.0, $M.94, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.25, $M.27, $CurrAddr;



implementation ldv_main_exported_8()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i32;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $i139: i32;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $i149: i32;
  var vslice_dummy_var_175: ref;
  var vslice_dummy_var_176: ref;
  var vslice_dummy_var_177: ref;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i32;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2552} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2554} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_15180;

  corral_source_split_15180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_15181;

  corral_source_split_15181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2556} $p4 := ldv_init_zalloc(1);
    goto corral_source_split_15182;

  corral_source_split_15182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} $p5 := ldv_init_zalloc(256);
    goto corral_source_split_15183;

  corral_source_split_15183:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_15184;

  corral_source_split_15184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2558} $p7 := ldv_init_zalloc(64);
    goto corral_source_split_15185;

  corral_source_split_15185:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_15186;

  corral_source_split_15186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} $p9 := ldv_init_zalloc(1);
    goto corral_source_split_15187;

  corral_source_split_15187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2560} $p10 := ldv_init_zalloc(1);
    goto corral_source_split_15188;

  corral_source_split_15188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} $p11 := ldv_init_zalloc(1);
    goto corral_source_split_15189;

  corral_source_split_15189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2562} $p12 := ldv_init_zalloc(1);
    goto corral_source_split_15190;

  corral_source_split_15190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2563} $p13 := ldv_init_zalloc(64);
    goto corral_source_split_15191;

  corral_source_split_15191:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_15192;

  corral_source_split_15192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2564} $p15 := ldv_init_zalloc(104);
    goto corral_source_split_15193;

  corral_source_split_15193:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_15194;

  corral_source_split_15194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2565} $p17 := ldv_init_zalloc(1);
    goto corral_source_split_15195;

  corral_source_split_15195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2566} $p18 := ldv_init_zalloc(1);
    goto corral_source_split_15196;

  corral_source_split_15196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2567} $p19 := ldv_init_zalloc(1);
    goto corral_source_split_15197;

  corral_source_split_15197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2568} $p20 := ldv_init_zalloc(1);
    goto corral_source_split_15198;

  corral_source_split_15198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2569} $p21 := ldv_init_zalloc(20);
    goto corral_source_split_15199;

  corral_source_split_15199:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_15200;

  corral_source_split_15200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2570} $p23 := ldv_init_zalloc(80);
    goto corral_source_split_15201;

  corral_source_split_15201:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_15202;

  corral_source_split_15202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2571} $p25 := ldv_init_zalloc(1);
    goto corral_source_split_15203;

  corral_source_split_15203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2572} $p26 := ldv_init_zalloc(1);
    goto corral_source_split_15204;

  corral_source_split_15204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2573} $p27 := ldv_init_zalloc(1);
    goto corral_source_split_15205;

  corral_source_split_15205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2574} $p28 := ldv_init_zalloc(1);
    goto corral_source_split_15206;

  corral_source_split_15206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2575} $p29 := ldv_init_zalloc(1);
    goto corral_source_split_15207;

  corral_source_split_15207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2576} $p30 := ldv_init_zalloc(1);
    goto corral_source_split_15208;

  corral_source_split_15208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2577} $p31 := ldv_init_zalloc(1);
    goto corral_source_split_15209;

  corral_source_split_15209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2578} $p32 := ldv_init_zalloc(1);
    goto corral_source_split_15210;

  corral_source_split_15210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2579} $p33 := ldv_init_zalloc(4);
    goto corral_source_split_15211;

  corral_source_split_15211:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_15212;

  corral_source_split_15212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2580} $p35 := ldv_init_zalloc(1);
    goto corral_source_split_15213;

  corral_source_split_15213:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p0);
    goto corral_source_split_15214;

  corral_source_split_15214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2581} vslice_dummy_var_175 := ldv_memset($p36, 0, 4);
    goto corral_source_split_15215;

  corral_source_split_15215:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p1);
    goto corral_source_split_15216;

  corral_source_split_15216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2582} vslice_dummy_var_176 := ldv_memset($p38, 0, 4);
    goto corral_source_split_15217;

  corral_source_split_15217:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p2);
    goto corral_source_split_15218;

  corral_source_split_15218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2583} vslice_dummy_var_177 := ldv_memset($p40, 0, 4);
    goto corral_source_split_15219;

  corral_source_split_15219:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2584} $i42 := __VERIFIER_nondet_int();
    call {:si_unique_call 2585} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i42);
    call {:si_unique_call 2586} {:cexpr "tmp___25"} boogie_si_record_i32($i42);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i42, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i42, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i42, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i42, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i42, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2625} ldv_stop();
    goto corral_source_split_15404;

  corral_source_split_15404:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i48 == 1;
    goto corral_source_split_15229;

  corral_source_split_15229:
    assume {:verifier.code 0} true;
    $i146 := $M.94;
    goto corral_source_split_15230;

  corral_source_split_15230:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 1);
    goto corral_source_split_15231;

  corral_source_split_15231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb98:
    assume $i147 == 1;
    goto corral_source_split_15398;

  corral_source_split_15398:
    assume {:verifier.code 0} true;
    $p148 := $M.91;
    goto corral_source_split_15399;

  corral_source_split_15399:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.37, $p0);
    goto corral_source_split_15400;

  corral_source_split_15400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2623} vslice_dummy_var_196 := fimc_cap_streamon($p148, $p19, $i149);
    goto corral_source_split_15401;

  corral_source_split_15401:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2624} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15402;

  corral_source_split_15402:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb10:
    assume $i47 == 1;
    goto corral_source_split_15225;

  corral_source_split_15225:
    assume {:verifier.code 0} true;
    $i141 := $M.94;
    goto corral_source_split_15226;

  corral_source_split_15226:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 1);
    goto corral_source_split_15227;

  corral_source_split_15227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb95:
    assume $i142 == 1;
    goto corral_source_split_15392;

  corral_source_split_15392:
    assume {:verifier.code 0} true;
    $p143 := $M.91;
    goto corral_source_split_15393;

  corral_source_split_15393:
    assume {:verifier.code 0} true;
    $p144 := $M.93;
    goto corral_source_split_15394;

  corral_source_split_15394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} vslice_dummy_var_195 := fimc_cap_s_selection($p143, $p9, $p144);
    goto corral_source_split_15395;

  corral_source_split_15395:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2622} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15396;

  corral_source_split_15396:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb8:
    assume $i46 == 1;
    goto corral_source_split_15221;

  corral_source_split_15221:
    assume {:verifier.code 0} true;
    $i136 := $M.94;
    goto corral_source_split_15222;

  corral_source_split_15222:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 1);
    goto corral_source_split_15223;

  corral_source_split_15223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb92:
    assume $i137 == 1;
    goto corral_source_split_15386;

  corral_source_split_15386:
    assume {:verifier.code 0} true;
    $p138 := $M.91;
    goto corral_source_split_15387;

  corral_source_split_15387:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.37, $p2);
    goto corral_source_split_15388;

  corral_source_split_15388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} vslice_dummy_var_194 := fimc_cap_s_input($p138, $p27, $i139);
    goto corral_source_split_15389;

  corral_source_split_15389:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2620} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15390;

  corral_source_split_15390:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb6:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i42, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i49 == 1);
    goto corral_source_split_15237;

  corral_source_split_15237:
    assume {:verifier.code 0} true;
    $i132 := $M.94;
    goto corral_source_split_15238;

  corral_source_split_15238:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 1);
    goto corral_source_split_15239;

  corral_source_split_15239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb89:
    assume $i133 == 1;
    goto corral_source_split_15381;

  corral_source_split_15381:
    assume {:verifier.code 0} true;
    $p134 := $M.91;
    goto corral_source_split_15382;

  corral_source_split_15382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2617} vslice_dummy_var_193 := fimc_cap_enum_input($p134, $p20, $p24);
    goto corral_source_split_15383;

  corral_source_split_15383:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2618} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15384;

  corral_source_split_15384:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb15:
    assume $i49 == 1;
    goto corral_source_split_15233;

  corral_source_split_15233:
    assume {:verifier.code 0} true;
    $i127 := $M.94;
    goto corral_source_split_15234;

  corral_source_split_15234:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 1);
    goto corral_source_split_15235;

  corral_source_split_15235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb86:
    assume $i128 == 1;
    goto corral_source_split_15375;

  corral_source_split_15375:
    assume {:verifier.code 0} true;
    $p129 := $M.91;
    goto corral_source_split_15376;

  corral_source_split_15376:
    assume {:verifier.code 0} true;
    $p130 := $M.90;
    goto corral_source_split_15377;

  corral_source_split_15377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2615} vslice_dummy_var_192 := fimc_cap_try_fmt_mplane($p129, $p29, $p130);
    goto corral_source_split_15378;

  corral_source_split_15378:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2616} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15379;

  corral_source_split_15379:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb4:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i42, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i42, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i42, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i52 == 1);
    goto corral_source_split_15249;

  corral_source_split_15249:
    assume {:verifier.code 0} true;
    $i122 := $M.94;
    goto corral_source_split_15250;

  corral_source_split_15250:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 1);
    goto corral_source_split_15251;

  corral_source_split_15251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb83:
    assume $i123 == 1;
    goto corral_source_split_15369;

  corral_source_split_15369:
    assume {:verifier.code 0} true;
    $p124 := $M.91;
    goto corral_source_split_15370;

  corral_source_split_15370:
    assume {:verifier.code 0} true;
    $p125 := $M.90;
    goto corral_source_split_15371;

  corral_source_split_15371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2613} vslice_dummy_var_191 := fimc_cap_g_fmt_mplane($p124, $p32, $p125);
    goto corral_source_split_15372;

  corral_source_split_15372:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2614} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15373;

  corral_source_split_15373:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb21:
    assume $i52 == 1;
    goto corral_source_split_15245;

  corral_source_split_15245:
    assume {:verifier.code 0} true;
    $i118 := $M.94;
    goto corral_source_split_15246;

  corral_source_split_15246:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 1);
    goto corral_source_split_15247;

  corral_source_split_15247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb80:
    assume $i119 == 1;
    goto corral_source_split_15364;

  corral_source_split_15364:
    assume {:verifier.code 0} true;
    $p120 := $M.91;
    goto corral_source_split_15365;

  corral_source_split_15365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2611} vslice_dummy_var_190 := fimc_cap_enum_fmt_mplane($p120, $p26, $p8);
    goto corral_source_split_15366;

  corral_source_split_15366:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2612} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15367;

  corral_source_split_15367:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb19:
    assume $i51 == 1;
    goto corral_source_split_15241;

  corral_source_split_15241:
    assume {:verifier.code 0} true;
    $i114 := $M.94;
    goto corral_source_split_15242;

  corral_source_split_15242:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 1);
    goto corral_source_split_15243;

  corral_source_split_15243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb77:
    assume $i115 == 1;
    goto corral_source_split_15359;

  corral_source_split_15359:
    assume {:verifier.code 0} true;
    $p116 := $M.91;
    goto corral_source_split_15360;

  corral_source_split_15360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} vslice_dummy_var_189 := fimc_cap_querycap($p116, $p17, $p16);
    goto corral_source_split_15361;

  corral_source_split_15361:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2610} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15362;

  corral_source_split_15362:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb17:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i42, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i53 == 1);
    goto corral_source_split_15257;

  corral_source_split_15257:
    assume {:verifier.code 0} true;
    $i109 := $M.94;
    goto corral_source_split_15258;

  corral_source_split_15258:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 1);
    goto corral_source_split_15259;

  corral_source_split_15259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb74:
    assume $i110 == 1;
    goto corral_source_split_15353;

  corral_source_split_15353:
    assume {:verifier.code 0} true;
    $p111 := $M.91;
    goto corral_source_split_15354;

  corral_source_split_15354:
    assume {:verifier.code 0} true;
    $p112 := $M.90;
    goto corral_source_split_15355;

  corral_source_split_15355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2607} vslice_dummy_var_188 := fimc_cap_s_fmt_mplane($p111, $p25, $p112);
    goto corral_source_split_15356;

  corral_source_split_15356:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2608} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15357;

  corral_source_split_15357:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb23:
    assume $i53 == 1;
    goto corral_source_split_15253;

  corral_source_split_15253:
    assume {:verifier.code 0} true;
    $i104 := $M.94;
    goto corral_source_split_15254;

  corral_source_split_15254:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 1);
    goto corral_source_split_15255;

  corral_source_split_15255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb71:
    assume $i105 == 1;
    goto corral_source_split_15347;

  corral_source_split_15347:
    assume {:verifier.code 0} true;
    $p106 := $M.91;
    goto corral_source_split_15348;

  corral_source_split_15348:
    assume {:verifier.code 0} true;
    $p107 := $M.92;
    goto corral_source_split_15349;

  corral_source_split_15349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} vslice_dummy_var_187 := vb2_ioctl_qbuf($p106, $p18, $p107);
    goto corral_source_split_15350;

  corral_source_split_15350:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2606} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15351;

  corral_source_split_15351:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb2:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i42, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i42, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i42, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i42, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i57 == 1);
    goto corral_source_split_15269;

  corral_source_split_15269:
    assume {:verifier.code 0} true;
    $i100 := $M.94;
    goto corral_source_split_15270;

  corral_source_split_15270:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 1);
    goto corral_source_split_15271;

  corral_source_split_15271:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb68:
    assume $i101 == 1;
    goto corral_source_split_15342;

  corral_source_split_15342:
    assume {:verifier.code 0} true;
    $p102 := $M.91;
    goto corral_source_split_15343;

  corral_source_split_15343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2603} vslice_dummy_var_186 := fimc_cap_g_input($p102, $p11, $p34);
    goto corral_source_split_15344;

  corral_source_split_15344:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2604} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15345;

  corral_source_split_15345:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb31:
    assume $i57 == 1;
    goto corral_source_split_15265;

  corral_source_split_15265:
    assume {:verifier.code 0} true;
    $i95 := $M.94;
    goto corral_source_split_15266;

  corral_source_split_15266:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 1);
    goto corral_source_split_15267;

  corral_source_split_15267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb65:
    assume $i96 == 1;
    goto corral_source_split_15336;

  corral_source_split_15336:
    assume {:verifier.code 0} true;
    $p97 := $M.91;
    goto corral_source_split_15337;

  corral_source_split_15337:
    assume {:verifier.code 0} true;
    $p98 := $M.93;
    goto corral_source_split_15338;

  corral_source_split_15338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2601} vslice_dummy_var_185 := fimc_cap_g_selection($p97, $p10, $p98);
    goto corral_source_split_15339;

  corral_source_split_15339:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2602} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15340;

  corral_source_split_15340:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb29:
    assume $i56 == 1;
    goto corral_source_split_15261;

  corral_source_split_15261:
    assume {:verifier.code 0} true;
    $i90 := $M.94;
    goto corral_source_split_15262;

  corral_source_split_15262:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 1);
    goto corral_source_split_15263;

  corral_source_split_15263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb62:
    assume $i91 == 1;
    goto corral_source_split_15330;

  corral_source_split_15330:
    assume {:verifier.code 0} true;
    $p92 := $M.91;
    goto corral_source_split_15331;

  corral_source_split_15331:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.37, $p1);
    goto corral_source_split_15332;

  corral_source_split_15332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2599} vslice_dummy_var_184 := fimc_cap_streamoff($p92, $p30, $i93);
    goto corral_source_split_15333;

  corral_source_split_15333:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2600} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15334;

  corral_source_split_15334:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb27:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i42, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i58 == 1);
    goto corral_source_split_15277;

  corral_source_split_15277:
    assume {:verifier.code 0} true;
    $i85 := $M.94;
    goto corral_source_split_15278;

  corral_source_split_15278:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 1);
    goto corral_source_split_15279;

  corral_source_split_15279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb59:
    assume $i86 == 1;
    goto corral_source_split_15324;

  corral_source_split_15324:
    assume {:verifier.code 0} true;
    $p87 := $M.91;
    goto corral_source_split_15325;

  corral_source_split_15325:
    assume {:verifier.code 0} true;
    $p88 := $M.92;
    goto corral_source_split_15326;

  corral_source_split_15326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2597} vslice_dummy_var_183 := vb2_ioctl_dqbuf($p87, $p28, $p88);
    goto corral_source_split_15327;

  corral_source_split_15327:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2598} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15328;

  corral_source_split_15328:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb33:
    assume $i58 == 1;
    goto corral_source_split_15273;

  corral_source_split_15273:
    assume {:verifier.code 0} true;
    $i81 := $M.94;
    goto corral_source_split_15274;

  corral_source_split_15274:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 1);
    goto corral_source_split_15275;

  corral_source_split_15275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb56:
    assume $i82 == 1;
    goto corral_source_split_15319;

  corral_source_split_15319:
    assume {:verifier.code 0} true;
    $p83 := $M.91;
    goto corral_source_split_15320;

  corral_source_split_15320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} vslice_dummy_var_182 := vb2_ioctl_expbuf($p83, $p4, $p14);
    goto corral_source_split_15321;

  corral_source_split_15321:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2596} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15322;

  corral_source_split_15322:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb25:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i42, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i42, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i60 == 1);
    goto corral_source_split_15285;

  corral_source_split_15285:
    assume {:verifier.code 0} true;
    $i76 := $M.94;
    goto corral_source_split_15286;

  corral_source_split_15286:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 1);
    goto corral_source_split_15287;

  corral_source_split_15287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb53:
    assume $i77 == 1;
    goto corral_source_split_15313;

  corral_source_split_15313:
    assume {:verifier.code 0} true;
    $p78 := $M.91;
    goto corral_source_split_15314;

  corral_source_split_15314:
    assume {:verifier.code 0} true;
    $p79 := $M.92;
    goto corral_source_split_15315;

  corral_source_split_15315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2593} vslice_dummy_var_181 := vb2_ioctl_querybuf($p78, $p3, $p79);
    goto corral_source_split_15316;

  corral_source_split_15316:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2594} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15317;

  corral_source_split_15317:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb37:
    assume $i60 == 1;
    goto corral_source_split_15281;

  corral_source_split_15281:
    assume {:verifier.code 0} true;
    $i72 := $M.94;
    goto corral_source_split_15282;

  corral_source_split_15282:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 1);
    goto corral_source_split_15283;

  corral_source_split_15283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb50:
    assume $i73 == 1;
    goto corral_source_split_15308;

  corral_source_split_15308:
    assume {:verifier.code 0} true;
    $p74 := $M.91;
    goto corral_source_split_15309;

  corral_source_split_15309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2591} vslice_dummy_var_180 := vb2_ioctl_create_bufs($p74, $p35, $p6);
    goto corral_source_split_15310;

  corral_source_split_15310:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2592} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15311;

  corral_source_split_15311:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb35:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i42, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i61 == 1);
    goto corral_source_split_15289;

  corral_source_split_15289:
    assume {:verifier.code 0} true;
    $i67 := $M.94;
    goto corral_source_split_15290;

  corral_source_split_15290:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 1);
    goto corral_source_split_15291;

  corral_source_split_15291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb47:
    assume $i68 == 1;
    goto corral_source_split_15302;

  corral_source_split_15302:
    assume {:verifier.code 0} true;
    $p69 := $M.91;
    goto corral_source_split_15303;

  corral_source_split_15303:
    assume {:verifier.code 0} true;
    $p70 := $M.92;
    goto corral_source_split_15304;

  corral_source_split_15304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2589} vslice_dummy_var_179 := vb2_ioctl_prepare_buf($p69, $p12, $p70);
    goto corral_source_split_15305;

  corral_source_split_15305:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2590} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15306;

  corral_source_split_15306:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb39:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i42, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb14;

  $bb41:
    assume $i62 == 1;
    goto corral_source_split_15293;

  corral_source_split_15293:
    assume {:verifier.code 0} true;
    $i63 := $M.94;
    goto corral_source_split_15294;

  corral_source_split_15294:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 1);
    goto corral_source_split_15295;

  corral_source_split_15295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb43:
    assume $i64 == 1;
    goto corral_source_split_15297;

  corral_source_split_15297:
    assume {:verifier.code 0} true;
    $p65 := $M.91;
    goto corral_source_split_15298;

  corral_source_split_15298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2587} vslice_dummy_var_178 := fimc_cap_reqbufs($p65, $p31, $p22);
    goto corral_source_split_15299;

  corral_source_split_15299:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2588} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15300;

  corral_source_split_15300:
    assume {:verifier.code 0} true;
    goto $bb45;
}



const ldv_main_exported_6: ref;

axiom ldv_main_exported_6 == $sub.ref(0, 808442);

procedure ldv_main_exported_6();
  free requires assertsPassed;
  modifies $M.0, $M.95, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr;



implementation ldv_main_exported_6()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15406;

  corral_source_split_15406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2626} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_15407;

  corral_source_split_15407:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_15408;

  corral_source_split_15408:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2627} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2628} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 2629} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2640} ldv_stop();
    goto corral_source_split_15464;

  corral_source_split_15464:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i6 == 1;
    goto corral_source_split_15418;

  corral_source_split_15418:
    assume {:verifier.code 0} true;
    $i32 := $M.95;
    goto corral_source_split_15419;

  corral_source_split_15419:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_15420;

  corral_source_split_15420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb28:
    assume $i33 == 1;
    goto corral_source_split_15457;

  corral_source_split_15457:
    assume {:verifier.code 0} true;
    $p34 := $M.83;
    goto corral_source_split_15458;

  corral_source_split_15458:
    assume {:verifier.code 0} true;
    $p35 := $M.85;
    goto corral_source_split_15459;

  corral_source_split_15459:
    assume {:verifier.code 0} true;
    $p36 := $M.82;
    goto corral_source_split_15460;

  corral_source_split_15460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2638} vslice_dummy_var_201 := fimc_subdev_set_fmt($p34, $p35, $p36);
    goto corral_source_split_15461;

  corral_source_split_15461:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2639} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_15462;

  corral_source_split_15462:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_15414;

  corral_source_split_15414:
    assume {:verifier.code 0} true;
    $i26 := $M.95;
    goto corral_source_split_15415;

  corral_source_split_15415:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_15416;

  corral_source_split_15416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb25:
    assume $i27 == 1;
    goto corral_source_split_15450;

  corral_source_split_15450:
    assume {:verifier.code 0} true;
    $p28 := $M.83;
    goto corral_source_split_15451;

  corral_source_split_15451:
    assume {:verifier.code 0} true;
    $p29 := $M.85;
    goto corral_source_split_15452;

  corral_source_split_15452:
    assume {:verifier.code 0} true;
    $p30 := $M.84;
    goto corral_source_split_15453;

  corral_source_split_15453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2636} vslice_dummy_var_200 := fimc_subdev_set_selection($p28, $p29, $p30);
    goto corral_source_split_15454;

  corral_source_split_15454:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2637} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_15455;

  corral_source_split_15455:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_15410;

  corral_source_split_15410:
    assume {:verifier.code 0} true;
    $i20 := $M.95;
    goto corral_source_split_15411;

  corral_source_split_15411:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 1);
    goto corral_source_split_15412;

  corral_source_split_15412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb22:
    assume $i21 == 1;
    goto corral_source_split_15443;

  corral_source_split_15443:
    assume {:verifier.code 0} true;
    $p22 := $M.83;
    goto corral_source_split_15444;

  corral_source_split_15444:
    assume {:verifier.code 0} true;
    $p23 := $M.85;
    goto corral_source_split_15445;

  corral_source_split_15445:
    assume {:verifier.code 0} true;
    $p24 := $M.84;
    goto corral_source_split_15446;

  corral_source_split_15446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} vslice_dummy_var_199 := fimc_subdev_get_selection($p22, $p23, $p24);
    goto corral_source_split_15447;

  corral_source_split_15447:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2635} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_15448;

  corral_source_split_15448:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    goto corral_source_split_15422;

  corral_source_split_15422:
    assume {:verifier.code 0} true;
    $i14 := $M.95;
    goto corral_source_split_15423;

  corral_source_split_15423:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_15424;

  corral_source_split_15424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19:
    assume $i15 == 1;
    goto corral_source_split_15436;

  corral_source_split_15436:
    assume {:verifier.code 0} true;
    $p16 := $M.83;
    goto corral_source_split_15437;

  corral_source_split_15437:
    assume {:verifier.code 0} true;
    $p17 := $M.85;
    goto corral_source_split_15438;

  corral_source_split_15438:
    assume {:verifier.code 0} true;
    $p18 := $M.82;
    goto corral_source_split_15439;

  corral_source_split_15439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} vslice_dummy_var_198 := fimc_subdev_get_fmt($p16, $p17, $p18);
    goto corral_source_split_15440;

  corral_source_split_15440:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2633} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_15441;

  corral_source_split_15441:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_15426;

  corral_source_split_15426:
    assume {:verifier.code 0} true;
    $i9 := $M.95;
    goto corral_source_split_15427;

  corral_source_split_15427:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 1);
    goto corral_source_split_15428;

  corral_source_split_15428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i10 == 1;
    goto corral_source_split_15430;

  corral_source_split_15430:
    assume {:verifier.code 0} true;
    $p11 := $M.83;
    goto corral_source_split_15431;

  corral_source_split_15431:
    assume {:verifier.code 0} true;
    $p12 := $M.85;
    goto corral_source_split_15432;

  corral_source_split_15432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2630} vslice_dummy_var_197 := fimc_subdev_enum_mbus_code($p11, $p12, $p1);
    goto corral_source_split_15433;

  corral_source_split_15433:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2631} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_15434;

  corral_source_split_15434:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const ldv_main_exported_7: ref;

axiom ldv_main_exported_7 == $sub.ref(0, 809474);

procedure ldv_main_exported_7();
  free requires assertsPassed;
  modifies $M.37, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $M.96, $CurrAddr;



implementation ldv_main_exported_7()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var vslice_dummy_var_202: ref;
  var vslice_dummy_var_203: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2641} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_15466;

  corral_source_split_15466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2642} $p1 := ldv_init_zalloc(24);
    goto corral_source_split_15467;

  corral_source_split_15467:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_15468;

  corral_source_split_15468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} $p3 := ldv_init_zalloc(120);
    goto corral_source_split_15469;

  corral_source_split_15469:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_15470;

  corral_source_split_15470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} $p5 := ldv_init_zalloc(24);
    goto corral_source_split_15471;

  corral_source_split_15471:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_15472;

  corral_source_split_15472:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_15473;

  corral_source_split_15473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2645} vslice_dummy_var_202 := ldv_memset($p7, 0, 4);
    goto corral_source_split_15474;

  corral_source_split_15474:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2646} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 2647} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    call {:si_unique_call 2648} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2651} ldv_stop();
    goto corral_source_split_15485;

  corral_source_split_15485:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i10 == 1;
    goto corral_source_split_15476;

  corral_source_split_15476:
    assume {:verifier.code 0} true;
    $i11 := $M.96;
    goto corral_source_split_15477;

  corral_source_split_15477:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 1);
    goto corral_source_split_15478;

  corral_source_split_15478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_15480;

  corral_source_split_15480:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.37, $p0);
    goto corral_source_split_15481;

  corral_source_split_15481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2649} vslice_dummy_var_203 := fimc_link_setup($p4, $p2, $p6, $i13);
    goto corral_source_split_15482;

  corral_source_split_15482:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 2650} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_15483;

  corral_source_split_15483:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_10: ref;

axiom ldv_main_exported_10 == $sub.ref(0, 810506);

procedure ldv_main_exported_10();
  free requires assertsPassed;
  modifies $M.37, $M.0, $M.97, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.28, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.29, $M.32, $M.27, $M.25, $M.36, assertsPassed;



implementation ldv_main_exported_10()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var vslice_dummy_var_204: ref;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2652} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_15487;

  corral_source_split_15487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2653} $p1 := ldv_init_zalloc(4);
    goto corral_source_split_15488;

  corral_source_split_15488:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_15489;

  corral_source_split_15489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2654} $p3 := ldv_init_zalloc(4);
    goto corral_source_split_15490;

  corral_source_split_15490:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_15491;

  corral_source_split_15491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2655} $p5 := ldv_init_zalloc(4);
    goto corral_source_split_15492;

  corral_source_split_15492:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_15493;

  corral_source_split_15493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} $p7 := ldv_init_zalloc(208);
    goto corral_source_split_15494;

  corral_source_split_15494:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_15495;

  corral_source_split_15495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2657} $p9 := ldv_init_zalloc(8);
    goto corral_source_split_15496;

  corral_source_split_15496:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_15497;

  corral_source_split_15497:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_15498;

  corral_source_split_15498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2658} vslice_dummy_var_204 := ldv_memset($p11, 0, 4);
    goto corral_source_split_15499;

  corral_source_split_15499:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2659} $i13 := __VERIFIER_nondet_int();
    call {:si_unique_call 2660} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i13);
    call {:si_unique_call 2661} {:cexpr "tmp___4"} boogie_si_record_i32($i13);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i13, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i13, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2676} ldv_stop();
    goto corral_source_split_15565;

  corral_source_split_15565:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_15505;

  corral_source_split_15505:
    assume {:verifier.code 0} true;
    $i42 := $M.97;
    goto corral_source_split_15506;

  corral_source_split_15506:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 1);
    goto corral_source_split_15507;

  corral_source_split_15507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb38:
    assume $i43 == 1;
    goto corral_source_split_15559;

  corral_source_split_15559:
    assume {:verifier.code 0} true;
    $p44 := $M.86;
    goto corral_source_split_15560;

  corral_source_split_15560:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.37, $p0);
    goto corral_source_split_15561;

  corral_source_split_15561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2674} vslice_dummy_var_207 := start_streaming___0($p44, $i45);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_15562;

  corral_source_split_15562:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2675} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_15563;

  corral_source_split_15563:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_15501;

  corral_source_split_15501:
    assume {:verifier.code 0} true;
    $i39 := $M.97;
    goto corral_source_split_15502;

  corral_source_split_15502:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 1);
    goto corral_source_split_15503;

  corral_source_split_15503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb35:
    assume $i40 == 1;
    goto corral_source_split_15554;

  corral_source_split_15554:
    assume {:verifier.code 0} true;
    $p41 := $M.87;
    goto corral_source_split_15555;

  corral_source_split_15555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} buffer_queue($p41);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_15556;

  corral_source_split_15556:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2673} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_15557;

  corral_source_split_15557:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i13, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    goto corral_source_split_15513;

  corral_source_split_15513:
    assume {:verifier.code 0} true;
    $i36 := $M.97;
    goto corral_source_split_15514;

  corral_source_split_15514:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 1);
    goto corral_source_split_15515;

  corral_source_split_15515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb32:
    assume $i37 == 1;
    goto corral_source_split_15549;

  corral_source_split_15549:
    assume {:verifier.code 0} true;
    $p38 := $M.86;
    goto corral_source_split_15550;

  corral_source_split_15550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2670} vb2_ops_wait_finish($p38);
    goto corral_source_split_15551;

  corral_source_split_15551:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2671} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_15552;

  corral_source_split_15552:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_15509;

  corral_source_split_15509:
    assume {:verifier.code 0} true;
    $i32 := $M.97;
    goto corral_source_split_15510;

  corral_source_split_15510:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_15511;

  corral_source_split_15511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_15544;

  corral_source_split_15544:
    assume {:verifier.code 0} true;
    $p34 := $M.86;
    goto corral_source_split_15545;

  corral_source_split_15545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} vslice_dummy_var_206 := queue_setup($p34, $p8, $p4, $p2, $p6, $p10);
    goto corral_source_split_15546;

  corral_source_split_15546:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2669} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_15547;

  corral_source_split_15547:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb2:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i13, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i13, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i20 == 1);
    goto corral_source_split_15521;

  corral_source_split_15521:
    assume {:verifier.code 0} true;
    $i29 := $M.97;
    goto corral_source_split_15522;

  corral_source_split_15522:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_15523;

  corral_source_split_15523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume $i30 == 1;
    goto corral_source_split_15539;

  corral_source_split_15539:
    assume {:verifier.code 0} true;
    $p31 := $M.86;
    goto corral_source_split_15540;

  corral_source_split_15540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2666} vb2_ops_wait_prepare($p31);
    goto corral_source_split_15541;

  corral_source_split_15541:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2667} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_15542;

  corral_source_split_15542:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb15:
    assume $i20 == 1;
    goto corral_source_split_15517;

  corral_source_split_15517:
    assume {:verifier.code 0} true;
    $i26 := $M.97;
    goto corral_source_split_15518;

  corral_source_split_15518:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_15519;

  corral_source_split_15519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23:
    assume $i27 == 1;
    goto corral_source_split_15534;

  corral_source_split_15534:
    assume {:verifier.code 0} true;
    $p28 := $M.86;
    goto corral_source_split_15535;

  corral_source_split_15535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2664} stop_streaming___0($p28);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_15536;

  corral_source_split_15536:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2665} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_15537;

  corral_source_split_15537:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i13, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb10;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_15525;

  corral_source_split_15525:
    assume {:verifier.code 0} true;
    $i22 := $M.97;
    goto corral_source_split_15526;

  corral_source_split_15526:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 1);
    goto corral_source_split_15527;

  corral_source_split_15527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i23 == 1;
    goto corral_source_split_15529;

  corral_source_split_15529:
    assume {:verifier.code 0} true;
    $p24 := $M.87;
    goto corral_source_split_15530;

  corral_source_split_15530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} vslice_dummy_var_205 := buffer_prepare($p24);
    goto corral_source_split_15531;

  corral_source_split_15531:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2663} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_15532;

  corral_source_split_15532:
    assume {:verifier.code 0} true;
    goto $bb21;
}



const ldv_main_exported_9: ref;

axiom ldv_main_exported_9 == $sub.ref(0, 811538);

procedure ldv_main_exported_9();
  free requires assertsPassed;
  modifies $M.37, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $M.99, $M.98, $M.43, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.27, $M.29, $M.32, $M.25, $M.28, $M.36, assertsPassed;



implementation ldv_main_exported_9()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i64;
  var vslice_dummy_var_208: ref;
  var vslice_dummy_var_209: ref;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i64;
  var vslice_dummy_var_216: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2677} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2678} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_15567;

  corral_source_split_15567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2679} $p2 := ldv_init_zalloc(16);
    goto corral_source_split_15568;

  corral_source_split_15568:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_15569;

  corral_source_split_15569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2680} $p4 := ldv_init_zalloc(184);
    goto corral_source_split_15570;

  corral_source_split_15570:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_15571;

  corral_source_split_15571:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_15572;

  corral_source_split_15572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2681} vslice_dummy_var_208 := ldv_memset($p6, 0, 8);
    goto corral_source_split_15573;

  corral_source_split_15573:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_15574;

  corral_source_split_15574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2682} vslice_dummy_var_209 := ldv_memset($p8, 0, 4);
    goto corral_source_split_15575;

  corral_source_split_15575:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2683} $i10 := __VERIFIER_nondet_int();
    call {:si_unique_call 2684} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i10);
    call {:si_unique_call 2685} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i10, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2705} ldv_stop();
    goto corral_source_split_15661;

  corral_source_split_15661:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_15585;

  corral_source_split_15585:
    assume {:verifier.code 0} true;
    $i47 := $M.98;
    goto corral_source_split_15586;

  corral_source_split_15586:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 2);
    goto corral_source_split_15587;

  corral_source_split_15587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i53 := $M.98;
    goto corral_source_split_15651;

  corral_source_split_15651:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 1);
    goto corral_source_split_15652;

  corral_source_split_15652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb40:
    assume $i54 == 1;
    goto corral_source_split_15654;

  corral_source_split_15654:
    assume {:verifier.code 0} true;
    $p55 := $M.89;
    goto corral_source_split_15655;

  corral_source_split_15655:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.37, $p1);
    goto corral_source_split_15656;

  corral_source_split_15656:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.37, $p0);
    goto corral_source_split_15657;

  corral_source_split_15657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2703} vslice_dummy_var_216 := video_ioctl2($p55, $i56, $i57);
    goto corral_source_split_15658;

  corral_source_split_15658:
    assume {:verifier.code 0} true;
    $M.98 := 1;
    call {:si_unique_call 2704} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_15659;

  corral_source_split_15659:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i48 == 1;
    goto corral_source_split_15644;

  corral_source_split_15644:
    assume {:verifier.code 0} true;
    $p49 := $M.89;
    goto corral_source_split_15645;

  corral_source_split_15645:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.37, $p1);
    goto corral_source_split_15646;

  corral_source_split_15646:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.37, $p0);
    goto corral_source_split_15647;

  corral_source_split_15647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2701} vslice_dummy_var_215 := video_ioctl2($p49, $i50, $i51);
    goto corral_source_split_15648;

  corral_source_split_15648:
    assume {:verifier.code 0} true;
    $M.98 := 2;
    call {:si_unique_call 2702} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_15649;

  corral_source_split_15649:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_15581;

  corral_source_split_15581:
    assume {:verifier.code 0} true;
    $i39 := $M.98;
    goto corral_source_split_15582;

  corral_source_split_15582:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 2);
    goto corral_source_split_15583;

  corral_source_split_15583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i43 := $M.98;
    goto corral_source_split_15636;

  corral_source_split_15636:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 1);
    goto corral_source_split_15637;

  corral_source_split_15637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb34:
    assume $i44 == 1;
    goto corral_source_split_15639;

  corral_source_split_15639:
    assume {:verifier.code 0} true;
    $p45 := $M.89;
    goto corral_source_split_15640;

  corral_source_split_15640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2699} vslice_dummy_var_214 := vb2_fop_poll($p45, $p3);
    goto corral_source_split_15641;

  corral_source_split_15641:
    assume {:verifier.code 0} true;
    $M.98 := 1;
    call {:si_unique_call 2700} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_15642;

  corral_source_split_15642:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i40 == 1;
    goto corral_source_split_15631;

  corral_source_split_15631:
    assume {:verifier.code 0} true;
    $p41 := $M.89;
    goto corral_source_split_15632;

  corral_source_split_15632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2697} vslice_dummy_var_213 := vb2_fop_poll($p41, $p3);
    goto corral_source_split_15633;

  corral_source_split_15633:
    assume {:verifier.code 0} true;
    $M.98 := 2;
    call {:si_unique_call 2698} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_15634;

  corral_source_split_15634:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_15577;

  corral_source_split_15577:
    assume {:verifier.code 0} true;
    $i33 := $M.98;
    goto corral_source_split_15578;

  corral_source_split_15578:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 2);
    goto corral_source_split_15579;

  corral_source_split_15579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28:
    assume $i34 == 1;
    goto corral_source_split_15623;

  corral_source_split_15623:
    assume {:verifier.code 0} true;
    $p35 := $M.89;
    goto corral_source_split_15624;

  corral_source_split_15624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2694} vslice_dummy_var_212 := fimc_capture_release($p35);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_15625;

  corral_source_split_15625:
    assume {:verifier.code 0} true;
    $M.98 := 1;
    call {:si_unique_call 2695} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_15626;

  corral_source_split_15626:
    assume {:verifier.code 0} true;
    $i37 := $M.43;
    goto corral_source_split_15627;

  corral_source_split_15627:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32($i37, 1);
    goto corral_source_split_15628;

  corral_source_split_15628:
    assume {:verifier.code 0} true;
    $M.43 := $i38;
    call {:si_unique_call 2696} {:cexpr "ref_cnt"} boogie_si_record_i32($i38);
    goto corral_source_split_15629;

  corral_source_split_15629:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i10, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    goto corral_source_split_15589;

  corral_source_split_15589:
    assume {:verifier.code 0} true;
    $i25 := $M.98;
    goto corral_source_split_15590;

  corral_source_split_15590:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_15591;

  corral_source_split_15591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i29 := $M.98;
    goto corral_source_split_15615;

  corral_source_split_15615:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_15616;

  corral_source_split_15616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb25:
    assume $i30 == 1;
    goto corral_source_split_15618;

  corral_source_split_15618:
    assume {:verifier.code 0} true;
    $p31 := $M.89;
    goto corral_source_split_15619;

  corral_source_split_15619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} vslice_dummy_var_211 := vb2_fop_mmap($p31, $p5);
    goto corral_source_split_15620;

  corral_source_split_15620:
    assume {:verifier.code 0} true;
    $M.98 := 1;
    call {:si_unique_call 2693} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_15621;

  corral_source_split_15621:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i26 == 1;
    goto corral_source_split_15610;

  corral_source_split_15610:
    assume {:verifier.code 0} true;
    $p27 := $M.89;
    goto corral_source_split_15611;

  corral_source_split_15611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} vslice_dummy_var_210 := vb2_fop_mmap($p27, $p5);
    goto corral_source_split_15612;

  corral_source_split_15612:
    assume {:verifier.code 0} true;
    $M.98 := 2;
    call {:si_unique_call 2691} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_15613;

  corral_source_split_15613:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb11:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i10, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_15593;

  corral_source_split_15593:
    assume {:verifier.code 0} true;
    $i17 := $M.98;
    goto corral_source_split_15594;

  corral_source_split_15594:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_15595;

  corral_source_split_15595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume $i18 == 1;
    goto corral_source_split_15597;

  corral_source_split_15597:
    assume {:verifier.code 0} true;
    $p19 := $M.89;
    goto corral_source_split_15598;

  corral_source_split_15598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2686} $i20 := fimc_capture_open($p19);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_15599;

  corral_source_split_15599:
    assume {:verifier.code 0} true;
    $M.99 := $i20;
    call {:si_unique_call 2687} {:cexpr "ldv_retval_24"} boogie_si_record_i32($i20);
    goto corral_source_split_15600;

  corral_source_split_15600:
    assume {:verifier.code 0} true;
    $i21 := $M.99;
    goto corral_source_split_15601;

  corral_source_split_15601:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_15602;

  corral_source_split_15602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i22 == 1;
    goto corral_source_split_15604;

  corral_source_split_15604:
    assume {:verifier.code 0} true;
    $M.98 := 2;
    call {:si_unique_call 2688} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_15605;

  corral_source_split_15605:
    assume {:verifier.code 0} true;
    $i23 := $M.43;
    goto corral_source_split_15606;

  corral_source_split_15606:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, 1);
    goto corral_source_split_15607;

  corral_source_split_15607:
    assume {:verifier.code 0} true;
    $M.43 := $i24;
    call {:si_unique_call 2689} {:cexpr "ref_cnt"} boogie_si_record_i32($i24);
    goto corral_source_split_15608;

  corral_source_split_15608:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_343:
    assume !assertsPassed;
    return;
}



const ldv_main_exported_5: ref;

axiom ldv_main_exported_5 == $sub.ref(0, 812570);

procedure ldv_main_exported_5();
  free requires assertsPassed;
  modifies $M.0, $M.100, $CurrAddr;



implementation ldv_main_exported_5()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var vslice_dummy_var_217: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15663;

  corral_source_split_15663:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2706} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2707} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2708} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2713} ldv_stop();
    goto corral_source_split_15683;

  corral_source_split_15683:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_15665;

  corral_source_split_15665:
    assume {:verifier.code 0} true;
    $i7 := $M.100;
    goto corral_source_split_15666;

  corral_source_split_15666:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_15667;

  corral_source_split_15667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_15678;

  corral_source_split_15678:
    assume {:verifier.code 0} true;
    $p9 := $M.88;
    goto corral_source_split_15679;

  corral_source_split_15679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2711} vslice_dummy_var_217 := fimc_capture_subdev_registered($p9);
    goto corral_source_split_15680;

  corral_source_split_15680:
    assume {:verifier.code 0} true;
    $M.100 := 1;
    call {:si_unique_call 2712} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_15681;

  corral_source_split_15681:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb6;

  $bb7:
    assume $i3 == 1;
    goto corral_source_split_15669;

  corral_source_split_15669:
    assume {:verifier.code 0} true;
    $i4 := $M.100;
    goto corral_source_split_15670;

  corral_source_split_15670:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_15671;

  corral_source_split_15671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i5 == 1;
    goto corral_source_split_15673;

  corral_source_split_15673:
    assume {:verifier.code 0} true;
    $p6 := $M.88;
    goto corral_source_split_15674;

  corral_source_split_15674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2709} fimc_capture_subdev_unregistered($p6);
    goto corral_source_split_15675;

  corral_source_split_15675:
    assume {:verifier.code 0} true;
    $M.100 := 1;
    call {:si_unique_call 2710} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_15676;

  corral_source_split_15676:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const ldv_initialize_exynos_media_pipeline_ops_4: ref;

axiom ldv_initialize_exynos_media_pipeline_ops_4 == $sub.ref(0, 813602);

procedure ldv_initialize_exynos_media_pipeline_ops_4();
  free requires assertsPassed;
  modifies $M.101, $M.0, $CurrAddr;



implementation ldv_initialize_exynos_media_pipeline_ops_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15685;

  corral_source_split_15685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2714} $p0 := ldv_init_zalloc(8);
    goto corral_source_split_15686;

  corral_source_split_15686:
    assume {:verifier.code 0} true;
    goto corral_source_split_15687;

  corral_source_split_15687:
    assume {:verifier.code 0} true;
    $M.101 := $p0;
    goto corral_source_split_15688;

  corral_source_split_15688:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_clk_ops_2: ref;

axiom ldv_initialize_clk_ops_2 == $sub.ref(0, 814634);

procedure ldv_initialize_clk_ops_2();
  free requires assertsPassed;
  modifies $M.102, $M.0, $CurrAddr;



implementation ldv_initialize_clk_ops_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15690;

  corral_source_split_15690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2715} $p0 := ldv_init_zalloc(24);
    goto corral_source_split_15691;

  corral_source_split_15691:
    assume {:verifier.code 0} true;
    goto corral_source_split_15692;

  corral_source_split_15692:
    assume {:verifier.code 0} true;
    $M.102 := $p0;
    goto corral_source_split_15693;

  corral_source_split_15693:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_3: ref;

axiom ldv_initialize_device_attribute_3 == $sub.ref(0, 815666);

procedure ldv_initialize_device_attribute_3();
  free requires assertsPassed;
  modifies $M.103, $M.104, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_3()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15695;

  corral_source_split_15695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2716} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_15696;

  corral_source_split_15696:
    assume {:verifier.code 0} true;
    goto corral_source_split_15697;

  corral_source_split_15697:
    assume {:verifier.code 0} true;
    $M.103 := $p0;
    goto corral_source_split_15698;

  corral_source_split_15698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2717} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_15699;

  corral_source_split_15699:
    assume {:verifier.code 0} true;
    goto corral_source_split_15700;

  corral_source_split_15700:
    assume {:verifier.code 0} true;
    $M.104 := $p2;
    goto corral_source_split_15701;

  corral_source_split_15701:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 816698);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.37, $M.77, $M.96, $M.64, $M.105, $M.38, $M.43, $M.106, $M.41, $M.78, $M.95, $M.107, $M.98, $M.79, $M.81, $M.65, $M.94, $M.108, $M.97, $M.100, $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.109, $M.110, $M.111, $M.112, $M.88, $M.86, $M.87, $M.73, $M.74, $M.75, $M.76, $M.40, $M.101, $M.90, $M.91, $M.92, $M.93, $M.70, $M.71, $M.102, $M.72, $M.89, $M.103, $M.104, $M.82, $M.83, $M.84, $M.85, $M.42, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.30, $M.31, $M.99, $M.80, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.67, $M.68, $M.69, $M.28, $M.113, $M.114, $M.66, $M.39, $M.36, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.170, $M.19, $M.20, $M.8, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.202, $M.203, $M.204, $M.205, $M.206, $M.207, $M.208, $M.209, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.219, $M.220, $M.221, $M.222, $CurrAddr, $M.25, $M.27, $M.29, $M.32, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i1;
  var $i130: i32;
  var $i131: i1;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i135: i1;
  var $i136: i32;
  var $i137: i1;
  var $i138: i1;
  var $i139: i1;
  var $i140: i1;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $i144: i8;
  var $i145: i1;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $i150: i8;
  var $i151: i1;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $i156: i8;
  var $i157: i1;
  var $i158: i32;
  var $i159: i32;
  var $i160: i1;
  var $i161: i32;
  var $i162: i32;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $i166: i32;
  var $i167: i32;
  var $i168: i1;
  var $i169: i32;
  var $i170: i32;
  var $i171: i32;
  var $i172: i1;
  var $i173: i32;
  var $i174: i1;
  var vslice_dummy_var_218: ref;
  var vslice_dummy_var_219: ref;
  var vslice_dummy_var_220: ref;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i64;
  var vslice_dummy_var_223: i64;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;

  $bb0:
    call {:si_unique_call 2718} $initialize();
    goto corral_source_split_15703;

  corral_source_split_15703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2719} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 2720} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2721} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_15704;

  corral_source_split_15704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2723} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_15705;

  corral_source_split_15705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2724} $p4 := ldv_init_zalloc(1);
    goto corral_source_split_15706;

  corral_source_split_15706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2725} $p5 := ldv_init_zalloc(120);
    goto corral_source_split_15707;

  corral_source_split_15707:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_15708;

  corral_source_split_15708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} ldv_initialize();
    goto corral_source_split_15709;

  corral_source_split_15709:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_15710;

  corral_source_split_15710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2727} vslice_dummy_var_218 := ldv_memset($p7, 0, 8);
    goto corral_source_split_15711;

  corral_source_split_15711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2728} vslice_dummy_var_219 := ldv_memset($p1, 0, 1);
    goto corral_source_split_15712;

  corral_source_split_15712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2729} vslice_dummy_var_220 := ldv_memset($p2, 0, 1);
    goto corral_source_split_15713;

  corral_source_split_15713:
    assume {:verifier.code 0} true;
    $M.77 := 0;
    call {:si_unique_call 2730} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_15714;

  corral_source_split_15714:
    assume {:verifier.code 0} true;
    $M.96 := 0;
    call {:si_unique_call 2731} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_15715;

  corral_source_split_15715:
    assume {:verifier.code 0} true;
    $M.64 := 0;
    call {:si_unique_call 2732} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    goto corral_source_split_15716;

  corral_source_split_15716:
    assume {:verifier.code 0} true;
    $M.105 := 0;
    call {:si_unique_call 2733} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_15717;

  corral_source_split_15717:
    assume {:verifier.code 0} true;
    $M.38 := 0;
    call {:si_unique_call 2734} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_15718;

  corral_source_split_15718:
    assume {:verifier.code 0} true;
    $M.43 := 0;
    call {:si_unique_call 2735} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_15719;

  corral_source_split_15719:
    assume {:verifier.code 0} true;
    $M.106 := 1;
    call {:si_unique_call 2736} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_15720;

  corral_source_split_15720:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 2737} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    goto corral_source_split_15721;

  corral_source_split_15721:
    assume {:verifier.code 0} true;
    $M.78 := 0;
    call {:si_unique_call 2738} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    goto corral_source_split_15722;

  corral_source_split_15722:
    assume {:verifier.code 0} true;
    $M.95 := 0;
    call {:si_unique_call 2739} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_15723;

  corral_source_split_15723:
    assume {:verifier.code 0} true;
    $M.107 := 0;
    call {:si_unique_call 2740} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_15724;

  corral_source_split_15724:
    assume {:verifier.code 0} true;
    $M.98 := 0;
    call {:si_unique_call 2741} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_15725;

  corral_source_split_15725:
    assume {:verifier.code 0} true;
    $M.79 := 0;
    call {:si_unique_call 2742} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    goto corral_source_split_15726;

  corral_source_split_15726:
    assume {:verifier.code 0} true;
    $M.81 := 0;
    call {:si_unique_call 2743} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    goto corral_source_split_15727;

  corral_source_split_15727:
    assume {:verifier.code 0} true;
    $M.65 := 0;
    call {:si_unique_call 2744} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    goto corral_source_split_15728;

  corral_source_split_15728:
    assume {:verifier.code 0} true;
    $M.94 := 0;
    call {:si_unique_call 2745} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_15729;

  corral_source_split_15729:
    assume {:verifier.code 0} true;
    $M.108 := 0;
    call {:si_unique_call 2746} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_15730;

  corral_source_split_15730:
    assume {:verifier.code 0} true;
    $M.97 := 0;
    call {:si_unique_call 2747} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_15731;

  corral_source_split_15731:
    assume {:verifier.code 0} true;
    $M.100 := 0;
    call {:si_unique_call 2748} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_15732;

  corral_source_split_15732:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $p68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $p78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $p115, $p116, $i117, $i119, $i120, $p121, $p122, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $p143, $i144, $i145, $i147, $i148, $p149, $i150, $i151, $i153, $i154, $p155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $p165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, vslice_dummy_var_221, vslice_dummy_var_222, vslice_dummy_var_223, vslice_dummy_var_224, vslice_dummy_var_225 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p6, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $p58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $p68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $p78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $p115, $p116, $i117, $i119, $i120, $p121, $p122, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $p143, $i144, $i145, $i147, $i148, $p149, $i150, $i151, $i153, $i154, $p155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $p165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, vslice_dummy_var_221, vslice_dummy_var_222, vslice_dummy_var_223, vslice_dummy_var_224, vslice_dummy_var_225);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i11, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i11, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i11, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i11, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2854} ldv_stop();
    goto corral_source_split_16082;

  corral_source_split_16082:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb45_dummy;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_15742;

  corral_source_split_15742:
    assume {:verifier.code 0} true;
    $i173 := $M.100;
    goto corral_source_split_15743;

  corral_source_split_15743:
    assume {:verifier.code 0} true;
    $i174 := $ne.i32($i173, 0);
    goto corral_source_split_15744;

  corral_source_split_15744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb221:
    assume $i174 == 1;
    goto corral_source_split_16079;

  corral_source_split_16079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2853} ldv_main_exported_5();
    goto corral_source_split_16080;

  corral_source_split_16080:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_15738;

  corral_source_split_15738:
    assume {:verifier.code 0} true;
    $i171 := $M.97;
    goto corral_source_split_15739;

  corral_source_split_15739:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i171, 0);
    goto corral_source_split_15740;

  corral_source_split_15740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb218:
    assume $i172 == 1;
    goto corral_source_split_16076;

  corral_source_split_16076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2852} ldv_main_exported_10();
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_16077;

  corral_source_split_16077:
    assume {:verifier.code 0} true;
    goto $bb220;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_15734;

  corral_source_split_15734:
    assume {:verifier.code 0} true;
    $i134 := $M.108;
    goto corral_source_split_15735;

  corral_source_split_15735:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_15736;

  corral_source_split_15736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb184:
    assume $i135 == 1;
    goto corral_source_split_16015;

  corral_source_split_16015:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2836} $i136 := __VERIFIER_nondet_int();
    call {:si_unique_call 2837} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i136);
    call {:si_unique_call 2838} {:cexpr "tmp___7"} boogie_si_record_i32($i136);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $i137 := $slt.i32($i136, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    $i138 := $slt.i32($i136, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i136, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    assume !($i139 == 1);
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2851} ldv_stop();
    goto corral_source_split_16074;

  corral_source_split_16074:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb191:
    assume $i139 == 1;
    goto corral_source_split_16021;

  corral_source_split_16021:
    assume {:verifier.code 0} true;
    $i163 := $M.108;
    goto corral_source_split_16022;

  corral_source_split_16022:
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i163, 2);
    goto corral_source_split_16023;

  corral_source_split_16023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb209:
    assume $i164 == 1;
    goto corral_source_split_16061;

  corral_source_split_16061:
    assume {:verifier.code 0} true;
    $p165 := $M.101;
    goto corral_source_split_16062;

  corral_source_split_16062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2847} $i166 := __fimc_pipeline_close($p165);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_16063;

  corral_source_split_16063:
    assume {:verifier.code 0} true;
    $M.114 := $i166;
    call {:si_unique_call 2848} {:cexpr "ldv_retval_28"} boogie_si_record_i32($i166);
    goto corral_source_split_16064;

  corral_source_split_16064:
    assume {:verifier.code 0} true;
    $i167 := $M.114;
    goto corral_source_split_16065;

  corral_source_split_16065:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 0);
    goto corral_source_split_16066;

  corral_source_split_16066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb211:
    assume $i168 == 1;
    goto corral_source_split_16068;

  corral_source_split_16068:
    assume {:verifier.code 0} true;
    $M.108 := 1;
    call {:si_unique_call 2849} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_16069;

  corral_source_split_16069:
    assume {:verifier.code 0} true;
    $i169 := $M.43;
    goto corral_source_split_16070;

  corral_source_split_16070:
    assume {:verifier.code 0} true;
    $i170 := $sub.i32($i169, 1);
    goto corral_source_split_16071;

  corral_source_split_16071:
    assume {:verifier.code 0} true;
    $M.43 := $i170;
    call {:si_unique_call 2850} {:cexpr "ref_cnt"} boogie_si_record_i32($i170);
    goto corral_source_split_16072;

  corral_source_split_16072:
    assume {:verifier.code 0} true;
    goto $bb213;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb189:
    assume $i138 == 1;
    goto corral_source_split_16017;

  corral_source_split_16017:
    assume {:verifier.code 0} true;
    $i153 := $M.108;
    goto corral_source_split_16018;

  corral_source_split_16018:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 1);
    goto corral_source_split_16019;

  corral_source_split_16019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb203:
    assume $i154 == 1;
    goto corral_source_split_16046;

  corral_source_split_16046:
    assume {:verifier.code 0} true;
    $p155 := $M.101;
    goto corral_source_split_16047;

  corral_source_split_16047:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.37, $p1);
    goto corral_source_split_16048;

  corral_source_split_16048:
    assume {:verifier.code 0} true;
    $i157 := $trunc.i8.i1($i156);
    goto corral_source_split_16049;

  corral_source_split_16049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2843} $i158 := __fimc_pipeline_open($p155, $p6, $i157);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_16050;

  corral_source_split_16050:
    assume {:verifier.code 0} true;
    $M.113 := $i158;
    call {:si_unique_call 2844} {:cexpr "ldv_retval_29"} boogie_si_record_i32($i158);
    goto corral_source_split_16051;

  corral_source_split_16051:
    assume {:verifier.code 0} true;
    $i159 := $M.113;
    goto corral_source_split_16052;

  corral_source_split_16052:
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i159, 0);
    goto corral_source_split_16053;

  corral_source_split_16053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb205:
    assume $i160 == 1;
    goto corral_source_split_16055;

  corral_source_split_16055:
    assume {:verifier.code 0} true;
    $M.108 := 2;
    call {:si_unique_call 2845} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_16056;

  corral_source_split_16056:
    assume {:verifier.code 0} true;
    $i161 := $M.43;
    goto corral_source_split_16057;

  corral_source_split_16057:
    assume {:verifier.code 0} true;
    $i162 := $add.i32($i161, 1);
    goto corral_source_split_16058;

  corral_source_split_16058:
    assume {:verifier.code 0} true;
    $M.43 := $i162;
    call {:si_unique_call 2846} {:cexpr "ref_cnt"} boogie_si_record_i32($i162);
    goto corral_source_split_16059;

  corral_source_split_16059:
    assume {:verifier.code 0} true;
    goto $bb207;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb187:
    assume $i137 == 1;
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i136, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    assume !($i140 == 1);
    goto $bb193;

  $bb194:
    assume $i140 == 1;
    goto corral_source_split_16025;

  corral_source_split_16025:
    assume {:verifier.code 0} true;
    $i141 := $M.108;
    goto corral_source_split_16026;

  corral_source_split_16026:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 2);
    goto corral_source_split_16027;

  corral_source_split_16027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $i147 := $M.108;
    goto corral_source_split_16036;

  corral_source_split_16036:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 1);
    goto corral_source_split_16037;

  corral_source_split_16037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb199:
    assume $i148 == 1;
    goto corral_source_split_16039;

  corral_source_split_16039:
    assume {:verifier.code 0} true;
    $p149 := $M.101;
    goto corral_source_split_16040;

  corral_source_split_16040:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.37, $p2);
    goto corral_source_split_16041;

  corral_source_split_16041:
    assume {:verifier.code 0} true;
    $i151 := $trunc.i8.i1($i150);
    goto corral_source_split_16042;

  corral_source_split_16042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2841} vslice_dummy_var_225 := __fimc_pipeline_s_stream($p149, $i151);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_16043;

  corral_source_split_16043:
    assume {:verifier.code 0} true;
    $M.108 := 1;
    call {:si_unique_call 2842} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_16044;

  corral_source_split_16044:
    assume {:verifier.code 0} true;
    goto $bb201;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb196:
    assume $i142 == 1;
    goto corral_source_split_16029;

  corral_source_split_16029:
    assume {:verifier.code 0} true;
    $p143 := $M.101;
    goto corral_source_split_16030;

  corral_source_split_16030:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.37, $p2);
    goto corral_source_split_16031;

  corral_source_split_16031:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i8.i1($i144);
    goto corral_source_split_16032;

  corral_source_split_16032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2839} vslice_dummy_var_224 := __fimc_pipeline_s_stream($p143, $i145);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_16033;

  corral_source_split_16033:
    assume {:verifier.code 0} true;
    $M.108 := 2;
    call {:si_unique_call 2840} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_16034;

  corral_source_split_16034:
    assume {:verifier.code 0} true;
    goto $bb198;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i11, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    goto corral_source_split_15750;

  corral_source_split_15750:
    assume {:verifier.code 0} true;
    $i132 := $M.94;
    goto corral_source_split_15751;

  corral_source_split_15751:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_15752;

  corral_source_split_15752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb181:
    assume $i133 == 1;
    goto corral_source_split_16012;

  corral_source_split_16012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2835} ldv_main_exported_8();
    goto corral_source_split_16013;

  corral_source_split_16013:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb16:
    assume $i18 == 1;
    goto corral_source_split_15746;

  corral_source_split_15746:
    assume {:verifier.code 0} true;
    $i130 := $M.65;
    goto corral_source_split_15747;

  corral_source_split_15747:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_15748;

  corral_source_split_15748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb178:
    assume $i131 == 1;
    goto corral_source_split_16009;

  corral_source_split_16009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2834} ldv_main_exported_15();
    goto corral_source_split_16010;

  corral_source_split_16010:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb5:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i11, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i11, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i20 == 1);
    goto corral_source_split_15758;

  corral_source_split_15758:
    assume {:verifier.code 0} true;
    $i128 := $M.81;
    goto corral_source_split_15759;

  corral_source_split_15759:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_15760;

  corral_source_split_15760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb175:
    assume $i129 == 1;
    goto corral_source_split_16006;

  corral_source_split_16006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2833} ldv_main_exported_14();
    goto corral_source_split_16007;

  corral_source_split_16007:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_15754;

  corral_source_split_15754:
    assume {:verifier.code 0} true;
    $i126 := $M.79;
    goto corral_source_split_15755;

  corral_source_split_15755:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_15756;

  corral_source_split_15756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb172:
    assume $i127 == 1;
    goto corral_source_split_16003;

  corral_source_split_16003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2832} ldv_main_exported_12();
    goto corral_source_split_16004;

  corral_source_split_16004:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb18:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i11, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i21 == 1);
    goto corral_source_split_15766;

  corral_source_split_15766:
    assume {:verifier.code 0} true;
    $i124 := $M.98;
    goto corral_source_split_15767;

  corral_source_split_15767:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_15768;

  corral_source_split_15768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb169:
    assume $i125 == 1;
    goto corral_source_split_16000;

  corral_source_split_16000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2831} ldv_main_exported_9();
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_16001;

  corral_source_split_16001:
    assume {:verifier.code 0} true;
    goto $bb171;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i21 == 1;
    goto corral_source_split_15762;

  corral_source_split_15762:
    assume {:verifier.code 0} true;
    $i107 := $M.107;
    goto corral_source_split_15763;

  corral_source_split_15763:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_15764;

  corral_source_split_15764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb149:
    assume $i108 == 1;
    goto corral_source_split_15975;

  corral_source_split_15975:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2823} $i109 := __VERIFIER_nondet_int();
    call {:si_unique_call 2824} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i109);
    call {:si_unique_call 2825} {:cexpr "tmp___6"} boogie_si_record_i32($i109);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i109, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i109, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2830} ldv_stop();
    goto corral_source_split_15998;

  corral_source_split_15998:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb154:
    assume $i111 == 1;
    goto corral_source_split_15977;

  corral_source_split_15977:
    assume {:verifier.code 0} true;
    $i119 := $M.107;
    goto corral_source_split_15978;

  corral_source_split_15978:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 1);
    goto corral_source_split_15979;

  corral_source_split_15979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb163:
    assume $i120 == 1;
    goto corral_source_split_15992;

  corral_source_split_15992:
    assume {:verifier.code 0} true;
    $p121 := $M.104;
    goto corral_source_split_15993;

  corral_source_split_15993:
    assume {:verifier.code 0} true;
    $p122 := $M.103;
    goto corral_source_split_15994;

  corral_source_split_15994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2828} vslice_dummy_var_223 := fimc_md_sysfs_show($p121, $p122, $p4);
    goto corral_source_split_15995;

  corral_source_split_15995:
    assume {:verifier.code 0} true;
    $M.107 := 1;
    call {:si_unique_call 2829} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_15996;

  corral_source_split_15996:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb152:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i109, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb156;

  $bb157:
    assume $i112 == 1;
    goto corral_source_split_15981;

  corral_source_split_15981:
    assume {:verifier.code 0} true;
    $i113 := $M.107;
    goto corral_source_split_15982;

  corral_source_split_15982:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 1);
    goto corral_source_split_15983;

  corral_source_split_15983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb159:
    assume $i114 == 1;
    goto corral_source_split_15985;

  corral_source_split_15985:
    assume {:verifier.code 0} true;
    $p115 := $M.104;
    goto corral_source_split_15986;

  corral_source_split_15986:
    assume {:verifier.code 0} true;
    $p116 := $M.103;
    goto corral_source_split_15987;

  corral_source_split_15987:
    assume {:verifier.code 0} true;
    $i117 := $load.i64($M.37, $p0);
    goto corral_source_split_15988;

  corral_source_split_15988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2826} vslice_dummy_var_222 := fimc_md_sysfs_store($p115, $p116, $p3, $i117);
    goto corral_source_split_15989;

  corral_source_split_15989:
    assume {:verifier.code 0} true;
    $M.107 := 1;
    call {:si_unique_call 2827} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_15990;

  corral_source_split_15990:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb3:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i11, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i11, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i11, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i11, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i25 == 1);
    goto corral_source_split_15778;

  corral_source_split_15778:
    assume {:verifier.code 0} true;
    $i105 := $M.95;
    goto corral_source_split_15779;

  corral_source_split_15779:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_15780;

  corral_source_split_15780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb146:
    assume $i106 == 1;
    goto corral_source_split_15972;

  corral_source_split_15972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2822} ldv_main_exported_6();
    goto corral_source_split_15973;

  corral_source_split_15973:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb30:
    assume $i25 == 1;
    goto corral_source_split_15774;

  corral_source_split_15774:
    assume {:verifier.code 0} true;
    $i103 := $M.78;
    goto corral_source_split_15775;

  corral_source_split_15775:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_15776;

  corral_source_split_15776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb143:
    assume $i104 == 1;
    goto corral_source_split_15969;

  corral_source_split_15969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2821} ldv_main_exported_13();
    goto corral_source_split_15970;

  corral_source_split_15970:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb28:
    assume $i24 == 1;
    goto corral_source_split_15770;

  corral_source_split_15770:
    assume {:verifier.code 0} true;
    $i101 := $M.41;
    goto corral_source_split_15771;

  corral_source_split_15771:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_15772;

  corral_source_split_15772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb140:
    assume $i102 == 1;
    goto corral_source_split_15966;

  corral_source_split_15966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2820} ldv_main_exported_16();
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_15967;

  corral_source_split_15967:
    assume {:verifier.code 0} true;
    goto $bb142;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i26 == 1);
    goto corral_source_split_15786;

  corral_source_split_15786:
    assume {:verifier.code 0} true;
    $i84 := $M.106;
    goto corral_source_split_15787;

  corral_source_split_15787:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_15788;

  corral_source_split_15788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb110:
    assume $i85 == 1;
    goto corral_source_split_15902;

  corral_source_split_15902:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2782} $i86 := __VERIFIER_nondet_int();
    call {:si_unique_call 2783} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i86);
    call {:si_unique_call 2784} {:cexpr "tmp___5"} boogie_si_record_i32($i86);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i86, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i86, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2819} ldv_stop();
    goto corral_source_split_15964;

  corral_source_split_15964:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb115:
    assume $i88 == 1;
    goto corral_source_split_15904;

  corral_source_split_15904:
    assume {:verifier.code 0} true;
    $i94 := $M.106;
    goto corral_source_split_15905;

  corral_source_split_15905:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 1);
    goto corral_source_split_15906;

  corral_source_split_15906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb128:
    assume $i95 == 1;
    goto corral_source_split_15922;

  corral_source_split_15922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} $i96 := fimc_md_init();
    goto corral_source_split_15923;

  corral_source_split_15923:
    assume {:verifier.code 0} true;
    $M.112 := $i96;
    call {:si_unique_call 2789} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i96);
    goto corral_source_split_15924;

  corral_source_split_15924:
    assume {:verifier.code 0} true;
    $i97 := $M.112;
    goto corral_source_split_15925;

  corral_source_split_15925:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_15926;

  corral_source_split_15926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i99 := $M.112;
    goto corral_source_split_15931;

  corral_source_split_15931:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 0);
    goto corral_source_split_15932;

  corral_source_split_15932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb133:
    assume $i100 == 1;
    goto corral_source_split_15934;

  corral_source_split_15934:
    assume {:verifier.code 0} true;
    $M.106 := 2;
    call {:si_unique_call 2791} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_15935;

  corral_source_split_15935:
    assume {:verifier.code 0} true;
    $M.100 := 1;
    call {:si_unique_call 2792} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_15936;

  corral_source_split_15936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2793} ldv_initialize_v4l2_subdev_internal_ops_5();
    goto corral_source_split_15937;

  corral_source_split_15937:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2794} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_15938;

  corral_source_split_15938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2795} ldv_initialize_vb2_ops_10();
    goto corral_source_split_15939;

  corral_source_split_15939:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2796} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_15940;

  corral_source_split_15940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2797} ldv_initialize_v4l2_ioctl_ops_13();
    goto corral_source_split_15941;

  corral_source_split_15941:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 2798} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_15942;

  corral_source_split_15942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2799} ldv_dev_pm_ops_16();
    goto corral_source_split_15943;

  corral_source_split_15943:
    assume {:verifier.code 0} true;
    $M.108 := 1;
    call {:si_unique_call 2800} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_15944;

  corral_source_split_15944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2801} ldv_initialize_exynos_media_pipeline_ops_4();
    goto corral_source_split_15945;

  corral_source_split_15945:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2802} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15946;

  corral_source_split_15946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2803} ldv_initialize_v4l2_ioctl_ops_8();
    goto corral_source_split_15947;

  corral_source_split_15947:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2804} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_15948;

  corral_source_split_15948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2805} ldv_initialize_vb2_ops_14();
    goto corral_source_split_15949;

  corral_source_split_15949:
    assume {:verifier.code 0} true;
    $M.105 := 1;
    call {:si_unique_call 2806} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_15950;

  corral_source_split_15950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2807} ldv_initialize_clk_ops_2();
    goto corral_source_split_15951;

  corral_source_split_15951:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2808} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_15952;

  corral_source_split_15952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2809} ldv_initialize_v4l2_file_operations_12();
    goto corral_source_split_15953;

  corral_source_split_15953:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 2810} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_15954;

  corral_source_split_15954:
    assume {:verifier.code 0} true;
    $M.98 := 1;
    call {:si_unique_call 2811} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_15955;

  corral_source_split_15955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2812} ldv_initialize_v4l2_file_operations_9();
    goto corral_source_split_15956;

  corral_source_split_15956:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 2813} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_15957;

  corral_source_split_15957:
    assume {:verifier.code 0} true;
    $M.107 := 1;
    call {:si_unique_call 2814} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_15958;

  corral_source_split_15958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2815} ldv_initialize_device_attribute_3();
    goto corral_source_split_15959;

  corral_source_split_15959:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2816} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15960;

  corral_source_split_15960:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2817} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_15961;

  corral_source_split_15961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2818} ldv_initialize_v4l2_subdev_pad_ops_6();
    goto corral_source_split_15962;

  corral_source_split_15962:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb130:
    assume $i98 == 1;
    goto corral_source_split_15928;

  corral_source_split_15928:
    assume {:verifier.code 0} true;
    $M.106 := 3;
    call {:si_unique_call 2790} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_15929;

  corral_source_split_15929:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2787} ldv_check_final_state();
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_15920;

  corral_source_split_15920:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb113:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i86, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb117;

  $bb118:
    assume $i89 == 1;
    goto corral_source_split_15908;

  corral_source_split_15908:
    assume {:verifier.code 0} true;
    $i90 := $M.106;
    goto corral_source_split_15909;

  corral_source_split_15909:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 2);
    goto corral_source_split_15910;

  corral_source_split_15910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb120:
    assume $i91 == 1;
    goto corral_source_split_15912;

  corral_source_split_15912:
    assume {:verifier.code 0} true;
    $i92 := $M.43;
    goto corral_source_split_15913;

  corral_source_split_15913:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 0);
    goto corral_source_split_15914;

  corral_source_split_15914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb122;

  $bb123:
    assume $i93 == 1;
    goto corral_source_split_15916;

  corral_source_split_15916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2785} fimc_md_exit();
    goto corral_source_split_15917;

  corral_source_split_15917:
    assume {:verifier.code 0} true;
    $M.106 := 3;
    call {:si_unique_call 2786} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_15918;

  corral_source_split_15918:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb32:
    assume $i26 == 1;
    goto corral_source_split_15782;

  corral_source_split_15782:
    assume {:verifier.code 0} true;
    $i50 := $M.38;
    goto corral_source_split_15783;

  corral_source_split_15783:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_15784;

  corral_source_split_15784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb72:
    assume $i51 == 1;
    goto corral_source_split_15837;

  corral_source_split_15837:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2763} $i52 := __VERIFIER_nondet_int();
    call {:si_unique_call 2764} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i52);
    call {:si_unique_call 2765} {:cexpr "tmp___4"} boogie_si_record_i32($i52);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i52, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i52, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2781} ldv_stop();
    goto corral_source_split_15900;

  corral_source_split_15900:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb77:
    assume $i54 == 1;
    goto corral_source_split_15839;

  corral_source_split_15839:
    assume {:verifier.code 0} true;
    $i64 := $M.38;
    goto corral_source_split_15840;

  corral_source_split_15840:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 1);
    goto corral_source_split_15841;

  corral_source_split_15841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i74 := $M.38;
    goto corral_source_split_15879;

  corral_source_split_15879:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 2);
    goto corral_source_split_15880;

  corral_source_split_15880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb98:
    assume $i75 == 1;
    goto corral_source_split_15882;

  corral_source_split_15882:
    assume {:verifier.code 0} true;
    $i76 := $M.110;
    goto corral_source_split_15883;

  corral_source_split_15883:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 1);
    goto corral_source_split_15884;

  corral_source_split_15884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb100;

  $bb101:
    assume $i77 == 1;
    goto corral_source_split_15886;

  corral_source_split_15886:
    assume {:verifier.code 0} true;
    $p78 := $M.39;
    goto corral_source_split_15887;

  corral_source_split_15887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2776} $i79 := fimc_md_remove($p78);
    goto corral_source_split_15888;

  corral_source_split_15888:
    assume {:verifier.code 0} true;
    $M.111 := $i79;
    call {:si_unique_call 2777} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i79);
    goto corral_source_split_15889;

  corral_source_split_15889:
    assume {:verifier.code 0} true;
    $i80 := $M.111;
    goto corral_source_split_15890;

  corral_source_split_15890:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 0);
    goto corral_source_split_15891;

  corral_source_split_15891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb103:
    assume $i81 == 1;
    goto corral_source_split_15893;

  corral_source_split_15893:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 2778} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_15894;

  corral_source_split_15894:
    assume {:verifier.code 0} true;
    $i82 := $M.43;
    goto corral_source_split_15895;

  corral_source_split_15895:
    assume {:verifier.code 0} true;
    $i83 := $sub.i32($i82, 1);
    goto corral_source_split_15896;

  corral_source_split_15896:
    assume {:verifier.code 0} true;
    $M.43 := $i83;
    call {:si_unique_call 2779} {:cexpr "ref_cnt"} boogie_si_record_i32($i83);
    goto corral_source_split_15897;

  corral_source_split_15897:
    assume {:verifier.code 0} true;
    $M.110 := 0;
    call {:si_unique_call 2780} {:cexpr "probed_1"} boogie_si_record_i32(0);
    goto corral_source_split_15898;

  corral_source_split_15898:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb89:
    assume $i65 == 1;
    goto corral_source_split_15861;

  corral_source_split_15861:
    assume {:verifier.code 0} true;
    $i66 := $M.110;
    goto corral_source_split_15862;

  corral_source_split_15862:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 1);
    goto corral_source_split_15863;

  corral_source_split_15863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb91;

  $bb92:
    assume $i67 == 1;
    goto corral_source_split_15865;

  corral_source_split_15865:
    assume {:verifier.code 0} true;
    $p68 := $M.39;
    goto corral_source_split_15866;

  corral_source_split_15866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2771} $i69 := fimc_md_remove($p68);
    goto corral_source_split_15867;

  corral_source_split_15867:
    assume {:verifier.code 0} true;
    $M.111 := $i69;
    call {:si_unique_call 2772} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i69);
    goto corral_source_split_15868;

  corral_source_split_15868:
    assume {:verifier.code 0} true;
    $i70 := $M.111;
    goto corral_source_split_15869;

  corral_source_split_15869:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    goto corral_source_split_15870;

  corral_source_split_15870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb94:
    assume $i71 == 1;
    goto corral_source_split_15872;

  corral_source_split_15872:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 2773} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_15873;

  corral_source_split_15873:
    assume {:verifier.code 0} true;
    $i72 := $M.43;
    goto corral_source_split_15874;

  corral_source_split_15874:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32($i72, 1);
    goto corral_source_split_15875;

  corral_source_split_15875:
    assume {:verifier.code 0} true;
    $M.43 := $i73;
    call {:si_unique_call 2774} {:cexpr "ref_cnt"} boogie_si_record_i32($i73);
    goto corral_source_split_15876;

  corral_source_split_15876:
    assume {:verifier.code 0} true;
    $M.110 := 0;
    call {:si_unique_call 2775} {:cexpr "probed_1"} boogie_si_record_i32(0);
    goto corral_source_split_15877;

  corral_source_split_15877:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb75:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i52, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb79;

  $bb80:
    assume $i55 == 1;
    goto corral_source_split_15843;

  corral_source_split_15843:
    assume {:verifier.code 0} true;
    $i56 := $M.38;
    goto corral_source_split_15844;

  corral_source_split_15844:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 1);
    goto corral_source_split_15845;

  corral_source_split_15845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb82:
    assume $i57 == 1;
    goto corral_source_split_15847;

  corral_source_split_15847:
    assume {:verifier.code 0} true;
    $p58 := $M.39;
    goto corral_source_split_15848;

  corral_source_split_15848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2766} $i59 := fimc_md_probe($p58);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_15849;

  corral_source_split_15849:
    assume {:verifier.code 0} true;
    $M.109 := $i59;
    call {:si_unique_call 2767} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i59);
    goto corral_source_split_15850;

  corral_source_split_15850:
    assume {:verifier.code 0} true;
    $i60 := $M.109;
    goto corral_source_split_15851;

  corral_source_split_15851:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_15852;

  corral_source_split_15852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb84:
    assume $i61 == 1;
    goto corral_source_split_15854;

  corral_source_split_15854:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 2768} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_15855;

  corral_source_split_15855:
    assume {:verifier.code 0} true;
    $i62 := $M.43;
    goto corral_source_split_15856;

  corral_source_split_15856:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i62, 1);
    goto corral_source_split_15857;

  corral_source_split_15857:
    assume {:verifier.code 0} true;
    $M.43 := $i63;
    call {:si_unique_call 2769} {:cexpr "ref_cnt"} boogie_si_record_i32($i63);
    goto corral_source_split_15858;

  corral_source_split_15858:
    assume {:verifier.code 0} true;
    $M.110 := 1;
    call {:si_unique_call 2770} {:cexpr "probed_1"} boogie_si_record_i32(1);
    goto corral_source_split_15859;

  corral_source_split_15859:
    assume {:verifier.code 0} true;
    goto $bb86;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i11, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i11, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i28 == 1);
    goto corral_source_split_15794;

  corral_source_split_15794:
    assume {:verifier.code 0} true;
    $i37 := $M.105;
    goto corral_source_split_15795;

  corral_source_split_15795:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_15796;

  corral_source_split_15796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb52:
    assume $i38 == 1;
    goto corral_source_split_15815;

  corral_source_split_15815:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2755} $i39 := __VERIFIER_nondet_int();
    call {:si_unique_call 2756} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i39);
    call {:si_unique_call 2757} {:cexpr "tmp___3"} boogie_si_record_i32($i39);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i39, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2762} ldv_stop();
    goto corral_source_split_15835;

  corral_source_split_15835:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb57:
    assume $i41 == 1;
    goto corral_source_split_15817;

  corral_source_split_15817:
    assume {:verifier.code 0} true;
    $i47 := $M.105;
    goto corral_source_split_15818;

  corral_source_split_15818:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 1);
    goto corral_source_split_15819;

  corral_source_split_15819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb66:
    assume $i48 == 1;
    goto corral_source_split_15830;

  corral_source_split_15830:
    assume {:verifier.code 0} true;
    $p49 := $M.102;
    goto corral_source_split_15831;

  corral_source_split_15831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2760} cam_clk_unprepare($p49);
    goto corral_source_split_15832;

  corral_source_split_15832:
    assume {:verifier.code 0} true;
    $M.105 := 1;
    call {:si_unique_call 2761} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_15833;

  corral_source_split_15833:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb55:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i39, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb59;

  $bb60:
    assume $i42 == 1;
    goto corral_source_split_15821;

  corral_source_split_15821:
    assume {:verifier.code 0} true;
    $i43 := $M.105;
    goto corral_source_split_15822;

  corral_source_split_15822:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 1);
    goto corral_source_split_15823;

  corral_source_split_15823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb62:
    assume $i44 == 1;
    goto corral_source_split_15825;

  corral_source_split_15825:
    assume {:verifier.code 0} true;
    $p45 := $M.102;
    goto corral_source_split_15826;

  corral_source_split_15826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2758} vslice_dummy_var_221 := cam_clk_prepare($p45);
    goto corral_source_split_15827;

  corral_source_split_15827:
    assume {:verifier.code 0} true;
    $M.105 := 1;
    call {:si_unique_call 2759} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_15828;

  corral_source_split_15828:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb36:
    assume $i28 == 1;
    goto corral_source_split_15790;

  corral_source_split_15790:
    assume {:verifier.code 0} true;
    $i35 := $M.64;
    goto corral_source_split_15791;

  corral_source_split_15791:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_15792;

  corral_source_split_15792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb49:
    assume $i36 == 1;
    goto corral_source_split_15812;

  corral_source_split_15812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} ldv_main_exported_17();
    goto corral_source_split_15813;

  corral_source_split_15813:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb34:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i11, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i29 == 1);
    goto corral_source_split_15798;

  corral_source_split_15798:
    assume {:verifier.code 0} true;
    $i33 := $M.96;
    goto corral_source_split_15799;

  corral_source_split_15799:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_15800;

  corral_source_split_15800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb46:
    assume $i34 == 1;
    goto corral_source_split_15809;

  corral_source_split_15809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2753} ldv_main_exported_7();
    goto corral_source_split_15810;

  corral_source_split_15810:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb38:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i11, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb15;

  $bb40:
    assume $i30 == 1;
    goto corral_source_split_15802;

  corral_source_split_15802:
    assume {:verifier.code 0} true;
    $i31 := $M.77;
    goto corral_source_split_15803;

  corral_source_split_15803:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_15804;

  corral_source_split_15804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i32 == 1;
    goto corral_source_split_15806;

  corral_source_split_15806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2752} ldv_main_exported_11();
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_15807;

  corral_source_split_15807:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb45_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2749} $i11 := __VERIFIER_nondet_int();
    call {:si_unique_call 2750} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i11);
    call {:si_unique_call 2751} {:cexpr "tmp___2"} boogie_si_record_i32($i11);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 817730);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16084;

  corral_source_split_16084:
    assume {:verifier.code 0} true;
    return;
}



const fimc_md_exit: ref;

axiom fimc_md_exit == $sub.ref(0, 818762);

procedure fimc_md_exit();
  free requires assertsPassed;
  modifies $M.38;



implementation fimc_md_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16086;

  corral_source_split_16086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2855} ldv_platform_driver_unregister_28(fimc_md_driver);
    goto corral_source_split_16087;

  corral_source_split_16087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2856} fimc_unregister_driver();
    goto corral_source_split_16088;

  corral_source_split_16088:
    assume {:verifier.code 0} true;
    return;
}



const fimc_md_init: ref;

axiom fimc_md_init == $sub.ref(0, 819794);

procedure fimc_md_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.39, $M.0, $CurrAddr;



implementation fimc_md_init() returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i3: i32;
  var vslice_dummy_var_226: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16090;

  corral_source_split_16090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2857} vslice_dummy_var_226 := __request_module.i1.ref(1, .str.155);
    goto corral_source_split_16091;

  corral_source_split_16091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2858} $i1 := fimc_register_driver();
    call {:si_unique_call 2859} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_16092;

  corral_source_split_16092:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_16093;

  corral_source_split_16093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2860} $i4 := ldv___platform_driver_register_27(fimc_md_driver, __this_module);
    call {:si_unique_call 2861} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_16099;

  corral_source_split_16099:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_16097;

  corral_source_split_16097:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_16095;

  corral_source_split_16095:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 820826);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16101;

  corral_source_split_16101:
    assume {:verifier.code 0} true;
    $i0 := $M.36;
    goto corral_source_split_16102;

  corral_source_split_16102:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_16103;

  corral_source_split_16103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_16105;

  corral_source_split_16105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2862} ldv_error();
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_16106;

  corral_source_split_16106:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_379:
    assume !assertsPassed;
    return;
}



const __request_module: ref;

axiom __request_module == $sub.ref(0, 821858);

procedure __request_module.i1.ref($i0: i1, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __request_module.i1.ref($i0: i1, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2863} {:cexpr "__request_module:arg:arg0"} boogie_si_record_i1($i0);
    goto corral_source_split_16108;

  corral_source_split_16108:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2864} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2865} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_16109;

  corral_source_split_16109:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv___platform_driver_register_27: ref;

axiom ldv___platform_driver_register_27 == $sub.ref(0, 822890);

procedure ldv___platform_driver_register_27($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.38, $M.39, $M.0, $CurrAddr;



implementation ldv___platform_driver_register_27($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16111;

  corral_source_split_16111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2866} $i2 := __platform_driver_register($p0, $p1);
    call {:si_unique_call 2867} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_16112;

  corral_source_split_16112:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 2868} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_16113;

  corral_source_split_16113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2869} ldv_platform_driver_init_1();
    goto corral_source_split_16114;

  corral_source_split_16114:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_platform_driver_unregister_28: ref;

axiom ldv_platform_driver_unregister_28 == $sub.ref(0, 823922);

procedure ldv_platform_driver_unregister_28($p0: ref);
  free requires assertsPassed;
  modifies $M.38;



implementation ldv_platform_driver_unregister_28($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16116;

  corral_source_split_16116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2870} platform_driver_unregister($p0);
    goto corral_source_split_16117;

  corral_source_split_16117:
    assume {:verifier.code 0} true;
    $M.38 := 0;
    call {:si_unique_call 2871} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_16118;

  corral_source_split_16118:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 824954);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2872} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_16120;

  corral_source_split_16120:
    assume {:verifier.code 1} true;
    goto corral_source_split_16121;

  corral_source_split_16121:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_16122;

  corral_source_split_16122:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 825986);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 827018);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 828050);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16124;

  corral_source_split_16124:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_16125;

  corral_source_split_16125:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 829082);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 830114);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 831146);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 832178);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 833210);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 834242);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 835274);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 836306);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 837338);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 838370);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16127;

  corral_source_split_16127:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2873} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 2874} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2875} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_16128;

  corral_source_split_16128:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_16129;

  corral_source_split_16129:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_16133;

  corral_source_split_16133:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_16134;

  corral_source_split_16134:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2876} __VERIFIER_assume($i4);
    goto corral_source_split_16135;

  corral_source_split_16135:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_16131;

  corral_source_split_16131:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 839402);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 840434);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 841466);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 842498);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16137;

  corral_source_split_16137:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2877} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2878} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2879} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_16138;

  corral_source_split_16138:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2880} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2881} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 2882} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_16139;

  corral_source_split_16139:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2883} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 2884} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 2885} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_16140;

  corral_source_split_16140:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_16141;

  corral_source_split_16141:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_16146;

  corral_source_split_16146:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_16147;

  corral_source_split_16147:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2886} __VERIFIER_assume($i7);
    goto corral_source_split_16148;

  corral_source_split_16148:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_16149;

  corral_source_split_16149:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_16155;

  corral_source_split_16155:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_16156;

  corral_source_split_16156:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2887} __VERIFIER_assume($i11);
    goto corral_source_split_16157;

  corral_source_split_16157:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_16153;

  corral_source_split_16153:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_16143;

  corral_source_split_16143:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_16144;

  corral_source_split_16144:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_16151;

  corral_source_split_16151:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 843530);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 844562);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16159;

  corral_source_split_16159:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2888} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 2889} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2890} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_16160;

  corral_source_split_16160:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_16161;

  corral_source_split_16161:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_16165;

  corral_source_split_16165:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_16166;

  corral_source_split_16166:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2891} __VERIFIER_assume($i4);
    goto corral_source_split_16167;

  corral_source_split_16167:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_16163;

  corral_source_split_16163:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 845594);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 846626);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 847658);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 848690);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 849722);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16169;

  corral_source_split_16169:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2892} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2893} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2894} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_16170;

  corral_source_split_16170:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2895} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2896} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 2897} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_16171;

  corral_source_split_16171:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2898} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2899} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 2900} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_16172;

  corral_source_split_16172:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_16173;

  corral_source_split_16173:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_16178;

  corral_source_split_16178:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_16179;

  corral_source_split_16179:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2901} __VERIFIER_assume($i7);
    goto corral_source_split_16180;

  corral_source_split_16180:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_16181;

  corral_source_split_16181:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_16187;

  corral_source_split_16187:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_16188;

  corral_source_split_16188:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2902} __VERIFIER_assume($i11);
    goto corral_source_split_16189;

  corral_source_split_16189:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_16185;

  corral_source_split_16185:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_16175;

  corral_source_split_16175:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_16176;

  corral_source_split_16176:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_16183;

  corral_source_split_16183:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 850754);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 851786);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 852818);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 853850);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 854882);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 855914);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 856946);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 857978);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 859010);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16191;

  corral_source_split_16191:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2903} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2904} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16192;

  corral_source_split_16192:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16193;

  corral_source_split_16193:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2905} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_16194;

  corral_source_split_16194:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_16195;

  corral_source_split_16195:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_16196;

  corral_source_split_16196:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_16197;

  corral_source_split_16197:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_16204;

  corral_source_split_16204:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_16205;

  corral_source_split_16205:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_16206;

  corral_source_split_16206:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_16207;

  corral_source_split_16207:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_16199;

  corral_source_split_16199:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_16200;

  corral_source_split_16200:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2906} __VERIFIER_assume($i10);
    goto corral_source_split_16201;

  corral_source_split_16201:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_16202;

  corral_source_split_16202:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 860042);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16209;

  corral_source_split_16209:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2907} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 2908} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2909} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_16210;

  corral_source_split_16210:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 861074);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16212;

  corral_source_split_16212:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2910} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2911} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2912} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_16213;

  corral_source_split_16213:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 862106);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16215;

  corral_source_split_16215:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2913} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2914} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_16216;

  corral_source_split_16216:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 863138);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 864170);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2915} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2916} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 865202);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 866234);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16218;

  corral_source_split_16218:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_16219;

  corral_source_split_16219:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 867266);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2917} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 2918} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_16221;

  corral_source_split_16221:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2919} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2920} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_16222;

  corral_source_split_16222:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_16223;

  corral_source_split_16223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_16227;

  corral_source_split_16227:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_16228;

  corral_source_split_16228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2921} $p6 := malloc($i5);
    goto corral_source_split_16229;

  corral_source_split_16229:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_16230;

  corral_source_split_16230:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_61 := $M.0;
    call {:si_unique_call 2922} cmdloc_dummy_var_62 := $memset.i8(cmdloc_dummy_var_61, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_62;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_16232;

  corral_source_split_16232:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_16225;

  corral_source_split_16225:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 868298);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 869330);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.68, $M.110, $M.66, $M.43, $M.40, $M.41, $M.42, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.67, $M.69, $M.38, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.39, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.111, $M.112, $M.113, $M.114, $M.36, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.0, $M.142, $M.170, $M.19, $M.20, $M.8, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.202, $M.203, $M.204, $M.205, $M.206, $M.207, $M.208, $M.209, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.219, $M.220, $M.221, $M.222;



implementation __SMACK_static_init()
{

  $bb0:
    $M.68 := 0;
    call {:si_unique_call 2923} {:cexpr "probed_15"} boogie_si_record_i32(0);
    $M.110 := 0;
    call {:si_unique_call 2924} {:cexpr "probed_1"} boogie_si_record_i32(0);
    call {:si_unique_call 2925} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.66 := $0.ref;
    $M.43 := 0;
    call {:si_unique_call 2926} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.40 := $0.ref;
    $M.41 := 0;
    call {:si_unique_call 2927} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 2928} {:cexpr "ldv_retval_23"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 2929} {:cexpr "ldv_retval_22"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 2930} {:cexpr "ldv_retval_21"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 2931} {:cexpr "ldv_retval_20"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 2932} {:cexpr "ldv_retval_19"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 2933} {:cexpr "ldv_retval_18"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 2934} {:cexpr "ldv_retval_17"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 2935} {:cexpr "ldv_retval_16"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 2936} {:cexpr "ldv_retval_15"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 2937} {:cexpr "ldv_retval_14"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 2938} {:cexpr "ldv_retval_13"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 2939} {:cexpr "ldv_retval_12"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 2940} {:cexpr "ldv_retval_11"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 2941} {:cexpr "ldv_retval_10"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 2942} {:cexpr "ldv_retval_9"} boogie_si_record_i32(0);
    $M.58 := 0;
    call {:si_unique_call 2943} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 2944} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.60 := 0;
    call {:si_unique_call 2945} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 2946} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.62 := 0;
    call {:si_unique_call 2947} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.63 := 0;
    call {:si_unique_call 2948} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.64 := 0;
    call {:si_unique_call 2949} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    $M.65 := 0;
    call {:si_unique_call 2950} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    $M.67 := 0;
    call {:si_unique_call 2951} {:cexpr "ldv_retval_27"} boogie_si_record_i32(0);
    $M.69 := 0;
    call {:si_unique_call 2952} {:cexpr "ldv_retval_26"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 2953} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.70 := $0.ref;
    $M.71 := $0.ref;
    $M.72 := $0.ref;
    $M.73 := $0.ref;
    $M.74 := $0.ref;
    $M.75 := $0.ref;
    $M.76 := $0.ref;
    $M.77 := 0;
    call {:si_unique_call 2954} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.78 := 0;
    call {:si_unique_call 2955} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    $M.79 := 0;
    call {:si_unique_call 2956} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    $M.80 := 0;
    call {:si_unique_call 2957} {:cexpr "ldv_retval_25"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 2958} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    $M.82 := $0.ref;
    $M.83 := $0.ref;
    $M.84 := $0.ref;
    $M.85 := $0.ref;
    $M.86 := $0.ref;
    $M.87 := $0.ref;
    $M.88 := $0.ref;
    $M.89 := $0.ref;
    $M.90 := $0.ref;
    $M.91 := $0.ref;
    $M.92 := $0.ref;
    $M.93 := $0.ref;
    $M.94 := 0;
    call {:si_unique_call 2959} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.95 := 0;
    call {:si_unique_call 2960} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.96 := 0;
    call {:si_unique_call 2961} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.97 := 0;
    call {:si_unique_call 2962} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.98 := 0;
    call {:si_unique_call 2963} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.99 := 0;
    call {:si_unique_call 2964} {:cexpr "ldv_retval_24"} boogie_si_record_i32(0);
    $M.100 := 0;
    call {:si_unique_call 2965} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.39 := $0.ref;
    $M.101 := $0.ref;
    $M.102 := $0.ref;
    $M.103 := $0.ref;
    $M.104 := $0.ref;
    $M.105 := 0;
    call {:si_unique_call 2966} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.106 := 0;
    call {:si_unique_call 2967} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.107 := 0;
    call {:si_unique_call 2968} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.108 := 0;
    call {:si_unique_call 2969} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.109 := 0;
    call {:si_unique_call 2970} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.111 := 0;
    call {:si_unique_call 2971} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.112 := 0;
    call {:si_unique_call 2972} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.113 := 0;
    call {:si_unique_call 2973} {:cexpr "ldv_retval_29"} boogie_si_record_i32(0);
    $M.114 := 0;
    call {:si_unique_call 2974} {:cexpr "ldv_retval_28"} boogie_si_record_i32(0);
    $M.36 := 1;
    call {:si_unique_call 2975} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32(1);
    $M.116 := $store.i8($M.116, __mod_platform__fimc_driver_ids_device_table, 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(__mod_platform__fimc_driver_ids_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.117 := $store.i8($M.117, __mod_of__fimc_md_of_match_device_table, 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(1, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(2, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(3, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(4, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(5, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(6, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(7, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(8, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(9, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(11, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(12, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(13, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(14, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(15, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(17, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(18, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(19, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(20, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(21, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(22, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(23, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(24, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(25, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(26, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(27, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(28, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(29, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(30, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(31, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(17, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(18, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(19, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(20, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(21, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(22, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(23, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(24, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(25, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(26, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(27, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(28, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(29, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(30, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(31, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(32, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(33, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(34, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(35, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(36, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(37, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(38, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(39, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(40, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(41, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(42, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(43, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(44, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(45, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(46, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(47, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(48, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(49, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(50, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(51, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(52, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(53, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(54, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(55, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(56, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(57, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(58, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(59, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(60, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(61, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(62, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(63, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(64, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(65, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(66, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(67, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(68, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(69, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(70, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(71, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(72, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(73, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(74, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(75, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(76, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(77, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(78, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(79, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(80, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(81, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(82, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(83, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(84, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(85, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(86, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(87, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(88, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(89, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(90, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(91, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(92, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(93, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(94, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(95, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(96, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(97, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(98, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(99, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(100, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(101, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(102, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(103, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(104, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(105, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(106, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(107, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(108, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(109, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(110, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(111, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(112, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(113, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(114, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(115, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(116, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(117, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(118, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(119, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(120, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(121, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(122, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(123, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(124, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(125, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(126, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(127, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(192, 1)), $0.ref);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(1, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(2, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(3, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(4, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(5, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(6, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(7, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(8, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(9, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(11, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(12, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(13, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(14, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(15, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(17, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(18, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(19, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(20, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(21, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(22, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(23, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(24, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(25, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(26, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(27, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(28, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(29, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(30, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(31, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(16, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(17, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(18, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(19, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(20, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(21, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(22, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(23, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(24, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(25, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(26, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(27, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(28, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(29, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(30, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(31, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(32, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(33, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(34, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(35, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(36, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(37, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(38, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(39, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(40, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(41, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(42, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(43, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(44, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(45, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(46, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(47, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(48, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(49, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(50, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(51, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(52, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(53, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(54, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(55, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(56, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(57, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(58, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(59, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(60, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(61, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(62, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(63, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(64, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(65, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(66, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(67, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(68, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(69, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(70, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(71, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(72, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(73, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(74, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(75, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(76, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(77, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(78, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(79, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(80, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(81, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(82, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(83, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(84, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(85, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(86, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(87, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(88, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(89, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(90, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(91, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(92, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(93, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(94, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(95, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(96, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(97, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(98, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(99, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(100, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(101, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(102, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(103, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(104, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(105, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(106, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(107, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(108, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(109, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(110, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(111, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(112, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(113, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(114, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(115, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(116, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(117, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(118, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(119, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(120, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(121, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(122, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(123, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(124, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(125, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(126, 1)), 0);
    $M.117 := $store.i8($M.117, $add.ref($add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(127, 1)), 0);
    $M.117 := $store.ref($M.117, $add.ref($add.ref($add.ref(__mod_of__fimc_md_of_match_device_table, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(192, 1)), $0.ref);
    $M.118 := $store.i8($M.118, fimc_md_of_match, 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(1, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(2, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(3, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(4, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(5, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(6, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(7, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(8, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(9, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(10, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(11, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(12, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(13, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(14, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(15, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(16, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(17, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(18, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(19, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(20, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(21, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(22, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(23, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(24, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(25, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(26, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(27, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(28, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(29, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(30, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(31, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(0, 1)), 115);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(1, 1)), 97);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(2, 1)), 109);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(3, 1)), 115);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(4, 1)), 117);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(5, 1)), 110);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(6, 1)), 103);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(7, 1)), 44);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(8, 1)), 102);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(9, 1)), 105);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(10, 1)), 109);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(11, 1)), 99);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(16, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(17, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(18, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(19, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(20, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(21, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(22, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(23, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(24, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(25, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(26, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(27, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(28, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(29, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(30, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(31, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(32, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(33, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(34, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(35, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(36, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(37, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(38, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(39, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(40, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(41, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(42, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(43, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(44, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(45, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(46, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(47, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(48, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(49, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(50, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(51, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(52, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(53, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(54, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(55, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(56, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(57, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(58, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(59, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(60, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(61, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(62, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(63, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(64, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(65, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(66, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(67, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(68, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(69, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(70, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(71, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(72, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(73, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(74, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(75, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(76, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(77, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(78, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(79, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(80, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(81, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(82, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(83, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(84, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(85, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(86, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(87, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(88, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(89, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(90, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(91, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(92, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(93, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(94, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(95, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(96, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(97, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(98, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(99, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(100, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(101, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(102, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(103, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(104, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(105, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(106, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(107, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(108, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(109, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(110, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(111, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(112, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(113, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(114, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(115, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(116, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(117, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(118, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(119, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(120, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(121, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(122, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(123, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(124, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(125, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(126, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(127, 1)), 0);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(0, 200)), $mul.ref(192, 1)), $0.ref);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(1, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(2, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(3, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(4, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(5, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(6, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(7, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(8, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(9, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(10, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(11, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(12, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(13, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(14, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(15, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(16, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(17, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(18, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(19, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(20, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(21, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(22, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(23, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(24, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(25, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(26, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(27, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(28, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(29, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(30, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(31, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(16, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(17, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(18, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(19, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(20, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(21, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(22, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(23, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(24, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(25, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(26, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(27, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(28, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(29, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(30, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(31, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(32, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(33, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(34, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(35, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(36, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(37, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(38, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(39, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(40, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(41, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(42, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(43, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(44, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(45, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(46, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(47, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(48, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(49, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(50, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(51, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(52, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(53, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(54, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(55, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(56, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(57, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(58, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(59, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(60, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(61, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(62, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(63, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(64, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(65, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(66, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(67, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(68, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(69, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(70, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(71, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(72, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(73, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(74, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(75, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(76, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(77, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(78, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(79, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(80, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(81, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(82, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(83, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(84, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(85, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(86, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(87, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(88, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(89, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(90, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(91, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(92, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(93, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(94, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(95, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(96, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(97, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(98, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(99, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(100, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(101, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(102, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(103, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(104, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(105, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(106, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(107, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(108, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(109, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(110, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(111, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(112, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(113, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(114, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(115, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(116, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(117, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(118, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(119, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(120, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(121, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(122, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(123, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(124, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(125, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(126, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(127, 1)), 0);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(fimc_md_of_match, $mul.ref(0, 400)), $mul.ref(1, 200)), $mul.ref(192, 1)), $0.ref);
    $M.119 := $store.ref($M.119, fimc_md_driver, fimc_md_probe);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(8, 1)), fimc_md_remove);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(16, 1)), $0.ref);
    $M.122 := $store.ref($M.122, $add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(24, 1)), $0.ref);
    $M.123 := $store.ref($M.123, $add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(32, 1)), $0.ref);
    $M.124 := $store.ref($M.124, $add.ref($add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(0, 1)), .str.116);
    $M.125 := $store.ref($M.125, $add.ref($add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(16, 1)), $0.ref);
    $M.127 := $store.ref($M.127, $add.ref($add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
    $M.128 := $store.i8($M.128, $add.ref($add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
    $M.129 := $store.i32($M.129, $add.ref($add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(36, 1)), 0);
    $M.130 := $store.ref($M.130, $add.ref($add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(40, 1)), fimc_md_of_match);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
    $M.133 := $store.ref($M.133, $add.ref($add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
    $M.134 := $store.ref($M.134, $add.ref($add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
    $M.135 := $store.ref($M.135, $add.ref($add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
    $M.136 := $store.ref($M.136, $add.ref($add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
    $M.137 := $store.ref($M.137, $add.ref($add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
    $M.138 := $store.ref($M.138, $add.ref($add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(104, 1)), $0.ref);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(112, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(160, 1)), $0.ref);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(fimc_md_driver, $mul.ref(0, 176)), $mul.ref(168, 1)), 0);
    $M.0 := $store.ref($M.0, cam_clk_ops, cam_clk_prepare);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cam_clk_ops, $mul.ref(0, 160)), $mul.ref(8, 1)), cam_clk_unprepare);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cam_clk_ops, $mul.ref(0, 160)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cam_clk_ops, $mul.ref(0, 160)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cam_clk_ops, $mul.ref(0, 160)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cam_clk_ops, $mul.ref(0, 160)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cam_clk_ops, $mul.ref(0, 160)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cam_clk_ops, $mul.ref(0, 160)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cam_clk_ops, $mul.ref(0, 160)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cam_clk_ops, $mul.ref(0, 160)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cam_clk_ops, $mul.ref(0, 160)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cam_clk_ops, $mul.ref(0, 160)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cam_clk_ops, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cam_clk_ops, $mul.ref(0, 160)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cam_clk_ops, $mul.ref(0, 160)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cam_clk_ops, $mul.ref(0, 160)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cam_clk_ops, $mul.ref(0, 160)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cam_clk_ops, $mul.ref(0, 160)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cam_clk_ops, $mul.ref(0, 160)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cam_clk_ops, $mul.ref(0, 160)), $mul.ref(152, 1)), $0.ref);
    $M.142 := $store.ref($M.142, dev_attr_subdev_conf_mode, .str.143);
    $M.142 := $store.i16($M.142, $add.ref($add.ref($add.ref(dev_attr_subdev_conf_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.142 := $store.i8($M.142, $add.ref($add.ref($add.ref(dev_attr_subdev_conf_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.142 := $store.ref($M.142, $add.ref($add.ref($add.ref(dev_attr_subdev_conf_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.142 := $store.i8($M.142, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_subdev_conf_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.142 := $store.i8($M.142, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_subdev_conf_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.142 := $store.i8($M.142, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_subdev_conf_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.142 := $store.i8($M.142, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_subdev_conf_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.142 := $store.i8($M.142, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_subdev_conf_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.142 := $store.i8($M.142, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_subdev_conf_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.142 := $store.i8($M.142, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_subdev_conf_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.142 := $store.i8($M.142, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_subdev_conf_mode, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.142 := $store.ref($M.142, $add.ref($add.ref(dev_attr_subdev_conf_mode, $mul.ref(0, 48)), $mul.ref(32, 1)), fimc_md_sysfs_show);
    $M.142 := $store.ref($M.142, $add.ref($add.ref(dev_attr_subdev_conf_mode, $mul.ref(0, 48)), $mul.ref(40, 1)), fimc_md_sysfs_store);
    $M.0 := $store.ref($M.0, fimc_pipeline_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_pipeline_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_pipeline_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), __fimc_pipeline_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_pipeline_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), __fimc_pipeline_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_pipeline_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), __fimc_pipeline_s_stream);
    $M.0 := $store.ref($M.0, fimc_capture_qops, queue_setup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_qops, $mul.ref(0, 80)), $mul.ref(8, 1)), vb2_ops_wait_prepare);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_qops, $mul.ref(0, 80)), $mul.ref(16, 1)), vb2_ops_wait_finish);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_qops, $mul.ref(0, 80)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_qops, $mul.ref(0, 80)), $mul.ref(32, 1)), buffer_prepare);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_qops, $mul.ref(0, 80)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_qops, $mul.ref(0, 80)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_qops, $mul.ref(0, 80)), $mul.ref(56, 1)), start_streaming___0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_qops, $mul.ref(0, 80)), $mul.ref(64, 1)), stop_streaming___0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_qops, $mul.ref(0, 80)), $mul.ref(72, 1)), buffer_queue);
    $M.0 := $store.ref($M.0, fimc_capture_ioctl_ops, fimc_cap_querycap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(32, 1)), fimc_cap_enum_fmt_mplane);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(120, 1)), fimc_cap_g_fmt_mplane);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(208, 1)), fimc_cap_s_fmt_mplane);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(296, 1)), fimc_cap_try_fmt_mplane);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(320, 1)), fimc_cap_reqbufs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(328, 1)), vb2_ioctl_querybuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(336, 1)), vb2_ioctl_qbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(344, 1)), vb2_ioctl_expbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(352, 1)), vb2_ioctl_dqbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(360, 1)), vb2_ioctl_create_bufs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(368, 1)), vb2_ioctl_prepare_buf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(400, 1)), fimc_cap_streamon);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(408, 1)), fimc_cap_streamoff);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(440, 1)), fimc_cap_enum_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(448, 1)), fimc_cap_g_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(456, 1)), fimc_cap_s_input);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(520, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(528, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(536, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(544, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(552, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(560, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(568, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(576, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(584, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(600, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(608, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(616, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(624, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(632, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(640, 1)), fimc_cap_g_selection);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(648, 1)), fimc_cap_s_selection);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(656, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(664, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(672, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(680, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(688, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(696, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(704, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(712, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(720, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(728, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(736, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(744, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(752, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(760, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(768, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(776, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(784, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(792, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(800, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(808, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(816, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(824, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(832, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(840, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(848, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(856, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(864, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(872, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(880, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(888, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(896, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_ioctl_ops, $mul.ref(0, 912)), $mul.ref(904, 1)), $0.ref);
    $M.0 := $store.ref($M.0, fimc_capture_fops, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_fops, $mul.ref(0, 80)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_fops, $mul.ref(0, 80)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_fops, $mul.ref(0, 80)), $mul.ref(24, 1)), vb2_fop_poll);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_fops, $mul.ref(0, 80)), $mul.ref(32, 1)), video_ioctl2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_fops, $mul.ref(0, 80)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_fops, $mul.ref(0, 80)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_fops, $mul.ref(0, 80)), $mul.ref(56, 1)), vb2_fop_mmap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_fops, $mul.ref(0, 80)), $mul.ref(64, 1)), fimc_capture_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_fops, $mul.ref(0, 80)), $mul.ref(72, 1)), fimc_capture_release);
    $M.0 := $store.ref($M.0, fimc_capture_sd_internal_ops, fimc_capture_subdev_registered);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_sd_internal_ops, $mul.ref(0, 32)), $mul.ref(8, 1)), fimc_capture_subdev_unregistered);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_sd_internal_ops, $mul.ref(0, 32)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_capture_sd_internal_ops, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, fimc_sd_media_ops, fimc_link_setup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_sd_media_ops, $mul.ref(0, 16)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, fimc_qops, fimc_queue_setup);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_qops, $mul.ref(0, 80)), $mul.ref(8, 1)), vb2_ops_wait_prepare);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_qops, $mul.ref(0, 80)), $mul.ref(16, 1)), vb2_ops_wait_finish);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_qops, $mul.ref(0, 80)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_qops, $mul.ref(0, 80)), $mul.ref(32, 1)), fimc_buf_prepare);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_qops, $mul.ref(0, 80)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_qops, $mul.ref(0, 80)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_qops, $mul.ref(0, 80)), $mul.ref(56, 1)), start_streaming);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_qops, $mul.ref(0, 80)), $mul.ref(64, 1)), stop_streaming);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_qops, $mul.ref(0, 80)), $mul.ref(72, 1)), fimc_buf_queue);
    $M.0 := $store.ref($M.0, fimc_m2m_ioctl_ops, fimc_m2m_querycap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(32, 1)), fimc_m2m_enum_fmt_mplane);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(40, 1)), fimc_m2m_enum_fmt_mplane);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(120, 1)), fimc_m2m_g_fmt_mplane);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(128, 1)), fimc_m2m_g_fmt_mplane);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(208, 1)), fimc_m2m_s_fmt_mplane);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(216, 1)), fimc_m2m_s_fmt_mplane);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(296, 1)), fimc_m2m_try_fmt_mplane);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(304, 1)), fimc_m2m_try_fmt_mplane);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(320, 1)), v4l2_m2m_ioctl_reqbufs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(328, 1)), v4l2_m2m_ioctl_querybuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(336, 1)), v4l2_m2m_ioctl_qbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(344, 1)), v4l2_m2m_ioctl_expbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(352, 1)), v4l2_m2m_ioctl_dqbuf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(400, 1)), v4l2_m2m_ioctl_streamon);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(408, 1)), v4l2_m2m_ioctl_streamoff);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(520, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(528, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(536, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(544, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(552, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(560, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(568, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(576, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(584, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(592, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(600, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(608, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(616, 1)), fimc_m2m_cropcap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(624, 1)), fimc_m2m_g_crop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(632, 1)), fimc_m2m_s_crop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(640, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(648, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(656, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(664, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(672, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(680, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(688, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(696, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(704, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(712, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(720, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(728, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(736, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(744, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(752, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(760, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(768, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(776, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(784, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(792, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(800, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(808, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(816, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(824, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(832, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(840, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(848, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(856, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(864, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(872, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(880, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(888, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(896, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_ioctl_ops, $mul.ref(0, 912)), $mul.ref(904, 1)), $0.ref);
    $M.0 := $store.ref($M.0, fimc_m2m_fops, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_fops, $mul.ref(0, 80)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_fops, $mul.ref(0, 80)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_fops, $mul.ref(0, 80)), $mul.ref(24, 1)), v4l2_m2m_fop_poll);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_fops, $mul.ref(0, 80)), $mul.ref(32, 1)), video_ioctl2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_fops, $mul.ref(0, 80)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_fops, $mul.ref(0, 80)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_fops, $mul.ref(0, 80)), $mul.ref(56, 1)), v4l2_m2m_fop_mmap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_fops, $mul.ref(0, 80)), $mul.ref(64, 1)), fimc_m2m_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fimc_m2m_fops, $mul.ref(0, 80)), $mul.ref(72, 1)), fimc_m2m_release);
    $M.170 := $store.i32($M.170, pix_desc, 8200);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(pix_desc, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(4, 1)), 0);
    $M.20 := $store.i16($M.20, $add.ref($add.ref($add.ref(pix_desc, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(8, 1)), 8);
    $M.170 := $store.i32($M.170, $add.ref($add.ref($add.ref(pix_desc, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(0, 1)), 8201);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(pix_desc, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(4, 1)), 16384);
    $M.20 := $store.i16($M.20, $add.ref($add.ref($add.ref(pix_desc, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(8, 1)), 8);
    $M.170 := $store.i32($M.170, $add.ref($add.ref($add.ref(pix_desc, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(0, 1)), 8199);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(pix_desc, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(4, 1)), 49152);
    $M.20 := $store.i16($M.20, $add.ref($add.ref($add.ref(pix_desc, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(8, 1)), 8);
    $M.170 := $store.i32($M.170, $add.ref($add.ref($add.ref(pix_desc, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(0, 1)), 8198);
    $M.19 := $store.i32($M.19, $add.ref($add.ref($add.ref(pix_desc, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(4, 1)), 32768);
    $M.20 := $store.i16($M.20, $add.ref($add.ref($add.ref(pix_desc, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(8, 1)), 8);
    $M.8 := $store.ref($M.8, fimc_clocks, .str.79);
    $M.8 := $store.ref($M.8, $add.ref($add.ref(fimc_clocks, $mul.ref(0, 16)), $mul.ref(1, 8)), .str.76);
    $M.171 := $store.i8($M.171, fimc2_variant_s5p, 8);
    $M.172 := $store.ref($M.172, $add.ref($add.ref(fimc2_variant_s5p, $mul.ref(0, 24)), $mul.ref(8, 1)), $add.ref(s5p_pix_limit, $mul.ref(12, 1)));
    $M.173 := $store.i16($M.173, $add.ref($add.ref(fimc2_variant_s5p, $mul.ref(0, 24)), $mul.ref(16, 1)), 16);
    $M.174 := $store.i16($M.174, $add.ref($add.ref(fimc2_variant_s5p, $mul.ref(0, 24)), $mul.ref(18, 1)), 16);
    $M.175 := $store.i16($M.175, $add.ref($add.ref(fimc2_variant_s5p, $mul.ref(0, 24)), $mul.ref(20, 1)), 8);
    $M.176 := $store.i16($M.176, $add.ref($add.ref(fimc2_variant_s5p, $mul.ref(0, 24)), $mul.ref(22, 1)), 16);
    $M.171 := $store.i8($M.171, fimc0_variant_s5p, 11);
    $M.172 := $store.ref($M.172, $add.ref($add.ref(fimc0_variant_s5p, $mul.ref(0, 24)), $mul.ref(8, 1)), s5p_pix_limit);
    $M.173 := $store.i16($M.173, $add.ref($add.ref(fimc0_variant_s5p, $mul.ref(0, 24)), $mul.ref(16, 1)), 16);
    $M.174 := $store.i16($M.174, $add.ref($add.ref(fimc0_variant_s5p, $mul.ref(0, 24)), $mul.ref(18, 1)), 16);
    $M.175 := $store.i16($M.175, $add.ref($add.ref(fimc0_variant_s5p, $mul.ref(0, 24)), $mul.ref(20, 1)), 8);
    $M.176 := $store.i16($M.176, $add.ref($add.ref(fimc0_variant_s5p, $mul.ref(0, 24)), $mul.ref(22, 1)), 16);
    $M.177 := $store.ref($M.177, fimc_drvdata_s5p, fimc0_variant_s5p);
    $M.177 := $store.ref($M.177, $add.ref($add.ref($add.ref(fimc_drvdata_s5p, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(1, 8)), fimc0_variant_s5p);
    $M.177 := $store.ref($M.177, $add.ref($add.ref($add.ref(fimc_drvdata_s5p, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(2, 8)), fimc2_variant_s5p);
    $M.177 := $store.ref($M.177, $add.ref($add.ref($add.ref(fimc_drvdata_s5p, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(3, 8)), $0.ref);
    $M.177 := $store.i32($M.177, $add.ref($add.ref(fimc_drvdata_s5p, $mul.ref(0, 56)), $mul.ref(32, 1)), 3);
    $M.177 := $store.i64($M.177, $add.ref($add.ref(fimc_drvdata_s5p, $mul.ref(0, 56)), $mul.ref(40, 1)), 133000000);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(fimc_drvdata_s5p, $mul.ref(0, 56)), $mul.ref(48, 1)), 0);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(fimc_drvdata_s5p, $mul.ref(0, 56)), $mul.ref(49, 1)), 0);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(fimc_drvdata_s5p, $mul.ref(0, 56)), $mul.ref(50, 1)), 0);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(fimc_drvdata_s5p, $mul.ref(0, 56)), $mul.ref(51, 1)), 4);
    $M.178 := $store.i8($M.178, fimc_driver_ids, 115);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 53);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 112);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 45);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 102);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 105);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 109);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 99);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.178 := $store.i64($M.178, $add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(24, 1)), $p2i.ref.i64(fimc_drvdata_s5p));
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 115);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 53);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 112);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 118);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 50);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 49);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 48);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 45);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 102);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 105);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 109);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 99);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.178 := $store.i64($M.178, $add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(24, 1)), $p2i.ref.i64(fimc_drvdata_s5pv210));
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 101);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 121);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 110);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 111);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 115);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 52);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 45);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 102);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 105);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 109);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 99);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.178 := $store.i64($M.178, $add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(24, 1)), $p2i.ref.i64(fimc_drvdata_exynos4210));
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 101);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 121);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 110);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 111);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 115);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 52);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 120);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 49);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 50);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 45);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 102);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 105);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 109);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 99);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.178 := $store.i64($M.178, $add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(24, 1)), $p2i.ref.i64(fimc_drvdata_exynos4x12));
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.178 := $store.i8($M.178, $add.ref($add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.178 := $store.i64($M.178, $add.ref($add.ref($add.ref(fimc_driver_ids, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.202 := $store.ref($M.202, fimc_drvdata_exynos4x12, $0.ref);
    $M.202 := $store.ref($M.202, $add.ref($add.ref($add.ref(fimc_drvdata_exynos4x12, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(1, 8)), $0.ref);
    $M.202 := $store.ref($M.202, $add.ref($add.ref($add.ref(fimc_drvdata_exynos4x12, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(2, 8)), $0.ref);
    $M.202 := $store.ref($M.202, $add.ref($add.ref($add.ref(fimc_drvdata_exynos4x12, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(3, 8)), $0.ref);
    $M.202 := $store.i32($M.202, $add.ref($add.ref(fimc_drvdata_exynos4x12, $mul.ref(0, 56)), $mul.ref(32, 1)), 4);
    $M.202 := $store.i64($M.202, $add.ref($add.ref(fimc_drvdata_exynos4x12, $mul.ref(0, 56)), $mul.ref(40, 1)), 166000000);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(fimc_drvdata_exynos4x12, $mul.ref(0, 56)), $mul.ref(48, 1)), 1);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(fimc_drvdata_exynos4x12, $mul.ref(0, 56)), $mul.ref(49, 1)), 1);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(fimc_drvdata_exynos4x12, $mul.ref(0, 56)), $mul.ref(50, 1)), 1);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(fimc_drvdata_exynos4x12, $mul.ref(0, 56)), $mul.ref(51, 1)), 32);
    $M.202 := $store.ref($M.202, fimc_drvdata_exynos4210, $0.ref);
    $M.202 := $store.ref($M.202, $add.ref($add.ref($add.ref(fimc_drvdata_exynos4210, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(1, 8)), $0.ref);
    $M.202 := $store.ref($M.202, $add.ref($add.ref($add.ref(fimc_drvdata_exynos4210, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(2, 8)), $0.ref);
    $M.202 := $store.ref($M.202, $add.ref($add.ref($add.ref(fimc_drvdata_exynos4210, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(3, 8)), $0.ref);
    $M.202 := $store.i32($M.202, $add.ref($add.ref(fimc_drvdata_exynos4210, $mul.ref(0, 56)), $mul.ref(32, 1)), 4);
    $M.202 := $store.i64($M.202, $add.ref($add.ref(fimc_drvdata_exynos4210, $mul.ref(0, 56)), $mul.ref(40, 1)), 166000000);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(fimc_drvdata_exynos4210, $mul.ref(0, 56)), $mul.ref(48, 1)), 1);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(fimc_drvdata_exynos4210, $mul.ref(0, 56)), $mul.ref(49, 1)), 1);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(fimc_drvdata_exynos4210, $mul.ref(0, 56)), $mul.ref(50, 1)), 1);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(fimc_drvdata_exynos4210, $mul.ref(0, 56)), $mul.ref(51, 1)), 32);
    $M.203 := $store.i8($M.203, fimc2_variant_s5pv210, 8);
    $M.204 := $store.ref($M.204, $add.ref($add.ref(fimc2_variant_s5pv210, $mul.ref(0, 24)), $mul.ref(8, 1)), $add.ref(s5p_pix_limit, $mul.ref(24, 1)));
    $M.205 := $store.i16($M.205, $add.ref($add.ref(fimc2_variant_s5pv210, $mul.ref(0, 24)), $mul.ref(16, 1)), 16);
    $M.206 := $store.i16($M.206, $add.ref($add.ref(fimc2_variant_s5pv210, $mul.ref(0, 24)), $mul.ref(18, 1)), 16);
    $M.207 := $store.i16($M.207, $add.ref($add.ref(fimc2_variant_s5pv210, $mul.ref(0, 24)), $mul.ref(20, 1)), 8);
    $M.208 := $store.i16($M.208, $add.ref($add.ref(fimc2_variant_s5pv210, $mul.ref(0, 24)), $mul.ref(22, 1)), 16);
    $M.203 := $store.i8($M.203, fimc1_variant_s5pv210, 15);
    $M.204 := $store.ref($M.204, $add.ref($add.ref(fimc1_variant_s5pv210, $mul.ref(0, 24)), $mul.ref(8, 1)), $add.ref(s5p_pix_limit, $mul.ref(24, 1)));
    $M.205 := $store.i16($M.205, $add.ref($add.ref(fimc1_variant_s5pv210, $mul.ref(0, 24)), $mul.ref(16, 1)), 16);
    $M.206 := $store.i16($M.206, $add.ref($add.ref(fimc1_variant_s5pv210, $mul.ref(0, 24)), $mul.ref(18, 1)), 16);
    $M.207 := $store.i16($M.207, $add.ref($add.ref(fimc1_variant_s5pv210, $mul.ref(0, 24)), $mul.ref(20, 1)), 1);
    $M.208 := $store.i16($M.208, $add.ref($add.ref(fimc1_variant_s5pv210, $mul.ref(0, 24)), $mul.ref(22, 1)), 1);
    $M.209 := $store.i16($M.209, s5p_pix_limit, 3264);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(2, 1)), 8192);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(4, 1)), 0);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(6, 1)), 0);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(8, 1)), 1920);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(0, 12)), $mul.ref(10, 1)), 4224);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(0, 1)), 4224);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(2, 1)), 8192);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(4, 1)), 0);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(6, 1)), 0);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(8, 1)), 1920);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(1, 12)), $mul.ref(10, 1)), 4224);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(0, 1)), 1920);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(2, 1)), 8192);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(4, 1)), 0);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(6, 1)), 0);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(8, 1)), 1280);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(2, 12)), $mul.ref(10, 1)), 1920);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(0, 1)), 0);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(2, 1)), 0);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(4, 1)), 0);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(6, 1)), 0);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(8, 1)), 0);
    $M.209 := $store.i16($M.209, $add.ref($add.ref($add.ref(s5p_pix_limit, $mul.ref(0, 48)), $mul.ref(3, 12)), $mul.ref(10, 1)), 0);
    $M.203 := $store.i8($M.203, fimc0_variant_s5pv210, 11);
    $M.204 := $store.ref($M.204, $add.ref($add.ref(fimc0_variant_s5pv210, $mul.ref(0, 24)), $mul.ref(8, 1)), $add.ref(s5p_pix_limit, $mul.ref(12, 1)));
    $M.205 := $store.i16($M.205, $add.ref($add.ref(fimc0_variant_s5pv210, $mul.ref(0, 24)), $mul.ref(16, 1)), 16);
    $M.206 := $store.i16($M.206, $add.ref($add.ref(fimc0_variant_s5pv210, $mul.ref(0, 24)), $mul.ref(18, 1)), 16);
    $M.207 := $store.i16($M.207, $add.ref($add.ref(fimc0_variant_s5pv210, $mul.ref(0, 24)), $mul.ref(20, 1)), 8);
    $M.208 := $store.i16($M.208, $add.ref($add.ref(fimc0_variant_s5pv210, $mul.ref(0, 24)), $mul.ref(22, 1)), 16);
    $M.202 := $store.ref($M.202, fimc_drvdata_s5pv210, fimc0_variant_s5pv210);
    $M.202 := $store.ref($M.202, $add.ref($add.ref($add.ref(fimc_drvdata_s5pv210, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(1, 8)), fimc1_variant_s5pv210);
    $M.202 := $store.ref($M.202, $add.ref($add.ref($add.ref(fimc_drvdata_s5pv210, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(2, 8)), fimc2_variant_s5pv210);
    $M.202 := $store.ref($M.202, $add.ref($add.ref($add.ref(fimc_drvdata_s5pv210, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(3, 8)), $0.ref);
    $M.202 := $store.i32($M.202, $add.ref($add.ref(fimc_drvdata_s5pv210, $mul.ref(0, 56)), $mul.ref(32, 1)), 3);
    $M.202 := $store.i64($M.202, $add.ref($add.ref(fimc_drvdata_s5pv210, $mul.ref(0, 56)), $mul.ref(40, 1)), 166000000);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(fimc_drvdata_s5pv210, $mul.ref(0, 56)), $mul.ref(48, 1)), 0);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(fimc_drvdata_s5pv210, $mul.ref(0, 56)), $mul.ref(49, 1)), 1);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(fimc_drvdata_s5pv210, $mul.ref(0, 56)), $mul.ref(50, 1)), 0);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(fimc_drvdata_s5pv210, $mul.ref(0, 56)), $mul.ref(51, 1)), 4);
    $M.118 := $store.i8($M.118, fimc_of_match, 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(1, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(2, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(3, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(4, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(5, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(6, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(7, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(8, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(9, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(10, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(11, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(12, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(13, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(14, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(15, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(16, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(17, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(18, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(19, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(20, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(21, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(22, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(23, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(24, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(25, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(26, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(27, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(28, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(29, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(30, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(32, 1)), $mul.ref(31, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(0, 1)), 115);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(1, 1)), 97);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(2, 1)), 109);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(3, 1)), 115);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(4, 1)), 117);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(5, 1)), 110);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(6, 1)), 103);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(7, 1)), 44);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(8, 1)), 115);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(9, 1)), 53);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(10, 1)), 112);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(11, 1)), 118);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(12, 1)), 50);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(13, 1)), 49);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(14, 1)), 48);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(15, 1)), 45);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(16, 1)), 102);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(17, 1)), 105);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(18, 1)), 109);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(19, 1)), 99);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(20, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(21, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(22, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(23, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(24, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(25, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(26, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(27, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(28, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(29, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(30, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(31, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(32, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(33, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(34, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(35, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(36, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(37, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(38, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(39, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(40, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(41, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(42, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(43, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(44, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(45, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(46, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(47, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(48, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(49, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(50, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(51, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(52, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(53, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(54, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(55, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(56, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(57, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(58, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(59, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(60, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(61, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(62, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(63, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(64, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(65, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(66, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(67, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(68, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(69, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(70, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(71, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(72, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(73, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(74, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(75, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(76, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(77, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(78, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(79, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(80, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(81, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(82, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(83, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(84, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(85, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(86, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(87, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(88, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(89, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(90, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(91, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(92, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(93, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(94, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(95, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(96, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(97, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(98, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(99, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(100, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(101, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(102, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(103, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(104, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(105, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(106, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(107, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(108, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(109, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(110, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(111, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(112, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(113, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(114, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(115, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(116, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(117, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(118, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(119, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(120, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(121, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(122, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(123, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(124, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(125, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(126, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(64, 1)), $mul.ref(127, 1)), 0);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(0, 200)), $mul.ref(192, 1)), fimc_drvdata_s5pv210);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(1, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(2, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(3, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(4, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(5, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(6, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(7, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(8, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(9, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(10, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(11, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(12, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(13, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(14, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(15, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(16, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(17, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(18, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(19, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(20, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(21, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(22, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(23, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(24, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(25, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(26, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(27, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(28, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(29, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(30, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(32, 1)), $mul.ref(31, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(0, 1)), 115);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(1, 1)), 97);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(2, 1)), 109);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(3, 1)), 115);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(4, 1)), 117);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(5, 1)), 110);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(6, 1)), 103);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(7, 1)), 44);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(8, 1)), 101);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(9, 1)), 120);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(10, 1)), 121);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(11, 1)), 110);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(12, 1)), 111);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(13, 1)), 115);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(14, 1)), 52);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(15, 1)), 50);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(16, 1)), 49);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(17, 1)), 48);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(18, 1)), 45);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(19, 1)), 102);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(20, 1)), 105);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(21, 1)), 109);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(22, 1)), 99);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(23, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(24, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(25, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(26, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(27, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(28, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(29, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(30, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(31, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(32, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(33, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(34, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(35, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(36, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(37, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(38, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(39, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(40, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(41, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(42, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(43, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(44, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(45, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(46, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(47, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(48, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(49, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(50, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(51, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(52, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(53, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(54, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(55, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(56, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(57, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(58, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(59, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(60, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(61, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(62, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(63, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(64, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(65, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(66, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(67, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(68, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(69, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(70, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(71, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(72, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(73, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(74, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(75, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(76, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(77, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(78, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(79, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(80, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(81, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(82, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(83, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(84, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(85, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(86, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(87, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(88, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(89, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(90, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(91, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(92, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(93, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(94, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(95, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(96, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(97, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(98, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(99, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(100, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(101, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(102, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(103, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(104, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(105, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(106, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(107, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(108, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(109, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(110, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(111, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(112, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(113, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(114, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(115, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(116, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(117, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(118, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(119, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(120, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(121, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(122, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(123, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(124, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(125, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(126, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(64, 1)), $mul.ref(127, 1)), 0);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(1, 200)), $mul.ref(192, 1)), fimc_drvdata_exynos4210);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(1, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(2, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(3, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(4, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(5, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(6, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(7, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(8, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(9, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(10, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(11, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(12, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(13, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(14, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(15, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(16, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(17, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(18, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(19, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(20, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(21, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(22, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(23, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(24, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(25, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(26, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(27, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(28, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(29, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(30, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(32, 1)), $mul.ref(31, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(0, 1)), 115);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(1, 1)), 97);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(2, 1)), 109);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(3, 1)), 115);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(4, 1)), 117);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(5, 1)), 110);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(6, 1)), 103);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(7, 1)), 44);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(8, 1)), 101);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(9, 1)), 120);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(10, 1)), 121);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(11, 1)), 110);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(12, 1)), 111);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(13, 1)), 115);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(14, 1)), 52);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(15, 1)), 50);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(16, 1)), 49);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(17, 1)), 50);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(18, 1)), 45);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(19, 1)), 102);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(20, 1)), 105);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(21, 1)), 109);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(22, 1)), 99);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(23, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(24, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(25, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(26, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(27, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(28, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(29, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(30, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(31, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(32, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(33, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(34, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(35, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(36, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(37, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(38, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(39, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(40, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(41, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(42, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(43, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(44, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(45, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(46, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(47, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(48, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(49, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(50, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(51, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(52, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(53, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(54, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(55, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(56, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(57, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(58, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(59, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(60, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(61, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(62, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(63, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(64, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(65, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(66, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(67, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(68, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(69, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(70, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(71, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(72, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(73, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(74, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(75, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(76, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(77, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(78, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(79, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(80, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(81, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(82, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(83, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(84, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(85, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(86, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(87, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(88, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(89, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(90, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(91, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(92, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(93, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(94, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(95, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(96, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(97, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(98, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(99, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(100, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(101, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(102, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(103, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(104, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(105, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(106, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(107, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(108, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(109, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(110, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(111, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(112, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(113, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(114, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(115, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(116, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(117, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(118, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(119, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(120, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(121, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(122, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(123, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(124, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(125, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(126, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(64, 1)), $mul.ref(127, 1)), 0);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(2, 200)), $mul.ref(192, 1)), fimc_drvdata_exynos4x12);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(0, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(1, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(2, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(3, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(4, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(5, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(6, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(7, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(8, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(9, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(10, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(11, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(12, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(13, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(14, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(15, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(16, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(17, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(18, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(19, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(20, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(21, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(22, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(23, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(24, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(25, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(26, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(27, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(28, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(29, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(30, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(32, 1)), $mul.ref(31, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(16, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(17, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(18, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(19, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(20, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(21, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(22, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(23, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(24, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(25, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(26, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(27, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(28, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(29, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(30, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(31, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(32, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(33, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(34, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(35, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(36, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(37, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(38, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(39, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(40, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(41, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(42, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(43, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(44, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(45, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(46, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(47, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(48, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(49, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(50, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(51, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(52, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(53, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(54, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(55, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(56, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(57, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(58, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(59, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(60, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(61, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(62, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(63, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(64, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(65, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(66, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(67, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(68, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(69, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(70, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(71, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(72, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(73, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(74, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(75, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(76, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(77, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(78, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(79, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(80, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(81, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(82, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(83, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(84, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(85, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(86, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(87, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(88, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(89, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(90, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(91, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(92, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(93, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(94, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(95, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(96, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(97, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(98, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(99, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(100, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(101, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(102, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(103, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(104, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(105, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(106, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(107, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(108, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(109, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(110, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(111, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(112, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(113, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(114, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(115, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(116, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(117, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(118, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(119, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(120, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(121, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(122, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(123, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(124, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(125, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(126, 1)), 0);
    $M.118 := $store.i8($M.118, $add.ref($add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(64, 1)), $mul.ref(127, 1)), 0);
    $M.118 := $store.ref($M.118, $add.ref($add.ref($add.ref(fimc_of_match, $mul.ref(0, 800)), $mul.ref(3, 200)), $mul.ref(192, 1)), $0.ref);
    $M.119 := $store.ref($M.119, fimc_driver, fimc_probe);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(8, 1)), fimc_remove);
    $M.121 := $store.ref($M.121, $add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(16, 1)), $0.ref);
    $M.122 := $store.ref($M.122, $add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(24, 1)), $0.ref);
    $M.123 := $store.ref($M.123, $add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(32, 1)), $0.ref);
    $M.124 := $store.ref($M.124, $add.ref($add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(0, 1)), .str.53);
    $M.125 := $store.ref($M.125, $add.ref($add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.126 := $store.ref($M.126, $add.ref($add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(16, 1)), $0.ref);
    $M.127 := $store.ref($M.127, $add.ref($add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
    $M.128 := $store.i8($M.128, $add.ref($add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
    $M.129 := $store.i32($M.129, $add.ref($add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(36, 1)), 0);
    $M.130 := $store.ref($M.130, $add.ref($add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(40, 1)), fimc_of_match);
    $M.131 := $store.ref($M.131, $add.ref($add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
    $M.133 := $store.ref($M.133, $add.ref($add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
    $M.134 := $store.ref($M.134, $add.ref($add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
    $M.135 := $store.ref($M.135, $add.ref($add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
    $M.136 := $store.ref($M.136, $add.ref($add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
    $M.137 := $store.ref($M.137, $add.ref($add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
    $M.138 := $store.ref($M.138, $add.ref($add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(104, 1)), fimc_pm_ops);
    $M.139 := $store.ref($M.139, $add.ref($add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(112, 1)), $0.ref);
    $M.140 := $store.ref($M.140, $add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(160, 1)), fimc_driver_ids);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(fimc_driver, $mul.ref(0, 176)), $mul.ref(168, 1)), 0);
    $M.0 := $store.i32($M.0, fimc_formats, 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(0, 40)), $mul.ref(8, 1)), .str.33);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(0, 40)), $mul.ref(16, 1)), 1346520914);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(0, 40)), $mul.ref(20, 1)), 18);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(0, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(0, 40)), $mul.ref(26, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(0, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(0, 40)), $mul.ref(29, 1)), $mul.ref(0, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(0, 40)), $mul.ref(29, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(0, 40)), $mul.ref(29, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(0, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(0, 40)), $mul.ref(34, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(1, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(1, 40)), $mul.ref(8, 1)), .str.34);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(1, 40)), $mul.ref(16, 1)), 1213351746);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(1, 40)), $mul.ref(20, 1)), 19);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(1, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(1, 40)), $mul.ref(26, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(1, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(1, 40)), $mul.ref(29, 1)), $mul.ref(0, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(1, 40)), $mul.ref(29, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(1, 40)), $mul.ref(29, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(1, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(1, 40)), $mul.ref(34, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(2, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(2, 40)), $mul.ref(8, 1)), .str.35);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(2, 40)), $mul.ref(16, 1)), 877807426);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(2, 40)), $mul.ref(20, 1)), 20);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(2, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(2, 40)), $mul.ref(26, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(2, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(2, 40)), $mul.ref(29, 1)), $mul.ref(0, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(2, 40)), $mul.ref(29, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(2, 40)), $mul.ref(29, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(2, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(2, 40)), $mul.ref(34, 1)), 14);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(3, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(3, 40)), $mul.ref(8, 1)), .str.36);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(3, 40)), $mul.ref(16, 1)), 1329743698);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(3, 40)), $mul.ref(20, 1)), 17);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(3, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(3, 40)), $mul.ref(26, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(3, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(3, 40)), $mul.ref(29, 1)), $mul.ref(0, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(3, 40)), $mul.ref(29, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(3, 40)), $mul.ref(29, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(3, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(3, 40)), $mul.ref(34, 1)), 12);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(4, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(4, 40)), $mul.ref(8, 1)), .str.37);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(4, 40)), $mul.ref(16, 1)), 875836498);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(4, 40)), $mul.ref(20, 1)), 16);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(4, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(4, 40)), $mul.ref(26, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(4, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(4, 40)), $mul.ref(29, 1)), $mul.ref(0, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(4, 40)), $mul.ref(29, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(4, 40)), $mul.ref(29, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(4, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(4, 40)), $mul.ref(34, 1)), 12);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(5, 40)), $mul.ref(0, 1)), 8214);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(5, 40)), $mul.ref(8, 1)), .str.38);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(5, 40)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(5, 40)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(5, 40)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(5, 40)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(5, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(5, 40)), $mul.ref(29, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(5, 40)), $mul.ref(29, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(5, 40)), $mul.ref(29, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(5, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(5, 40)), $mul.ref(34, 1)), 32);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(6, 40)), $mul.ref(0, 1)), 8200);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(6, 40)), $mul.ref(8, 1)), .str.39);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(6, 40)), $mul.ref(16, 1)), 1448695129);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(6, 40)), $mul.ref(20, 1)), 33);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(6, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(6, 40)), $mul.ref(26, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(6, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(6, 40)), $mul.ref(29, 1)), $mul.ref(0, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(6, 40)), $mul.ref(29, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(6, 40)), $mul.ref(29, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(6, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(6, 40)), $mul.ref(34, 1)), 7);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(7, 40)), $mul.ref(0, 1)), 8198);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(7, 40)), $mul.ref(8, 1)), .str.40);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(7, 40)), $mul.ref(16, 1)), 1498831189);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(7, 40)), $mul.ref(20, 1)), 35);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(7, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(7, 40)), $mul.ref(26, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(7, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(7, 40)), $mul.ref(29, 1)), $mul.ref(0, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(7, 40)), $mul.ref(29, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(7, 40)), $mul.ref(29, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(7, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(7, 40)), $mul.ref(34, 1)), 7);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(8, 40)), $mul.ref(0, 1)), 8199);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(8, 40)), $mul.ref(8, 1)), .str.41);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(8, 40)), $mul.ref(16, 1)), 1498765654);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(8, 40)), $mul.ref(20, 1)), 36);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(8, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(8, 40)), $mul.ref(26, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(8, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(8, 40)), $mul.ref(29, 1)), $mul.ref(0, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(8, 40)), $mul.ref(29, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(8, 40)), $mul.ref(29, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(8, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(8, 40)), $mul.ref(34, 1)), 7);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(9, 40)), $mul.ref(0, 1)), 8201);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(9, 40)), $mul.ref(8, 1)), .str.42);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(9, 40)), $mul.ref(16, 1)), 1431918169);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(9, 40)), $mul.ref(20, 1)), 34);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(9, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(9, 40)), $mul.ref(26, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(9, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(9, 40)), $mul.ref(29, 1)), $mul.ref(0, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(9, 40)), $mul.ref(29, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(9, 40)), $mul.ref(29, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(9, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(9, 40)), $mul.ref(34, 1)), 7);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(10, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(10, 40)), $mul.ref(8, 1)), .str.43);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(10, 40)), $mul.ref(16, 1)), 1345466932);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(10, 40)), $mul.ref(20, 1)), 33);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(10, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(10, 40)), $mul.ref(26, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(10, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(10, 40)), $mul.ref(29, 1)), $mul.ref(0, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(10, 40)), $mul.ref(29, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(10, 40)), $mul.ref(29, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(10, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(10, 40)), $mul.ref(34, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(11, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(11, 40)), $mul.ref(8, 1)), .str.44);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(11, 40)), $mul.ref(16, 1)), 909203022);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(11, 40)), $mul.ref(20, 1)), 33);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(11, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(11, 40)), $mul.ref(26, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(11, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(11, 40)), $mul.ref(29, 1)), $mul.ref(0, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(11, 40)), $mul.ref(29, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(11, 40)), $mul.ref(29, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(11, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(11, 40)), $mul.ref(34, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(12, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(12, 40)), $mul.ref(8, 1)), .str.45);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(12, 40)), $mul.ref(16, 1)), 825644622);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(12, 40)), $mul.ref(20, 1)), 34);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(12, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(12, 40)), $mul.ref(26, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(12, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(12, 40)), $mul.ref(29, 1)), $mul.ref(0, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(12, 40)), $mul.ref(29, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(12, 40)), $mul.ref(29, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(12, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(12, 40)), $mul.ref(34, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(13, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(13, 40)), $mul.ref(8, 1)), .str.46);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(13, 40)), $mul.ref(16, 1)), 842093913);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(13, 40)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(13, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(13, 40)), $mul.ref(26, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(13, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(13, 40)), $mul.ref(29, 1)), $mul.ref(0, 1)), 12);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(13, 40)), $mul.ref(29, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(13, 40)), $mul.ref(29, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(13, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(13, 40)), $mul.ref(34, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(14, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(14, 40)), $mul.ref(8, 1)), .str.47);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(14, 40)), $mul.ref(16, 1)), 842094158);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(14, 40)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(14, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(14, 40)), $mul.ref(26, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(14, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(14, 40)), $mul.ref(29, 1)), $mul.ref(0, 1)), 12);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(14, 40)), $mul.ref(29, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(14, 40)), $mul.ref(29, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(14, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(14, 40)), $mul.ref(34, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(15, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(15, 40)), $mul.ref(8, 1)), .str.48);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(15, 40)), $mul.ref(16, 1)), 842091854);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(15, 40)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(15, 40)), $mul.ref(24, 1)), 2);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(15, 40)), $mul.ref(26, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(15, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(15, 40)), $mul.ref(29, 1)), $mul.ref(0, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(15, 40)), $mul.ref(29, 1)), $mul.ref(1, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(15, 40)), $mul.ref(29, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(15, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(15, 40)), $mul.ref(34, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(16, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(16, 40)), $mul.ref(8, 1)), .str.49);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(16, 40)), $mul.ref(16, 1)), 842091865);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(16, 40)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(16, 40)), $mul.ref(24, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(16, 40)), $mul.ref(26, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(16, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(16, 40)), $mul.ref(29, 1)), $mul.ref(0, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(16, 40)), $mul.ref(29, 1)), $mul.ref(1, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(16, 40)), $mul.ref(29, 1)), $mul.ref(2, 1)), 2);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(16, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(16, 40)), $mul.ref(34, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(17, 40)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(17, 40)), $mul.ref(8, 1)), .str.50);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(17, 40)), $mul.ref(16, 1)), 842091860);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(17, 40)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(17, 40)), $mul.ref(24, 1)), 2);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(17, 40)), $mul.ref(26, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(17, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(17, 40)), $mul.ref(29, 1)), $mul.ref(0, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(17, 40)), $mul.ref(29, 1)), $mul.ref(1, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(17, 40)), $mul.ref(29, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(17, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(17, 40)), $mul.ref(34, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(18, 40)), $mul.ref(0, 1)), 16385);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(18, 40)), $mul.ref(8, 1)), .str.51);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(18, 40)), $mul.ref(16, 1)), 1195724874);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(18, 40)), $mul.ref(20, 1)), 128);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(18, 40)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(18, 40)), $mul.ref(26, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(18, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(18, 40)), $mul.ref(29, 1)), $mul.ref(0, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(18, 40)), $mul.ref(29, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(18, 40)), $mul.ref(29, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(18, 40)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(18, 40)), $mul.ref(34, 1)), 17);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(19, 40)), $mul.ref(0, 1)), 20481);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(19, 40)), $mul.ref(8, 1)), .str.52);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(19, 40)), $mul.ref(16, 1)), 1229141331);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(19, 40)), $mul.ref(20, 1)), 256);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(19, 40)), $mul.ref(24, 1)), 2);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(19, 40)), $mul.ref(26, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(19, 40)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(19, 40)), $mul.ref(29, 1)), $mul.ref(0, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(19, 40)), $mul.ref(29, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(19, 40)), $mul.ref(29, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(19, 40)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(fimc_formats, $mul.ref(0, 800)), $mul.ref(19, 40)), $mul.ref(34, 1)), 17);
    $M.0 := $store.i8($M.0, .str.33, 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 7)), $mul.ref(1, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 7)), $mul.ref(2, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 7)), $mul.ref(3, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 7)), $mul.ref(4, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 7)), $mul.ref(5, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.33, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.34, 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 7)), $mul.ref(1, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 7)), $mul.ref(2, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 7)), $mul.ref(3, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 7)), $mul.ref(4, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 7)), $mul.ref(5, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.34, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.35, 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 17)), $mul.ref(1, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 17)), $mul.ref(2, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 17)), $mul.ref(3, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 17)), $mul.ref(4, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 17)), $mul.ref(5, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 17)), $mul.ref(6, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 17)), $mul.ref(7, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 17)), $mul.ref(8, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 17)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 17)), $mul.ref(10, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 17)), $mul.ref(11, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 17)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 17)), $mul.ref(13, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 17)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 17)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.35, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.36, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 9)), $mul.ref(1, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 9)), $mul.ref(2, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 9)), $mul.ref(3, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 9)), $mul.ref(4, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 9)), $mul.ref(5, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 9)), $mul.ref(6, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 9)), $mul.ref(7, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.36, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.37, 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 9)), $mul.ref(1, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 9)), $mul.ref(2, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 9)), $mul.ref(3, 1)), 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 9)), $mul.ref(4, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 9)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 9)), $mul.ref(6, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 9)), $mul.ref(7, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.38, 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(2, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(4, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(5, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(6, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(7, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(8, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.38, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.39, 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(2, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(4, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(5, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(7, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(8, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(13, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(16, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(18, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(19, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(20, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(21, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(22, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(23, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.39, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.40, 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(2, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(4, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(5, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(7, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(8, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(13, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(16, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(18, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(19, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(20, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(21, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(22, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(23, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.41, 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(2, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(4, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(5, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(7, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(8, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(13, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(16, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(18, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(20, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(21, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(22, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(23, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.42, 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(2, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(4, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(5, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(7, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(8, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(13, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(16, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(18, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(19, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(21, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(22, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(23, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.43, 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(2, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(4, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(5, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(7, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(8, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(16, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(18, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(19, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(20, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(21, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(22, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(23, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.43, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.44, 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(2, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(4, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(5, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(7, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(8, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(16, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(18, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(19, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(20, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(21, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(22, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(23, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.44, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.45, 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(2, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(4, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(5, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(7, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(8, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(16, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(18, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(19, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(20, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(22, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(23, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.45, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.46, 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(2, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(4, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(5, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(7, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(8, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(16, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(18, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(19, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(20, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(21, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(22, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.46, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.47, 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(2, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(4, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(5, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(7, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(8, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(16, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(18, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(19, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(20, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(21, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(22, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(23, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.47, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.48, 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(2, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(4, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(5, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(7, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(8, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(13, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(19, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(20, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(22, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(23, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(24, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(25, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(26, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(27, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(28, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(29, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(30, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(31, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.48, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, .str.49, 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(2, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(4, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(5, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(7, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(8, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(13, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(19, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(20, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(22, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(23, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(24, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(25, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(26, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(27, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(28, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(29, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(30, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(31, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(32, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.49, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, .str.50, 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(2, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(4, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(5, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(7, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(8, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(13, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(19, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(20, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(22, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(23, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(24, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(25, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(26, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(27, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(28, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(29, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(30, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, .str.51, 74);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 18)), $mul.ref(1, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 18)), $mul.ref(2, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 18)), $mul.ref(3, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 18)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 18)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 18)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 18)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 18)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 18)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 18)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 18)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 18)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 18)), $mul.ref(13, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 18)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 18)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 18)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.52, 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(1, 1)), 53);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(2, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(3, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(4, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(5, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(6, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(16, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(20, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(21, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(22, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(23, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(24, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(25, 1)), 74);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(26, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(27, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(28, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.213 := $store.i8($M.213, .str.32, 70);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(.str.32, $mul.ref(0, 8)), $mul.ref(1, 1)), 73);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(.str.32, $mul.ref(0, 8)), $mul.ref(2, 1)), 77);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(.str.32, $mul.ref(0, 8)), $mul.ref(3, 1)), 67);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(.str.32, $mul.ref(0, 8)), $mul.ref(4, 1)), 46);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(.str.32, $mul.ref(0, 8)), $mul.ref(5, 1)), 37);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(.str.32, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(.str.32, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.28, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(15, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(17, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(20, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(21, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(23, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.10, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(13, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(18, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(19, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.13, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(5, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(6, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(15, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(19, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(22, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(23, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(24, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.16, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(5, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(6, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.18, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(5, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(6, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(16, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(20, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(21, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(22, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.18, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.76, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 5)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 5)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 5)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.76, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.54, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(10, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(16, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(17, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.3, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.3, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.7, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 19)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 19)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 19)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 19)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 19)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 19)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 19)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 19)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 19)), $mul.ref(9, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 19)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 19)), $mul.ref(11, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 19)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 19)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 19)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 19)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 19)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 19)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, .str.58, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 21)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 21)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 21)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 21)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 21)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 21)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 21)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 21)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 21)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 21)), $mul.ref(10, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 21)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 21)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 21)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 21)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 21)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 21)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 21)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 21)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 21)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.56, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.57, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.79, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(3, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(7, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.79, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.92, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(7, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.90, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 14)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 14)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 14)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 14)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 14)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 14)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 14)), $mul.ref(7, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 14)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 14)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 14)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 14)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.88, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 18)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 18)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 18)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 18)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 18)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 18)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 18)), $mul.ref(7, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 18)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 18)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 18)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 18)), $mul.ref(11, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 18)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 18)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 18)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 18)), $mul.ref(16, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.103, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(10, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(20, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(22, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(23, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(24, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.103, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.98, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(15, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(21, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(23, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(24, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(25, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.98, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, .str.101, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(10, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(12, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(20, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(22, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(23, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(24, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.101, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.105, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(10, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(16, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(17, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.105, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.95, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(15, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(17, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(18, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.95, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.107, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(8, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.107, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.214 := $store.i8($M.214, .str.113, 102);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(.str.113, $mul.ref(0, 16)), $mul.ref(1, 1)), 105);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(.str.113, $mul.ref(0, 16)), $mul.ref(2, 1)), 109);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(.str.113, $mul.ref(0, 16)), $mul.ref(3, 1)), 99);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(.str.113, $mul.ref(0, 16)), $mul.ref(4, 1)), 46);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(.str.113, $mul.ref(0, 16)), $mul.ref(5, 1)), 37);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(.str.113, $mul.ref(0, 16)), $mul.ref(6, 1)), 100);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(.str.113, $mul.ref(0, 16)), $mul.ref(7, 1)), 46);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(.str.113, $mul.ref(0, 16)), $mul.ref(8, 1)), 99);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(.str.113, $mul.ref(0, 16)), $mul.ref(9, 1)), 97);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(.str.113, $mul.ref(0, 16)), $mul.ref(10, 1)), 112);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(.str.113, $mul.ref(0, 16)), $mul.ref(11, 1)), 116);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(.str.113, $mul.ref(0, 16)), $mul.ref(12, 1)), 117);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(.str.113, $mul.ref(0, 16)), $mul.ref(13, 1)), 114);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(.str.113, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(.str.113, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.215 := $store.i8($M.215, .str.25, 102);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(.str.25, $mul.ref(0, 12)), $mul.ref(1, 1)), 105);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(.str.25, $mul.ref(0, 12)), $mul.ref(2, 1)), 109);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(.str.25, $mul.ref(0, 12)), $mul.ref(3, 1)), 99);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(.str.25, $mul.ref(0, 12)), $mul.ref(4, 1)), 46);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(.str.25, $mul.ref(0, 12)), $mul.ref(5, 1)), 37);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(.str.25, $mul.ref(0, 12)), $mul.ref(6, 1)), 100);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(.str.25, $mul.ref(0, 12)), $mul.ref(7, 1)), 46);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(.str.25, $mul.ref(0, 12)), $mul.ref(8, 1)), 109);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(.str.25, $mul.ref(0, 12)), $mul.ref(9, 1)), 50);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(.str.25, $mul.ref(0, 12)), $mul.ref(10, 1)), 109);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(.str.25, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.112, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 21)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 21)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 21)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 21)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 21)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 21)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 21)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 21)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 21)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 21)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 21)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 21)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 21)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 21)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 21)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 21)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 21)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 21)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.112, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.110, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 18)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 18)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 18)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 18)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 18)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 18)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 18)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 18)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 18)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 18)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 18)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 18)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 18)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 18)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.110, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.216 := $store.i8($M.216, .str.156, 118);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.156, $mul.ref(0, 9)), $mul.ref(1, 1)), 105);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.156, $mul.ref(0, 9)), $mul.ref(2, 1)), 100);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.156, $mul.ref(0, 9)), $mul.ref(3, 1)), 45);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.156, $mul.ref(0, 9)), $mul.ref(4, 1)), 100);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.156, $mul.ref(0, 9)), $mul.ref(5, 1)), 101);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.156, $mul.ref(0, 9)), $mul.ref(6, 1)), 118);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.156, $mul.ref(0, 9)), $mul.ref(7, 1)), 10);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(.str.156, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.217 := $store.i8($M.217, .str.157, 115);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(.str.157, $mul.ref(0, 9)), $mul.ref(1, 1)), 117);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(.str.157, $mul.ref(0, 9)), $mul.ref(2, 1)), 98);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(.str.157, $mul.ref(0, 9)), $mul.ref(3, 1)), 45);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(.str.157, $mul.ref(0, 9)), $mul.ref(4, 1)), 100);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(.str.157, $mul.ref(0, 9)), $mul.ref(5, 1)), 101);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(.str.157, $mul.ref(0, 9)), $mul.ref(6, 1)), 118);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(.str.157, $mul.ref(0, 9)), $mul.ref(7, 1)), 10);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(.str.157, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.218 := $store.i8($M.218, .str.128, 99);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.128, $mul.ref(0, 5)), $mul.ref(1, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.128, $mul.ref(0, 5)), $mul.ref(2, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.128, $mul.ref(0, 5)), $mul.ref(3, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.128, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.219 := $store.i8($M.219, .str.139, 112);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(1, 1)), 97);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(2, 1)), 114);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(3, 1)), 97);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(4, 1)), 108);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(5, 1)), 108);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(6, 1)), 101);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(7, 1)), 108);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(8, 1)), 45);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(9, 1)), 112);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(10, 1)), 111);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(11, 1)), 114);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(12, 1)), 116);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(13, 1)), 115);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.139, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.218 := $store.i8($M.218, .str.142, 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.142, $mul.ref(0, 8)), $mul.ref(1, 1)), 50);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.142, $mul.ref(0, 8)), $mul.ref(2, 1)), 99);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.142, $mul.ref(0, 8)), $mul.ref(3, 1)), 45);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.142, $mul.ref(0, 8)), $mul.ref(4, 1)), 105);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.142, $mul.ref(0, 8)), $mul.ref(5, 1)), 115);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.142, $mul.ref(0, 8)), $mul.ref(6, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(.str.142, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.219 := $store.i8($M.219, .str.121, 102);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.121, $mul.ref(0, 8)), $mul.ref(1, 1)), 105);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.121, $mul.ref(0, 8)), $mul.ref(2, 1)), 109);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.121, $mul.ref(0, 8)), $mul.ref(3, 1)), 99);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.121, $mul.ref(0, 8)), $mul.ref(4, 1)), 45);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.121, $mul.ref(0, 8)), $mul.ref(5, 1)), 105);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.121, $mul.ref(0, 8)), $mul.ref(6, 1)), 115);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.121, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.220 := $store.i8($M.220, .str.129, 102);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(.str.129, $mul.ref(0, 10)), $mul.ref(1, 1)), 105);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(.str.129, $mul.ref(0, 10)), $mul.ref(2, 1)), 109);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(.str.129, $mul.ref(0, 10)), $mul.ref(3, 1)), 99);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(.str.129, $mul.ref(0, 10)), $mul.ref(4, 1)), 45);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(.str.129, $mul.ref(0, 10)), $mul.ref(5, 1)), 108);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(.str.129, $mul.ref(0, 10)), $mul.ref(6, 1)), 105);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(.str.129, $mul.ref(0, 10)), $mul.ref(7, 1)), 116);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(.str.129, $mul.ref(0, 10)), $mul.ref(8, 1)), 101);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(.str.129, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.219 := $store.i8($M.219, .str.136, 112);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.136, $mul.ref(0, 5)), $mul.ref(1, 1)), 111);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.136, $mul.ref(0, 5)), $mul.ref(2, 1)), 114);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.136, $mul.ref(0, 5)), $mul.ref(3, 1)), 116);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(.str.136, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.221 := $store.i8($M.221, .str.122, 115);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(.str.122, $mul.ref(0, 11)), $mul.ref(1, 1)), 99);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(.str.122, $mul.ref(0, 11)), $mul.ref(2, 1)), 108);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(.str.122, $mul.ref(0, 11)), $mul.ref(3, 1)), 107);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(.str.122, $mul.ref(0, 11)), $mul.ref(4, 1)), 95);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(.str.122, $mul.ref(0, 11)), $mul.ref(5, 1)), 99);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(.str.122, $mul.ref(0, 11)), $mul.ref(6, 1)), 97);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(.str.122, $mul.ref(0, 11)), $mul.ref(7, 1)), 109);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(.str.122, $mul.ref(0, 11)), $mul.ref(8, 1)), 37);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(.str.122, $mul.ref(0, 11)), $mul.ref(9, 1)), 117);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(.str.122, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.222 := $store.i8($M.222, .str.124, 112);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(1, 1)), 120);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(2, 1)), 108);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(4, 1)), 97);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(5, 1)), 115);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(6, 1)), 121);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(7, 1)), 110);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(8, 1)), 99);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(9, 1)), 37);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(10, 1)), 117);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(.str.124, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    call {:si_unique_call 2976} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 870362);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 871394);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 872426);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32);



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 873458);

procedure devirtbounce.3(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 874490);

procedure devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i57 := $eq.ref(subdev_notifier_complete, $p0);
    assume true;
    goto $bb20, $bb39;

  $bb39:
    assume !($i57 == 1);
    $i56 := $eq.ref(fimc_md_remove, $p0);
    assume true;
    goto $bb19, $bb38;

  $bb38:
    assume !($i56 == 1);
    $i55 := $eq.ref(fimc_md_probe, $p0);
    assume true;
    goto $bb18, $bb37;

  $bb37:
    assume !($i55 == 1);
    $i54 := $eq.ref(cam_clk_prepare, $p0);
    assume true;
    goto $bb17, $bb36;

  $bb36:
    assume !($i54 == 1);
    $i53 := $eq.ref(__fimc_pipeline_close, $p0);
    assume true;
    goto $bb16, $bb35;

  $bb35:
    assume !($i53 == 1);
    $i52 := $eq.ref(buffer_prepare, $p0);
    assume true;
    goto $bb15, $bb34;

  $bb34:
    assume !($i52 == 1);
    $i51 := $eq.ref(fimc_capture_release, $p0);
    assume true;
    goto $bb14, $bb33;

  $bb33:
    assume !($i51 == 1);
    $i50 := $eq.ref(fimc_capture_open, $p0);
    assume true;
    goto $bb13, $bb32;

  $bb32:
    assume !($i50 == 1);
    $i49 := $eq.ref(fimc_capture_subdev_registered, $p0);
    assume true;
    goto $bb12, $bb31;

  $bb31:
    assume !($i49 == 1);
    $i48 := $eq.ref(fimc_buf_prepare, $p0);
    assume true;
    goto $bb11, $bb30;

  $bb30:
    assume !($i48 == 1);
    $i47 := $eq.ref(fimc_m2m_release, $p0);
    assume true;
    goto $bb10, $bb29;

  $bb29:
    assume !($i47 == 1);
    $i46 := $eq.ref(fimc_m2m_open, $p0);
    assume true;
    goto $bb9, $bb28;

  $bb28:
    assume !($i46 == 1);
    $i45 := $eq.ref(fimc_runtime_resume, $p0);
    assume {:branchcond $i45} true;
    goto $bb8, $bb27;

  $bb27:
    assume !($i45 == 1);
    $i44 := $eq.ref(fimc_runtime_suspend, $p0);
    assume true;
    goto $bb7, $bb26;

  $bb26:
    assume !($i44 == 1);
    $i43 := $eq.ref(fimc_resume, $p0);
    assume true;
    goto $bb6, $bb25;

  $bb25:
    assume !($i43 == 1);
    $i42 := $eq.ref(fimc_suspend, $p0);
    assume true;
    goto $bb5, $bb24;

  $bb24:
    assume !($i42 == 1);
    $i41 := $eq.ref(fimc_remove, $p0);
    assume true;
    goto $bb4, $bb23;

  $bb23:
    assume !($i41 == 1);
    $i40 := $eq.ref(fimc_probe, $p0);
    assume true;
    goto $bb3, $bb22;

  $bb22:
    assume !($i40 == 1);
    $i39 := $eq.ref(fimc_s_ctrl, $p0);
    assume true;
    goto $bb2, $bb21;

  $bb21:
    assume !($i39 == 1);
    assume false;
    return;

  $bb2:
    assume $i39 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2977} $i2 := fimc_s_ctrl($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i40 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2978} $i4 := fimc_probe($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i41 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2979} $i6 := fimc_remove($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i42 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2980} $i8 := fimc_suspend($p7);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    $r := $i8;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i43 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2981} $i10 := fimc_resume($p9);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    $r := $i10;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i44 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2982} $i12 := fimc_runtime_suspend($p11);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    $r := $i12;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i45 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2983} $i14 := fimc_runtime_resume($p13);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    $r := $i14;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i46 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2984} $i16 := fimc_m2m_open($p15);
    $r := $i16;
    return;

  $bb10:
    assume $i47 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2985} $i18 := fimc_m2m_release($p17);
    $r := $i18;
    return;

  $bb11:
    assume $i48 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2986} $i20 := fimc_buf_prepare($p19);
    $r := $i20;
    return;

  $bb12:
    assume $i49 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2987} $i22 := fimc_capture_subdev_registered($p21);
    $r := $i22;
    return;

  $bb13:
    assume $i50 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2988} $i24 := fimc_capture_open($p23);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    $r := $i24;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i51 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2989} $i26 := fimc_capture_release($p25);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    $r := $i26;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i52 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2990} $i28 := buffer_prepare($p27);
    $r := $i28;
    return;

  $bb16:
    assume $i53 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2991} $i30 := __fimc_pipeline_close($p29);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    $r := $i30;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i54 == 1;
    $p31 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2992} $i32 := cam_clk_prepare($p31);
    $r := $i32;
    return;

  $bb18:
    assume $i55 == 1;
    $p33 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2993} $i34 := fimc_md_probe($p33);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    $r := $i34;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i56 == 1;
    $p35 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2994} $i36 := fimc_md_remove($p35);
    $r := $i36;
    return;

  $bb20:
    assume $i57 == 1;
    $p37 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2995} $i38 := subdev_notifier_complete($p37);
    $r := $i38;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 875522);

procedure devirtbounce.5(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 876554);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref, arg2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.29, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $CurrAddr, $M.25, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.28, $M.32, $M.36, assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref, arg2: i1) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i27 := $eq.ref(__fimc_pipeline_open, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i27 == 1);
    $i26 := $eq.ref(fimc_cap_s_input, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i26 == 1);
    $i25 := $eq.ref(fimc_cap_streamoff, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i25 == 1);
    $i24 := $eq.ref(fimc_cap_streamon, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i24 == 1);
    $i23 := $eq.ref(v4l2_m2m_ioctl_streamoff, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i23 == 1);
    $i22 := $eq.ref(v4l2_m2m_ioctl_streamon, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume false;
    return;

  $bb2:
    assume $i22 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    $i3 := $zext.i1.i32(arg2);
    call {:si_unique_call 2996} $i4 := v4l2_m2m_ioctl_streamon($p1, $p2, $i3);
    $r := $i4;
    return;

  $bb3:
    assume $i23 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    $i7 := $zext.i1.i32(arg2);
    call {:si_unique_call 2997} $i8 := v4l2_m2m_ioctl_streamoff($p5, $p6, $i7);
    $r := $i8;
    return;

  $bb4:
    assume $i24 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    $i11 := $zext.i1.i32(arg2);
    call {:si_unique_call 2998} $i12 := fimc_cap_streamon($p9, $p10, $i11);
    $r := $i12;
    return;

  $bb5:
    assume $i25 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    $i15 := $zext.i1.i32(arg2);
    call {:si_unique_call 2999} $i16 := fimc_cap_streamoff($p13, $p14, $i15);
    $r := $i16;
    return;

  $bb6:
    assume $i26 == 1;
    $p17 := $bitcast.ref.ref(arg);
    $p18 := $bitcast.ref.ref(arg1);
    $i19 := $zext.i1.i32(arg2);
    call {:si_unique_call 3000} $i20 := fimc_cap_s_input($p17, $p18, $i19);
    $r := $i20;
    return;

  $bb7:
    assume $i27 == 1;
    call {:si_unique_call 3001} $i21 := __fimc_pipeline_open(arg, arg1, arg2);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    $r := $i21;
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 877586);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.28, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.29, $M.32, $M.27, $M.25, $M.36, assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i1) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(__fimc_pipeline_s_stream, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i10 == 1);
    $i9 := $eq.ref(start_streaming___0, $p0);
    assume {:branchcond $i9} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i9 == 1);
    $i8 := $eq.ref(start_streaming, $p0);
    assume {:branchcond $i8} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $i2 := $zext.i1.i32(arg1);
    call {:si_unique_call 3002} $i3 := start_streaming($p1, $i2);
    $r := $i3;
    return;

  $bb3:
    assume $i9 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $i5 := $zext.i1.i32(arg1);
    call {:si_unique_call 3003} $i6 := start_streaming___0($p4, $i5);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    $r := $i6;
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    call {:si_unique_call 3004} $i7 := __fimc_pipeline_s_stream(arg, arg1);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    $r := $i7;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 878618);

procedure devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.29, $M.32, $CurrAddr, $M.27, $M.28, $M.25, $M.36, assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i56 := $eq.ref(subdev_notifier_complete, $p0);
    assume true;
    goto $bb20, $bb39;

  $bb39:
    assume !($i56 == 1);
    $i55 := $eq.ref(fimc_md_remove, $p0);
    assume true;
    goto $bb19, $bb38;

  $bb38:
    assume !($i55 == 1);
    $i54 := $eq.ref(fimc_md_probe, $p0);
    assume true;
    goto $bb18, $bb37;

  $bb37:
    assume !($i54 == 1);
    $i53 := $eq.ref(cam_clk_prepare, $p0);
    assume true;
    goto $bb17, $bb36;

  $bb36:
    assume !($i53 == 1);
    $i52 := $eq.ref(__fimc_pipeline_close, $p0);
    assume true;
    goto $bb16, $bb35;

  $bb35:
    assume !($i52 == 1);
    $i51 := $eq.ref(buffer_prepare, $p0);
    assume true;
    goto $bb15, $bb34;

  $bb34:
    assume !($i51 == 1);
    $i50 := $eq.ref(fimc_capture_release, $p0);
    assume true;
    goto $bb14, $bb33;

  $bb33:
    assume !($i50 == 1);
    $i49 := $eq.ref(fimc_capture_open, $p0);
    assume true;
    goto $bb13, $bb32;

  $bb32:
    assume !($i49 == 1);
    $i48 := $eq.ref(fimc_capture_subdev_registered, $p0);
    assume true;
    goto $bb12, $bb31;

  $bb31:
    assume !($i48 == 1);
    $i47 := $eq.ref(fimc_buf_prepare, $p0);
    assume true;
    goto $bb11, $bb30;

  $bb30:
    assume !($i47 == 1);
    $i46 := $eq.ref(fimc_m2m_release, $p0);
    assume true;
    goto $bb10, $bb29;

  $bb29:
    assume !($i46 == 1);
    $i45 := $eq.ref(fimc_m2m_open, $p0);
    assume {:branchcond $i45} true;
    goto $bb9, $bb28;

  $bb28:
    assume !($i45 == 1);
    $i44 := $eq.ref(fimc_runtime_resume, $p0);
    assume true;
    goto $bb8, $bb27;

  $bb27:
    assume !($i44 == 1);
    $i43 := $eq.ref(fimc_runtime_suspend, $p0);
    assume true;
    goto $bb7, $bb26;

  $bb26:
    assume !($i43 == 1);
    $i42 := $eq.ref(fimc_resume, $p0);
    assume true;
    goto $bb6, $bb25;

  $bb25:
    assume !($i42 == 1);
    $i41 := $eq.ref(fimc_suspend, $p0);
    assume true;
    goto $bb5, $bb24;

  $bb24:
    assume !($i41 == 1);
    $i40 := $eq.ref(fimc_remove, $p0);
    assume true;
    goto $bb4, $bb23;

  $bb23:
    assume !($i40 == 1);
    $i39 := $eq.ref(fimc_probe, $p0);
    assume true;
    goto $bb3, $bb22;

  $bb22:
    assume !($i39 == 1);
    $i38 := $eq.ref(fimc_s_ctrl, $p0);
    assume true;
    goto $bb2, $bb21;

  $bb21:
    assume !($i38 == 1);
    assume false;
    return;

  $bb2:
    assume $i38 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3005} $i2 := fimc_s_ctrl($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i39 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3006} $i4 := fimc_probe($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i40 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3007} $i6 := fimc_remove($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i41 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3008} $i8 := fimc_suspend($p7);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    $r := $i8;
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i42 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3009} $i10 := fimc_resume($p9);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    $r := $i10;
    return;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i43 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3010} $i12 := fimc_runtime_suspend($p11);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    $r := $i12;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i44 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3011} $i14 := fimc_runtime_resume($p13);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    $r := $i14;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i45 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3012} $i16 := fimc_m2m_open($p15);
    $r := $i16;
    return;

  $bb10:
    assume $i46 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3013} $i18 := fimc_m2m_release($p17);
    $r := $i18;
    return;

  $bb11:
    assume $i47 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3014} $i20 := fimc_buf_prepare($p19);
    $r := $i20;
    return;

  $bb12:
    assume $i48 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3015} $i22 := fimc_capture_subdev_registered($p21);
    $r := $i22;
    return;

  $bb13:
    assume $i49 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3016} $i24 := fimc_capture_open($p23);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    $r := $i24;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i50 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3017} $i26 := fimc_capture_release($p25);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    $r := $i26;
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i51 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3018} $i28 := buffer_prepare($p27);
    $r := $i28;
    return;

  $bb16:
    assume $i52 == 1;
    call {:si_unique_call 3019} $i29 := __fimc_pipeline_close(arg);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    $r := $i29;
    return;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i53 == 1;
    $p30 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3020} $i31 := cam_clk_prepare($p30);
    $r := $i31;
    return;

  $bb18:
    assume $i54 == 1;
    $p32 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3021} $i33 := fimc_md_probe($p32);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    $r := $i33;
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i55 == 1;
    $p34 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3022} $i35 := fimc_md_remove($p34);
    $r := $i35;
    return;

  $bb20:
    assume $i56 == 1;
    $p36 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3023} $i37 := subdev_notifier_complete($p36);
    $r := $i37;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 879650);

procedure devirtbounce.9(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 880682);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 881714);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.25, $M.27, $CurrAddr;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i32;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i32;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $i134: i1;
  var $i135: i1;
  var $i136: i1;
  var $i137: i1;
  var $i138: i1;
  var $i139: i1;
  var $i140: i1;
  var $i141: i1;
  var $i142: i1;
  var $i143: i1;
  var $i144: i1;
  var $i145: i1;
  var $i146: i1;
  var $i147: i1;
  var $i148: i1;
  var $i149: i1;
  var $i150: i1;
  var $i151: i1;
  var $i152: i1;
  var $i153: i1;
  var $i154: i1;
  var $i155: i1;
  var $i156: i1;
  var $i157: i1;
  var $i158: i1;
  var $i159: i1;
  var $i160: i1;
  var $i161: i1;
  var $i162: i1;
  var $i163: i1;
  var $i164: i1;
  var $i165: i1;
  var $i166: i1;
  var $i167: i1;
  var $i168: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i168 := $eq.ref(subdev_notifier_bound, $p0);
    assume true;
    goto $bb37, $bb73;

  $bb73:
    assume !($i168 == 1);
    $i167 := $eq.ref(fimc_cap_s_selection, $p0);
    assume true;
    goto $bb36, $bb72;

  $bb72:
    assume !($i167 == 1);
    $i166 := $eq.ref(fimc_cap_g_selection, $p0);
    assume {:branchcond $i166} true;
    goto $bb35, $bb71;

  $bb71:
    assume !($i166 == 1);
    $i165 := $eq.ref(fimc_cap_g_input, $p0);
    assume {:branchcond $i165} true;
    goto $bb34, $bb70;

  $bb70:
    assume !($i165 == 1);
    $i164 := $eq.ref(fimc_cap_enum_input, $p0);
    assume true;
    goto $bb33, $bb69;

  $bb69:
    assume !($i164 == 1);
    $i163 := $eq.ref(vb2_ioctl_prepare_buf, $p0);
    assume {:branchcond $i163} true;
    goto $bb32, $bb68;

  $bb68:
    assume !($i163 == 1);
    $i162 := $eq.ref(vb2_ioctl_create_bufs, $p0);
    assume {:branchcond $i162} true;
    goto $bb31, $bb67;

  $bb67:
    assume !($i162 == 1);
    $i161 := $eq.ref(vb2_ioctl_dqbuf, $p0);
    assume {:branchcond $i161} true;
    goto $bb30, $bb66;

  $bb66:
    assume !($i161 == 1);
    $i160 := $eq.ref(vb2_ioctl_expbuf, $p0);
    assume true;
    goto $bb29, $bb65;

  $bb65:
    assume !($i160 == 1);
    $i159 := $eq.ref(vb2_ioctl_qbuf, $p0);
    assume {:branchcond $i159} true;
    goto $bb28, $bb64;

  $bb64:
    assume !($i159 == 1);
    $i158 := $eq.ref(vb2_ioctl_querybuf, $p0);
    assume {:branchcond $i158} true;
    goto $bb27, $bb63;

  $bb63:
    assume !($i158 == 1);
    $i157 := $eq.ref(fimc_cap_reqbufs, $p0);
    assume {:branchcond $i157} true;
    goto $bb26, $bb62;

  $bb62:
    assume !($i157 == 1);
    $i156 := $eq.ref(fimc_cap_try_fmt_mplane, $p0);
    assume true;
    goto $bb25, $bb61;

  $bb61:
    assume !($i156 == 1);
    $i155 := $eq.ref(fimc_cap_s_fmt_mplane, $p0);
    assume {:branchcond $i155} true;
    goto $bb24, $bb60;

  $bb60:
    assume !($i155 == 1);
    $i154 := $eq.ref(fimc_cap_g_fmt_mplane, $p0);
    assume true;
    goto $bb23, $bb59;

  $bb59:
    assume !($i154 == 1);
    $i153 := $eq.ref(fimc_cap_enum_fmt_mplane, $p0);
    assume true;
    goto $bb22, $bb58;

  $bb58:
    assume !($i153 == 1);
    $i152 := $eq.ref(fimc_cap_querycap, $p0);
    assume {:branchcond $i152} true;
    goto $bb21, $bb57;

  $bb57:
    assume !($i152 == 1);
    $i151 := $eq.ref(fimc_subdev_set_selection, $p0);
    assume {:branchcond $i151} true;
    goto $bb20, $bb56;

  $bb56:
    assume !($i151 == 1);
    $i150 := $eq.ref(fimc_subdev_get_selection, $p0);
    assume true;
    goto $bb19, $bb55;

  $bb55:
    assume !($i150 == 1);
    $i149 := $eq.ref(fimc_subdev_set_fmt, $p0);
    assume {:branchcond $i149} true;
    goto $bb18, $bb54;

  $bb54:
    assume !($i149 == 1);
    $i148 := $eq.ref(fimc_subdev_get_fmt, $p0);
    assume true;
    goto $bb17, $bb53;

  $bb53:
    assume !($i148 == 1);
    $i147 := $eq.ref(fimc_subdev_enum_mbus_code, $p0);
    assume true;
    goto $bb16, $bb52;

  $bb52:
    assume !($i147 == 1);
    $i146 := $eq.ref(fimc_m2m_s_crop, $p0);
    assume true;
    goto $bb15, $bb51;

  $bb51:
    assume !($i146 == 1);
    $i145 := $eq.ref(fimc_m2m_g_crop, $p0);
    assume true;
    goto $bb14, $bb50;

  $bb50:
    assume !($i145 == 1);
    $i144 := $eq.ref(fimc_m2m_cropcap, $p0);
    assume {:branchcond $i144} true;
    goto $bb13, $bb49;

  $bb49:
    assume !($i144 == 1);
    $i143 := $eq.ref(v4l2_m2m_ioctl_dqbuf, $p0);
    assume {:branchcond $i143} true;
    goto $bb12, $bb48;

  $bb48:
    assume !($i143 == 1);
    $i142 := $eq.ref(v4l2_m2m_ioctl_expbuf, $p0);
    assume true;
    goto $bb11, $bb47;

  $bb47:
    assume !($i142 == 1);
    $i141 := $eq.ref(v4l2_m2m_ioctl_qbuf, $p0);
    assume {:branchcond $i141} true;
    goto $bb10, $bb46;

  $bb46:
    assume !($i141 == 1);
    $i140 := $eq.ref(v4l2_m2m_ioctl_querybuf, $p0);
    assume true;
    goto $bb9, $bb45;

  $bb45:
    assume !($i140 == 1);
    $i139 := $eq.ref(v4l2_m2m_ioctl_reqbufs, $p0);
    assume true;
    goto $bb8, $bb44;

  $bb44:
    assume !($i139 == 1);
    $i138 := $eq.ref(fimc_m2m_try_fmt_mplane, $p0);
    assume true;
    goto $bb7, $bb43;

  $bb43:
    assume !($i138 == 1);
    $i137 := $eq.ref(fimc_m2m_s_fmt_mplane, $p0);
    assume true;
    goto $bb6, $bb42;

  $bb42:
    assume !($i137 == 1);
    $i136 := $eq.ref(fimc_m2m_g_fmt_mplane, $p0);
    assume true;
    goto $bb5, $bb41;

  $bb41:
    assume !($i136 == 1);
    $i135 := $eq.ref(fimc_m2m_enum_fmt_mplane, $p0);
    assume true;
    goto $bb4, $bb40;

  $bb40:
    assume !($i135 == 1);
    $i134 := $eq.ref(fimc_m2m_querycap, $p0);
    assume {:branchcond $i134} true;
    goto $bb3, $bb39;

  $bb39:
    assume !($i134 == 1);
    $i133 := $eq.ref(queue_init, $p0);
    assume true;
    goto $bb2, $bb38;

  $bb38:
    assume !($i133 == 1);
    assume false;
    return;

  $bb2:
    assume $i133 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    $p3 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3024} $i4 := queue_init($p1, $p2, $p3);
    $r := $i4;
    return;

  $bb3:
    assume $i134 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    $p7 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3025} $i8 := fimc_m2m_querycap($p5, $p6, $p7);
    $r := $i8;
    return;

  $bb4:
    assume $i135 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    $p11 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3026} $i12 := fimc_m2m_enum_fmt_mplane($p9, $p10, $p11);
    $r := $i12;
    return;

  $bb5:
    assume $i136 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    $p15 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3027} $i16 := fimc_m2m_g_fmt_mplane($p13, $p14, $p15);
    $r := $i16;
    return;

  $bb6:
    assume $i137 == 1;
    $p17 := $bitcast.ref.ref(arg);
    $p18 := $bitcast.ref.ref(arg1);
    $p19 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3028} $i20 := fimc_m2m_s_fmt_mplane($p17, $p18, $p19);
    $r := $i20;
    return;

  $bb7:
    assume $i138 == 1;
    $p21 := $bitcast.ref.ref(arg);
    $p22 := $bitcast.ref.ref(arg1);
    $p23 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3029} $i24 := fimc_m2m_try_fmt_mplane($p21, $p22, $p23);
    $r := $i24;
    return;

  $bb8:
    assume $i139 == 1;
    $p25 := $bitcast.ref.ref(arg);
    $p26 := $bitcast.ref.ref(arg1);
    $p27 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3030} $i28 := v4l2_m2m_ioctl_reqbufs($p25, $p26, $p27);
    $r := $i28;
    return;

  $bb9:
    assume $i140 == 1;
    $p29 := $bitcast.ref.ref(arg);
    $p30 := $bitcast.ref.ref(arg1);
    $p31 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3031} $i32 := v4l2_m2m_ioctl_querybuf($p29, $p30, $p31);
    $r := $i32;
    return;

  $bb10:
    assume $i141 == 1;
    $p33 := $bitcast.ref.ref(arg);
    $p34 := $bitcast.ref.ref(arg1);
    $p35 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3032} $i36 := v4l2_m2m_ioctl_qbuf($p33, $p34, $p35);
    $r := $i36;
    return;

  $bb11:
    assume $i142 == 1;
    $p37 := $bitcast.ref.ref(arg);
    $p38 := $bitcast.ref.ref(arg1);
    $p39 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3033} $i40 := v4l2_m2m_ioctl_expbuf($p37, $p38, $p39);
    $r := $i40;
    return;

  $bb12:
    assume $i143 == 1;
    $p41 := $bitcast.ref.ref(arg);
    $p42 := $bitcast.ref.ref(arg1);
    $p43 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3034} $i44 := v4l2_m2m_ioctl_dqbuf($p41, $p42, $p43);
    $r := $i44;
    return;

  $bb13:
    assume $i144 == 1;
    $p45 := $bitcast.ref.ref(arg);
    $p46 := $bitcast.ref.ref(arg1);
    $p47 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3035} $i48 := fimc_m2m_cropcap($p45, $p46, $p47);
    $r := $i48;
    return;

  $bb14:
    assume $i145 == 1;
    $p49 := $bitcast.ref.ref(arg);
    $p50 := $bitcast.ref.ref(arg1);
    $p51 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3036} $i52 := fimc_m2m_g_crop($p49, $p50, $p51);
    $r := $i52;
    return;

  $bb15:
    assume $i146 == 1;
    $p53 := $bitcast.ref.ref(arg);
    $p54 := $bitcast.ref.ref(arg1);
    $p55 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3037} $i56 := fimc_m2m_s_crop($p53, $p54, $p55);
    $r := $i56;
    return;

  $bb16:
    assume $i147 == 1;
    $p57 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3038} $i58 := fimc_subdev_enum_mbus_code(arg, arg1, $p57);
    $r := $i58;
    return;

  $bb17:
    assume $i148 == 1;
    call {:si_unique_call 3039} $i59 := fimc_subdev_get_fmt(arg, arg1, arg2);
    $r := $i59;
    return;

  $bb18:
    assume $i149 == 1;
    call {:si_unique_call 3040} $i60 := fimc_subdev_set_fmt(arg, arg1, arg2);
    $r := $i60;
    return;

  $bb19:
    assume $i150 == 1;
    $p61 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3041} $i62 := fimc_subdev_get_selection(arg, arg1, $p61);
    $r := $i62;
    return;

  $bb20:
    assume $i151 == 1;
    $p63 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3042} $i64 := fimc_subdev_set_selection(arg, arg1, $p63);
    $r := $i64;
    return;

  $bb21:
    assume $i152 == 1;
    $p65 := $bitcast.ref.ref(arg);
    $p66 := $bitcast.ref.ref(arg1);
    $p67 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3043} $i68 := fimc_cap_querycap($p65, $p66, $p67);
    $r := $i68;
    return;

  $bb22:
    assume $i153 == 1;
    $p69 := $bitcast.ref.ref(arg);
    $p70 := $bitcast.ref.ref(arg1);
    $p71 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3044} $i72 := fimc_cap_enum_fmt_mplane($p69, $p70, $p71);
    $r := $i72;
    return;

  $bb23:
    assume $i154 == 1;
    $p73 := $bitcast.ref.ref(arg);
    $p74 := $bitcast.ref.ref(arg1);
    $p75 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3045} $i76 := fimc_cap_g_fmt_mplane($p73, $p74, $p75);
    $r := $i76;
    return;

  $bb24:
    assume $i155 == 1;
    $p77 := $bitcast.ref.ref(arg);
    $p78 := $bitcast.ref.ref(arg1);
    $p79 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3046} $i80 := fimc_cap_s_fmt_mplane($p77, $p78, $p79);
    $r := $i80;
    return;

  $bb25:
    assume $i156 == 1;
    $p81 := $bitcast.ref.ref(arg);
    $p82 := $bitcast.ref.ref(arg1);
    $p83 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3047} $i84 := fimc_cap_try_fmt_mplane($p81, $p82, $p83);
    $r := $i84;
    return;

  $bb26:
    assume $i157 == 1;
    $p85 := $bitcast.ref.ref(arg);
    $p86 := $bitcast.ref.ref(arg1);
    $p87 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3048} $i88 := fimc_cap_reqbufs($p85, $p86, $p87);
    $r := $i88;
    return;

  $bb27:
    assume $i158 == 1;
    $p89 := $bitcast.ref.ref(arg);
    $p90 := $bitcast.ref.ref(arg1);
    $p91 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3049} $i92 := vb2_ioctl_querybuf($p89, $p90, $p91);
    $r := $i92;
    return;

  $bb28:
    assume $i159 == 1;
    $p93 := $bitcast.ref.ref(arg);
    $p94 := $bitcast.ref.ref(arg1);
    $p95 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3050} $i96 := vb2_ioctl_qbuf($p93, $p94, $p95);
    $r := $i96;
    return;

  $bb29:
    assume $i160 == 1;
    $p97 := $bitcast.ref.ref(arg);
    $p98 := $bitcast.ref.ref(arg1);
    $p99 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3051} $i100 := vb2_ioctl_expbuf($p97, $p98, $p99);
    $r := $i100;
    return;

  $bb30:
    assume $i161 == 1;
    $p101 := $bitcast.ref.ref(arg);
    $p102 := $bitcast.ref.ref(arg1);
    $p103 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3052} $i104 := vb2_ioctl_dqbuf($p101, $p102, $p103);
    $r := $i104;
    return;

  $bb31:
    assume $i162 == 1;
    $p105 := $bitcast.ref.ref(arg);
    $p106 := $bitcast.ref.ref(arg1);
    $p107 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3053} $i108 := vb2_ioctl_create_bufs($p105, $p106, $p107);
    $r := $i108;
    return;

  $bb32:
    assume $i163 == 1;
    $p109 := $bitcast.ref.ref(arg);
    $p110 := $bitcast.ref.ref(arg1);
    $p111 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3054} $i112 := vb2_ioctl_prepare_buf($p109, $p110, $p111);
    $r := $i112;
    return;

  $bb33:
    assume $i164 == 1;
    $p113 := $bitcast.ref.ref(arg);
    $p114 := $bitcast.ref.ref(arg1);
    $p115 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3055} $i116 := fimc_cap_enum_input($p113, $p114, $p115);
    $r := $i116;
    return;

  $bb34:
    assume $i165 == 1;
    $p117 := $bitcast.ref.ref(arg);
    $p118 := $bitcast.ref.ref(arg1);
    $p119 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3056} $i120 := fimc_cap_g_input($p117, $p118, $p119);
    $r := $i120;
    return;

  $bb35:
    assume $i166 == 1;
    $p121 := $bitcast.ref.ref(arg);
    $p122 := $bitcast.ref.ref(arg1);
    $p123 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3057} $i124 := fimc_cap_g_selection($p121, $p122, $p123);
    $r := $i124;
    return;

  $bb36:
    assume $i167 == 1;
    $p125 := $bitcast.ref.ref(arg);
    $p126 := $bitcast.ref.ref(arg1);
    $p127 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3058} $i128 := fimc_cap_s_selection($p125, $p126, $p127);
    $r := $i128;
    return;

  $bb37:
    assume $i168 == 1;
    $p129 := $bitcast.ref.ref(arg);
    $p130 := $bitcast.ref.ref(arg1);
    $p131 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3059} $i132 := subdev_notifier_bound($p129, $p130, $p131);
    $r := $i132;
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 882746);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 883778);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.28, $CurrAddr, $M.29, $M.32, $M.27, $M.25, $M.36, assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(start_streaming___0, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(start_streaming, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3060} $i2 := start_streaming($p1, arg1);
    $r := $i2;
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3061} $i4 := start_streaming___0($p3, arg1);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    $r := $i4;
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 884810);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $CurrAddr;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(fimc_link_setup, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 3062} $i1 := fimc_link_setup(arg, arg1, arg2, arg3);
    $r := $i1;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i32;

const $u1: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.68, $M.110, $M.66, $M.43, $M.40, $M.41, $M.42, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.67, $M.69, $M.38, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.39, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.111, $M.112, $M.113, $M.114, $M.36, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.0, $M.142, $M.170, $M.19, $M.20, $M.8, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.202, $M.203, $M.204, $M.205, $M.206, $M.207, $M.208, $M.209, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.219, $M.220, $M.221, $M.222, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 3063} __SMACK_static_init();
    call {:si_unique_call 3064} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.37, $M.77, $M.96, $M.64, $M.105, $M.38, $M.43, $M.106, $M.41, $M.78, $M.95, $M.107, $M.98, $M.79, $M.81, $M.65, $M.94, $M.108, $M.97, $M.100, $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.109, $M.110, $M.111, $M.112, $M.88, $M.86, $M.87, $M.73, $M.74, $M.75, $M.76, $M.40, $M.101, $M.90, $M.91, $M.92, $M.93, $M.70, $M.71, $M.102, $M.72, $M.89, $M.103, $M.104, $M.82, $M.83, $M.84, $M.85, $M.42, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.30, $M.31, $M.99, $M.80, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.67, $M.68, $M.69, $M.28, $M.113, $M.114, $M.66, $M.39, $M.36, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.170, $M.19, $M.20, $M.8, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.202, $M.203, $M.204, $M.205, $M.206, $M.207, $M.208, $M.209, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.219, $M.220, $M.221, $M.222, $CurrAddr, $M.25, $M.27, $M.29, $M.32;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation fimc_hw_set_output_addr_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p3: ref, in_$i6: i32, in_$p7: ref, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i24, in_$i38: i24, in_$i39: i24, in_$p40: ref, in_$p41: ref, in_$i42: i8, in_$i43: i64, in_$i44: i64, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1) returns (out_$i6: i32, out_$p7: ref, out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i24, out_$i38: i24, out_$i39: i24, out_$p40: ref, out_$p41: ref, out_$i42: i8, out_$i43: i64, out_$i44: i64, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1)
{

  entry:
    out_$i6, out_$p7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55 := in_$i6, in_$p7, in_$i8, in_$p9, in_$p10, in_$i11, in_$i12, in_$i13, in_$p14, in_$p15, in_$i16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p22, in_$p23, in_$i24, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$p47, in_$i48, in_$p49, in_$i50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1124;

  $bb10:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i54;
    goto $bb10_dummy;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    out_$i55 := $sle.i32(out_$i54, 3);
    goto corral_source_split_1188;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i6, 1);
    call {:si_unique_call 227} {:cexpr "i"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_1187;

  $bb8:
    assume out_$i53 == 1;
    goto corral_source_split_1186;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(in_$i2, $sub.i32(0, 1));
    goto corral_source_split_1184;

  $bb6:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} __dynamic_pr_debug.ref.ref.ref.i32.i32.i32.i32.i32(in_$p3, .str.19, .str.18, 555, out_$i6, out_$i48, out_$i50, out_$i52);
    goto corral_source_split_1182;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.0, out_$p51);
    goto corral_source_split_1181;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1180;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p49);
    goto corral_source_split_1179;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_1178;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    goto corral_source_split_1177;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1176;

  $bb5:
    assume out_$i46 == 1;
    goto corral_source_split_1175;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, 0);
    goto corral_source_split_1173;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} out_$i45 := ldv__builtin_expect(out_$i44, 0);
    call {:si_unique_call 225} {:cexpr "tmp"} boogie_si_record_i64(out_$i45);
    goto corral_source_split_1172;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    out_$i44 := $and.i64(out_$i43, 1);
    goto corral_source_split_1171;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i64(out_$i42);
    goto corral_source_split_1170;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i8($M.17, out_$p41);
    goto corral_source_split_1169;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1168;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $M.17 := $store.i8($M.17, out_$p40, 0);
    goto corral_source_split_1167;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1166;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $M.16 := $store.i24($M.16, out_$p36, out_$i39);
    goto corral_source_split_1165;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    out_$i39 := $or.i24(out_$i38, 555);
    goto corral_source_split_1164;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    out_$i38 := $and.i24(out_$i37, $sub.i24(0, 262144));
    goto corral_source_split_1163;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i24($M.16, out_$p36);
    goto corral_source_split_1162;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p35);
    goto corral_source_split_1161;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1160;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, out_$p34, .str.19);
    goto corral_source_split_1159;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1158;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, out_$p33, .str.14);
    goto corral_source_split_1157;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1156;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, out_$p32, .str.18);
    goto corral_source_split_1155;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1154;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, out_$p31, .str.2);
    goto corral_source_split_1153;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1152;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} writel(out_$i24, out_$p30);
    goto corral_source_split_1151;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(out_$p26, $mul.ref(out_$i29, 1));
    goto corral_source_split_1150;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i28);
    goto corral_source_split_1149;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    out_$i28 := $mul.i32(out_$i27, 4);
    goto corral_source_split_1148;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i6, 14);
    goto corral_source_split_1147;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_1146;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1145;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, out_$p23);
    goto corral_source_split_1144;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p1, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1143;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} writel(out_$i16, out_$p22);
    goto corral_source_split_1142;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p18, $mul.ref(out_$i21, 1));
    goto corral_source_split_1141;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i20);
    goto corral_source_split_1140;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    out_$i20 := $mul.i32(out_$i19, 4);
    goto corral_source_split_1139;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i6, 10);
    goto corral_source_split_1138;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_1137;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1136;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_1135;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_1134;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} writel(out_$i8, out_$p14);
    goto corral_source_split_1133;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p10, $mul.ref(out_$i13, 1));
    goto corral_source_split_1132;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i12);
    goto corral_source_split_1131;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    out_$i12 := $mul.i32(out_$i11, 4);
    goto corral_source_split_1130;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i6, 6);
    goto corral_source_split_1129;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_1128;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5568)), $mul.ref(296, 1));
    goto corral_source_split_1127;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i32($M.0, out_$p7);
    goto corral_source_split_1126;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1125;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i6, out_$p7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55 := fimc_hw_set_output_addr_loop_$bb4(in_$p0, in_$p1, in_$i2, in_$p3, out_$i6, out_$p7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55);
    return;

  exit:
    return;
}



procedure fimc_hw_set_output_addr_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p3: ref, in_$i6: i32, in_$p7: ref, in_$i8: i32, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i24, in_$i38: i24, in_$i39: i24, in_$p40: ref, in_$p41: ref, in_$i42: i8, in_$i43: i64, in_$i44: i64, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i1) returns (out_$i6: i32, out_$p7: ref, out_$i8: i32, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i24, out_$i38: i24, out_$i39: i24, out_$p40: ref, out_$p41: ref, out_$i42: i8, out_$i43: i64, out_$i44: i64, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i1);
  modifies $M.17, $M.16, $M.15, $M.14, $M.13, $M.12;



implementation fimc_prepare_dma_offset_loop_$bb4(in_$p1: ref, in_$p12: ref, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$i32: i16, in_$i33: i32, in_$i34: i1, in_$i19: i32, in_$i20: i32, in_$i35: i32) returns (out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$i32: i16, out_$i33: i32, out_$i34: i1, out_$i19: i32, out_$i20: i32, out_$i35: i32)
{

  entry:
    out_$i21, out_$p22, out_$p23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i19, out_$i20, out_$i35 := in_$i21, in_$p22, in_$p23, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i19, in_$i20, in_$i35;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1795;

  $bb6:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i19, out_$i20 := out_$i28, out_$i29;
    goto $bb6_dummy;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i28;
    assume true;
    goto $bb6;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    out_$i34 := $ugt.i32(out_$i33, out_$i29);
    goto corral_source_split_1809;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i16.i32(out_$i32);
    goto corral_source_split_1808;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i16($M.0, out_$p31);
    goto corral_source_split_1807;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p30, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1806;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, in_$p12);
    goto corral_source_split_1805;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i20, 1);
    call {:si_unique_call 346} {:cexpr "i"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_1804;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i27, out_$i19);
    call {:si_unique_call 345} {:cexpr "depth"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_1803;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i8.i32(out_$i26);
    goto corral_source_split_1802;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.0, out_$p25);
    goto corral_source_split_1801;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p23, $mul.ref(0, 40)), $mul.ref(29, 1)), $mul.ref(out_$i21, 1));
    goto corral_source_split_1800;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_1799;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p1, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_1798;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i32.i64(out_$i20);
    goto corral_source_split_1797;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i21, out_$p22, out_$p23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i19, out_$i20, out_$i35 := fimc_prepare_dma_offset_loop_$bb4(in_$p1, in_$p12, out_$i21, out_$p22, out_$p23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i19, out_$i20, out_$i35);
    return;

  exit:
    return;
}



procedure fimc_prepare_dma_offset_loop_$bb4(in_$p1: ref, in_$p12: ref, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$i32: i16, in_$i33: i32, in_$i34: i1, in_$i19: i32, in_$i20: i32, in_$i35: i32) returns (out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$i32: i16, out_$i33: i32, out_$i34: i1, out_$i19: i32, out_$i20: i32, out_$i35: i32);



implementation fimc_capture_resume_loop_$bb17(in_$p0: ref, in_$p1: ref, in_$p38: ref, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i41: i32) returns (out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i41: i32)
{

  entry:
    out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i41 := in_$p42, in_$i43, in_$i44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i41;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2661;

  $bb23:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := out_$i47;
    goto $bb23_dummy;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    out_$i49 := $ult.i32(out_$i47, out_$i48);
    goto corral_source_split_2674;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, in_$p38);
    goto corral_source_split_2673;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i41, 1);
    call {:si_unique_call 506} {:cexpr "i"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_2672;

  SeqInstr_99:
    goto corral_source_split_2671;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} buffer_queue(out_$p46);
    goto SeqInstr_98;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p45, $mul.ref(0, 960)), $mul.ref(0, 1));
    goto corral_source_split_2670;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} out_$p45 := fimc_pending_queue_pop(in_$p1);
    goto corral_source_split_2669;

  $bb20:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_2665;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} out_$i43 := list_empty(out_$p42);
    call {:si_unique_call 503} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_2664;

  $bb18:
    out_$p42 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2376, 1));
    goto corral_source_split_2663;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i41 := fimc_capture_resume_loop_$bb17(in_$p0, in_$p1, in_$p38, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i41);
    return;

  exit:
    return;
}



procedure fimc_capture_resume_loop_$bb17(in_$p0: ref, in_$p1: ref, in_$p38: ref, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i41: i32) returns (out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i41: i32);
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $M.28, $CurrAddr, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.29, $M.32, $M.27, $M.25, $M.36, assertsPassed;



implementation fimc_m2m_suspend_loop_$bb16(in_$p0: ref, in_$p1: ref, in_$i27: i64, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i8, in_$i34: i1, in_$i35: i1, in_$i36: i64, in_$i37: i1, in_$i39: i1, in_$i38: i1, in_$i40: i32, in_$i41: i1, in_$i42: i64, in_$i43: i64) returns (out_$i27: i64, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i8, out_$i34: i1, out_$i35: i1, out_$i36: i64, out_$i37: i1, out_$i39: i1, out_$i38: i1, out_$i40: i32, out_$i41: i1, out_$i42: i64, out_$i43: i64)
{

  entry:
    out_$i27, out_$p28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i39, out_$i38, out_$i40, out_$i41, out_$i42, out_$i43 := in_$i27, in_$p28, in_$i29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i39, in_$i38, in_$i40, in_$i41, in_$i42, in_$i43;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_3753;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i43;
    goto corral_source_split_3782_dummy;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} out_$i43 := schedule_timeout(out_$i36);
    call {:si_unique_call 738} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i43);
    goto corral_source_split_3782;

  $bb27:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i36;
    assume true;
    goto $bb27;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_3772;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i1.i32(out_$i38);
    goto corral_source_split_3771;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3770;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i39;
    goto $bb24;

  $bb23:
    assume {:verifier.code 0} true;
    assume out_$i37 == 1;
    goto $bb24;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    out_$i38 := 1;
    assume true;
    goto $bb23, $bb25;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i8.i1(out_$i33);
    goto corral_source_split_3768;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3767;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i27;
    goto $bb22;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    out_$i36 := 1;
    goto $bb22;

  $bb20:
    assume out_$i35 == 1;
    goto corral_source_split_3765;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i64(out_$i27, 0);
    goto corral_source_split_3763;

  $bb17:
    assume out_$i34 == 1;
    goto corral_source_split_3762;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    out_$i34 := $trunc.i8.i1(out_$i33);
    goto corral_source_split_3760;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i1.i8(out_$i32);
    call {:si_unique_call 735} {:cexpr "__cond"} boogie_si_record_i8(out_$i33);
    goto corral_source_split_3759;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_3758;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} out_$i31 := constant_test_bit(4, out_$p30);
    call {:si_unique_call 734} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_3757;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_3756;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} out_$i29 := prepare_to_wait_event(out_$p28, in_$p1, 2);
    call {:si_unique_call 732} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i29);
    goto corral_source_split_3755;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5568)), $mul.ref(304, 1));
    goto corral_source_split_3754;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb19;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb19;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i64(out_$i36, 0);
    goto corral_source_split_3775;

  $bb25:
    assume !(out_$i37 == 1);
    goto corral_source_split_3774;

  corral_source_split_3782_dummy:
    call {:si_unique_call 1} out_$i27, out_$p28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i39, out_$i38, out_$i40, out_$i41, out_$i42, out_$i43 := fimc_m2m_suspend_loop_$bb16(in_$p0, in_$p1, out_$i27, out_$p28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i39, out_$i38, out_$i40, out_$i41, out_$i42, out_$i43);
    return;

  exit:
    return;
}



procedure fimc_m2m_suspend_loop_$bb16(in_$p0: ref, in_$p1: ref, in_$i27: i64, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i8, in_$i34: i1, in_$i35: i1, in_$i36: i64, in_$i37: i1, in_$i39: i1, in_$i38: i1, in_$i40: i32, in_$i41: i1, in_$i42: i64, in_$i43: i64) returns (out_$i27: i64, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i8, out_$i34: i1, out_$i35: i1, out_$i36: i64, out_$i37: i1, out_$i39: i1, out_$i38: i1, out_$i40: i32, out_$i41: i1, out_$i42: i64, out_$i43: i64);



implementation fimc_stop_capture_loop_$bb19(in_$p0: ref, in_$p2: ref, in_$i29: i64, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i8, in_$i36: i1, in_$i37: i1, in_$i38: i64, in_$i39: i1, in_$i41: i1, in_$i40: i1, in_$i42: i32, in_$i43: i1, in_$i44: i64) returns (out_$i29: i64, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i8, out_$i36: i1, out_$i37: i1, out_$i38: i64, out_$i39: i1, out_$i41: i1, out_$i40: i1, out_$i42: i32, out_$i43: i1, out_$i44: i64)
{

  entry:
    out_$i29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i41, out_$i40, out_$i42, out_$i43, out_$i44 := in_$i29, in_$p30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i41, in_$i40, in_$i42, in_$i43, in_$i44;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3851;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i44;
    goto corral_source_split_3880_dummy;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} out_$i44 := schedule_timeout(out_$i38);
    call {:si_unique_call 771} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i44);
    goto corral_source_split_3880;

  $bb30:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i32(out_$i42, 0);
    goto corral_source_split_3870;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i1.i32(out_$i40);
    goto corral_source_split_3869;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_3868;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i41;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    assume out_$i39 == 1;
    goto $bb27;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    out_$i40 := 1;
    assume true;
    goto $bb26, $bb28;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i8.i1(out_$i35);
    goto corral_source_split_3866;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_3865;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i29;
    goto $bb25;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    out_$i38 := 1;
    goto $bb25;

  $bb23:
    assume out_$i37 == 1;
    goto corral_source_split_3863;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i64(out_$i29, 0);
    goto corral_source_split_3861;

  $bb20:
    assume out_$i36 == 1;
    goto corral_source_split_3860;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i8.i1(out_$i35);
    goto corral_source_split_3858;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i1.i8(out_$i34);
    call {:si_unique_call 768} {:cexpr "__cond"} boogie_si_record_i8(out_$i35);
    goto corral_source_split_3857;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 0);
    goto corral_source_split_3856;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} out_$i33 := constant_test_bit(10, out_$p32);
    call {:si_unique_call 767} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_3855;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5568)), $mul.ref(5552, 1));
    goto corral_source_split_3854;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} out_$i31 := prepare_to_wait_event(out_$p30, in_$p2, 2);
    call {:si_unique_call 765} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i31);
    goto corral_source_split_3853;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 5568)), $mul.ref(304, 1));
    goto corral_source_split_3852;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb22;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb22;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i64(out_$i38, 0);
    goto corral_source_split_3873;

  $bb28:
    assume !(out_$i39 == 1);
    goto corral_source_split_3872;

  corral_source_split_3880_dummy:
    call {:si_unique_call 1} out_$i29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i41, out_$i40, out_$i42, out_$i43, out_$i44 := fimc_stop_capture_loop_$bb19(in_$p0, in_$p2, out_$i29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i41, out_$i40, out_$i42, out_$i43, out_$i44);
    return;

  exit:
    return;
}



procedure fimc_stop_capture_loop_$bb19(in_$p0: ref, in_$p2: ref, in_$i29: i64, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$i35: i8, in_$i36: i1, in_$i37: i1, in_$i38: i64, in_$i39: i1, in_$i41: i1, in_$i40: i1, in_$i42: i32, in_$i43: i1, in_$i44: i64) returns (out_$i29: i64, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$i35: i8, out_$i36: i1, out_$i37: i1, out_$i38: i64, out_$i39: i1, out_$i41: i1, out_$i40: i1, out_$i42: i32, out_$i43: i1, out_$i44: i64);



implementation fimc_capture_state_cleanup_loop_$bb18(in_$i2: i8, in_$p3: ref, in_$p31: ref, in_$p34: ref, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$i38: i1) returns (out_$p34: ref, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$i38: i1)
{

  entry:
    out_$p34, out_$i35, out_$p36, out_$i37, out_$i38 := in_$p34, in_$i35, in_$p36, in_$i37, in_$i38;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume out_$i38 == 1;
    goto $bb23_dummy;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 0);
    goto corral_source_split_3970;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} out_$i37 := list_empty(in_$p31);
    call {:si_unique_call 794} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_3969;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} vb2_buffer_done(out_$p36, 6);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} fimc_pending_queue_add(in_$p3, out_$p34);
    goto corral_source_split_3964;

  $bb20:
    assume out_$i35 == 1;
    goto corral_source_split_3963;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    out_$i35 := $trunc.i8.i1(in_$i2);
    goto corral_source_split_3961;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} out_$p34 := fimc_active_queue_pop(in_$p3);
    goto corral_source_split_3960;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p34, $mul.ref(0, 960)), $mul.ref(0, 1));
    goto corral_source_split_3967;

  $bb21:
    assume !(out_$i35 == 1);
    goto corral_source_split_3966;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p34, out_$i35, out_$p36, out_$i37, out_$i38 := fimc_capture_state_cleanup_loop_$bb18(in_$i2, in_$p3, in_$p31, out_$p34, out_$i35, out_$p36, out_$i37, out_$i38);
    return;

  exit:
    return;
}



procedure fimc_capture_state_cleanup_loop_$bb18(in_$i2: i8, in_$p3: ref, in_$p31: ref, in_$p34: ref, in_$i35: i1, in_$p36: ref, in_$i37: i32, in_$i38: i1) returns (out_$p34: ref, out_$i35: i1, out_$p36: ref, out_$i37: i32, out_$i38: i1);
  modifies $M.0;



implementation fimc_capture_state_cleanup_loop_$bb7(in_$p0: ref, in_$p3: ref, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1) returns (out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1)
{

  entry:
    out_$p26, out_$p27, out_$p28, out_$i29, out_$i30 := in_$p26, in_$p27, in_$p28, in_$i29, in_$i30;
    goto $bb7, exit;

  $bb7:
    out_$p28 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(2376, 1));
    goto corral_source_split_3940;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(in_$i25 == 1);
    goto $bb10_dummy;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} vb2_buffer_done(out_$p27, 6);
    goto corral_source_split_3946;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p26, $mul.ref(0, 960)), $mul.ref(0, 1));
    goto corral_source_split_3945;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} out_$p26 := fimc_pending_queue_pop(in_$p3);
    goto corral_source_split_3944;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb11:
    assume out_$i30 == 1;
    goto corral_source_split_3950;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    goto corral_source_split_3942;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} out_$i29 := list_empty(out_$p28);
    call {:si_unique_call 785} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_3941;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p26, out_$p27, out_$p28, out_$i29, out_$i30 := fimc_capture_state_cleanup_loop_$bb7(in_$p0, in_$p3, in_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30);
    return;

  exit:
    return;
}



procedure fimc_capture_state_cleanup_loop_$bb7(in_$p0: ref, in_$p3: ref, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1) returns (out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1);



implementation __set_frame_format_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$i8: i64, in_$p11: ref, in_$i12: i32, in_$i13: i64, in_$p15: ref, in_$i16: i64, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$p23: ref, in_$i24: i32, in_$i25: i16, in_$i26: i32, in_$i27: i1, in_$i7: i32) returns (out_$i8: i64, out_$p11: ref, out_$i12: i32, out_$i13: i64, out_$p15: ref, out_$i16: i64, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$p23: ref, out_$i24: i32, out_$i25: i16, out_$i26: i32, out_$i27: i1, out_$i7: i32)
{

  entry:
    out_$i8, out_$p11, out_$i12, out_$i13, out_$p15, out_$i16, out_$p19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i7 := in_$i8, in_$p11, in_$i12, in_$i13, in_$p15, in_$i16, in_$p19, in_$i20, in_$i21, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5242;

  $bb6:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i24;
    goto $bb6_dummy;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    out_$i27 := $sgt.i32(out_$i26, out_$i24);
    goto corral_source_split_5259;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i16.i32(out_$i25);
    goto corral_source_split_5258;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i16($M.0, in_$p3);
    goto corral_source_split_5257;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i7, 1);
    call {:si_unique_call 894} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_5256;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p23, out_$i20);
    goto corral_source_split_5255;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(32, 1)), $mul.ref(out_$i21, 4));
    goto corral_source_split_5254;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5253;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_5252;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(out_$i16, 20)), $mul.ref(0, 1));
    goto corral_source_split_5251;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5250;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p15, out_$i12);
    goto corral_source_split_5249;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(64, 1)), $mul.ref(out_$i13, 4));
    goto corral_source_split_5248;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5247;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_5246;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(out_$i8, 20)), $mul.ref(4, 1));
    goto corral_source_split_5245;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5244;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i8, out_$p11, out_$i12, out_$i13, out_$p15, out_$i16, out_$p19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i7 := __set_frame_format_loop_$bb4(in_$p0, in_$p2, in_$p3, out_$i8, out_$p11, out_$i12, out_$i13, out_$p15, out_$i16, out_$p19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i7);
    return;

  exit:
    return;
}



procedure __set_frame_format_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$i8: i64, in_$p11: ref, in_$i12: i32, in_$i13: i64, in_$p15: ref, in_$i16: i64, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$p23: ref, in_$i24: i32, in_$i25: i16, in_$i26: i32, in_$i27: i1, in_$i7: i32) returns (out_$i8: i64, out_$p11: ref, out_$i12: i32, out_$i13: i64, out_$p15: ref, out_$i16: i64, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$p23: ref, out_$i24: i32, out_$i25: i16, out_$i26: i32, out_$i27: i1, out_$i7: i32);
  modifies $M.0;



implementation fimc_m2m_try_crop_loop_$bb23(in_$p23: ref, in_$p64: ref, in_$i73: i64, in_$p74: ref, in_$p75: ref, in_$p77: ref, in_$i78: i8, in_$i79: i32, in_$i80: i32, in_$i81: i32, in_$p82: ref, in_$p83: ref, in_$i84: i16, in_$i85: i32, in_$i86: i1, in_$i71: i32, in_$i72: i32, in_$i87: i32) returns (out_$i73: i64, out_$p74: ref, out_$p75: ref, out_$p77: ref, out_$i78: i8, out_$i79: i32, out_$i80: i32, out_$i81: i32, out_$p82: ref, out_$p83: ref, out_$i84: i16, out_$i85: i32, out_$i86: i1, out_$i71: i32, out_$i72: i32, out_$i87: i32)
{

  entry:
    out_$i73, out_$p74, out_$p75, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i71, out_$i72, out_$i87 := in_$i73, in_$p74, in_$p75, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$p82, in_$p83, in_$i84, in_$i85, in_$i86, in_$i71, in_$i72, in_$i87;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5716;

  $bb25:
    assume out_$i86 == 1;
    assume {:verifier.code 0} true;
    out_$i71, out_$i72 := out_$i81, out_$i80;
    goto $bb25_dummy;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    out_$i87 := out_$i80;
    assume true;
    goto $bb25;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    out_$i86 := $sgt.i32(out_$i85, out_$i81);
    goto corral_source_split_5730;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i16.i32(out_$i84);
    goto corral_source_split_5729;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i16($M.0, out_$p83);
    goto corral_source_split_5728;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p82, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5727;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, in_$p64);
    goto corral_source_split_5726;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i71, 1);
    call {:si_unique_call 989} {:cexpr "i"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_5725;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    out_$i80 := $add.i32(out_$i79, out_$i72);
    call {:si_unique_call 988} {:cexpr "depth"} boogie_si_record_i32(out_$i80);
    goto corral_source_split_5724;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    out_$i79 := $zext.i8.i32(out_$i78);
    goto corral_source_split_5723;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i8($M.0, out_$p77);
    goto corral_source_split_5722;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref($add.ref(out_$p75, $mul.ref(0, 40)), $mul.ref(29, 1)), $mul.ref(out_$i73, 1));
    goto corral_source_split_5721;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.0, out_$p74);
    goto corral_source_split_5720;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p23, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5719;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i71);
    goto corral_source_split_5718;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i73, out_$p74, out_$p75, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i71, out_$i72, out_$i87 := fimc_m2m_try_crop_loop_$bb23(in_$p23, in_$p64, out_$i73, out_$p74, out_$p75, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$i86, out_$i71, out_$i72, out_$i87);
    return;

  exit:
    return;
}



procedure fimc_m2m_try_crop_loop_$bb23(in_$p23: ref, in_$p64: ref, in_$i73: i64, in_$p74: ref, in_$p75: ref, in_$p77: ref, in_$i78: i8, in_$i79: i32, in_$i80: i32, in_$i81: i32, in_$p82: ref, in_$p83: ref, in_$i84: i16, in_$i85: i32, in_$i86: i1, in_$i71: i32, in_$i72: i32, in_$i87: i32) returns (out_$i73: i64, out_$p74: ref, out_$p75: ref, out_$p77: ref, out_$i78: i8, out_$i79: i32, out_$i80: i32, out_$i81: i32, out_$p82: ref, out_$p83: ref, out_$i84: i16, out_$i85: i32, out_$i86: i1, out_$i71: i32, out_$i72: i32, out_$i87: i32);



implementation fimc_adjust_mplane_format_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p15: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p25: ref, in_$i26: i32, in_$p27: ref, in_$i28: i16, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i32, in_$i37: i32, in_$p38: ref, in_$i39: i16, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i32, in_$i44: i64, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$i49: i32, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i54: i32, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i64: i1, in_$p65: ref, in_$i66: i16, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i63: i32, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$p74: ref, in_$i75: i32, in_$i76: i32, in_$i77: i64, in_$p79: ref, in_$i80: i8, in_$i81: i32, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$i85: i32, in_$i86: i1, in_$i87: i32, in_$p88: ref, in_$i89: i32, in_$i90: i8, in_$i91: i32, in_$i92: i1, in_$i19: i32, in_$i20: i32) returns (out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p25: ref, out_$i26: i32, out_$p27: ref, out_$i28: i16, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i32, out_$i37: i32, out_$p38: ref, out_$i39: i16, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i32, out_$i44: i64, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$i49: i32, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i54: i32, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i64: i1, out_$p65: ref, out_$i66: i16, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i63: i32, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$p74: ref, out_$i75: i32, out_$i76: i32, out_$i77: i64, out_$p79: ref, out_$i80: i8, out_$i81: i32, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$i85: i32, out_$i86: i1, out_$i87: i32, out_$p88: ref, out_$i89: i32, out_$i90: i8, out_$i91: i32, out_$i92: i1, out_$i19: i32, out_$i20: i32)
{

  entry:
    out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i63, out_$p71, out_$p72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i19, out_$i20 := in_$p21, in_$p22, in_$i23, in_$p25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p46, in_$i47, in_$i48, in_$i49, in_$p50, in_$i51, in_$i52, in_$p53, in_$i54, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i63, in_$p71, in_$p72, in_$i73, in_$p74, in_$i75, in_$i76, in_$i77, in_$p79, in_$i80, in_$i81, in_$i82, in_$i83, in_$p84, in_$i85, in_$i86, in_$i87, in_$p88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i19, in_$i20;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6077;

  $bb36:
    assume out_$i92 == 1;
    assume {:verifier.code 0} true;
    out_$i19, out_$i20 := out_$i89, out_$i63;
    goto $bb36_dummy;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    out_$i92 := $sgt.i32(out_$i91, out_$i89);
    goto corral_source_split_6174;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    out_$i91 := $zext.i8.i32(out_$i90);
    goto corral_source_split_6173;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i8($M.0, in_$p15);
    goto corral_source_split_6172;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i19, 1);
    call {:si_unique_call 1054} {:cexpr "i"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_6171;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p88, out_$i87);
    goto corral_source_split_6170;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p22, $mul.ref(out_$i23, 20)), $mul.ref(0, 1));
    goto corral_source_split_6169;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_6168;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    out_$i87 := out_$i85;
    goto $bb35;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    out_$i87 := out_$i83;
    goto $bb35;

  $bb33:
    assume out_$i86 == 1;
    goto corral_source_split_6164;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    out_$i86 := $ugt.i32(out_$i83, out_$i85);
    goto corral_source_split_6153;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i32($M.0, out_$p84);
    call {:si_unique_call 1052} {:cexpr "_max2"} boogie_si_record_i32(out_$i85);
    goto corral_source_split_6152;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p22, $mul.ref(out_$i23, 20)), $mul.ref(0, 1));
    goto corral_source_split_6151;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    out_$i83 := $udiv.i32(out_$i82, 8);
    call {:si_unique_call 1051} {:cexpr "_max1"} boogie_si_record_i32(out_$i83);
    goto corral_source_split_6150;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    out_$i82 := $mul.i32(out_$i76, out_$i81);
    goto corral_source_split_6149;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i8.i32(out_$i80);
    goto corral_source_split_6148;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i8($M.0, out_$p79);
    goto corral_source_split_6147;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 40)), $mul.ref(29, 1)), $mul.ref(out_$i77, 1));
    goto corral_source_split_6146;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    out_$i77 := $sext.i32.i64(out_$i19);
    goto corral_source_split_6145;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    out_$i76 := $mul.i32(out_$i73, out_$i75);
    goto corral_source_split_6144;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.0, out_$p74);
    goto corral_source_split_6143;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p3, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_6142;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.0, out_$p72);
    goto corral_source_split_6141;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p3, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_6140;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p71, out_$i63);
    goto corral_source_split_6139;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p22, $mul.ref(out_$i23, 20)), $mul.ref(4, 1));
    goto corral_source_split_6138;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_6137;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i63 := out_$i70;
    goto $bb26;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i61;
    goto $bb26;

  $bb24:
    assume out_$i62 == 1;
    goto corral_source_split_6132;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i19, 0);
    goto corral_source_split_6130;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_6129;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i37;
    goto $bb23;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i60;
    goto $bb23;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    out_$i60 := $udiv.i32(out_$i59, 8);
    call {:si_unique_call 1050} {:cexpr "bpl"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_6116;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    out_$i59 := $mul.i32(out_$i54, out_$i58);
    goto corral_source_split_6115;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i8.i32(out_$i57);
    goto corral_source_split_6114;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i8($M.0, out_$p56);
    goto corral_source_split_6113;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 40)), $mul.ref(29, 1)), $mul.ref(0, 1));
    goto corral_source_split_6112;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.0, out_$p53);
    goto corral_source_split_6111;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p3, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_6110;

  $bb21:
    assume {:verifier.code 0} true;
    assume out_$i52 == 1;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    assume out_$i42 == 1;
    goto $bb19;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i37, 0);
    goto corral_source_split_6108;

  $bb15:
    assume out_$i41 == 1;
    goto corral_source_split_6107;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 1);
    goto corral_source_split_6105;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i16.i32(out_$i39);
    goto corral_source_split_6104;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i16($M.0, out_$p38);
    goto corral_source_split_6103;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p0, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_6102;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6101;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i26;
    goto $bb14;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i36;
    goto $bb14;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, out_$p35);
    call {:si_unique_call 1049} {:cexpr "bpl"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_6094;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p3, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_6093;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i34 == 1;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i31 == 1;
    goto $bb10;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i26, 0);
    goto corral_source_split_6091;

  $bb6:
    assume out_$i30 == 1;
    goto corral_source_split_6090;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    out_$i30 := $ugt.i32(out_$i29, 1);
    goto corral_source_split_6088;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i16.i32(out_$i28);
    goto corral_source_split_6087;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i16($M.0, out_$p27);
    goto corral_source_split_6086;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 40)), $mul.ref(26, 1));
    goto corral_source_split_6085;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    call {:si_unique_call 1048} {:cexpr "bpl"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_6084;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p22, $mul.ref(out_$i23, 20)), $mul.ref(4, 1));
    goto corral_source_split_6083;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    goto corral_source_split_6082;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i19);
    goto corral_source_split_6081;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_6080;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p3, $mul.ref(0, 192)), $mul.ref(20, 1));
    goto corral_source_split_6079;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    out_$i34 := $ugt.i32(out_$i33, out_$i26);
    goto corral_source_split_6099;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_6098;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p3, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_6097;

  $bb11:
    assume !(out_$i31 == 1);
    goto corral_source_split_6096;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb8;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb8;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    out_$i52 := $ult.i32(out_$i49, out_$i51);
    goto corral_source_split_6127;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, out_$p50);
    goto corral_source_split_6126;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p3, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_6125;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    out_$i49 := $udiv.i32(out_$i43, out_$i48);
    goto corral_source_split_6124;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i8.i32(out_$i47);
    goto corral_source_split_6123;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i8($M.0, out_$p46);
    goto corral_source_split_6122;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 40)), $mul.ref(29, 1)), $mul.ref(out_$i44, 1));
    goto corral_source_split_6121;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i19);
    goto corral_source_split_6120;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    out_$i43 := $mul.i32(out_$i37, 8);
    goto corral_source_split_6119;

  $bb20:
    assume !(out_$i42 == 1);
    goto corral_source_split_6118;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb17;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i52 == 1);
    goto $bb17;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i70 := out_$i20;
    goto $bb32;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    out_$i70 := out_$i69;
    goto $bb32;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    out_$i69 := $udiv.i32(out_$i20, 2);
    call {:si_unique_call 1053} {:cexpr "bytesperline"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_6162;

  $bb30:
    assume out_$i68 == 1;
    goto corral_source_split_6161;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i67, 3);
    goto corral_source_split_6159;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i16.i32(out_$i66);
    goto corral_source_split_6158;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i16($M.0, out_$p65);
    goto corral_source_split_6157;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6156;

  $bb27:
    assume out_$i64 == 1;
    goto corral_source_split_6155;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i19, 1);
    goto corral_source_split_6135;

  $bb25:
    assume !(out_$i62 == 1);
    goto corral_source_split_6134;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb29;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i68 == 1);
    goto $bb29;

  $bb34:
    assume !(out_$i86 == 1);
    goto corral_source_split_6166;

  $bb36_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i63, out_$p71, out_$p72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i19, out_$i20 := fimc_adjust_mplane_format_loop_$bb4(in_$p0, in_$p3, in_$p15, out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i63, out_$p71, out_$p72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i19, out_$i20);
    return;

  exit:
    return;
}



procedure fimc_adjust_mplane_format_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p15: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p25: ref, in_$i26: i32, in_$p27: ref, in_$i28: i16, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i36: i32, in_$i37: i32, in_$p38: ref, in_$i39: i16, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i32, in_$i44: i64, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$i49: i32, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i54: i32, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i64: i1, in_$p65: ref, in_$i66: i16, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i63: i32, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$p74: ref, in_$i75: i32, in_$i76: i32, in_$i77: i64, in_$p79: ref, in_$i80: i8, in_$i81: i32, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$i85: i32, in_$i86: i1, in_$i87: i32, in_$p88: ref, in_$i89: i32, in_$i90: i8, in_$i91: i32, in_$i92: i1, in_$i19: i32, in_$i20: i32) returns (out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p25: ref, out_$i26: i32, out_$p27: ref, out_$i28: i16, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i36: i32, out_$i37: i32, out_$p38: ref, out_$i39: i16, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i32, out_$i44: i64, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$i49: i32, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i54: i32, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i64: i1, out_$p65: ref, out_$i66: i16, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i63: i32, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$p74: ref, out_$i75: i32, out_$i76: i32, out_$i77: i64, out_$p79: ref, out_$i80: i8, out_$i81: i32, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$i85: i32, out_$i86: i1, out_$i87: i32, out_$p88: ref, out_$i89: i32, out_$i90: i8, out_$i91: i32, out_$i92: i1, out_$i19: i32, out_$i20: i32);
  modifies $M.0;



implementation __fimc_get_format_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p23: ref, in_$i28: i64, in_$p30: ref, in_$i31: i32, in_$i32: i64, in_$p35: ref, in_$i36: i64, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$p43: ref, in_$i44: i32, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$i27: i32) returns (out_$i28: i64, out_$p30: ref, out_$i31: i32, out_$i32: i64, out_$p35: ref, out_$i36: i64, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$p43: ref, out_$i44: i32, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$i27: i32)
{

  entry:
    out_$i28, out_$p30, out_$i31, out_$i32, out_$p35, out_$i36, out_$p38, out_$i39, out_$i40, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i27 := in_$i28, in_$p30, in_$i31, in_$i32, in_$p35, in_$i36, in_$p38, in_$i39, in_$i40, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i27;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6275;

  $bb6:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := out_$i44;
    goto $bb6_dummy;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    out_$i47 := $sgt.i32(out_$i46, out_$i44);
    goto corral_source_split_6292;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i32(out_$i45);
    goto corral_source_split_6291;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i8($M.0, in_$p23);
    goto corral_source_split_6290;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i27, 1);
    call {:si_unique_call 1063} {:cexpr "i"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_6289;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p43, out_$i39);
    goto corral_source_split_6288;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(out_$i40, 20)), $mul.ref(0, 1));
    goto corral_source_split_6287;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i27);
    goto corral_source_split_6286;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_6285;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(32, 1)), $mul.ref(out_$i36, 4));
    goto corral_source_split_6284;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i32.i64(out_$i27);
    goto corral_source_split_6283;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p35, out_$i31);
    goto corral_source_split_6282;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(out_$i32, 20)), $mul.ref(4, 1));
    goto corral_source_split_6281;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i27);
    goto corral_source_split_6280;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, out_$p30);
    goto corral_source_split_6279;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 152)), $mul.ref(64, 1)), $mul.ref(out_$i28, 4));
    goto corral_source_split_6278;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i27);
    goto corral_source_split_6277;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i28, out_$p30, out_$i31, out_$i32, out_$p35, out_$i36, out_$p38, out_$i39, out_$i40, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i27 := __fimc_get_format_loop_$bb4(in_$p0, in_$p3, in_$p23, out_$i28, out_$p30, out_$i31, out_$i32, out_$p35, out_$i36, out_$p38, out_$i39, out_$i40, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i27);
    return;

  exit:
    return;
}



procedure __fimc_get_format_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p23: ref, in_$i28: i64, in_$p30: ref, in_$i31: i32, in_$i32: i64, in_$p35: ref, in_$i36: i64, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$p43: ref, in_$i44: i32, in_$i45: i8, in_$i46: i32, in_$i47: i1, in_$i27: i32) returns (out_$i28: i64, out_$p30: ref, out_$i31: i32, out_$i32: i64, out_$p35: ref, out_$i36: i64, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$p43: ref, out_$i44: i32, out_$i45: i8, out_$i46: i32, out_$i47: i1, out_$i27: i32);
  modifies $M.0;



implementation fimc_m2m_shutdown_loop_$bb19(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i30: i8, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$i36: i8, in_$i37: i1, in_$i38: i1, in_$i39: i64, in_$i40: i1, in_$i42: i1, in_$i41: i1, in_$i43: i32, in_$i44: i1, in_$i45: i64, in_$i46: i64) returns (out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i30: i8, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$i36: i8, out_$i37: i1, out_$i38: i1, out_$i39: i64, out_$i40: i1, out_$i42: i1, out_$i41: i1, out_$i43: i32, out_$i44: i1, out_$i45: i64, out_$i46: i64)
{

  entry:
    out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i42, out_$i41, out_$i43, out_$i44, out_$i45, out_$i46 := in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i42, in_$i41, in_$i43, in_$i44, in_$i45, in_$i46;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_6486;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    out_$i26 := out_$i46;
    goto corral_source_split_6522_dummy;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} out_$i46 := schedule_timeout(out_$i39);
    call {:si_unique_call 1119} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i46);
    goto corral_source_split_6522;

  $bb33:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i39;
    assume true;
    goto $bb33;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_6512;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i1.i32(out_$i41);
    goto corral_source_split_6511;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_6510;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i42;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    assume out_$i40 == 1;
    goto $bb30;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    out_$i41 := 1;
    assume true;
    goto $bb29, $bb31;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    out_$i40 := $trunc.i8.i1(out_$i36);
    goto corral_source_split_6508;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_6507;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i26;
    goto $bb28;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    out_$i39 := 1;
    goto $bb28;

  $bb26:
    assume out_$i38 == 1;
    goto corral_source_split_6505;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i64(out_$i26, 0);
    goto corral_source_split_6503;

  $bb23:
    assume out_$i37 == 1;
    goto corral_source_split_6502;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i8.i1(out_$i36);
    goto corral_source_split_6500;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i1.i8(out_$i35);
    call {:si_unique_call 1116} {:cexpr "__cond"} boogie_si_record_i8(out_$i36);
    goto corral_source_split_6499;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_6498;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_6497;

  $bb21:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    out_$i34 := 1;
    goto $bb22;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    out_$i34 := 0;
    goto $bb22;

  $bb20:
    assume out_$i33 == 1;
    goto corral_source_split_6495;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_6493;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i1.i32(out_$i31);
    goto corral_source_split_6492;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    out_$i31 := $trunc.i8.i1(out_$i30);
    goto corral_source_split_6491;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i1.i8(out_$i29);
    call {:si_unique_call 1115} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i30);
    goto corral_source_split_6490;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} out_$i29 := fimc_ctx_state_is_set(262144, in_$p0);
    goto corral_source_split_6489;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} out_$i28 := prepare_to_wait_event(out_$p27, in_$p1, 2);
    call {:si_unique_call 1113} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_6488;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p3, $mul.ref(0, 5568)), $mul.ref(304, 1));
    goto corral_source_split_6487;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb25;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb25;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i64(out_$i39, 0);
    goto corral_source_split_6515;

  $bb31:
    assume !(out_$i40 == 1);
    goto corral_source_split_6514;

  corral_source_split_6522_dummy:
    call {:si_unique_call 1} out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i42, out_$i41, out_$i43, out_$i44, out_$i45, out_$i46 := fimc_m2m_shutdown_loop_$bb19(in_$p0, in_$p1, in_$p3, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i42, out_$i41, out_$i43, out_$i44, out_$i45, out_$i46);
    return;

  exit:
    return;
}



procedure fimc_m2m_shutdown_loop_$bb19(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i30: i8, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$i36: i8, in_$i37: i1, in_$i38: i1, in_$i39: i64, in_$i40: i1, in_$i42: i1, in_$i41: i1, in_$i43: i32, in_$i44: i1, in_$i45: i64, in_$i46: i64) returns (out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i30: i8, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$i36: i8, out_$i37: i1, out_$i38: i1, out_$i39: i64, out_$i40: i1, out_$i42: i1, out_$i41: i1, out_$i43: i32, out_$i44: i1, out_$i45: i64, out_$i46: i64);



implementation fimc_queue_setup_loop_$bb11(in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p10: ref, in_$p28: ref, in_$i35: i64, in_$p37: ref, in_$i38: i32, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i46: i64, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$i51: i16, in_$i52: i32, in_$i53: i1, in_$i34: i32) returns (out_$i35: i64, out_$p37: ref, out_$i38: i32, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i46: i64, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$i51: i16, out_$i52: i32, out_$i53: i1, out_$i34: i32)
{

  entry:
    out_$i35, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i46, out_$p47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i34 := in_$i35, in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$i46, in_$p47, in_$i48, in_$p49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i34;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6809;

  $bb13:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := out_$i48;
    goto $bb13_dummy;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    out_$i53 := $sgt.i32(out_$i52, out_$i48);
    goto corral_source_split_6830;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i16.i32(out_$i51);
    goto corral_source_split_6829;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i16($M.0, out_$p50);
    goto corral_source_split_6828;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p49, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6827;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, in_$p28);
    goto corral_source_split_6826;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i34, 1);
    call {:si_unique_call 1184} {:cexpr "i"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_6825;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p47, out_$p44);
    goto corral_source_split_6824;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref(in_$p5, $mul.ref(out_$i46, 8));
    goto corral_source_split_6823;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    out_$i46 := $sext.i32.i64(out_$i34);
    goto corral_source_split_6822;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    goto corral_source_split_6821;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_6820;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p42, $mul.ref(0, 5568)), $mul.ref(5560, 1));
    goto corral_source_split_6819;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_6818;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p7, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_6817;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p40, out_$i38);
    goto corral_source_split_6816;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(in_$p4, $mul.ref(out_$i39, 4));
    goto corral_source_split_6815;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i34);
    goto corral_source_split_6814;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_6813;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(in_$p10, $mul.ref(0, 152)), $mul.ref(32, 1)), $mul.ref(out_$i35, 4));
    goto corral_source_split_6812;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i34);
    goto corral_source_split_6811;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i35, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i46, out_$p47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i34 := fimc_queue_setup_loop_$bb11(in_$p4, in_$p5, in_$p7, in_$p10, in_$p28, out_$i35, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i46, out_$p47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i34);
    return;

  exit:
    return;
}



procedure fimc_queue_setup_loop_$bb11(in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p10: ref, in_$p28: ref, in_$i35: i64, in_$p37: ref, in_$i38: i32, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i46: i64, in_$p47: ref, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$i51: i16, in_$i52: i32, in_$i53: i1, in_$i34: i32) returns (out_$i35: i64, out_$p37: ref, out_$i38: i32, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i46: i64, out_$p47: ref, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$i51: i16, out_$i52: i32, out_$i53: i1, out_$i34: i32);
  modifies $M.0;



implementation fimc_buf_prepare_loop_$bb8(in_$p0: ref, in_$p9: ref, in_$p18: ref, in_$i25: i64, in_$p27: ref, in_$i28: i32, in_$i29: i64, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$i24: i32) returns (out_$i25: i64, out_$p27: ref, out_$i28: i32, out_$i29: i64, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$i24: i32)
{

  entry:
    out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i24 := in_$i25, in_$p27, in_$i28, in_$i29, in_$i30, in_$p31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i24;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6869;

  $bb10:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i24 := out_$i30;
    goto $bb10_dummy;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    out_$i35 := $sgt.i32(out_$i34, out_$i30);
    goto corral_source_split_6881;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    goto corral_source_split_6880;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i16($M.0, out_$p32);
    goto corral_source_split_6879;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6878;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, in_$p18);
    goto corral_source_split_6877;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i24, 1);
    call {:si_unique_call 1192} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_6876;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} vb2_set_plane_payload(in_$p0, out_$i24, out_$i29);
    goto corral_source_split_6875;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i32.i64(out_$i28);
    goto corral_source_split_6874;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_6873;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(in_$p9, $mul.ref(0, 152)), $mul.ref(32, 1)), $mul.ref(out_$i25, 4));
    goto corral_source_split_6872;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    goto corral_source_split_6871;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i24 := fimc_buf_prepare_loop_$bb8(in_$p0, in_$p9, in_$p18, out_$i25, out_$p27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i24);
    return;

  exit:
    return;
}



procedure fimc_buf_prepare_loop_$bb8(in_$p0: ref, in_$p9: ref, in_$p18: ref, in_$i25: i64, in_$p27: ref, in_$i28: i32, in_$i29: i64, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$i24: i32) returns (out_$i25: i64, out_$p27: ref, out_$i28: i32, out_$i29: i64, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$i24: i32);
  modifies $M.0;



implementation v4l2_subdev_get_try_crop_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} v4l2_subdev_get_try_crop_loop_$bb3();
    return;

  exit:
    return;
}



procedure v4l2_subdev_get_try_crop_loop_$bb3();



implementation v4l2_subdev_get_try_compose_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} v4l2_subdev_get_try_compose_loop_$bb3();
    return;

  exit:
    return;
}



procedure v4l2_subdev_get_try_compose_loop_$bb3();



implementation fimc_get_format_depth_loop_$bb6(in_$p0: ref, in_$p3: ref, in_$i10: i64, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i16, in_$i18: i32, in_$i19: i1, in_$i8: i32, in_$i9: i32, in_$i20: i32) returns (out_$i10: i64, out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i16, out_$i18: i32, out_$i19: i1, out_$i8: i32, out_$i9: i32, out_$i20: i32)
{

  entry:
    out_$i10, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i8, out_$i9, out_$i20 := in_$i10, in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i8, in_$i9, in_$i20;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7730;

  $bb8:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$i9 := out_$i15, out_$i16;
    goto $bb8_dummy;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i15;
    assume true;
    goto $bb8;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    out_$i19 := $ugt.i32(out_$i18, out_$i16);
    goto corral_source_split_7740;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i16.i32(out_$i17);
    goto corral_source_split_7739;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i16($M.0, in_$p3);
    goto corral_source_split_7738;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i9, 1);
    call {:si_unique_call 1324} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_7737;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i14, out_$i8);
    call {:si_unique_call 1323} {:cexpr "depth"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_7736;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i8.i32(out_$i13);
    goto corral_source_split_7735;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i8($M.0, out_$p12);
    goto corral_source_split_7734;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 40)), $mul.ref(29, 1)), $mul.ref(out_$i10, 1));
    goto corral_source_split_7733;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i32.i64(out_$i9);
    goto corral_source_split_7732;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$i10, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i8, out_$i9, out_$i20 := fimc_get_format_depth_loop_$bb6(in_$p0, in_$p3, out_$i10, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i8, out_$i9, out_$i20);
    return;

  exit:
    return;
}



procedure fimc_get_format_depth_loop_$bb6(in_$p0: ref, in_$p3: ref, in_$i10: i64, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i16, in_$i18: i32, in_$i19: i1, in_$i8: i32, in_$i9: i32, in_$i20: i32) returns (out_$i10: i64, out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i16, out_$i18: i32, out_$i19: i1, out_$i8: i32, out_$i9: i32, out_$i20: i32);



implementation v4l2_subdev_get_try_format_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} v4l2_subdev_get_try_format_loop_$bb3();
    return;

  exit:
    return;
}



procedure v4l2_subdev_get_try_format_loop_$bb3();



implementation __fimc_capture_set_format_loop_$bb11(in_$p5: ref, in_$p7: ref, in_$p18: ref, in_$i25: i64, in_$p28: ref, in_$i29: i32, in_$i30: i64, in_$p32: ref, in_$i33: i64, in_$p36: ref, in_$i37: i32, in_$i38: i64, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$p43: ref, in_$i44: i16, in_$i45: i32, in_$i46: i1, in_$i24: i32) returns (out_$i25: i64, out_$p28: ref, out_$i29: i32, out_$i30: i64, out_$p32: ref, out_$i33: i64, out_$p36: ref, out_$i37: i32, out_$i38: i64, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$p43: ref, out_$i44: i16, out_$i45: i32, out_$i46: i1, out_$i24: i32)
{

  entry:
    out_$i25, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i24 := in_$i25, in_$p28, in_$i29, in_$i30, in_$p32, in_$i33, in_$p36, in_$i37, in_$i38, in_$p40, in_$i41, in_$p42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i24;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_9234;

  $bb13:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i24 := out_$i41;
    goto $bb13_dummy;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    out_$i46 := $sgt.i32(out_$i45, out_$i41);
    goto corral_source_split_9251;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i16.i32(out_$i44);
    goto corral_source_split_9250;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i16($M.0, out_$p43);
    goto corral_source_split_9249;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p42, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9248;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, in_$p18);
    goto corral_source_split_9247;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i24, 1);
    call {:si_unique_call 1553} {:cexpr "i"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_9246;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p40, out_$i37);
    goto corral_source_split_9245;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i24);
    out_$p40 := $add.ref($add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(32, 1)), $mul.ref(out_$i38, 4));
    goto corral_source_split_9244;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.0, out_$p36);
    goto corral_source_split_9243;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(out_$i33, 20)), $mul.ref(0, 1));
    goto corral_source_split_9242;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i24);
    goto corral_source_split_9241;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p32, out_$i29);
    goto corral_source_split_9240;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i24);
    out_$p32 := $add.ref($add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(64, 1)), $mul.ref(out_$i30, 4));
    goto corral_source_split_9239;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.0, out_$p28);
    goto corral_source_split_9238;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(out_$i25, 20)), $mul.ref(4, 1));
    goto corral_source_split_9237;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    goto corral_source_split_9236;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i25, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i24 := __fimc_capture_set_format_loop_$bb11(in_$p5, in_$p7, in_$p18, out_$i25, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$p36, out_$i37, out_$i38, out_$p40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i24);
    return;

  exit:
    return;
}



procedure __fimc_capture_set_format_loop_$bb11(in_$p5: ref, in_$p7: ref, in_$p18: ref, in_$i25: i64, in_$p28: ref, in_$i29: i32, in_$i30: i64, in_$p32: ref, in_$i33: i64, in_$p36: ref, in_$i37: i32, in_$i38: i64, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$p43: ref, in_$i44: i16, in_$i45: i32, in_$i46: i1, in_$i24: i32) returns (out_$i25: i64, out_$p28: ref, out_$i29: i32, out_$i30: i64, out_$p32: ref, out_$i33: i64, out_$p36: ref, out_$i37: i32, out_$i38: i64, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$p43: ref, out_$i44: i16, out_$i45: i32, out_$i46: i1, out_$i24: i32);
  modifies $M.0;



implementation fimc_pipeline_try_format_loop_$bb21(in_$p1: ref, in_$p4: ref, in_$i62: i64, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i104: i16, in_$i105: i32, in_$i106: i32, in_$p107: ref, in_$p108: ref, in_$i109: i32, in_$p110: ref, in_$i111: i64, in_$i112: i1, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i125: i64, in_$i126: i1, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$i135: i32, in_$i136: i1, in_$i137: i32, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$i141: i32, in_$i142: i64, in_$p143: ref, in_$p144: ref, in_$i145: i64, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$i149: i64, in_$i150: i1, in_$p66: ref, in_$p151: ref) returns (out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i104: i16, out_$i105: i32, out_$i106: i32, out_$p107: ref, out_$p108: ref, out_$i109: i32, out_$p110: ref, out_$i111: i64, out_$i112: i1, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i125: i64, out_$i126: i1, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$i135: i32, out_$i136: i1, out_$i137: i32, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$i141: i32, out_$i142: i64, out_$p143: ref, out_$p144: ref, out_$i145: i64, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$i149: i64, out_$i150: i1, out_$p66: ref, out_$p151: ref)
{

  entry:
    out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p107, out_$p108, out_$i109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p66, out_$p151 := in_$p67, in_$p68, in_$i69, in_$i70, in_$p71, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$p77, in_$p78, in_$p79, in_$p80, in_$p81, in_$p82, in_$i83, in_$i84, in_$p85, in_$p86, in_$p87, in_$p88, in_$p89, in_$p90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$p96, in_$p97, in_$p98, in_$i99, in_$i100, in_$i101, in_$i102, in_$p103, in_$i104, in_$i105, in_$i106, in_$p107, in_$p108, in_$i109, in_$p110, in_$i111, in_$i112, in_$p113, in_$p114, in_$p115, in_$p116, in_$i117, in_$i118, in_$p119, in_$p120, in_$p121, in_$p122, in_$p123, in_$p124, in_$i125, in_$i126, in_$p127, in_$p128, in_$p129, in_$p130, in_$p131, in_$p132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$p138, in_$p139, in_$p140, in_$i141, in_$i142, in_$p143, in_$p144, in_$i145, in_$i146, in_$p147, in_$p148, in_$i149, in_$i150, in_$p66, in_$p151;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_9526;

  $bb53:
    assume out_$i150 == 1;
    assume {:verifier.code 0} true;
    out_$p66 := out_$p148;
    goto $bb53_dummy;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    out_$p151 := out_$p148;
    assume true;
    goto $bb53;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    out_$i150 := $ne.i64(in_$i62, out_$i149);
    goto corral_source_split_9636;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    out_$i149 := $p2i.ref.i64(out_$p148);
    goto corral_source_split_9635;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    out_$p148 := $load.ref($M.0, out_$p147);
    goto corral_source_split_9634;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref(out_$p144, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9633;

  $bb51:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i64(out_$i145, 0);
    goto corral_source_split_9629;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    out_$i145 := $p2i.ref.i64(out_$p144);
    goto corral_source_split_9628;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} out_$p144 := media_entity_remote_pad(out_$p143);
    goto corral_source_split_9627;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref(out_$p139, $mul.ref(out_$i142, 24));
    goto corral_source_split_9626;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    out_$i142 := $zext.i32.i64(out_$i141);
    goto corral_source_split_9625;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i32($M.0, out_$p140);
    goto corral_source_split_9624;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p4, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_9623;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    out_$p139 := $load.ref($M.23, out_$p138);
    goto corral_source_split_9622;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(out_$p66, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_9621;

  $bb36:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    out_$i137 := out_$i135;
    assume true;
    goto $bb47;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    out_$i136 := $ne.i32(out_$i135, 0);
    goto corral_source_split_9617;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_9616;

  $bb38:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    out_$i135 := $sub.i32(0, 19);
    goto $bb45;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    out_$i135 := out_$i134;
    goto $bb45;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_9614;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i134 := $sub.i32(0, 515);
    goto $bb44;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    out_$i134 := out_$i133;
    goto $bb44;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    out_$p132 := $load.ref($M.0, out_$p131);
    call {:si_unique_call 1596} out_$i133 := devirtbounce.11(out_$p132, out_$p67, $0.ref, in_$p4);
    call {:si_unique_call 1597} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i133);
    goto corral_source_split_9612;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(out_$p130, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_9611;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    out_$p130 := $load.ref($M.0, out_$p129);
    goto corral_source_split_9610;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(out_$p128, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9609;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    out_$p128 := $load.ref($M.24, out_$p127);
    goto corral_source_split_9608;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(out_$p67, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9607;

  $bb42:
    assume out_$i126 == 1;
    goto corral_source_split_9606;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    out_$i126 := $ne.i64(out_$i125, 0);
    goto corral_source_split_9604;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    out_$i125 := $p2i.ref.i64(out_$p124);
    goto corral_source_split_9603;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    out_$p124 := $load.ref($M.0, out_$p123);
    goto corral_source_split_9602;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(out_$p122, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_9601;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    out_$p122 := $load.ref($M.0, out_$p121);
    goto corral_source_split_9600;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(out_$p120, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9599;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.24, out_$p119);
    goto corral_source_split_9598;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(out_$p67, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9597;

  $bb39:
    assume out_$i118 == 1;
    goto corral_source_split_9596;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i64(out_$i117, 0);
    goto corral_source_split_9594;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    out_$i117 := $p2i.ref.i64(out_$p116);
    goto corral_source_split_9593;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.0, out_$p115);
    goto corral_source_split_9592;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(out_$p114, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9591;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    out_$p114 := $load.ref($M.24, out_$p113);
    goto corral_source_split_9590;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(out_$p67, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9589;

  $bb37:
    assume out_$i112 == 1;
    goto corral_source_split_9588;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    out_$i112 := $ne.i64(out_$i111, 0);
    goto corral_source_split_9586;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    out_$i111 := $p2i.ref.i64(out_$p67);
    goto corral_source_split_9585;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p110, out_$i109);
    goto corral_source_split_9584;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i32($M.0, out_$p108);
    out_$p110 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_9583;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_9582;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p107, out_$i106);
    goto corral_source_split_9581;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p4, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_9580;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    out_$i106 := $add.i32(out_$i105, $sub.i32(0, 1));
    goto corral_source_split_9579;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    out_$i105 := $zext.i16.i32(out_$i104);
    goto corral_source_split_9578;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i16($M.23, out_$p103);
    goto corral_source_split_9577;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(out_$p66, $mul.ref(0, 120)), $mul.ref(60, 1));
    goto corral_source_split_9576;

  $bb35:
    assume out_$i102 == 1;
    goto corral_source_split_9575;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i32(out_$i101, 0);
    goto corral_source_split_9573;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    out_$i101 := $and.i32(out_$i100, 1);
    goto corral_source_split_9572;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    out_$i100 := $trunc.i64.i32(out_$i99);
    goto corral_source_split_9571;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    out_$i99 := $load.i64($M.0, out_$p98);
    goto corral_source_split_9570;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(out_$p97, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9569;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.23, out_$p96);
    goto corral_source_split_9568;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p66, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_9567;

  $bb33:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    out_$i95 := out_$i93;
    assume true;
    goto $bb33;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i32(out_$i93, 0);
    goto corral_source_split_9563;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_9562;

  $bb24:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i93 := $sub.i32(0, 19);
    goto $bb31;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    out_$i93 := out_$i92;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_9560;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i92 := $sub.i32(0, 515);
    goto $bb30;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    out_$i92 := out_$i91;
    goto $bb30;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.0, out_$p89);
    call {:si_unique_call 1594} out_$i91 := devirtbounce.11(out_$p90, out_$p67, $0.ref, in_$p4);
    call {:si_unique_call 1595} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_9558;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p88, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_9557;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_9556;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p86, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9555;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.24, out_$p85);
    goto corral_source_split_9554;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p67, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9553;

  $bb28:
    assume out_$i84 == 1;
    goto corral_source_split_9552;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i64(out_$i83, 0);
    goto corral_source_split_9550;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    out_$i83 := $p2i.ref.i64(out_$p82);
    goto corral_source_split_9549;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, out_$p81);
    goto corral_source_split_9548;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p80, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_9547;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.0, out_$p79);
    goto corral_source_split_9546;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p78, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9545;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.24, out_$p77);
    goto corral_source_split_9544;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p67, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9543;

  $bb25:
    assume out_$i76 == 1;
    goto corral_source_split_9542;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i64(out_$i75, 0);
    goto corral_source_split_9540;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    out_$i75 := $p2i.ref.i64(out_$p74);
    goto corral_source_split_9539;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_9538;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p72, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9537;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.24, out_$p71);
    goto corral_source_split_9536;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p67, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9535;

  $bb23:
    assume out_$i70 == 1;
    goto corral_source_split_9534;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, 0);
    goto corral_source_split_9532;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p67);
    goto corral_source_split_9531;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p68, 0);
    goto corral_source_split_9530;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p4, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_9529;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p67 := $bitcast.ref.ref(out_$p66);
    goto corral_source_split_9528;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i76 == 1);
    goto $bb27;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i84 == 1);
    goto $bb27;

  $bb40:
    assume {:verifier.code 0} true;
    assume !(out_$i118 == 1);
    goto $bb41;

  $bb43:
    assume {:verifier.code 0} true;
    assume !(out_$i126 == 1);
    goto $bb41;

  $bb53_dummy:
    call {:si_unique_call 1} out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p107, out_$p108, out_$i109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p66, out_$p151 := fimc_pipeline_try_format_loop_$bb21(in_$p1, in_$p4, in_$i62, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p107, out_$p108, out_$i109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p66, out_$p151);
    return;

  exit:
    return;
}



procedure fimc_pipeline_try_format_loop_$bb21(in_$p1: ref, in_$p4: ref, in_$i62: i64, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i104: i16, in_$i105: i32, in_$i106: i32, in_$p107: ref, in_$p108: ref, in_$i109: i32, in_$p110: ref, in_$i111: i64, in_$i112: i1, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i125: i64, in_$i126: i1, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$i135: i32, in_$i136: i1, in_$i137: i32, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$i141: i32, in_$i142: i64, in_$p143: ref, in_$p144: ref, in_$i145: i64, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$i149: i64, in_$i150: i1, in_$p66: ref, in_$p151: ref) returns (out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i104: i16, out_$i105: i32, out_$i106: i32, out_$p107: ref, out_$p108: ref, out_$i109: i32, out_$p110: ref, out_$i111: i64, out_$i112: i1, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i125: i64, out_$i126: i1, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$i135: i32, out_$i136: i1, out_$i137: i32, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$i141: i32, out_$i142: i64, out_$p143: ref, out_$p144: ref, out_$i145: i64, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$i149: i64, out_$i150: i1, out_$p66: ref, out_$p151: ref);
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.25, $M.27, $CurrAddr;



implementation fimc_pipeline_try_format_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$i56: i32, in_$p57: ref, in_$p58: ref, in_$p61: ref, in_$i62: i64, in_$i63: i64, in_$i64: i1, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i104: i16, in_$i105: i32, in_$i106: i32, in_$p107: ref, in_$p108: ref, in_$i109: i32, in_$p110: ref, in_$i111: i64, in_$i112: i1, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i125: i64, in_$i126: i1, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$i135: i32, in_$i136: i1, in_$i137: i32, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$i141: i32, in_$i142: i64, in_$p143: ref, in_$p144: ref, in_$i145: i64, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$i149: i64, in_$i150: i1, in_$p66: ref, in_$p151: ref, in_$p65: ref, in_$p152: ref, in_$i153: i32, in_$p154: ref, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$p159: ref, in_$i160: i32, in_$p161: ref, in_$p162: ref, in_$i163: i32, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$p168: ref, in_$p169: ref, in_$p170: ref, in_$i171: i64, in_$i172: i1, in_$p173: ref, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$i177: i32, in_$p178: ref, in_$p179: ref, in_$i180: i32, in_$p181: ref, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$i185: i32, in_$p186: ref, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_vslice_dummy_var_100: ref) returns (out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$i56: i32, out_$p57: ref, out_$p58: ref, out_$p61: ref, out_$i62: i64, out_$i63: i64, out_$i64: i1, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i104: i16, out_$i105: i32, out_$i106: i32, out_$p107: ref, out_$p108: ref, out_$i109: i32, out_$p110: ref, out_$i111: i64, out_$i112: i1, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i125: i64, out_$i126: i1, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$i135: i32, out_$i136: i1, out_$i137: i32, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$i141: i32, out_$i142: i64, out_$p143: ref, out_$p144: ref, out_$i145: i64, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$i149: i64, out_$i150: i1, out_$p66: ref, out_$p151: ref, out_$p65: ref, out_$p152: ref, out_$i153: i32, out_$p154: ref, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$p159: ref, out_$i160: i32, out_$p161: ref, out_$p162: ref, out_$i163: i32, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$p168: ref, out_$p169: ref, out_$p170: ref, out_$i171: i64, out_$i172: i1, out_$p173: ref, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$i177: i32, out_$p178: ref, out_$p179: ref, out_$i180: i32, out_$p181: ref, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$i185: i32, out_$p186: ref, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_vslice_dummy_var_100: ref)
{

  entry:
    out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$p57, out_$p58, out_$p61, out_$i62, out_$i63, out_$i64, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p107, out_$p108, out_$i109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p66, out_$p151, out_$p65, out_$p152, out_$i153, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$p159, out_$i160, out_$p161, out_$p162, out_$i163, out_$p164, out_$p165, out_$p166, out_$p168, out_$p169, out_$p170, out_$i171, out_$i172, out_$p173, out_$i174, out_$i175, out_$p176, out_$i177, out_$p178, out_$p179, out_$i180, out_$p181, out_$i182, out_$i183, out_$p184, out_$i185, out_$p186, out_$i187, out_$i188, out_$p189, out_vslice_dummy_var_100 := in_$p44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p55, in_$i56, in_$p57, in_$p58, in_$p61, in_$i62, in_$i63, in_$i64, in_$p67, in_$p68, in_$i69, in_$i70, in_$p71, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$p77, in_$p78, in_$p79, in_$p80, in_$p81, in_$p82, in_$i83, in_$i84, in_$p85, in_$p86, in_$p87, in_$p88, in_$p89, in_$p90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$p96, in_$p97, in_$p98, in_$i99, in_$i100, in_$i101, in_$i102, in_$p103, in_$i104, in_$i105, in_$i106, in_$p107, in_$p108, in_$i109, in_$p110, in_$i111, in_$i112, in_$p113, in_$p114, in_$p115, in_$p116, in_$i117, in_$i118, in_$p119, in_$p120, in_$p121, in_$p122, in_$p123, in_$p124, in_$i125, in_$i126, in_$p127, in_$p128, in_$p129, in_$p130, in_$p131, in_$p132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$p138, in_$p139, in_$p140, in_$i141, in_$i142, in_$p143, in_$p144, in_$i145, in_$i146, in_$p147, in_$p148, in_$i149, in_$i150, in_$p66, in_$p151, in_$p65, in_$p152, in_$i153, in_$p154, in_$i155, in_$i156, in_$p157, in_$i158, in_$p159, in_$i160, in_$p161, in_$p162, in_$i163, in_$p164, in_$p165, in_$p166, in_$p168, in_$p169, in_$p170, in_$i171, in_$i172, in_$p173, in_$i174, in_$i175, in_$p176, in_$i177, in_$p178, in_$p179, in_$i180, in_$p181, in_$i182, in_$i183, in_$p184, in_$i185, in_$p186, in_$i187, in_$i188, in_$p189, in_vslice_dummy_var_100;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9498;

  $bb58:
    assume {:verifier.code 0} true;
    out_$p44, out_$i45 := out_$p65, out_$i46;
    goto $bb58_dummy;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb56:
    assume out_$i156 == 1;
    goto corral_source_split_9646;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    out_$i156 := $ne.i32(out_$i153, out_$i155);
    goto corral_source_split_9644;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    out_$i155 := $load.i32($M.0, out_$p154);
    goto corral_source_split_9643;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref(in_$p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_9642;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    out_$i153 := $load.i32($M.0, out_$p152);
    goto corral_source_split_9641;

  $bb55:
    out_$p152 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_9640;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb20;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    out_$p65 := out_$p151;
    goto $bb20;

  $bb54:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_9638;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    out_$p151 := out_$p148;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    out_$i150 := $ne.i64(out_$i62, out_$i149);
    goto corral_source_split_9636;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    out_$i149 := $p2i.ref.i64(out_$p148);
    goto corral_source_split_9635;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    out_$p148 := $load.ref($M.0, out_$p147);
    goto corral_source_split_9634;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref(out_$p144, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9633;

  $bb51:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i64(out_$i145, 0);
    goto corral_source_split_9629;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    out_$i145 := $p2i.ref.i64(out_$p144);
    goto corral_source_split_9628;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} out_$p144 := media_entity_remote_pad(out_$p143);
    goto corral_source_split_9627;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref(out_$p139, $mul.ref(out_$i142, 24));
    goto corral_source_split_9626;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    out_$i142 := $zext.i32.i64(out_$i141);
    goto corral_source_split_9625;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i32($M.0, out_$p140);
    goto corral_source_split_9624;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p4, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_9623;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    out_$p139 := $load.ref($M.23, out_$p138);
    goto corral_source_split_9622;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(out_$p66, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_9621;

  $bb36:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    out_$i137 := out_$i135;
    assume true;
    goto $bb47;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    out_$i136 := $ne.i32(out_$i135, 0);
    goto corral_source_split_9617;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_9616;

  $bb38:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    out_$i135 := $sub.i32(0, 19);
    goto $bb45;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    out_$i135 := out_$i134;
    goto $bb45;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_9614;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i134 := $sub.i32(0, 515);
    goto $bb44;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    out_$i134 := out_$i133;
    goto $bb44;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    out_$p132 := $load.ref($M.0, out_$p131);
    call {:si_unique_call 1596} out_$i133 := devirtbounce.11(out_$p132, out_$p67, $0.ref, in_$p4);
    call {:si_unique_call 1597} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i133);
    goto corral_source_split_9612;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(out_$p130, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_9611;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    out_$p130 := $load.ref($M.0, out_$p129);
    goto corral_source_split_9610;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(out_$p128, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9609;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    out_$p128 := $load.ref($M.24, out_$p127);
    goto corral_source_split_9608;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(out_$p67, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9607;

  $bb42:
    assume out_$i126 == 1;
    goto corral_source_split_9606;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    out_$i126 := $ne.i64(out_$i125, 0);
    goto corral_source_split_9604;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    out_$i125 := $p2i.ref.i64(out_$p124);
    goto corral_source_split_9603;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    out_$p124 := $load.ref($M.0, out_$p123);
    goto corral_source_split_9602;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(out_$p122, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_9601;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    out_$p122 := $load.ref($M.0, out_$p121);
    goto corral_source_split_9600;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(out_$p120, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9599;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.24, out_$p119);
    goto corral_source_split_9598;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(out_$p67, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9597;

  $bb39:
    assume out_$i118 == 1;
    goto corral_source_split_9596;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i64(out_$i117, 0);
    goto corral_source_split_9594;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    out_$i117 := $p2i.ref.i64(out_$p116);
    goto corral_source_split_9593;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.0, out_$p115);
    goto corral_source_split_9592;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(out_$p114, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9591;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    out_$p114 := $load.ref($M.24, out_$p113);
    goto corral_source_split_9590;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(out_$p67, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9589;

  $bb37:
    assume out_$i112 == 1;
    goto corral_source_split_9588;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    out_$i112 := $ne.i64(out_$i111, 0);
    goto corral_source_split_9586;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    out_$i111 := $p2i.ref.i64(out_$p67);
    goto corral_source_split_9585;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p110, out_$i109);
    goto corral_source_split_9584;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i32($M.0, out_$p108);
    out_$p110 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_9583;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_9582;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p107, out_$i106);
    goto corral_source_split_9581;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p4, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_9580;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    out_$i106 := $add.i32(out_$i105, $sub.i32(0, 1));
    goto corral_source_split_9579;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    out_$i105 := $zext.i16.i32(out_$i104);
    goto corral_source_split_9578;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i16($M.23, out_$p103);
    goto corral_source_split_9577;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(out_$p66, $mul.ref(0, 120)), $mul.ref(60, 1));
    goto corral_source_split_9576;

  $bb35:
    assume out_$i102 == 1;
    goto corral_source_split_9575;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i32(out_$i101, 0);
    goto corral_source_split_9573;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    out_$i101 := $and.i32(out_$i100, 1);
    goto corral_source_split_9572;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    out_$i100 := $trunc.i64.i32(out_$i99);
    goto corral_source_split_9571;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    out_$i99 := $load.i64($M.0, out_$p98);
    goto corral_source_split_9570;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(out_$p97, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9569;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.23, out_$p96);
    goto corral_source_split_9568;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p66, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_9567;

  $bb33:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    out_$i95 := out_$i93;
    assume true;
    goto $bb33;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i32(out_$i93, 0);
    goto corral_source_split_9563;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_9562;

  $bb24:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i93 := $sub.i32(0, 19);
    goto $bb31;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    out_$i93 := out_$i92;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_9560;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i92 := $sub.i32(0, 515);
    goto $bb30;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    out_$i92 := out_$i91;
    goto $bb30;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    out_$p90 := $load.ref($M.0, out_$p89);
    call {:si_unique_call 1594} out_$i91 := devirtbounce.11(out_$p90, out_$p67, $0.ref, in_$p4);
    call {:si_unique_call 1595} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_9558;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p88, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_9557;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_9556;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p86, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9555;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.24, out_$p85);
    goto corral_source_split_9554;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p67, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9553;

  $bb28:
    assume out_$i84 == 1;
    goto corral_source_split_9552;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i64(out_$i83, 0);
    goto corral_source_split_9550;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    out_$i83 := $p2i.ref.i64(out_$p82);
    goto corral_source_split_9549;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, out_$p81);
    goto corral_source_split_9548;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p80, $mul.ref(0, 112)), $mul.ref(32, 1));
    goto corral_source_split_9547;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.0, out_$p79);
    goto corral_source_split_9546;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p78, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9545;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.24, out_$p77);
    goto corral_source_split_9544;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p67, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9543;

  $bb25:
    assume out_$i76 == 1;
    goto corral_source_split_9542;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i64(out_$i75, 0);
    goto corral_source_split_9540;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    out_$i75 := $p2i.ref.i64(out_$p74);
    goto corral_source_split_9539;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_9538;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p72, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_9537;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.24, out_$p71);
    goto corral_source_split_9536;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p67, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_9535;

  $bb23:
    assume out_$i70 == 1;
    goto corral_source_split_9534;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, 0);
    goto corral_source_split_9532;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p67);
    goto corral_source_split_9531;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p68, 0);
    goto corral_source_split_9530;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p4, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_9529;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p67 := $bitcast.ref.ref(out_$p66);
    goto corral_source_split_9528;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    call out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p107, out_$p108, out_$i109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p66, out_$p151 := fimc_pipeline_try_format_loop_$bb21(in_$p1, in_$p4, out_$i62, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p107, out_$p108, out_$i109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p66, out_$p151);
    goto $bb21_last;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9526;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    out_$p66 := out_$p44;
    goto $bb21;

  $bb53:
    assume out_$i150 == 1;
    assume {:verifier.code 0} true;
    out_$p66 := out_$p148;
    assume false;
    return;

  $bb18:
    assume out_$i64 == 1;
    goto corral_source_split_9524;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    out_$p65 := out_$p44;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i62, out_$i63);
    goto corral_source_split_9522;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_9521;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p61);
    goto corral_source_split_9520;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($add.ref($add.ref(in_$p8, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_9519;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p58, out_$i56);
    goto corral_source_split_9518;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p57, out_$i56);
    out_$p58 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_9517;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p1, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_9516;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.0, out_$p55);
    call {:si_unique_call 1593} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_9515;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p52, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9514;

  $bb16:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i64(out_$i53, 0);
    goto corral_source_split_9510;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_9509;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} out_$p52 := fimc_find_format($0.ref, out_$p51, 1, out_$i45);
    goto corral_source_split_9508;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_9507;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    out_$p51 := $0.ref;
    goto $bb14;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    out_$p51 := out_$p50;
    goto $bb14;

  $bb12:
    assume out_$i49 == 1;
    out_$p50 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_9503;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i32(out_$i48, 0);
    goto corral_source_split_9501;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    goto corral_source_split_9500;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i45, 1);
    call {:si_unique_call 1591} {:cexpr "i"} boogie_si_record_i32(out_$i46);
    out_$p47 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_9499;

  $bb13:
    assume !(out_$i49 == 1);
    goto corral_source_split_9505;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i76 == 1);
    goto $bb27;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i84 == 1);
    goto $bb27;

  $bb40:
    assume {:verifier.code 0} true;
    assume !(out_$i118 == 1);
    goto $bb41;

  $bb43:
    assume {:verifier.code 0} true;
    assume !(out_$i126 == 1);
    goto $bb41;

  $bb69:
    assume {:verifier.code 0} true;
    assume out_$i188 == 1;
    goto $bb67;

  $bb66:
    assume {:verifier.code 0} true;
    assume out_$i183 == 1;
    goto $bb67;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb68;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    out_$i183 := $ne.i32(out_$i180, out_$i182);
    goto corral_source_split_9680;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    out_$i182 := $load.i32($M.0, out_$p181);
    goto corral_source_split_9679;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref($add.ref(in_$p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_9678;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    out_$i180 := $load.i32($M.0, out_$p179);
    goto corral_source_split_9677;

  $bb65:
    out_$p179 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_9676;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p178, out_$i177);
    goto corral_source_split_9674;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    out_$i177 := $load.i32($M.0, out_$p176);
    out_$p178 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_9673;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    out_$p176 := $add.ref($add.ref(out_$p170, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9672;

  $bb63:
    assume out_$i175 == 1;
    goto corral_source_split_9671;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    out_$i175 := $ne.i32(out_$i174, 0);
    goto corral_source_split_9669;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    out_$i174 := $load.i32($M.0, out_$p173);
    goto corral_source_split_9668;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    out_$p173 := $add.ref($add.ref(out_$p170, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9667;

  $bb60:
    assume out_$i172 == 1;
    goto corral_source_split_9666;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    out_$i172 := $ne.i64(out_$i171, 0);
    goto corral_source_split_9664;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    out_$i171 := $p2i.ref.i64(out_$p170);
    goto corral_source_split_9663;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} out_$p170 := fimc_capture_try_format(in_$p0, out_$p168, out_$p169, $0.ref, in_$p5, 2);
    goto corral_source_split_9662;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref(in_$p1, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_9661;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref(in_$p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_9660;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} out_vslice_dummy_var_100 := fimc_capture_try_format(in_$p0, out_$p165, out_$p166, $0.ref, in_$p5, 0);
    goto corral_source_split_9659;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(in_$p1, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_9658;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_9657;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p164, out_$i163);
    goto corral_source_split_9656;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref(in_$p1, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_9655;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i32($M.0, out_$p162);
    goto corral_source_split_9654;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p161, out_$i160);
    out_$p162 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_9653;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(in_$p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_9652;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    out_$i160 := $load.i32($M.0, out_$p159);
    goto corral_source_split_9651;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, in_$p5, out_$i158);
    out_$p159 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_9650;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i32($M.0, out_$p157);
    goto corral_source_split_9649;

  $bb59:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(out_$p52, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9648;

  $bb57:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb61:
    assume {:verifier.code 0} true;
    assume !(out_$i172 == 1);
    goto $bb62;

  $bb64:
    assume {:verifier.code 0} true;
    assume !(out_$i175 == 1);
    goto $bb62;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    out_$p189 := out_$p170;
    assume true;
    goto $bb69;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    out_$i188 := $ne.i32(out_$i185, out_$i187);
    goto corral_source_split_9686;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    out_$i187 := $load.i32($M.0, out_$p186);
    goto corral_source_split_9685;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    out_$p186 := $add.ref($add.ref(in_$p1, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_9684;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    out_$i185 := $load.i32($M.0, out_$p184);
    goto corral_source_split_9683;

  $bb68:
    assume !(out_$i183 == 1);
    out_$p184 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_9682;

  $bb58_dummy:
    call {:si_unique_call 1} out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$p57, out_$p58, out_$p61, out_$i62, out_$i63, out_$i64, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p107, out_$p108, out_$i109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p66, out_$p151, out_$p65, out_$p152, out_$i153, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$p159, out_$i160, out_$p161, out_$p162, out_$i163, out_$p164, out_$p165, out_$p166, out_$p168, out_$p169, out_$p170, out_$i171, out_$i172, out_$p173, out_$i174, out_$i175, out_$p176, out_$i177, out_$p178, out_$p179, out_$i180, out_$p181, out_$i182, out_$i183, out_$p184, out_$i185, out_$p186, out_$i187, out_$i188, out_$p189, out_vslice_dummy_var_100 := fimc_pipeline_try_format_loop_$bb11(in_$p0, in_$p1, in_$p4, in_$p5, in_$p8, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$p57, out_$p58, out_$p61, out_$i62, out_$i63, out_$i64, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p107, out_$p108, out_$i109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$i125, out_$i126, out_$p127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$p139, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$p66, out_$p151, out_$p65, out_$p152, out_$i153, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$p159, out_$i160, out_$p161, out_$p162, out_$i163, out_$p164, out_$p165, out_$p166, out_$p168, out_$p169, out_$p170, out_$i171, out_$i172, out_$p173, out_$i174, out_$i175, out_$p176, out_$i177, out_$p178, out_$p179, out_$i180, out_$p181, out_$i182, out_$i183, out_$p184, out_$i185, out_$p186, out_$i187, out_$i188, out_$p189, out_vslice_dummy_var_100);
    return;

  exit:
    return;
}



procedure fimc_pipeline_try_format_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$p47: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$i56: i32, in_$p57: ref, in_$p58: ref, in_$p61: ref, in_$i62: i64, in_$i63: i64, in_$i64: i1, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i104: i16, in_$i105: i32, in_$i106: i32, in_$p107: ref, in_$p108: ref, in_$i109: i32, in_$p110: ref, in_$i111: i64, in_$i112: i1, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$i125: i64, in_$i126: i1, in_$p127: ref, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$i135: i32, in_$i136: i1, in_$i137: i32, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$i141: i32, in_$i142: i64, in_$p143: ref, in_$p144: ref, in_$i145: i64, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$i149: i64, in_$i150: i1, in_$p66: ref, in_$p151: ref, in_$p65: ref, in_$p152: ref, in_$i153: i32, in_$p154: ref, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$p159: ref, in_$i160: i32, in_$p161: ref, in_$p162: ref, in_$i163: i32, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$p168: ref, in_$p169: ref, in_$p170: ref, in_$i171: i64, in_$i172: i1, in_$p173: ref, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$i177: i32, in_$p178: ref, in_$p179: ref, in_$i180: i32, in_$p181: ref, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$i185: i32, in_$p186: ref, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_vslice_dummy_var_100: ref) returns (out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$p47: ref, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$i56: i32, out_$p57: ref, out_$p58: ref, out_$p61: ref, out_$i62: i64, out_$i63: i64, out_$i64: i1, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i104: i16, out_$i105: i32, out_$i106: i32, out_$p107: ref, out_$p108: ref, out_$i109: i32, out_$p110: ref, out_$i111: i64, out_$i112: i1, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$i125: i64, out_$i126: i1, out_$p127: ref, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$i135: i32, out_$i136: i1, out_$i137: i32, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$i141: i32, out_$i142: i64, out_$p143: ref, out_$p144: ref, out_$i145: i64, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$i149: i64, out_$i150: i1, out_$p66: ref, out_$p151: ref, out_$p65: ref, out_$p152: ref, out_$i153: i32, out_$p154: ref, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$p159: ref, out_$i160: i32, out_$p161: ref, out_$p162: ref, out_$i163: i32, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$p168: ref, out_$p169: ref, out_$p170: ref, out_$i171: i64, out_$i172: i1, out_$p173: ref, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$i177: i32, out_$p178: ref, out_$p179: ref, out_$i180: i32, out_$p181: ref, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$i185: i32, out_$p186: ref, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_vslice_dummy_var_100: ref);
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.25, $M.27, $CurrAddr;



implementation fimc_get_sensor_frame_desc_loop_$bb40(in_$p1: ref, in_$i2: i32, in_$p4: ref, in_$i83: i64, in_$p86: ref, in_$i87: i32, in_$i88: i64, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$i82: i32) returns (out_$i83: i64, out_$p86: ref, out_$i87: i32, out_$i88: i64, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$i82: i32)
{

  entry:
    out_$i83, out_$p86, out_$i87, out_$i88, out_$p90, out_$i91, out_$i92, out_$i82 := in_$i83, in_$p86, in_$i87, in_$i88, in_$p90, in_$i91, in_$i92, in_$i82;
    goto $bb40, exit;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_9831;

  $bb42:
    assume out_$i92 == 1;
    assume {:verifier.code 0} true;
    out_$i82 := out_$i91;
    goto $bb42_dummy;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    out_$i92 := $ult.i32(out_$i91, in_$i2);
    goto corral_source_split_9841;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i32(out_$i82, 1);
    call {:si_unique_call 1612} {:cexpr "i"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_9840;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p90, out_$i87);
    goto corral_source_split_9839;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i88, 20)), $mul.ref(0, 1));
    goto corral_source_split_9838;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    goto corral_source_split_9837;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    out_$i88 := $sext.i32.i64(out_$i82);
    goto corral_source_split_9836;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.27, out_$p86);
    goto corral_source_split_9835;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 52)), $mul.ref(0, 1)), $mul.ref(out_$i83, 12)), $mul.ref(8, 1));
    goto corral_source_split_9834;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i83 := $sext.i32.i64(out_$i82);
    goto corral_source_split_9833;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb42_dummy:
    call {:si_unique_call 1} out_$i83, out_$p86, out_$i87, out_$i88, out_$p90, out_$i91, out_$i92, out_$i82 := fimc_get_sensor_frame_desc_loop_$bb40(in_$p1, in_$i2, in_$p4, out_$i83, out_$p86, out_$i87, out_$i88, out_$p90, out_$i91, out_$i92, out_$i82);
    return;

  exit:
    return;
}



procedure fimc_get_sensor_frame_desc_loop_$bb40(in_$p1: ref, in_$i2: i32, in_$p4: ref, in_$i83: i64, in_$p86: ref, in_$i87: i32, in_$i88: i64, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$i82: i32) returns (out_$i83: i64, out_$p86: ref, out_$i87: i32, out_$i88: i64, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$i82: i32);
  modifies $M.0;



implementation fimc_get_sensor_frame_desc_loop_$bb4(in_$p1: ref, in_$i2: i32, in_$p4: ref, in_$i8: i64, in_$p10: ref, in_$i11: i32, in_$i12: i64, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i7: i32) returns (out_$i8: i64, out_$p10: ref, out_$i11: i32, out_$i12: i64, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i7: i32)
{

  entry:
    out_$i8, out_$p10, out_$i11, out_$i12, out_$p15, out_$i16, out_$i17, out_$i7 := in_$i8, in_$p10, in_$i11, in_$i12, in_$p15, in_$i16, in_$i17, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_9727;

  $bb6:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i16;
    goto $bb6_dummy;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    out_$i17 := $ult.i32(out_$i16, in_$i2);
    goto corral_source_split_9737;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i7, 1);
    call {:si_unique_call 1606} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_9736;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, out_$p15, out_$i11);
    goto corral_source_split_9735;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 52)), $mul.ref(0, 1)), $mul.ref(out_$i12, 12)), $mul.ref(8, 1));
    goto corral_source_split_9734;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i7);
    goto corral_source_split_9733;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.0, out_$p10);
    goto corral_source_split_9732;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i8, 20)), $mul.ref(0, 1));
    goto corral_source_split_9731;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    goto corral_source_split_9730;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i7);
    goto corral_source_split_9729;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i8, out_$p10, out_$i11, out_$i12, out_$p15, out_$i16, out_$i17, out_$i7 := fimc_get_sensor_frame_desc_loop_$bb4(in_$p1, in_$i2, in_$p4, out_$i8, out_$p10, out_$i11, out_$i12, out_$p15, out_$i16, out_$i17, out_$i7);
    return;

  exit:
    return;
}



procedure fimc_get_sensor_frame_desc_loop_$bb4(in_$p1: ref, in_$i2: i32, in_$p4: ref, in_$i8: i64, in_$p10: ref, in_$i11: i32, in_$i12: i64, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i7: i32) returns (out_$i8: i64, out_$p10: ref, out_$i11: i32, out_$i12: i64, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i7: i32);
  modifies $M.27;



implementation fimc_pipeline_get_head_loop_$bb4(in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i64, in_$i22: i1, in_$p8: ref, in_$p9: ref, in_$p23: ref) returns (out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p13: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i64, out_$i22: i1, out_$p8: ref, out_$p9: ref, out_$p23: ref)
{

  entry:
    out_$p10, out_$i11, out_$i12, out_$p13, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p8, out_$p9, out_$p23 := in_$p10, in_$i11, in_$i12, in_$p13, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$i22, in_$p8, in_$p9, in_$p23;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9868;

  $bb10:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$p8, out_$p9 := out_$p16, out_$p18;
    goto $bb10_dummy;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    out_$p23 := out_$p16;
    assume true;
    goto $bb10;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i64(out_$i21, 0);
    goto corral_source_split_9885;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    out_$i21 := $and.i64(out_$i20, 2);
    goto corral_source_split_9884;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i64($M.0, out_$p19);
    goto corral_source_split_9883;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9882;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_9881;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_9880;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_9879;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p10, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9878;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    out_$p13 := out_$p8;
    assume true;
    goto $bb7;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i64(out_$i11, 0);
    goto corral_source_split_9872;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_9871;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} out_$p10 := media_entity_remote_pad(out_$p9);
    goto corral_source_split_9870;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p10, out_$i11, out_$i12, out_$p13, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p8, out_$p9, out_$p23 := fimc_pipeline_get_head_loop_$bb4(out_$p10, out_$i11, out_$i12, out_$p13, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p8, out_$p9, out_$p23);
    return;

  exit:
    return;
}



procedure fimc_pipeline_get_head_loop_$bb4(in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i64, in_$i22: i1, in_$p8: ref, in_$p9: ref, in_$p23: ref) returns (out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p13: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i64, out_$i22: i1, out_$p8: ref, out_$p9: ref, out_$p23: ref);



implementation fimc_pipeline_validate_loop_$bb79(in_$p3: ref, in_$p181: ref, in_$p191: ref, in_$i198: i64, in_$p200: ref, in_$i201: i32, in_$i202: i64, in_$p204: ref, in_$i205: i32, in_$i206: i1, in_$i207: i32, in_$p208: ref, in_$p209: ref, in_$i210: i16, in_$i211: i32, in_$i212: i1, in_$i197: i32) returns (out_$i198: i64, out_$p200: ref, out_$i201: i32, out_$i202: i64, out_$p204: ref, out_$i205: i32, out_$i206: i1, out_$i207: i32, out_$p208: ref, out_$p209: ref, out_$i210: i16, out_$i211: i32, out_$i212: i1, out_$i197: i32)
{

  entry:
    out_$i198, out_$p200, out_$i201, out_$i202, out_$p204, out_$i205, out_$i206, out_$i207, out_$p208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i197 := in_$i198, in_$p200, in_$i201, in_$i202, in_$p204, in_$i205, in_$i206, in_$i207, in_$p208, in_$p209, in_$i210, in_$i211, in_$i212, in_$i197;
    goto $bb79, exit;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_10526;

  $bb84:
    assume out_$i212 == 1;
    assume {:verifier.code 0} true;
    out_$i197 := out_$i207;
    goto $bb84_dummy;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    out_$i212 := $ugt.i32(out_$i211, out_$i207);
    goto corral_source_split_10542;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    out_$i211 := $zext.i16.i32(out_$i210);
    goto corral_source_split_10541;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    out_$i210 := $load.i16($M.0, out_$p209);
    goto corral_source_split_10540;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    out_$p209 := $add.ref($add.ref(out_$p208, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10539;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    out_$p208 := $load.ref($M.0, in_$p191);
    goto corral_source_split_10538;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i207 := $add.i32(out_$i197, 1);
    call {:si_unique_call 1709} {:cexpr "i___0"} boogie_si_record_i32(out_$i207);
    goto corral_source_split_10537;

  $bb82:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    out_$i206 := $ult.i32(out_$i201, out_$i205);
    goto corral_source_split_10533;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    out_$i205 := $load.i32($M.0, out_$p204);
    goto corral_source_split_10532;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    out_$p204 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 60)), $mul.ref(out_$i202, 20)), $mul.ref(0, 1));
    goto corral_source_split_10531;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    out_$i202 := $zext.i32.i64(out_$i197);
    goto corral_source_split_10530;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    out_$i201 := $load.i32($M.0, out_$p200);
    goto corral_source_split_10529;

  $bb80:
    assume {:verifier.code 0} true;
    out_$i198 := $zext.i32.i64(out_$i197);
    out_$p200 := $add.ref($add.ref($add.ref($add.ref(in_$p181, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(32, 1)), $mul.ref(out_$i198, 4));
    goto corral_source_split_10528;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb84_dummy:
    call {:si_unique_call 1} out_$i198, out_$p200, out_$i201, out_$i202, out_$p204, out_$i205, out_$i206, out_$i207, out_$p208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i197 := fimc_pipeline_validate_loop_$bb79(in_$p3, in_$p181, in_$p191, out_$i198, out_$p200, out_$i201, out_$i202, out_$p204, out_$i205, out_$i206, out_$i207, out_$p208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i197);
    return;

  exit:
    return;
}



procedure fimc_pipeline_validate_loop_$bb79(in_$p3: ref, in_$p181: ref, in_$p191: ref, in_$i198: i64, in_$p200: ref, in_$i201: i32, in_$i202: i64, in_$p204: ref, in_$i205: i32, in_$i206: i1, in_$i207: i32, in_$p208: ref, in_$p209: ref, in_$i210: i16, in_$i211: i32, in_$i212: i1, in_$i197: i32) returns (out_$i198: i64, out_$p200: ref, out_$i201: i32, out_$i202: i64, out_$p204: ref, out_$i205: i32, out_$i206: i1, out_$i207: i32, out_$p208: ref, out_$p209: ref, out_$i210: i16, out_$i211: i32, out_$i212: i1, out_$i197: i32);



implementation fimc_pipeline_validate_loop_$bb5(in_$p11: ref, in_$p13: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$p45: ref, in_$p46: ref) returns (out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$p45: ref, out_$p46: ref)
{

  entry:
    out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p19, out_$p20, out_$i21, out_$p45, out_$p46 := in_$p23, in_$p24, in_$i25, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p39, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p19, in_$p20, in_$i21, in_$p45, in_$p46;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10303;

  $bb14:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$p19, out_$p20, out_$i21 := out_$p40, out_$p39, out_$i41;
    goto $bb14_dummy;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    out_$p45, out_$p46 := out_$p39, out_$p40;
    assume true;
    goto $bb14;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    out_$i44 := $sgt.i32(out_$i43, out_$i41);
    goto corral_source_split_10330;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i16.i32(out_$i42);
    goto corral_source_split_10329;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i16($M.0, in_$p13);
    goto corral_source_split_10328;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i21, 1);
    call {:si_unique_call 1698} {:cexpr "i"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_10327;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10326;

  $bb8:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$p39, out_$p40 := out_$p20, out_$p19;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p39, out_$p40 := out_$p32, out_$p26;
    goto $bb13;

  $bb10:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    out_$p35, out_$p36 := out_$p26, out_$p32;
    assume true;
    goto $bb10;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, 0);
    goto corral_source_split_10318;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_10317;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} out_$p32 := media_entity_remote_pad(out_$p26);
    goto corral_source_split_10316;

  $bb7:
    assume out_$i31 == 1;
    goto corral_source_split_10315;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_10313;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    out_$i30 := $and.i32(out_$i29, 1);
    goto corral_source_split_10312;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    out_$i29 := $trunc.i64.i32(out_$i28);
    goto corral_source_split_10311;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.0, out_$p27);
    goto corral_source_split_10310;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 24)), $mul.ref(16, 1));
    goto corral_source_split_10309;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p24, $mul.ref(out_$i25, 24));
    goto corral_source_split_10308;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i21);
    goto corral_source_split_10307;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_10306;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(in_$p11, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_10305;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p19, out_$p20, out_$i21, out_$p45, out_$p46 := fimc_pipeline_validate_loop_$bb5(in_$p11, in_$p13, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p19, out_$p20, out_$i21, out_$p45, out_$p46);
    return;

  exit:
    return;
}



procedure fimc_pipeline_validate_loop_$bb5(in_$p11: ref, in_$p13: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$p45: ref, in_$p46: ref) returns (out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$p45: ref, out_$p46: ref);



implementation fimc_pipeline_validate_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$i14: i16, in_$i15: i32, in_$i16: i1, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$p45: ref, in_$p46: ref, in_$p17: ref, in_$p18: ref, in_$p37: ref, in_$p38: ref, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p60: ref, in_$i61: i32, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i32, in_$p78: ref, in_$p79: ref, in_$i80: i16, in_$i81: i32, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$i85: i1, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i64, in_$i91: i1, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$i106: i32, in_$i107: i32, in_$i108: i32, in_$i109: i1, in_$i110: i1, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: i16, in_$i117: i32, in_$p118: ref, in_$p119: ref, in_$i120: i64, in_$i121: i1, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$i126: i64, in_$i127: i1, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$i134: i64, in_$i135: i1, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$i142: i32, in_$i143: i32, in_$i144: i32, in_$i145: i1, in_$i146: i1, in_$p148: ref, in_$i149: i32, in_$p151: ref, in_$i152: i32, in_$i153: i1, in_$p155: ref, in_$i156: i32, in_$p158: ref, in_$i159: i32, in_$i160: i1, in_$p162: ref, in_$i163: i32, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$p169: ref, in_$p170: ref, in_$i171: i64, in_$i172: i64, in_$i173: i1, in_$p175: ref, in_$i176: i32, in_$i177: i1, in_$i178: i8, in_$i179: i1, in_$p180: ref, in_$p181: ref, in_$p183: ref, in_$p184: ref, in_$p185: ref, in_$p186: ref, in_$i187: i16, in_$i188: i32, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$p192: ref, in_$p193: ref, in_$i194: i16, in_$i195: i32, in_$i196: i1, in_$i198: i64, in_$p200: ref, in_$i201: i32, in_$i202: i64, in_$p204: ref, in_$i205: i32, in_$i206: i1, in_$i207: i32, in_$p208: ref, in_$p209: ref, in_$i210: i16, in_$i211: i32, in_$i212: i1, in_$i197: i32) returns (out_$p10: ref, out_$p11: ref, out_$p13: ref, out_$i14: i16, out_$i15: i32, out_$i16: i1, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$p45: ref, out_$p46: ref, out_$p17: ref, out_$p18: ref, out_$p37: ref, out_$p38: ref, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p60: ref, out_$i61: i32, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i32, out_$p78: ref, out_$p79: ref, out_$i80: i16, out_$i81: i32, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$i85: i1, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i64, out_$i91: i1, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$i106: i32, out_$i107: i32, out_$i108: i32, out_$i109: i1, out_$i110: i1, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: i16, out_$i117: i32, out_$p118: ref, out_$p119: ref, out_$i120: i64, out_$i121: i1, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$i126: i64, out_$i127: i1, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$i134: i64, out_$i135: i1, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$i142: i32, out_$i143: i32, out_$i144: i32, out_$i145: i1, out_$i146: i1, out_$p148: ref, out_$i149: i32, out_$p151: ref, out_$i152: i32, out_$i153: i1, out_$p155: ref, out_$i156: i32, out_$p158: ref, out_$i159: i32, out_$i160: i1, out_$p162: ref, out_$i163: i32, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$p169: ref, out_$p170: ref, out_$i171: i64, out_$i172: i64, out_$i173: i1, out_$p175: ref, out_$i176: i32, out_$i177: i1, out_$i178: i8, out_$i179: i1, out_$p180: ref, out_$p181: ref, out_$p183: ref, out_$p184: ref, out_$p185: ref, out_$p186: ref, out_$i187: i16, out_$i188: i32, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$p192: ref, out_$p193: ref, out_$i194: i16, out_$i195: i32, out_$i196: i1, out_$i198: i64, out_$p200: ref, out_$i201: i32, out_$i202: i64, out_$p204: ref, out_$i205: i32, out_$i206: i1, out_$i207: i32, out_$p208: ref, out_$p209: ref, out_$i210: i16, out_$i211: i32, out_$i212: i1, out_$i197: i32)
{

  entry:
    out_$p10, out_$p11, out_$p13, out_$i14, out_$i15, out_$i16, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p19, out_$p20, out_$i21, out_$p45, out_$p46, out_$p17, out_$p18, out_$p37, out_$p38, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p60, out_$i61, out_$p63, out_$p64, out_$i65, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$p113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$p125, out_$i126, out_$i127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$p133, out_$i134, out_$i135, out_$p136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$p148, out_$i149, out_$p151, out_$i152, out_$i153, out_$p155, out_$i156, out_$p158, out_$i159, out_$i160, out_$p162, out_$i163, out_$p165, out_$i166, out_$i167, out_$p169, out_$p170, out_$i171, out_$i172, out_$i173, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p180, out_$p181, out_$p183, out_$p184, out_$p185, out_$p186, out_$i187, out_$i188, out_$i189, out_$i190, out_$p191, out_$p192, out_$p193, out_$i194, out_$i195, out_$i196, out_$i198, out_$p200, out_$i201, out_$i202, out_$p204, out_$i205, out_$i206, out_$i207, out_$p208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i197 := in_$p10, in_$p11, in_$p13, in_$i14, in_$i15, in_$i16, in_$p23, in_$p24, in_$i25, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p39, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p19, in_$p20, in_$i21, in_$p45, in_$p46, in_$p17, in_$p18, in_$p37, in_$p38, in_$i47, in_$i48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p53, in_$i54, in_$i55, in_$i56, in_$p57, in_$p58, in_$p60, in_$i61, in_$p63, in_$p64, in_$i65, in_$p67, in_$p68, in_$p69, in_$i70, in_$i71, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$p78, in_$p79, in_$i80, in_$i81, in_$p82, in_$p83, in_$i84, in_$i85, in_$p86, in_$p87, in_$p88, in_$p89, in_$i90, in_$i91, in_$p92, in_$p93, in_$p94, in_$p95, in_$p96, in_$p97, in_$i98, in_$i99, in_$p100, in_$p101, in_$p102, in_$p103, in_$p104, in_$p105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p112, in_$p113, in_$p114, in_$p115, in_$i116, in_$i117, in_$p118, in_$p119, in_$i120, in_$i121, in_$p122, in_$p123, in_$p124, in_$p125, in_$i126, in_$i127, in_$p128, in_$p129, in_$p130, in_$p131, in_$p132, in_$p133, in_$i134, in_$i135, in_$p136, in_$p137, in_$p138, in_$p139, in_$p140, in_$p141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$p148, in_$i149, in_$p151, in_$i152, in_$i153, in_$p155, in_$i156, in_$p158, in_$i159, in_$i160, in_$p162, in_$i163, in_$p165, in_$i166, in_$i167, in_$p169, in_$p170, in_$i171, in_$i172, in_$i173, in_$p175, in_$i176, in_$i177, in_$i178, in_$i179, in_$p180, in_$p181, in_$p183, in_$p184, in_$p185, in_$p186, in_$i187, in_$i188, in_$i189, in_$i190, in_$p191, in_$p192, in_$p193, in_$i194, in_$i195, in_$i196, in_$i198, in_$p200, in_$i201, in_$i202, in_$p204, in_$i205, in_$i206, in_$i207, in_$p208, in_$p209, in_$i210, in_$i211, in_$i212, in_$i197;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10295;

  $bb88:
    assume {:verifier.code 0} true;
    out_$p10, out_$p11 := out_$p38, out_$p113;
    goto $bb88_dummy;

  $bb70:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb72:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb77:
    assume {:verifier.code 0} true;
    assume !(out_$i196 == 1);
    goto $bb78;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb85:
    assume !(out_$i212 == 1);
    goto corral_source_split_10544;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    out_$i212 := $ugt.i32(out_$i211, out_$i207);
    goto corral_source_split_10542;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    out_$i211 := $zext.i16.i32(out_$i210);
    goto corral_source_split_10541;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    out_$i210 := $load.i16($M.0, out_$p209);
    goto corral_source_split_10540;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    out_$p209 := $add.ref($add.ref(out_$p208, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10539;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    out_$p208 := $load.ref($M.0, out_$p191);
    goto corral_source_split_10538;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i207 := $add.i32(out_$i197, 1);
    call {:si_unique_call 1709} {:cexpr "i___0"} boogie_si_record_i32(out_$i207);
    goto corral_source_split_10537;

  $bb82:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    out_$i206 := $ult.i32(out_$i201, out_$i205);
    goto corral_source_split_10533;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    out_$i205 := $load.i32($M.0, out_$p204);
    goto corral_source_split_10532;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    out_$p204 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 60)), $mul.ref(out_$i202, 20)), $mul.ref(0, 1));
    goto corral_source_split_10531;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    out_$i202 := $zext.i32.i64(out_$i197);
    goto corral_source_split_10530;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    out_$i201 := $load.i32($M.0, out_$p200);
    goto corral_source_split_10529;

  $bb80:
    assume {:verifier.code 0} true;
    out_$i198 := $zext.i32.i64(out_$i197);
    out_$p200 := $add.ref($add.ref($add.ref($add.ref(out_$p181, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(32, 1)), $mul.ref(out_$i198, 4));
    goto corral_source_split_10528;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb79:
    call out_$i198, out_$p200, out_$i201, out_$i202, out_$p204, out_$i205, out_$i206, out_$i207, out_$p208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i197 := fimc_pipeline_validate_loop_$bb79(in_$p3, out_$p181, out_$p191, out_$i198, out_$p200, out_$i201, out_$i202, out_$p204, out_$i205, out_$i206, out_$i207, out_$p208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i197);
    goto $bb79_last;

  $bb79_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10526;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    out_$i197 := 0;
    goto $bb79;

  $bb84:
    assume out_$i212 == 1;
    assume {:verifier.code 0} true;
    out_$i197 := out_$i207;
    assume false;
    return;

  $bb76:
    assume out_$i196 == 1;
    goto corral_source_split_10524;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    out_$i196 := $ugt.i32(out_$i195, 0);
    goto corral_source_split_10522;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    out_$i195 := $zext.i16.i32(out_$i194);
    goto corral_source_split_10521;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    out_$i194 := $load.i16($M.0, out_$p193);
    goto corral_source_split_10520;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref(out_$p192, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10519;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    out_$p192 := $load.ref($M.0, out_$p191);
    goto corral_source_split_10518;

  $bb75:
    out_$p191 := $add.ref($add.ref($add.ref(out_$p181, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_10517;

  $bb74:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    out_$i190 := $slt.i32(out_$i189, 0);
    goto corral_source_split_10513;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} out_$i189 := fimc_get_sensor_frame_desc(out_$p114, out_$p183, out_$i188, 0);
    call {:si_unique_call 1708} {:cexpr "ret"} boogie_si_record_i32(out_$i189);
    goto corral_source_split_10512;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    out_$i188 := $zext.i16.i32(out_$i187);
    goto corral_source_split_10511;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    out_$i187 := $load.i16($M.0, out_$p186);
    goto corral_source_split_10510;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    out_$p186 := $add.ref($add.ref(out_$p185, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10509;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    out_$p185 := $load.ref($M.0, out_$p184);
    goto corral_source_split_10508;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    out_$p183 := $bitcast.ref.ref(in_$p3);
    out_$p184 := $add.ref($add.ref($add.ref(out_$p181, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(136, 1));
    goto corral_source_split_10507;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    goto corral_source_split_10506;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    out_$p181 := $load.ref($M.0, out_$p180);
    goto corral_source_split_10505;

  $bb71:
    assume out_$i179 == 1;
    out_$p180 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_10504;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    out_$i179 := $trunc.i8.i1(out_$i178);
    goto corral_source_split_10502;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    out_$i178 := $zext.i1.i8(out_$i177);
    call {:si_unique_call 1706} {:cexpr "tmp___4"} boogie_si_record_i8(out_$i178);
    goto corral_source_split_10501;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} out_$i177 := fimc_user_defined_mbus_fmt(out_$i176);
    goto corral_source_split_10500;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    out_$i176 := $load.i32($M.0, out_$p175);
    goto corral_source_split_10499;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_10498;

  $bb69:
    assume out_$i173 == 1;
    goto corral_source_split_10497;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i64(out_$i171, out_$i172);
    goto corral_source_split_10495;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    out_$i172 := $p2i.ref.i64(out_$p114);
    goto corral_source_split_10494;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    out_$i171 := $p2i.ref.i64(out_$p170);
    goto corral_source_split_10493;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    out_$p170 := $load.ref($M.0, out_$p169);
    goto corral_source_split_10492;

  $bb68:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref($add.ref(in_$p9, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_10491;

  $bb67:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    out_$i167 := $ne.i32(out_$i163, out_$i166);
    goto corral_source_split_10489;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i32($M.0, out_$p165);
    goto corral_source_split_10488;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_10487;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i32($M.0, out_$p162);
    goto corral_source_split_10486;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_10485;

  $bb65:
    assume !(out_$i160 == 1);
    goto corral_source_split_10484;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    out_$i160 := $ne.i32(out_$i156, out_$i159);
    goto corral_source_split_10482;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    out_$i159 := $load.i32($M.0, out_$p158);
    goto corral_source_split_10481;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_10480;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i32($M.0, out_$p155);
    goto corral_source_split_10479;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_10478;

  $bb63:
    assume !(out_$i153 == 1);
    goto corral_source_split_10477;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    out_$i153 := $ne.i32(out_$i149, out_$i152);
    goto corral_source_split_10475;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i32($M.0, out_$p151);
    goto corral_source_split_10474;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_10473;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i32($M.0, out_$p148);
    goto corral_source_split_10472;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_10471;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb56:
    assume {:verifier.code 0} true;
    assume !(out_$i145 == 1);
    goto $bb57;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i146 == 1);
    goto $bb57;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    out_$i146 := $ne.i32(out_$i144, $sub.i32(0, 515));
    goto corral_source_split_10467;

  $bb55:
    assume out_$i145 == 1;
    goto corral_source_split_10466;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    out_$i145 := $slt.i32(out_$i144, 0);
    goto corral_source_split_10464;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_10463;

  $bb47:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    out_$i144 := $sub.i32(0, 19);
    goto $bb54;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    out_$i144 := out_$i143;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_10461;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i143 := $sub.i32(0, 515);
    goto $bb53;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    out_$i143 := out_$i142;
    goto $bb53;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    out_$p141 := $load.ref($M.0, out_$p140);
    call {:si_unique_call 1703} out_$i142 := devirtbounce.11(out_$p141, out_$p114, $0.ref, in_$p2);
    call {:si_unique_call 1704} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i142);
    goto corral_source_split_10459;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(out_$p139, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_10458;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    out_$p139 := $load.ref($M.0, out_$p138);
    goto corral_source_split_10457;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(out_$p137, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_10456;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    out_$p137 := $load.ref($M.0, out_$p136);
    goto corral_source_split_10455;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(out_$p114, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_10454;

  $bb51:
    assume out_$i135 == 1;
    goto corral_source_split_10453;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    out_$i135 := $ne.i64(out_$i134, 0);
    goto corral_source_split_10451;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    out_$i134 := $p2i.ref.i64(out_$p133);
    goto corral_source_split_10450;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    out_$p133 := $load.ref($M.0, out_$p132);
    goto corral_source_split_10449;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(out_$p131, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_10448;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    out_$p131 := $load.ref($M.0, out_$p130);
    goto corral_source_split_10447;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(out_$p129, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_10446;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    out_$p129 := $load.ref($M.0, out_$p128);
    goto corral_source_split_10445;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(out_$p114, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_10444;

  $bb48:
    assume out_$i127 == 1;
    goto corral_source_split_10443;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    out_$i127 := $ne.i64(out_$i126, 0);
    goto corral_source_split_10441;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    out_$i126 := $p2i.ref.i64(out_$p125);
    goto corral_source_split_10440;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    out_$p125 := $load.ref($M.0, out_$p124);
    goto corral_source_split_10439;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(out_$p123, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_10438;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.0, out_$p122);
    goto corral_source_split_10437;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(out_$p114, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_10436;

  $bb46:
    assume out_$i121 == 1;
    goto corral_source_split_10435;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    out_$i121 := $ne.i64(out_$i120, 0);
    goto corral_source_split_10395;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    out_$i120 := $p2i.ref.i64(out_$p114);
    goto corral_source_split_10394;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p119, 1);
    goto corral_source_split_10393;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_10392;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p118, out_$i117);
    goto corral_source_split_10391;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(in_$p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_10390;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    out_$i117 := $zext.i16.i32(out_$i116);
    goto corral_source_split_10389;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i16($M.0, out_$p115);
    goto corral_source_split_10388;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(out_$p37, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_10387;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    out_$p114 := $bitcast.ref.ref(out_$p113);
    goto corral_source_split_10386;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    out_$p113 := $load.ref($M.0, out_$p112);
    goto corral_source_split_10385;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(out_$p37, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_10384;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p78, out_$i76);
    goto corral_source_split_10382;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_10381;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_10380;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    out_$i76 := 0;
    goto $bb28;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i75;
    goto $bb28;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.0, out_$p74);
    goto corral_source_split_10376;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p73, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10375;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.0, out_$p72);
    goto corral_source_split_10374;

  $bb26:
    assume out_$i71 == 1;
    out_$p72 := $add.ref($add.ref($add.ref(out_$p58, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_10373;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i64(out_$i70, 0);
    goto corral_source_split_10360;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    out_$i70 := $p2i.ref.i64(out_$p69);
    goto corral_source_split_10359;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_10358;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p67, out_$i65);
    out_$p68 := $add.ref($add.ref($add.ref(out_$p58, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_10357;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_10356;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, out_$p64);
    goto corral_source_split_10355;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p63, out_$i61);
    out_$p64 := $add.ref($add.ref($add.ref(out_$p58, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_10354;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 88)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_10353;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    goto corral_source_split_10352;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref($add.ref(out_$p58, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_10351;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_10350;

  $bb24:
    assume out_$i56 == 1;
    out_$p57 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(0, 1));
    goto corral_source_split_10349;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i64(out_$i54, out_$i55);
    goto corral_source_split_10347;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_10346;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_10345;

  $bb23:
    out_$p53 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1));
    goto corral_source_split_10344;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 131072);
    goto corral_source_split_10340;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} out_$i51 := media_entity_type(out_$p50);
    call {:si_unique_call 1700} {:cexpr "tmp"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_10339;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_10338;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p37, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_10337;

  $bb18:
    assume !(out_$i48 == 1);
    goto corral_source_split_10336;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i64(out_$i47, 0);
    goto corral_source_split_10324;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    out_$i47 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_10323;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10322;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p37, out_$p38 := out_$p17, out_$p18;
    goto $bb11;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    out_$p37, out_$p38 := out_$p36, out_$p35;
    goto $bb11;

  $bb9:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10320;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    out_$p35, out_$p36 := out_$p26, out_$p32;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, 0);
    goto corral_source_split_10318;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_10317;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} out_$p32 := media_entity_remote_pad(out_$p26);
    goto corral_source_split_10316;

  $bb7:
    assume out_$i31 == 1;
    goto corral_source_split_10315;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_10313;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    out_$i30 := $and.i32(out_$i29, 1);
    goto corral_source_split_10312;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    out_$i29 := $trunc.i64.i32(out_$i28);
    goto corral_source_split_10311;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.0, out_$p27);
    goto corral_source_split_10310;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 24)), $mul.ref(16, 1));
    goto corral_source_split_10309;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p24, $mul.ref(out_$i25, 24));
    goto corral_source_split_10308;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i21);
    goto corral_source_split_10307;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_10306;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_10305;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb5:
    call out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p19, out_$p20, out_$i21, out_$p45, out_$p46 := fimc_pipeline_validate_loop_$bb5(out_$p11, out_$p13, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p19, out_$p20, out_$i21, out_$p45, out_$p46);
    goto $bb5_last;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10303;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    out_$p19, out_$p20, out_$i21 := out_$p10, $0.ref, 0;
    goto $bb5;

  $bb14:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$p19, out_$p20, out_$i21 := out_$p40, out_$p39, out_$i41;
    assume false;
    return;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    out_$p45, out_$p46 := out_$p39, out_$p40;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    out_$i44 := $sgt.i32(out_$i43, out_$i41);
    goto corral_source_split_10330;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i16.i32(out_$i42);
    goto corral_source_split_10329;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i16($M.0, out_$p13);
    goto corral_source_split_10328;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i21, 1);
    call {:si_unique_call 1698} {:cexpr "i"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_10327;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10326;

  $bb8:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$p39, out_$p40 := out_$p20, out_$p19;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p39, out_$p40 := out_$p32, out_$p26;
    goto $bb13;

  $bb10:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb2:
    assume out_$i16 == 1;
    goto corral_source_split_10301;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    out_$p17, out_$p18 := $0.ref, out_$p10;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    out_$i16 := $sgt.i32(out_$i15, 0);
    goto corral_source_split_10299;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(out_$i14);
    goto corral_source_split_10298;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i16($M.0, out_$p13);
    goto corral_source_split_10297;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(60, 1));
    goto corral_source_split_10296;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb3:
    assume {:verifier.code 0} true;
    assume !(out_$i16 == 1);
    goto $bb4;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    out_$p17, out_$p18 := out_$p45, out_$p46;
    goto $bb4;

  $bb15:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10332;

  $bb27:
    assume !(out_$i71 == 1);
    goto corral_source_split_10378;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume {:verifier.code 0} true;
    assume !(out_$i109 == 1);
    goto $bb41;

  $bb43:
    assume {:verifier.code 0} true;
    assume !(out_$i110 == 1);
    goto $bb41;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i32(out_$i108, $sub.i32(0, 515));
    goto corral_source_split_10429;

  $bb39:
    assume out_$i109 == 1;
    goto corral_source_split_10428;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    out_$i109 := $slt.i32(out_$i108, 0);
    goto corral_source_split_10426;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_10425;

  $bb31:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    out_$i108 := $sub.i32(0, 19);
    goto $bb38;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    out_$i108 := out_$i107;
    goto $bb38;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_10423;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i107 := $sub.i32(0, 515);
    goto $bb37;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    out_$i107 := out_$i106;
    goto $bb37;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    call {:si_unique_call 1701} out_$i106 := devirtbounce.11(out_$p105, out_$p11, $0.ref, in_$p1);
    call {:si_unique_call 1702} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_10421;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(out_$p103, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_10420;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.0, out_$p102);
    goto corral_source_split_10419;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(out_$p101, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_10418;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    out_$p101 := $load.ref($M.0, out_$p100);
    goto corral_source_split_10417;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p11, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_10416;

  $bb35:
    assume out_$i99 == 1;
    goto corral_source_split_10415;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i64(out_$i98, 0);
    goto corral_source_split_10413;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    out_$i98 := $p2i.ref.i64(out_$p97);
    goto corral_source_split_10412;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    out_$p97 := $load.ref($M.0, out_$p96);
    goto corral_source_split_10411;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p95, $mul.ref(0, 112)), $mul.ref(24, 1));
    goto corral_source_split_10410;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_10409;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p93, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_10408;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.0, out_$p92);
    goto corral_source_split_10407;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p11, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_10406;

  $bb32:
    assume out_$i91 == 1;
    goto corral_source_split_10405;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i64(out_$i90, 0);
    goto corral_source_split_10403;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    out_$i90 := $p2i.ref.i64(out_$p89);
    goto corral_source_split_10402;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    out_$p89 := $load.ref($M.0, out_$p88);
    goto corral_source_split_10401;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p87, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_10400;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    out_$p87 := $load.ref($M.0, out_$p86);
    goto corral_source_split_10399;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p11, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_10398;

  $bb30:
    assume out_$i85 == 1;
    goto corral_source_split_10397;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i64(out_$i84, 0);
    goto corral_source_split_10371;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    out_$i84 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_10370;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p83, 1);
    goto corral_source_split_10369;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_10368;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p82, out_$i81);
    goto corral_source_split_10367;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p1, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_10366;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i16.i32(out_$i80);
    goto corral_source_split_10365;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i16($M.0, out_$p79);
    goto corral_source_split_10364;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p38, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_10363;

  $bb25:
    assume !(out_$i56 == 1);
    goto corral_source_split_10362;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i91 == 1);
    goto $bb34;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i99 == 1);
    goto $bb34;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(out_$i127 == 1);
    goto $bb50;

  $bb52:
    assume {:verifier.code 0} true;
    assume !(out_$i135 == 1);
    goto $bb50;

  $bb88_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$p13, out_$i14, out_$i15, out_$i16, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p19, out_$p20, out_$i21, out_$p45, out_$p46, out_$p17, out_$p18, out_$p37, out_$p38, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p60, out_$i61, out_$p63, out_$p64, out_$i65, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$p113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$p125, out_$i126, out_$i127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$p133, out_$i134, out_$i135, out_$p136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$p148, out_$i149, out_$p151, out_$i152, out_$i153, out_$p155, out_$i156, out_$p158, out_$i159, out_$i160, out_$p162, out_$i163, out_$p165, out_$i166, out_$i167, out_$p169, out_$p170, out_$i171, out_$i172, out_$i173, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p180, out_$p181, out_$p183, out_$p184, out_$p185, out_$p186, out_$i187, out_$i188, out_$i189, out_$i190, out_$p191, out_$p192, out_$p193, out_$i194, out_$i195, out_$i196, out_$i198, out_$p200, out_$i201, out_$i202, out_$p204, out_$i205, out_$i206, out_$i207, out_$p208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i197 := fimc_pipeline_validate_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p9, out_$p10, out_$p11, out_$p13, out_$i14, out_$i15, out_$i16, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p19, out_$p20, out_$i21, out_$p45, out_$p46, out_$p17, out_$p18, out_$p37, out_$p38, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p60, out_$i61, out_$p63, out_$p64, out_$i65, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$i84, out_$i85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$p103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$p113, out_$p114, out_$p115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$p125, out_$i126, out_$i127, out_$p128, out_$p129, out_$p130, out_$p131, out_$p132, out_$p133, out_$i134, out_$i135, out_$p136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$p148, out_$i149, out_$p151, out_$i152, out_$i153, out_$p155, out_$i156, out_$p158, out_$i159, out_$i160, out_$p162, out_$i163, out_$p165, out_$i166, out_$i167, out_$p169, out_$p170, out_$i171, out_$i172, out_$i173, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p180, out_$p181, out_$p183, out_$p184, out_$p185, out_$p186, out_$i187, out_$i188, out_$i189, out_$i190, out_$p191, out_$p192, out_$p193, out_$i194, out_$i195, out_$i196, out_$i198, out_$p200, out_$i201, out_$i202, out_$p204, out_$i205, out_$i206, out_$i207, out_$p208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i197);
    return;

  exit:
    return;
}



procedure fimc_pipeline_validate_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$i14: i16, in_$i15: i32, in_$i16: i1, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$p45: ref, in_$p46: ref, in_$p17: ref, in_$p18: ref, in_$p37: ref, in_$p38: ref, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i54: i64, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p60: ref, in_$i61: i32, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i32, in_$i76: i32, in_$p78: ref, in_$p79: ref, in_$i80: i16, in_$i81: i32, in_$p82: ref, in_$p83: ref, in_$i84: i64, in_$i85: i1, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i64, in_$i91: i1, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$i99: i1, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$i106: i32, in_$i107: i32, in_$i108: i32, in_$i109: i1, in_$i110: i1, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: i16, in_$i117: i32, in_$p118: ref, in_$p119: ref, in_$i120: i64, in_$i121: i1, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$i126: i64, in_$i127: i1, in_$p128: ref, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$i134: i64, in_$i135: i1, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$i142: i32, in_$i143: i32, in_$i144: i32, in_$i145: i1, in_$i146: i1, in_$p148: ref, in_$i149: i32, in_$p151: ref, in_$i152: i32, in_$i153: i1, in_$p155: ref, in_$i156: i32, in_$p158: ref, in_$i159: i32, in_$i160: i1, in_$p162: ref, in_$i163: i32, in_$p165: ref, in_$i166: i32, in_$i167: i1, in_$p169: ref, in_$p170: ref, in_$i171: i64, in_$i172: i64, in_$i173: i1, in_$p175: ref, in_$i176: i32, in_$i177: i1, in_$i178: i8, in_$i179: i1, in_$p180: ref, in_$p181: ref, in_$p183: ref, in_$p184: ref, in_$p185: ref, in_$p186: ref, in_$i187: i16, in_$i188: i32, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$p192: ref, in_$p193: ref, in_$i194: i16, in_$i195: i32, in_$i196: i1, in_$i198: i64, in_$p200: ref, in_$i201: i32, in_$i202: i64, in_$p204: ref, in_$i205: i32, in_$i206: i1, in_$i207: i32, in_$p208: ref, in_$p209: ref, in_$i210: i16, in_$i211: i32, in_$i212: i1, in_$i197: i32) returns (out_$p10: ref, out_$p11: ref, out_$p13: ref, out_$i14: i16, out_$i15: i32, out_$i16: i1, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$p45: ref, out_$p46: ref, out_$p17: ref, out_$p18: ref, out_$p37: ref, out_$p38: ref, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i54: i64, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p60: ref, out_$i61: i32, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i32, out_$i76: i32, out_$p78: ref, out_$p79: ref, out_$i80: i16, out_$i81: i32, out_$p82: ref, out_$p83: ref, out_$i84: i64, out_$i85: i1, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i64, out_$i91: i1, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$i99: i1, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$i106: i32, out_$i107: i32, out_$i108: i32, out_$i109: i1, out_$i110: i1, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: i16, out_$i117: i32, out_$p118: ref, out_$p119: ref, out_$i120: i64, out_$i121: i1, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$i126: i64, out_$i127: i1, out_$p128: ref, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$i134: i64, out_$i135: i1, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$i142: i32, out_$i143: i32, out_$i144: i32, out_$i145: i1, out_$i146: i1, out_$p148: ref, out_$i149: i32, out_$p151: ref, out_$i152: i32, out_$i153: i1, out_$p155: ref, out_$i156: i32, out_$p158: ref, out_$i159: i32, out_$i160: i1, out_$p162: ref, out_$i163: i32, out_$p165: ref, out_$i166: i32, out_$i167: i1, out_$p169: ref, out_$p170: ref, out_$i171: i64, out_$i172: i64, out_$i173: i1, out_$p175: ref, out_$i176: i32, out_$i177: i1, out_$i178: i8, out_$i179: i1, out_$p180: ref, out_$p181: ref, out_$p183: ref, out_$p184: ref, out_$p185: ref, out_$p186: ref, out_$i187: i16, out_$i188: i32, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$p192: ref, out_$p193: ref, out_$i194: i16, out_$i195: i32, out_$i196: i1, out_$i198: i64, out_$p200: ref, out_$i201: i32, out_$i202: i64, out_$p204: ref, out_$i205: i32, out_$i206: i1, out_$i207: i32, out_$p208: ref, out_$p209: ref, out_$i210: i16, out_$i211: i32, out_$i212: i1, out_$i197: i32);
  modifies $M.27, $M.0, $CurrAddr, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.25;



implementation queue_setup_loop_$bb11(in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p39: ref, in_$i44: i64, in_$p46: ref, in_$i47: i8, in_$i48: i64, in_$i49: i64, in_$i50: i64, in_$i51: i32, in_$i52: i64, in_$i53: i1, in_$i54: i64, in_$p57: ref, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i64, in_$p62: ref, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i68: i64, in_$p70: ref, in_$i71: i32, in_$i72: i64, in_$p73: ref, in_$i75: i64, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i64, in_$p82: ref, in_$i74: i32, in_$i63: i32, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i88: i64, in_$p89: ref, in_$i90: i32, in_$i91: i16, in_$i92: i32, in_$i93: i1, in_$i43: i32) returns (out_$i44: i64, out_$p46: ref, out_$i47: i8, out_$i48: i64, out_$i49: i64, out_$i50: i64, out_$i51: i32, out_$i52: i64, out_$i53: i1, out_$i54: i64, out_$p57: ref, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i64, out_$p62: ref, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i68: i64, out_$p70: ref, out_$i71: i32, out_$i72: i64, out_$p73: ref, out_$i75: i64, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i64, out_$p82: ref, out_$i74: i32, out_$i63: i32, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i88: i64, out_$p89: ref, out_$i90: i32, out_$i91: i16, out_$i92: i32, out_$i93: i1, out_$i43: i32)
{

  entry:
    out_$i44, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p70, out_$i71, out_$i72, out_$p73, out_$i75, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i74, out_$i63, out_$p83, out_$p84, out_$p85, out_$p86, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i43 := in_$i44, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$p57, in_$i58, in_$i59, in_$i60, in_$i61, in_$p62, in_$p64, in_$i65, in_$i66, in_$i67, in_$i68, in_$p70, in_$i71, in_$i72, in_$p73, in_$i75, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$p82, in_$i74, in_$i63, in_$p83, in_$p84, in_$p85, in_$p86, in_$i88, in_$p89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i43;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_10605;

  $bb25:
    assume out_$i93 == 1;
    assume {:verifier.code 0} true;
    out_$i43 := out_$i90;
    goto $bb25_dummy;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    out_$i93 := $sgt.i32(out_$i92, out_$i90);
    goto corral_source_split_10650;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    out_$i92 := $zext.i16.i32(out_$i91);
    goto corral_source_split_10649;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i16($M.0, in_$p39);
    goto corral_source_split_10648;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    out_$i90 := $add.i32(out_$i63, 1);
    call {:si_unique_call 1721} {:cexpr "i"} boogie_si_record_i32(out_$i90);
    goto corral_source_split_10647;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p89, out_$p86);
    goto corral_source_split_10646;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref(in_$p5, $mul.ref(out_$i88, 8));
    goto corral_source_split_10645;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    out_$i88 := $sext.i32.i64(out_$i63);
    goto corral_source_split_10644;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    goto corral_source_split_10643;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.0, out_$p85);
    goto corral_source_split_10642;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p84, $mul.ref(0, 5568)), $mul.ref(5560, 1));
    goto corral_source_split_10641;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.0, out_$p83);
    goto corral_source_split_10640;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p8, $mul.ref(0, 880)), $mul.ref(400, 1));
    goto corral_source_split_10639;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_10638;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i63 := out_$i74;
    goto $bb18;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i43;
    goto $bb18;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p62, out_$i60);
    goto corral_source_split_10636;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref(in_$p4, $mul.ref(out_$i61, 4));
    goto corral_source_split_10635;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(out_$i43);
    goto corral_source_split_10634;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_10633;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i58;
    goto $bb17;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i51;
    goto $bb17;

  $bb15:
    assume out_$i59 == 1;
    goto corral_source_split_10629;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    out_$i59 := $ugt.i32(out_$i51, out_$i58);
    goto corral_source_split_10621;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.0, out_$p57);
    call {:si_unique_call 1720} {:cexpr "_max2"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_10620;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($add.ref($add.ref(in_$p24, $mul.ref(0, 192)), $mul.ref(20, 1)), $mul.ref(out_$i54, 20)), $mul.ref(0, 1));
    goto corral_source_split_10619;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i43);
    goto corral_source_split_10618;

  $bb13:
    assume out_$i53 == 1;
    goto corral_source_split_10617;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i64(out_$i52, 0);
    goto corral_source_split_10615;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    out_$i52 := $p2i.ref.i64(in_$p24);
    goto corral_source_split_10614;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i64.i32(out_$i50);
    call {:si_unique_call 1719} {:cexpr "size"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_10613;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    out_$i50 := $udiv.i64(out_$i49, 8);
    goto corral_source_split_10612;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    out_$i49 := $mul.i64(out_$i48, in_$i26);
    goto corral_source_split_10611;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i8.i64(out_$i47);
    goto corral_source_split_10610;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i8($M.0, out_$p46);
    goto corral_source_split_10609;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref($add.ref(in_$p25, $mul.ref(0, 40)), $mul.ref(29, 1)), $mul.ref(out_$i44, 1));
    goto corral_source_split_10608;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i44 := $sext.i32.i64(out_$i43);
    goto corral_source_split_10607;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16:
    assume !(out_$i59 == 1);
    goto corral_source_split_10631;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p82, out_$i80);
    assume {:verifier.code 0} true;
    out_$i74 := out_$i43;
    goto $bb21;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    out_$i74 := out_$i43;
    goto $bb21;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p73, out_$i71);
    goto corral_source_split_10657;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref(in_$p4, $mul.ref(out_$i72, 4));
    goto corral_source_split_10656;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i43);
    goto corral_source_split_10655;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.0, out_$p70);
    goto corral_source_split_10654;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i43);
    out_$p70 := $add.ref($add.ref($add.ref($add.ref(in_$p8, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(32, 1)), $mul.ref(out_$i68, 4));
    goto corral_source_split_10653;

  $bb19:
    assume out_$i67 == 1;
    goto corral_source_split_10652;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i66, 0);
    goto corral_source_split_10627;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    out_$i66 := $and.i32(out_$i65, 384);
    goto corral_source_split_10626;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, out_$p64);
    goto corral_source_split_10625;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p25, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_10624;

  $bb14:
    assume !(out_$i53 == 1);
    goto corral_source_split_10623;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref(in_$p4, $mul.ref(out_$i81, 4));
    goto corral_source_split_10670;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    out_$i81 := $sext.i32.i64(out_$i43);
    goto corral_source_split_10669;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_10668;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    out_$i80 := out_$i78;
    goto $bb24;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    out_$i80 := out_$i51;
    goto $bb24;

  $bb22:
    assume out_$i79 == 1;
    goto corral_source_split_10664;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    out_$i79 := $ugt.i32(out_$i51, out_$i78);
    goto corral_source_split_10662;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.0, out_$p77);
    call {:si_unique_call 1722} {:cexpr "__max2"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_10661;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i32.i64(out_$i43);
    out_$p77 := $add.ref($add.ref($add.ref($add.ref(in_$p8, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(32, 1)), $mul.ref(out_$i75, 4));
    goto corral_source_split_10660;

  $bb20:
    assume !(out_$i67 == 1);
    goto corral_source_split_10659;

  $bb23:
    assume !(out_$i79 == 1);
    goto corral_source_split_10666;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i44, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p70, out_$i71, out_$i72, out_$p73, out_$i75, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i74, out_$i63, out_$p83, out_$p84, out_$p85, out_$p86, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i43 := queue_setup_loop_$bb11(in_$p4, in_$p5, in_$p8, in_$p24, in_$p25, in_$i26, in_$p39, out_$i44, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p70, out_$i71, out_$i72, out_$p73, out_$i75, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$p82, out_$i74, out_$i63, out_$p83, out_$p84, out_$p85, out_$p86, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i43);
    return;

  exit:
    return;
}



procedure queue_setup_loop_$bb11(in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p39: ref, in_$i44: i64, in_$p46: ref, in_$i47: i8, in_$i48: i64, in_$i49: i64, in_$i50: i64, in_$i51: i32, in_$i52: i64, in_$i53: i1, in_$i54: i64, in_$p57: ref, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i64, in_$p62: ref, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i68: i64, in_$p70: ref, in_$i71: i32, in_$i72: i64, in_$p73: ref, in_$i75: i64, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i64, in_$p82: ref, in_$i74: i32, in_$i63: i32, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i88: i64, in_$p89: ref, in_$i90: i32, in_$i91: i16, in_$i92: i32, in_$i93: i1, in_$i43: i32) returns (out_$i44: i64, out_$p46: ref, out_$i47: i8, out_$i48: i64, out_$i49: i64, out_$i50: i64, out_$i51: i32, out_$i52: i64, out_$i53: i1, out_$i54: i64, out_$p57: ref, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i64, out_$p62: ref, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i68: i64, out_$p70: ref, out_$i71: i32, out_$i72: i64, out_$p73: ref, out_$i75: i64, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i64, out_$p82: ref, out_$i74: i32, out_$i63: i32, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i88: i64, out_$p89: ref, out_$i90: i32, out_$i91: i16, out_$i92: i32, out_$i93: i1, out_$i43: i32);
  modifies $M.0;



implementation buffer_prepare_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p13: ref, in_$i20: i64, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$i26: i64, in_$i27: i1, in_$i28: i32, in_$i29: i64, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$i19: i32) returns (out_$i20: i64, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$i26: i64, out_$i27: i1, out_$i28: i32, out_$i29: i64, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$i19: i32)
{

  entry:
    out_$i20, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i19 := in_$i20, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i39, in_$p40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i19;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_10698;

  $bb13:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i39;
    goto $bb13_dummy;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    out_$i44 := $sgt.i32(out_$i43, out_$i39);
    goto corral_source_split_10721;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i16.i32(out_$i42);
    goto corral_source_split_10720;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i16($M.0, out_$p41);
    goto corral_source_split_10719;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10718;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, in_$p13);
    goto corral_source_split_10717;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i19, 1);
    call {:si_unique_call 1730} {:cexpr "i"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_10716;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} vb2_set_plane_payload(in_$p0, out_$i19, out_$i25);
    goto corral_source_split_10715;

  $bb11:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    out_$i28, out_$i29 := out_$i19, out_$i25;
    assume true;
    goto $bb11;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    out_$i27 := $ult.i64(out_$i26, out_$i25);
    goto corral_source_split_10705;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} out_$i26 := vb2_plane_size(in_$p0, out_$i19);
    call {:si_unique_call 1725} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_10704;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i32.i64(out_$i24);
    call {:si_unique_call 1723} {:cexpr "size"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_10703;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, out_$p23);
    goto corral_source_split_10702;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 880)), $mul.ref(152, 1)), $mul.ref(32, 1)), $mul.ref(out_$i20, 4));
    goto corral_source_split_10701;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i19);
    goto corral_source_split_10700;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i20, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i19 := buffer_prepare_loop_$bb8(in_$p0, in_$p5, in_$p13, out_$i20, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i19);
    return;

  exit:
    return;
}



procedure buffer_prepare_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p13: ref, in_$i20: i64, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$i26: i64, in_$i27: i1, in_$i28: i32, in_$i29: i64, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$i19: i32) returns (out_$i20: i64, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$i26: i64, out_$i27: i1, out_$i28: i32, out_$i29: i64, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$i19: i32);
  modifies $M.0;



implementation __fimc_pipeline_s_stream_loop_$bb31(in_$p2: ref, in_$i3: i8, in_$p24: ref, in_$i92: i64, in_$i93: i1, in_$i94: i32, in_$i95: i64, in_$p97: ref, in_$i98: i8, in_$i99: i32, in_$i100: i64, in_$p102: ref, in_$p103: ref, in_$i104: i64, in_$i105: i1, in_$i106: i64, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i64, in_$i115: i1, in_$i116: i64, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$i126: i64, in_$i127: i1, in_$i128: i64, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$i138: i64, in_$p140: ref, in_$p141: ref, in_$i142: i1, in_$i143: i1, in_$i144: i32, in_$i146: i32, in_$i147: i1, in_$i91: i32, in_vslice_dummy_var_108: i32) returns (out_$i92: i64, out_$i93: i1, out_$i94: i32, out_$i95: i64, out_$p97: ref, out_$i98: i8, out_$i99: i32, out_$i100: i64, out_$p102: ref, out_$p103: ref, out_$i104: i64, out_$i105: i1, out_$i106: i64, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i64, out_$i115: i1, out_$i116: i64, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$i126: i64, out_$i127: i1, out_$i128: i64, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$i138: i64, out_$p140: ref, out_$p141: ref, out_$i142: i1, out_$i143: i1, out_$i144: i32, out_$i146: i32, out_$i147: i1, out_$i91: i32, out_vslice_dummy_var_108: i32)
{

  entry:
    out_$i92, out_$i93, out_$i94, out_$i95, out_$p97, out_$i98, out_$i99, out_$i100, out_$p102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$p135, out_$p136, out_$p137, out_$i138, out_$p140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i146, out_$i147, out_$i91, out_vslice_dummy_var_108 := in_$i92, in_$i93, in_$i94, in_$i95, in_$p97, in_$i98, in_$i99, in_$i100, in_$p102, in_$p103, in_$i104, in_$i105, in_$i106, in_$p108, in_$p109, in_$p110, in_$p111, in_$p112, in_$p113, in_$i114, in_$i115, in_$i116, in_$p118, in_$p119, in_$p120, in_$p121, in_$p122, in_$p123, in_$p124, in_$p125, in_$i126, in_$i127, in_$i128, in_$p130, in_$p131, in_$p132, in_$p133, in_$p134, in_$p135, in_$p136, in_$p137, in_$i138, in_$p140, in_$p141, in_$i142, in_$i143, in_$i144, in_$i146, in_$i147, in_$i91, in_vslice_dummy_var_108;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_11088;

  $bb42:
    assume out_$i147 == 1;
    assume {:verifier.code 0} true;
    out_$i91 := out_$i146;
    goto $bb42_dummy;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    out_$i147 := $sge.i32(out_$i146, 0);
    goto corral_source_split_11145;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i146 := $sub.i32(out_$i91, 1);
    call {:si_unique_call 1780} {:cexpr "i"} boogie_si_record_i32(out_$i146);
    goto corral_source_split_11144;

  $bb34:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_258:
    goto corral_source_split_11142;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    out_$i144 := $zext.i1.i32(out_$i143);
    call {:si_unique_call 1779} out_vslice_dummy_var_108 := devirtbounce.13(out_$p137, out_$p141, out_$i144);
    goto SeqInstr_257;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    out_$i143 := $xor.i1(out_$i142, 1);
    goto corral_source_split_11141;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    out_$i142 := $trunc.i8.i1(in_$i3);
    goto corral_source_split_11140;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    out_$p141 := $load.ref($M.0, out_$p140);
    goto corral_source_split_11139;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref($add.ref(in_$p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(out_$i138, 8));
    goto corral_source_split_11138;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    out_$i138 := $zext.i32.i64(out_$i99);
    goto corral_source_split_11137;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    out_$p137 := $load.ref($M.0, out_$p136);
    goto corral_source_split_11136;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(out_$p135, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_11135;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    out_$p135 := $load.ref($M.0, out_$p134);
    goto corral_source_split_11134;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(out_$p133, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11133;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    out_$p133 := $load.ref($M.0, out_$p132);
    goto corral_source_split_11132;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(out_$p131, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11131;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    out_$p131 := $load.ref($M.0, out_$p130);
    goto corral_source_split_11130;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref($add.ref(in_$p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(out_$i128, 8));
    goto corral_source_split_11129;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i32.i64(out_$i99);
    goto corral_source_split_11128;

  $bb38:
    assume out_$i127 == 1;
    goto corral_source_split_11127;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    out_$i127 := $ne.i64(out_$i126, 0);
    goto corral_source_split_11125;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    out_$i126 := $p2i.ref.i64(out_$p125);
    goto corral_source_split_11124;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    out_$p125 := $load.ref($M.0, out_$p124);
    goto corral_source_split_11123;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(out_$p123, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_11122;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.0, out_$p122);
    goto corral_source_split_11121;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(out_$p121, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11120;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    out_$p121 := $load.ref($M.0, out_$p120);
    goto corral_source_split_11119;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(out_$p119, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11118;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    out_$p119 := $load.ref($M.0, out_$p118);
    goto corral_source_split_11117;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref($add.ref(in_$p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(out_$i116, 8));
    goto corral_source_split_11116;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    out_$i116 := $zext.i32.i64(out_$i99);
    goto corral_source_split_11115;

  $bb35:
    assume out_$i115 == 1;
    goto corral_source_split_11114;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i64(out_$i114, 0);
    goto corral_source_split_11112;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    out_$i114 := $p2i.ref.i64(out_$p113);
    goto corral_source_split_11111;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    out_$p113 := $load.ref($M.0, out_$p112);
    goto corral_source_split_11110;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(out_$p111, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_11109;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    out_$p111 := $load.ref($M.0, out_$p110);
    goto corral_source_split_11108;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(out_$p109, $mul.ref(0, 304)), $mul.ref(160, 1));
    goto corral_source_split_11107;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    out_$p109 := $load.ref($M.0, out_$p108);
    goto corral_source_split_11106;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref($add.ref(in_$p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(out_$i106, 8));
    goto corral_source_split_11105;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    out_$i106 := $zext.i32.i64(out_$i99);
    goto corral_source_split_11104;

  $bb33:
    assume out_$i105 == 1;
    goto corral_source_split_11103;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    out_$i105 := $ne.i64(out_$i104, 0);
    goto corral_source_split_11101;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    out_$i104 := $p2i.ref.i64(out_$p103);
    goto corral_source_split_11100;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.0, out_$p102);
    goto corral_source_split_11099;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref($add.ref(in_$p24, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(out_$i100, 8));
    goto corral_source_split_11098;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    out_$i100 := $zext.i32.i64(out_$i99);
    goto corral_source_split_11097;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i8.i32(out_$i98);
    call {:si_unique_call 1778} {:cexpr "idx___0"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_11096;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i8($M.28, out_$p97);
    goto corral_source_split_11095;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 10)), $mul.ref(out_$i95, 5)), $mul.ref(out_$i92, 1));
    goto corral_source_split_11094;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    out_$i95 := $sext.i32.i64(out_$i94);
    goto corral_source_split_11093;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    out_$i94 := $zext.i1.i32(out_$i93);
    goto corral_source_split_11092;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    out_$i93 := $trunc.i8.i1(in_$i3);
    goto corral_source_split_11091;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i92 := $sext.i32.i64(out_$i91);
    goto corral_source_split_11090;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i115 == 1);
    goto $bb37;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i127 == 1);
    goto $bb37;

  $bb42_dummy:
    call {:si_unique_call 1} out_$i92, out_$i93, out_$i94, out_$i95, out_$p97, out_$i98, out_$i99, out_$i100, out_$p102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$p135, out_$p136, out_$p137, out_$i138, out_$p140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i146, out_$i147, out_$i91, out_vslice_dummy_var_108 := __fimc_pipeline_s_stream_loop_$bb31(in_$p2, in_$i3, in_$p24, out_$i92, out_$i93, out_$i94, out_$i95, out_$p97, out_$i98, out_$i99, out_$i100, out_$p102, out_$p103, out_$i104, out_$i105, out_$i106, out_$p108, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$i116, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$p123, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$p135, out_$p136, out_$p137, out_$i138, out_$p140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i146, out_$i147, out_$i91, out_vslice_dummy_var_108);
    return;

  exit:
    return;
}



procedure __fimc_pipeline_s_stream_loop_$bb31(in_$p2: ref, in_$i3: i8, in_$p24: ref, in_$i92: i64, in_$i93: i1, in_$i94: i32, in_$i95: i64, in_$p97: ref, in_$i98: i8, in_$i99: i32, in_$i100: i64, in_$p102: ref, in_$p103: ref, in_$i104: i64, in_$i105: i1, in_$i106: i64, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i64, in_$i115: i1, in_$i116: i64, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$i126: i64, in_$i127: i1, in_$i128: i64, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$i138: i64, in_$p140: ref, in_$p141: ref, in_$i142: i1, in_$i143: i1, in_$i144: i32, in_$i146: i32, in_$i147: i1, in_$i91: i32, in_vslice_dummy_var_108: i32) returns (out_$i92: i64, out_$i93: i1, out_$i94: i32, out_$i95: i64, out_$p97: ref, out_$i98: i8, out_$i99: i32, out_$i100: i64, out_$p102: ref, out_$p103: ref, out_$i104: i64, out_$i105: i1, out_$i106: i64, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i64, out_$i115: i1, out_$i116: i64, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$i126: i64, out_$i127: i1, out_$i128: i64, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$i138: i64, out_$p140: ref, out_$p141: ref, out_$i142: i1, out_$i143: i1, out_$i144: i32, out_$i146: i32, out_$i147: i1, out_$i91: i32, out_vslice_dummy_var_108: i32);
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.28, $CurrAddr, $M.29, $M.32, $M.27, $M.25, $M.36, assertsPassed;



implementation fimc_pipeline_s_power_loop_$bb20(in_$p0: ref, in_$p2: ref, in_$i3: i8, in_$i46: i64, in_$i47: i1, in_$i48: i32, in_$i49: i64, in_$p51: ref, in_$i52: i8, in_$i53: i32, in_$i54: i64, in_$p56: ref, in_$p57: ref, in_$i58: i1, in_$i59: i1, in_$i60: i32, in_$i62: i32, in_$i63: i1, in_$i45: i32, in_vslice_dummy_var_109: i32) returns (out_$i46: i64, out_$i47: i1, out_$i48: i32, out_$i49: i64, out_$p51: ref, out_$i52: i8, out_$i53: i32, out_$i54: i64, out_$p56: ref, out_$p57: ref, out_$i58: i1, out_$i59: i1, out_$i60: i32, out_$i62: i32, out_$i63: i1, out_$i45: i32, out_vslice_dummy_var_109: i32)
{

  entry:
    out_$i46, out_$i47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i62, out_$i63, out_$i45, out_vslice_dummy_var_109 := in_$i46, in_$i47, in_$i48, in_$i49, in_$p51, in_$i52, in_$i53, in_$i54, in_$p56, in_$p57, in_$i58, in_$i59, in_$i60, in_$i62, in_$i63, in_$i45, in_vslice_dummy_var_109;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_11452;

  $bb22:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$i45 := out_$i62;
    goto $bb22_dummy;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    out_$i63 := $sge.i32(out_$i62, 0);
    goto corral_source_split_11469;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    out_$i62 := $sub.i32(out_$i45, 1);
    call {:si_unique_call 1793} {:cexpr "i"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_11468;

  SeqInstr_279:
    goto corral_source_split_11467;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} out_vslice_dummy_var_109 := __subdev_set_power(out_$p57, out_$i60);
    goto SeqInstr_278;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i1.i32(out_$i59);
    goto corral_source_split_11466;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    out_$i59 := $xor.i1(out_$i58, 1);
    goto corral_source_split_11465;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    out_$i58 := $trunc.i8.i1(in_$i3);
    goto corral_source_split_11464;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_11463;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(out_$i54, 8));
    goto corral_source_split_11462;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i32.i64(out_$i53);
    goto corral_source_split_11461;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i8.i32(out_$i52);
    call {:si_unique_call 1791} {:cexpr "idx___0"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_11460;

  corral_source_split_11458:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i8($M.29, out_$p51);
    goto corral_source_split_11459;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 8)), $mul.ref(out_$i49, 4)), $mul.ref(out_$i46, 1));
    goto corral_source_split_11458;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i48);
    goto corral_source_split_11457;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i1.i32(out_$i47);
    goto corral_source_split_11456;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    out_$i47 := $trunc.i8.i1(in_$i3);
    goto corral_source_split_11455;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i46 := $sext.i32.i64(out_$i45);
    goto corral_source_split_11454;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i46, out_$i47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i62, out_$i63, out_$i45, out_vslice_dummy_var_109 := fimc_pipeline_s_power_loop_$bb20(in_$p0, in_$p2, in_$i3, out_$i46, out_$i47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$i54, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i62, out_$i63, out_$i45, out_vslice_dummy_var_109);
    return;

  exit:
    return;
}



procedure fimc_pipeline_s_power_loop_$bb20(in_$p0: ref, in_$p2: ref, in_$i3: i8, in_$i46: i64, in_$i47: i1, in_$i48: i32, in_$i49: i64, in_$p51: ref, in_$i52: i8, in_$i53: i32, in_$i54: i64, in_$p56: ref, in_$p57: ref, in_$i58: i1, in_$i59: i1, in_$i60: i32, in_$i62: i32, in_$i63: i1, in_$i45: i32, in_vslice_dummy_var_109: i32) returns (out_$i46: i64, out_$i47: i1, out_$i48: i32, out_$i49: i64, out_$p51: ref, out_$i52: i8, out_$i53: i32, out_$i54: i64, out_$p56: ref, out_$p57: ref, out_$i58: i1, out_$i59: i1, out_$i60: i32, out_$i62: i32, out_$i63: i1, out_$i45: i32, out_vslice_dummy_var_109: i32);
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.28, $CurrAddr, $M.29, $M.32, $M.27, $M.25, $M.36, assertsPassed;



implementation fimc_pipeline_prepare_loop_$bb9(in_$p6: ref, in_$p7: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p22: ref, in_$i28: i32, in_$i29: i16, in_$i30: i32, in_$i31: i1, in_$p12: ref, in_$i13: i32, in_$p32: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p22: ref, out_$i28: i32, out_$i29: i16, out_$i30: i32, out_$i31: i1, out_$p12: ref, out_$i13: i32, out_$p32: ref)
{

  entry:
    out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$p26, out_$p22, out_$i28, out_$i29, out_$i30, out_$i31, out_$p12, out_$i13, out_$p32 := in_$p14, in_$p15, in_$i16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p23, in_$i24, in_$i25, in_$p26, in_$p22, in_$i28, in_$i29, in_$i30, in_$i31, in_$p12, in_$i13, in_$p32;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11626;

  $bb19:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$p12, out_$i13 := out_$p22, out_$i28;
    goto $bb19_dummy;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    out_$p32 := out_$p22;
    assume true;
    goto $bb19;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    out_$i31 := $sgt.i32(out_$i30, out_$i28);
    goto corral_source_split_11643;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i16.i32(out_$i29);
    goto corral_source_split_11642;

  corral_source_split_11640:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i16($M.0, in_$p7);
    goto corral_source_split_11641;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i13, 1);
    call {:si_unique_call 1803} {:cexpr "i"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_11640;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_11639;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p22 := out_$p23;
    goto $bb13;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    out_$p22 := out_$p12;
    goto $bb13;

  $bb11:
    assume out_$i21 == 1;
    goto corral_source_split_11637;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i64(out_$i20, 0);
    goto corral_source_split_11635;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    out_$i20 := $and.i64(out_$i19, 1);
    goto corral_source_split_11634;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i64($M.0, out_$p18);
    goto corral_source_split_11633;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 24)), $mul.ref(16, 1));
    goto corral_source_split_11632;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p15, $mul.ref(out_$i16, 24));
    goto corral_source_split_11631;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i13);
    goto corral_source_split_11630;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_11629;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p6, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_11628;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb16:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p23;
    assume true;
    goto $bb16;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_11647;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_11646;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} out_$p23 := media_entity_remote_pad(out_$p17);
    goto corral_source_split_11645;

  $bb12:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$p26, out_$p22, out_$i28, out_$i29, out_$i30, out_$i31, out_$p12, out_$i13, out_$p32 := fimc_pipeline_prepare_loop_$bb9(in_$p6, in_$p7, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$p26, out_$p22, out_$i28, out_$i29, out_$i30, out_$i31, out_$p12, out_$i13, out_$p32);
    return;

  exit:
    return;
}



procedure fimc_pipeline_prepare_loop_$bb9(in_$p6: ref, in_$p7: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p22: ref, in_$i28: i32, in_$i29: i16, in_$i30: i32, in_$i31: i1, in_$p12: ref, in_$i13: i32, in_$p32: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p22: ref, out_$i28: i32, out_$i29: i16, out_$i30: i32, out_$i31: i1, out_$p12: ref, out_$i13: i32, out_$p32: ref);



implementation fimc_pipeline_prepare_loop_$bb5(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i16, in_$i9: i32, in_$i10: i1, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p22: ref, in_$i28: i32, in_$i29: i16, in_$i30: i32, in_$i31: i1, in_$p12: ref, in_$i13: i32, in_$p32: ref, in_$p11: ref, in_$p27: ref, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i58: i1, in_$p57: ref, in_$p60: ref, in_$p63: ref, in_$p65: ref, in_$p67: ref, in_$p69: ref, in_$p61: ref, in_$p71: ref, in_$i72: i16, in_$i73: i32, in_$i74: i1, in_$p75: ref) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i16, out_$i9: i32, out_$i10: i1, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p22: ref, out_$i28: i32, out_$i29: i16, out_$i30: i32, out_$i31: i1, out_$p12: ref, out_$i13: i32, out_$p32: ref, out_$p11: ref, out_$p27: ref, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i58: i1, out_$p57: ref, out_$p60: ref, out_$p63: ref, out_$p65: ref, out_$p67: ref, out_$p69: ref, out_$p61: ref, out_$p71: ref, out_$i72: i16, out_$i73: i32, out_$i74: i1, out_$p75: ref)
{

  entry:
    out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$p26, out_$p22, out_$i28, out_$i29, out_$i30, out_$i31, out_$p12, out_$i13, out_$p32, out_$p11, out_$p27, out_$i33, out_$i34, out_$p35, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i58, out_$p57, out_$p60, out_$p63, out_$p65, out_$p67, out_$p69, out_$p61, out_$p71, out_$i72, out_$i73, out_$i74, out_$p75 := in_$p5, in_$p6, in_$p7, in_$i8, in_$i9, in_$i10, in_$p14, in_$p15, in_$i16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p23, in_$i24, in_$i25, in_$p26, in_$p22, in_$i28, in_$i29, in_$i30, in_$i31, in_$p12, in_$i13, in_$p32, in_$p11, in_$p27, in_$i33, in_$i34, in_$p35, in_$p37, in_$p38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i58, in_$p57, in_$p60, in_$p63, in_$p65, in_$p67, in_$p69, in_$p61, in_$p71, in_$i72, in_$i73, in_$i74, in_$p75;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11618;

  $bb58:
    assume {:verifier.code 0} true;
    out_$p5, out_$p6 := out_$p61, out_$p43;
    goto $bb58_dummy;

  $bb57:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    out_$p75 := out_$p61;
    assume true;
    goto $bb57;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i73, 1);
    goto corral_source_split_11702;

  corral_source_split_11700:
    assume {:verifier.code 0} true;
    out_$i73 := $zext.i16.i32(out_$i72);
    goto corral_source_split_11701;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i16($M.0, out_$p71);
    goto corral_source_split_11700;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($add.ref(out_$p44, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(60, 1));
    goto corral_source_split_11699;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_11698;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p61 := out_$p5;
    goto $bb54;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    out_$p61 := out_$p5;
    goto $bb54;

  corral_source_split_11682:
    assume {:verifier.code 0} true;
    out_$p61 := out_$p5;
    goto $bb54;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    out_$p61 := out_$p5;
    goto $bb54;

  corral_source_split_11690:
    assume {:verifier.code 0} true;
    out_$p61 := out_$p5;
    goto $bb54;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    out_$p61 := out_$p57;
    goto $bb54;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p60, out_$p43);
    goto corral_source_split_11694;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_11693;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_11692;

  $bb49:
    assume {:verifier.code 0} true;
    assume out_$i56 == 1;
    goto $bb50;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    out_$p57 := out_$p43;
    goto $bb50;

  $bb52:
    assume out_$i58 == 1;
    goto corral_source_split_11696;

  $bb43:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i46, 256);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb30:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i46, 512);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i46, 4096);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_11674:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, out_$p45);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p44, $mul.ref(0, 304)), $mul.ref(216, 1));
    goto corral_source_split_11674;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    out_$p44 := $bitcast.ref.ref(out_$p43);
    goto corral_source_split_11673;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_11672;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p27, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_11671;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    out_$p41 := out_$p5;
    assume true;
    goto $bb26;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 131072);
    goto corral_source_split_11663;

  corral_source_split_11661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} out_$i39 := media_entity_type(out_$p38);
    call {:si_unique_call 1806} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_11662;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_11661;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p27, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_11660;

  $bb23:
    assume !(out_$i34 == 1);
    goto corral_source_split_11659;

  corral_source_split_11653:
    assume {:verifier.code 0} true;
    out_$p35 := out_$p5;
    assume true;
    goto $bb23;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i64(out_$i33, 0);
    goto corral_source_split_11653;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_11652;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_11651;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p27 := out_$p11;
    goto $bb17;

  corral_source_split_11649:
    assume {:verifier.code 0} true;
    out_$p27 := out_$p26;
    goto $bb17;

  $bb15:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_11649;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p23;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_11647;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_11646;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} out_$p23 := media_entity_remote_pad(out_$p17);
    goto corral_source_split_11645;

  $bb12:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i64(out_$i20, 0);
    goto corral_source_split_11635;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    out_$i20 := $and.i64(out_$i19, 1);
    goto corral_source_split_11634;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i64($M.0, out_$p18);
    goto corral_source_split_11633;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 24)), $mul.ref(16, 1));
    goto corral_source_split_11632;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p15, $mul.ref(out_$i16, 24));
    goto corral_source_split_11631;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i13);
    goto corral_source_split_11630;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_11629;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p6, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_11628;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$p26, out_$p22, out_$i28, out_$i29, out_$i30, out_$i31, out_$p12, out_$i13, out_$p32 := fimc_pipeline_prepare_loop_$bb9(out_$p6, out_$p7, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$p26, out_$p22, out_$i28, out_$i29, out_$i30, out_$i31, out_$p12, out_$i13, out_$p32);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11626;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    out_$p12, out_$i13 := $0.ref, 0;
    goto $bb9;

  $bb19:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$p12, out_$i13 := out_$p22, out_$i28;
    assume false;
    return;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    out_$p32 := out_$p22;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    out_$i31 := $sgt.i32(out_$i30, out_$i28);
    goto corral_source_split_11643;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i16.i32(out_$i29);
    goto corral_source_split_11642;

  corral_source_split_11640:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i16($M.0, out_$p7);
    goto corral_source_split_11641;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i13, 1);
    call {:si_unique_call 1803} {:cexpr "i"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_11640;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_11639;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p22 := out_$p23;
    goto $bb13;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    out_$p22 := out_$p12;
    goto $bb13;

  $bb11:
    assume out_$i21 == 1;
    goto corral_source_split_11637;

  $bb16:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb6:
    assume out_$i10 == 1;
    goto corral_source_split_11624;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    out_$p11 := $0.ref;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    out_$i10 := $sgt.i32(out_$i9, 0);
    goto corral_source_split_11622;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i16.i32(out_$i8);
    goto corral_source_split_11621;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i16($M.0, out_$p7);
    goto corral_source_split_11620;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p6, $mul.ref(0, 120)), $mul.ref(60, 1));
    goto corral_source_split_11619;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i10 == 1);
    goto $bb8;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    out_$p11 := out_$p32;
    goto $bb8;

  $bb20:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_11655;

  $bb45:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i46, 512);
    assume {:verifier.code 0} true;
    out_$p57 := out_$p5;
    assume true;
    goto $bb49, $bb51;

  $bb44:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i46, 2048);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p63, out_$p43);
    goto corral_source_split_11690;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(1, 8));
    goto corral_source_split_11689;

  $bb47:
    assume out_$i55 == 1;
    goto corral_source_split_11688;

  $bb46:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i46, 2048);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p67, out_$p43);
    goto corral_source_split_11686;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(4, 8));
    goto corral_source_split_11685;

  $bb41:
    assume out_$i52 == 1;
    goto corral_source_split_11684;

  $bb32:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i46, 4096);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb31:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    out_$i48 := $slt.i32(out_$i46, 8192);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p65, out_$p43);
    goto corral_source_split_11682;

  corral_source_split_11680:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(2, 8));
    goto corral_source_split_11681;

  $bb39:
    assume out_$i51 == 1;
    goto corral_source_split_11680;

  $bb34:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i46, 8192);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb33:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i46, 16384);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p69, out_$p43);
    goto corral_source_split_11678;

  corral_source_split_11676:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(32, 1)), $mul.ref(3, 8));
    goto corral_source_split_11677;

  $bb36:
    assume out_$i50 == 1;
    goto corral_source_split_11676;

  $bb35:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i46, 16384);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i50 == 1);
    goto $bb38;

  $bb40:
    assume {:verifier.code 0} true;
    assume !(out_$i51 == 1);
    goto $bb38;

  $bb42:
    assume {:verifier.code 0} true;
    assume !(out_$i52 == 1);
    goto $bb38;

  $bb48:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb38;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb38;

  $bb53:
    assume {:verifier.code 0} true;
    assume !(out_$i58 == 1);
    goto $bb38;

  $bb58_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$p26, out_$p22, out_$i28, out_$i29, out_$i30, out_$i31, out_$p12, out_$i13, out_$p32, out_$p11, out_$p27, out_$i33, out_$i34, out_$p35, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i58, out_$p57, out_$p60, out_$p63, out_$p65, out_$p67, out_$p69, out_$p61, out_$p71, out_$i72, out_$i73, out_$i74, out_$p75 := fimc_pipeline_prepare_loop_$bb5(in_$p0, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$p26, out_$p22, out_$i28, out_$i29, out_$i30, out_$i31, out_$p12, out_$i13, out_$p32, out_$p11, out_$p27, out_$i33, out_$i34, out_$p35, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i58, out_$p57, out_$p60, out_$p63, out_$p65, out_$p67, out_$p69, out_$p61, out_$p71, out_$i72, out_$i73, out_$i74, out_$p75);
    return;

  exit:
    return;
}



procedure fimc_pipeline_prepare_loop_$bb5(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i16, in_$i9: i32, in_$i10: i1, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$p22: ref, in_$i28: i32, in_$i29: i16, in_$i30: i32, in_$i31: i1, in_$p12: ref, in_$i13: i32, in_$p32: ref, in_$p11: ref, in_$p27: ref, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i58: i1, in_$p57: ref, in_$p60: ref, in_$p63: ref, in_$p65: ref, in_$p67: ref, in_$p69: ref, in_$p61: ref, in_$p71: ref, in_$i72: i16, in_$i73: i32, in_$i74: i1, in_$p75: ref) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i16, out_$i9: i32, out_$i10: i1, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$p22: ref, out_$i28: i32, out_$i29: i16, out_$i30: i32, out_$i31: i1, out_$p12: ref, out_$i13: i32, out_$p32: ref, out_$p11: ref, out_$p27: ref, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i58: i1, out_$p57: ref, out_$p60: ref, out_$p63: ref, out_$p65: ref, out_$p67: ref, out_$p69: ref, out_$p61: ref, out_$p71: ref, out_$i72: i16, out_$i73: i32, out_$i74: i1, out_$p75: ref);
  modifies $M.0;



implementation fimc_md_unregister_clk_provider_loop_$bb7(in_$p0: ref, in_$p8: ref, in_$i12: i64, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i11: i32) returns (out_$i12: i64, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i11: i32)
{

  entry:
    out_$i12, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i11 := in_$i12, in_$p14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i11;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_12104;

  $bb9:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i16;
    goto $bb9_dummy;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    out_$i18 := $ugt.i32(out_$i17, out_$i16);
    goto corral_source_split_12111;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, in_$p8);
    goto corral_source_split_12110;

  corral_source_split_12108:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i11, 1);
    call {:si_unique_call 1892} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_12109;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} clk_unregister(out_$p15);
    goto corral_source_split_12108;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_12107;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i32.i64(out_$i11);
    out_$p14 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(0, 1)), $mul.ref(out_$i12, 8));
    goto corral_source_split_12106;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i12, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i11 := fimc_md_unregister_clk_provider_loop_$bb7(in_$p0, in_$p8, out_$i12, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i11);
    return;

  exit:
    return;
}



procedure fimc_md_unregister_clk_provider_loop_$bb7(in_$p0: ref, in_$p8: ref, in_$i12: i64, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i11: i32) returns (out_$i12: i64, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i11: i32);



implementation fimc_md_pipelines_free_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1)
{

  entry:
    out_$p5, out_$p6, out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12 := in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$i11, in_$i12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i12 == 1;
    goto $bb6_dummy;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_12277:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, 0);
    goto corral_source_split_12278;

  corral_source_split_12276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} out_$i11 := list_empty(in_$p1);
    call {:si_unique_call 1909} {:cexpr "tmp"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_12277;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} kfree(out_$p10);
    goto corral_source_split_12276;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    out_$p10 := $bitcast.ref.ref(out_$p8);
    goto corral_source_split_12275;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} list_del(out_$p9);
    goto corral_source_split_12274;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p7, $mul.ref($sub.ref(0, 8), 72)), $mul.ref(8, 1));
    goto corral_source_split_12273;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref(out_$p7, $mul.ref($sub.ref(0, 8), 72));
    goto corral_source_split_12272;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    out_$p7 := $bitcast.ref.ref(out_$p6);
    goto corral_source_split_12271;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_12270;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3216)), $mul.ref(3200, 1)), $mul.ref(0, 1));
    goto corral_source_split_12269;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12 := fimc_md_pipelines_free_loop_$bb4(in_$p0, in_$p1, out_$p5, out_$p6, out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12);
    return;

  exit:
    return;
}



procedure fimc_md_pipelines_free_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1);



implementation fimc_md_register_platform_entities_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i8, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i32, in_$i26: i32, in_$i21: i32, in_$i16: i32, in_$i38: i1, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$i42: i1, in_$i43: i32, in_$i11: i32, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p6: ref, in_$i7: i32, in_$i48: i32) returns (out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i8, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i32, out_$i26: i32, out_$i21: i32, out_$i16: i32, out_$i38: i1, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$i42: i1, out_$i43: i32, out_$i11: i32, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p6: ref, out_$i7: i32, out_$i48: i32)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$p12, out_$p13, out_$i14, out_$i15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p22, out_$p23, out_$i24, out_$i25, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i26, out_$i21, out_$i16, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i11, out_$p45, out_$i46, out_$i47, out_$p6, out_$i7, out_$i48 := in_$p8, in_$i9, in_$i10, in_$p12, in_$p13, in_$i14, in_$i15, in_$p17, in_$p18, in_$i19, in_$i20, in_$p22, in_$p23, in_$i24, in_$i25, in_$p27, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i26, in_$i21, in_$i16, in_$i38, in_$i39, in_$i40, in_$p41, in_$i42, in_$i43, in_$i11, in_$p45, in_$i46, in_$i47, in_$p6, in_$i7, in_$i48;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12521;

  $bb35:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$p6, out_$i7 := out_$p45, out_$i11;
    goto $bb35_dummy;

  corral_source_split_12532:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i11;
    assume true;
    goto $bb35;

  corral_source_split_12531:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_12532;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_12531;

  corral_source_split_12529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} out_$p45 := of_get_next_available_child(in_$p1, out_$p6);
    goto corral_source_split_12530;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_12529;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i40;
    goto $bb8;

  corral_source_split_12527:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i7;
    goto $bb8;

  $bb6:
    assume out_$i10 == 1;
    goto corral_source_split_12527;

  corral_source_split_12525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_12524:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i64(out_$i9, 0);
    goto corral_source_split_12525;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_12524;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} out_$p8 := of_find_device_by_node(out_$p6);
    goto corral_source_split_12523;

  corral_source_split_12521:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb32:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i40;
    assume true;
    goto $bb32;

  corral_source_split_12585:
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i40, 0);
    goto corral_source_split_12586;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} put_device(out_$p41);
    goto corral_source_split_12585;

  corral_source_split_12583:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p8, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_12584;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_12583;

  $bb29:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := out_$i7;
    goto $bb30;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i39;
    goto $bb30;

  SeqInstr_294:
    call {:si_unique_call 1981} {:cexpr "ret"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_12581;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  corral_source_split_12580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} out_$i39 := fimc_md_register_platform_entity(in_$p0, out_$p8, out_$i16);
    goto SeqInstr_293;

  $bb28:
    assume out_$i38 == 1;
    goto corral_source_split_12580;

  corral_source_split_12548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_12547:
    assume {:verifier.code 0} true;
    out_$i38 := $sge.i32(out_$i16, 0);
    goto corral_source_split_12548;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_12547;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i21;
    goto $bb12;

  corral_source_split_12539:
    assume {:verifier.code 0} true;
    out_$i16 := 1;
    goto $bb12;

  $bb10:
    assume out_$i15 == 1;
    goto corral_source_split_12539;

  corral_source_split_12537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_12536:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, 0);
    goto corral_source_split_12537;

  corral_source_split_12535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} out_$i14 := strcmp(out_$p13, .str.128);
    call {:si_unique_call 1971} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_12536;

  corral_source_split_12534:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_12535;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p6, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_12534;

  $bb7:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i26;
    goto $bb15;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    out_$i21 := 3;
    goto $bb15;

  $bb13:
    assume out_$i20 == 1;
    goto corral_source_split_12550;

  corral_source_split_12545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_12544:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i19, 0);
    goto corral_source_split_12545;

  corral_source_split_12543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} out_$i19 := strcmp(out_$p18, .str.121);
    call {:si_unique_call 1973} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_12544;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_12543;

  corral_source_split_12541:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p6, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_12542;

  $bb11:
    assume !(out_$i15 == 1);
    goto corral_source_split_12541;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i26 := out_$i37;
    goto $bb18;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    out_$i26 := 2;
    goto $bb18;

  $bb16:
    assume out_$i25 == 1;
    goto corral_source_split_12558;

  corral_source_split_12556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 0);
    goto corral_source_split_12556;

  corral_source_split_12554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} out_$i24 := strcmp(out_$p23, .str.129);
    call {:si_unique_call 1975} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_12555;

  corral_source_split_12553:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_12554;

  corral_source_split_12552:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p6, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_12553;

  $bb14:
    assume !(out_$i20 == 1);
    goto corral_source_split_12552;

  $bb20:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    out_$i37 := $sub.i32(0, 1);
    goto $bb27;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i36;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_12578;

  $bb25:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := $sub.i32(0, 1);
    goto $bb26;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    out_$i36 := 4;
    goto $bb26;

  $bb24:
    assume out_$i35 == 1;
    goto corral_source_split_12576;

  corral_source_split_12574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_12574;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_12573;

  $bb22:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    out_$i34 := 1;
    goto $bb23;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    out_$i34 := 0;
    goto $bb23;

  $bb21:
    assume out_$i33 == 1;
    goto corral_source_split_12571;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_12568:
    assume {:verifier.code 0} true;
    out_$i33 := $trunc.i8.i1(out_$i32);
    goto corral_source_split_12569;

  corral_source_split_12567:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i1.i8(out_$i31);
    call {:si_unique_call 1979} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i32);
    goto corral_source_split_12568;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} out_$i31 := of_property_read_bool(out_$p6, .str.67);
    goto corral_source_split_12567;

  $bb19:
    assume out_$i30 == 1;
    goto corral_source_split_12566;

  corral_source_split_12564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    goto corral_source_split_12564;

  corral_source_split_12562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} out_$i29 := strcmp(out_$p28, .str.76);
    call {:si_unique_call 1977} {:cexpr "tmp"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_12563;

  corral_source_split_12561:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_12562;

  corral_source_split_12560:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p6, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_12561;

  $bb17:
    assume !(out_$i25 == 1);
    goto corral_source_split_12560;

  $bb35_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$p12, out_$p13, out_$i14, out_$i15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p22, out_$p23, out_$i24, out_$i25, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i26, out_$i21, out_$i16, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i11, out_$p45, out_$i46, out_$i47, out_$p6, out_$i7, out_$i48 := fimc_md_register_platform_entities_loop_$bb4(in_$p0, in_$p1, out_$p8, out_$i9, out_$i10, out_$p12, out_$p13, out_$i14, out_$i15, out_$p17, out_$p18, out_$i19, out_$i20, out_$p22, out_$p23, out_$i24, out_$i25, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i26, out_$i21, out_$i16, out_$i38, out_$i39, out_$i40, out_$p41, out_$i42, out_$i43, out_$i11, out_$p45, out_$i46, out_$i47, out_$p6, out_$i7, out_$i48);
    return;

  exit:
    return;
}



procedure fimc_md_register_platform_entities_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i8, in_$i33: i1, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i32, in_$i26: i32, in_$i21: i32, in_$i16: i32, in_$i38: i1, in_$i39: i32, in_$i40: i32, in_$p41: ref, in_$i42: i1, in_$i43: i32, in_$i11: i32, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p6: ref, in_$i7: i32, in_$i48: i32) returns (out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i8, out_$i33: i1, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i32, out_$i26: i32, out_$i21: i32, out_$i16: i32, out_$i38: i1, out_$i39: i32, out_$i40: i32, out_$p41: ref, out_$i42: i1, out_$i43: i32, out_$i11: i32, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p6: ref, out_$i7: i32, out_$i48: i32);
  modifies $M.0, $M.36, $M.1, $CurrAddr, assertsPassed;



implementation fimc_md_register_sensor_entities_loop_$bb33(in_$p0: ref, in_$p43: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i56: i32, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$i50: i32, in_$p51: ref, in_$i60: i32) returns (out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i56: i32, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$i50: i32, out_$p51: ref, out_$i60: i32)
{

  entry:
    out_$i52, out_$i53, out_$i54, out_$i56, out_$p57, out_$i58, out_$i59, out_$i50, out_$p51, out_$i60 := in_$i52, in_$i53, in_$i54, in_$i56, in_$p57, in_$i58, in_$i59, in_$i50, in_$p51, in_$i60;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12669;

  $bb39:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i50, out_$p51 := out_$i56, out_$p57;
    goto $bb39_dummy;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i52;
    assume true;
    goto $bb39;

  corral_source_split_12680:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i64(out_$i58, 0);
    goto corral_source_split_12681;

  corral_source_split_12679:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p57);
    goto corral_source_split_12680;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} out_$p57 := of_get_next_child(in_$p43, out_$p51);
    goto corral_source_split_12679;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i32(out_$i50, 1);
    call {:si_unique_call 1998} {:cexpr "index"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_12678;

  $bb36:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i52;
    assume true;
    goto $bb36;

  corral_source_split_12671:
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i52, 0);
    goto corral_source_split_12672;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} out_$i52 := fimc_md_parse_port_node(in_$p0, out_$p51, out_$i50);
    call {:si_unique_call 1997} {:cexpr "ret"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_12671;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i52, out_$i53, out_$i54, out_$i56, out_$p57, out_$i58, out_$i59, out_$i50, out_$p51, out_$i60 := fimc_md_register_sensor_entities_loop_$bb33(in_$p0, in_$p43, out_$i52, out_$i53, out_$i54, out_$i56, out_$p57, out_$i58, out_$i59, out_$i50, out_$p51, out_$i60);
    return;

  exit:
    return;
}



procedure fimc_md_register_sensor_entities_loop_$bb33(in_$p0: ref, in_$p43: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i56: i32, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$i50: i32, in_$p51: ref, in_$i60: i32) returns (out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i56: i32, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$i50: i32, out_$p51: ref, out_$i60: i32);
  modifies $M.0, $CurrAddr;



implementation fimc_md_register_sensor_entities_loop_$bb11(in_$p0: ref, in_$p5: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i37: i32, in_$i28: i32, in_$i29: i32, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$i21: i32, in_$i22: i32, in_$p23: ref, in_$i41: i32, in_$i42: i32) returns (out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i37: i32, out_$i28: i32, out_$i29: i32, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$i21: i32, out_$i22: i32, out_$p23: ref, out_$i41: i32, out_$i42: i32)
{

  entry:
    out_$p24, out_$p25, out_$i26, out_$i27, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i37, out_$i28, out_$i29, out_$p38, out_$i39, out_$i40, out_$i21, out_$i22, out_$p23, out_$i41, out_$i42 := in_$p24, in_$p25, in_$i26, in_$i27, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i37, in_$i28, in_$i29, in_$p38, in_$i39, in_$i40, in_$i21, in_$i22, in_$p23, in_$i41, in_$i42;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12623;

  $bb24:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i21, out_$i22, out_$p23 := out_$i29, out_$i28, out_$p38;
    goto $bb24_dummy;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    out_$i41, out_$i42 := out_$i28, out_$i29;
    assume true;
    goto $bb24;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, 0);
    goto corral_source_split_12635;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_12634;

  corral_source_split_12632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} out_$p38 := of_get_next_available_child(in_$p5, out_$p23);
    goto corral_source_split_12633;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12632;

  corral_source_split_12653:
    assume {:verifier.code 0} true;
    out_$i28, out_$i29 := out_$i37, out_$i33;
    goto $bb15;

  corral_source_split_12641:
    assume {:verifier.code 0} true;
    out_$i28, out_$i29 := out_$i22, out_$i21;
    goto $bb15;

  corral_source_split_12630:
    assume {:verifier.code 0} true;
    out_$i28, out_$i29 := out_$i22, out_$i21;
    goto $bb15;

  $bb13:
    assume out_$i27 == 1;
    goto corral_source_split_12630;

  corral_source_split_12628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_12628;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} out_$i26 := strcasecmp(out_$p25, .str.128);
    call {:si_unique_call 1987} {:cexpr "tmp"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_12627;

  corral_source_split_12625:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_12626;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 400)), $mul.ref(0, 1));
    goto corral_source_split_12625;

  corral_source_split_12623:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb17:
    assume out_$i32 == 1;
    goto corral_source_split_12641;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i64(out_$i31, 0);
    goto corral_source_split_12639;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_12638;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} out_$p30 := of_get_next_child(out_$p23, $0.ref);
    goto corral_source_split_12637;

  $bb14:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i22, 1);
    call {:si_unique_call 1993} {:cexpr "index"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_12653;

  $bb21:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_12644:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i33;
    assume true;
    goto $bb21;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i33, 0);
    goto corral_source_split_12644;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} out_$i33 := fimc_md_parse_port_node(in_$p0, out_$p30, out_$i22);
    call {:si_unique_call 1991} {:cexpr "ret"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_12643;

  $bb18:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p24, out_$p25, out_$i26, out_$i27, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i37, out_$i28, out_$i29, out_$p38, out_$i39, out_$i40, out_$i21, out_$i22, out_$p23, out_$i41, out_$i42 := fimc_md_register_sensor_entities_loop_$bb11(in_$p0, in_$p5, out_$p24, out_$p25, out_$i26, out_$i27, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i37, out_$i28, out_$i29, out_$p38, out_$i39, out_$i40, out_$i21, out_$i22, out_$p23, out_$i41, out_$i42);
    return;

  exit:
    return;
}



procedure fimc_md_register_sensor_entities_loop_$bb11(in_$p0: ref, in_$p5: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i37: i32, in_$i28: i32, in_$i29: i32, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$i21: i32, in_$i22: i32, in_$p23: ref, in_$i41: i32, in_$i42: i32) returns (out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i37: i32, out_$i28: i32, out_$i29: i32, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$i21: i32, out_$i22: i32, out_$p23: ref, out_$i41: i32, out_$i42: i32);
  modifies $M.0, $CurrAddr;



implementation fimc_md_register_clk_provider_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i17: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p34: ref, in_$i35: i64, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i1, in_$i41: i8, in_$i42: i1, in_$i43: i32, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i7: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i17: i64, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p34: ref, out_$i35: i64, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i1, out_$i41: i8, out_$i42: i1, out_$i43: i32, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$i7: i32)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$p34, out_$i35, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i7 := in_$p8, in_$p9, in_$i10, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p28, in_$p29, in_$p30, in_$p31, in_$i32, in_$p34, in_$i35, in_$p37, in_$p38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$i7;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_12694;

  $bb11:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i64;
    goto $bb11_dummy;

  corral_source_split_12761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_12760:
    assume {:verifier.code 0} true;
    out_$i65 := $sle.i32(out_$i64, 1);
    goto corral_source_split_12761;

  corral_source_split_12759:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i7, 1);
    call {:si_unique_call 2017} {:cexpr "i"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_12760;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p63, out_$i62);
    goto corral_source_split_12759;

  corral_source_split_12757:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i61, 1);
    out_$p63 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(104, 1));
    goto corral_source_split_12758;

  corral_source_split_12756:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    goto corral_source_split_12757;

  $bb10:
    out_$p60 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(104, 1));
    goto corral_source_split_12756;

  $bb8:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_12737:
    assume {:verifier.code 0} true;
    out_$i43 := out_$i7;
    assume true;
    goto $bb8;

  corral_source_split_12736:
    assume {:verifier.code 0} true;
    out_$i42 := $trunc.i8.i1(out_$i41);
    goto corral_source_split_12737;

  corral_source_split_12735:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i1.i8(out_$i40);
    call {:si_unique_call 2009} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i41);
    goto corral_source_split_12736;

  corral_source_split_12734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} out_$i40 := IS_ERR(out_$p39);
    goto corral_source_split_12735;

  corral_source_split_12733:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p38);
    goto corral_source_split_12734;

  corral_source_split_12732:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_12733;

  corral_source_split_12731:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i7);
    out_$p37 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(0, 1)), $mul.ref(out_$i35, 8));
    goto corral_source_split_12732;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p34, out_$p31);
    goto corral_source_split_12731;

  corral_source_split_12729:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i7);
    out_$p34 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(0, 1)), $mul.ref(out_$i32, 8));
    goto corral_source_split_12730;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} out_$p31 := clk_register($0.ref, out_$p30);
    goto corral_source_split_12729;

  corral_source_split_12727:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 32)), $mul.ref(0, 1));
    goto corral_source_split_12728;

  corral_source_split_12726:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p29, in_$p0);
    goto corral_source_split_12727;

  corral_source_split_12725:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 32)), $mul.ref(24, 1));
    goto corral_source_split_12726;

  corral_source_split_12724:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p28, in_$p1);
    goto corral_source_split_12725;

  corral_source_split_12723:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_12724;

  corral_source_split_12722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p26, 4);
    goto corral_source_split_12723;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_12722;

  corral_source_split_12720:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p25, cam_clk_ops);
    goto corral_source_split_12721;

  corral_source_split_12719:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_12720;

  corral_source_split_12718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p24, 1);
    goto corral_source_split_12719;

  corral_source_split_12717:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_12718;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p23, in_$p2);
    goto corral_source_split_12717;

  corral_source_split_12715:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_12716;

  corral_source_split_12714:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, in_$p2, out_$p22);
    goto corral_source_split_12715;

  corral_source_split_12713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} out_$p22 := __clk_get_name(out_$p21);
    goto corral_source_split_12714;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_12713;

  corral_source_split_12711:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3216)), $mul.ref(328, 1)), $mul.ref(out_$i17, 24)), $mul.ref(0, 1));
    goto corral_source_split_12712;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i7);
    goto corral_source_split_12711;

  $bb4:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_12703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i15, 0);
    goto corral_source_split_12703;

  corral_source_split_12701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} out_$i15 := of_property_read_string_index(out_$p13, .str.144, out_$i7, out_$p14);
    call {:si_unique_call 2005} {:cexpr "ret"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_12702;

  corral_source_split_12700:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_12701;

  corral_source_split_12699:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_12700;

  corral_source_split_12698:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 1480)), $mul.ref(16, 1)), $mul.ref(1240, 1));
    goto corral_source_split_12699;

  corral_source_split_12697:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i7);
    goto corral_source_split_12698;

  corral_source_split_12696:
    assume {:verifier.code 0} true;
    out_$p9 := $bitcast.ref.ref(out_$p8);
    goto corral_source_split_12697;

  $bb2:
    out_$p8 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3216)), $mul.ref(2880, 1)), $mul.ref(40, 1));
    goto corral_source_split_12696;

  corral_source_split_12694:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$p34, out_$i35, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i7 := fimc_md_register_clk_provider_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p5, out_$p8, out_$p9, out_$i10, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$p34, out_$i35, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i7);
    return;

  exit:
    return;
}



procedure fimc_md_register_clk_provider_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i17: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p34: ref, in_$i35: i64, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i1, in_$i41: i8, in_$i42: i1, in_$i43: i32, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i7: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i17: i64, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p34: ref, out_$i35: i64, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i1, out_$i41: i8, out_$i42: i1, out_$i43: i32, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$i7: i32);
  modifies $M.0;



implementation fimc_md_create_links_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$i10: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i18: i64, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i30: i1, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$i35: i16, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i64, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$i45: i16, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i64, in_$i50: i64, in_$i51: i1, in_$p53: ref, in_$i54: i16, in_$i55: i32, in_$i56: i64, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i64, in_$i67: i64, in_$i68: i1, in_$i69: i1, in_$i70: i32, in_$i71: i64, in_$i72: i64, in_$i73: i1, in_$p75: ref, in_$i76: i16, in_$i77: i32, in_$i78: i32, in_$p79: ref, in_$i80: i16, in_$i81: i32, in_$i82: i16, in_$p83: ref, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$p88: ref, in_$p89: ref, in_$p91: ref, in_$p92: ref, in_$p94: ref, in_$p95: ref, in_$p97: ref, in_$i98: i16, in_$i99: i32, in_$i100: i64, in_$p101: ref, in_$p31: ref, in_$i102: i32, in_$p103: ref, in_$i111: i64, in_$i112: i1, in_$i113: i32, in_$i114: i32, in_$i115: i32, in_$i17: i32, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i8: i32, in_$i9: i32, in_$i119: i32, in_vslice_dummy_var_124: i32) returns (out_$i10: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i18: i64, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i30: i1, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$i35: i16, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i64, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$i45: i16, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i64, out_$i50: i64, out_$i51: i1, out_$p53: ref, out_$i54: i16, out_$i55: i32, out_$i56: i64, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i64, out_$i67: i64, out_$i68: i1, out_$i69: i1, out_$i70: i32, out_$i71: i64, out_$i72: i64, out_$i73: i1, out_$p75: ref, out_$i76: i16, out_$i77: i32, out_$i78: i32, out_$p79: ref, out_$i80: i16, out_$i81: i32, out_$i82: i16, out_$p83: ref, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$p88: ref, out_$p89: ref, out_$p91: ref, out_$p92: ref, out_$p94: ref, out_$p95: ref, out_$p97: ref, out_$i98: i16, out_$i99: i32, out_$i100: i64, out_$p101: ref, out_$p31: ref, out_$i102: i32, out_$p103: ref, out_$i111: i64, out_$i112: i1, out_$i113: i32, out_$i114: i32, out_$i115: i32, out_$i17: i32, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i8: i32, out_$i9: i32, out_$i119: i32, out_vslice_dummy_var_124: i32)
{

  entry:
    out_$i10, out_$p13, out_$p14, out_$i15, out_$i16, out_$i18, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$i56, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$p88, out_$p89, out_$p91, out_$p92, out_$p94, out_$p95, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$p31, out_$i102, out_$p103, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i17, out_$i116, out_$i117, out_$i118, out_$i8, out_$i9, out_$i119, out_vslice_dummy_var_124 := in_$i10, in_$p13, in_$p14, in_$i15, in_$i16, in_$i18, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$p53, in_$i54, in_$i55, in_$i56, in_$p59, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$p75, in_$i76, in_$i77, in_$i78, in_$p79, in_$i80, in_$i81, in_$i82, in_$p83, in_$i84, in_$i85, in_$i86, in_$p88, in_$p89, in_$p91, in_$p92, in_$p94, in_$p95, in_$p97, in_$i98, in_$i99, in_$i100, in_$p101, in_$p31, in_$i102, in_$p103, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i17, in_$i116, in_$i117, in_$i118, in_$i8, in_$i9, in_$i119, in_vslice_dummy_var_124;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12930;

  $bb45:
    assume out_$i118 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$i9 := out_$i17, out_$i116;
    goto $bb45_dummy;

  corral_source_split_12943:
    assume {:verifier.code 0} true;
    out_$i119 := out_$i17;
    assume true;
    goto $bb45;

  corral_source_split_12942:
    assume {:verifier.code 0} true;
    out_$i118 := $sgt.i32(out_$i117, out_$i116);
    goto corral_source_split_12943;

  corral_source_split_12941:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i32($M.0, in_$p4);
    goto corral_source_split_12942;

  corral_source_split_12940:
    assume {:verifier.code 0} true;
    out_$i116 := $add.i32(out_$i9, 1);
    call {:si_unique_call 2034} {:cexpr "i"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_12941;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_12940;

  corral_source_split_13056:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i113;
    goto $bb11;

  corral_source_split_13052:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i8;
    goto $bb11;

  corral_source_split_12953:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i8;
    goto $bb11;

  corral_source_split_12938:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i8;
    goto $bb11;

  $bb9:
    assume out_$i16 == 1;
    goto corral_source_split_12938;

  corral_source_split_12936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_12935:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i64(out_$i15, 0);
    goto corral_source_split_12936;

  corral_source_split_12934:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_12935;

  corral_source_split_12933:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_12934;

  corral_source_split_12932:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3216)), $mul.ref(32, 1)), $mul.ref(out_$i10, 72)), $mul.ref(56, 1));
    goto corral_source_split_12933;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i9);
    goto corral_source_split_12932;

  corral_source_split_12930:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13:
    assume out_$i26 == 1;
    goto corral_source_split_12953;

  corral_source_split_12951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_12950:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i64(out_$i25, 0);
    goto corral_source_split_12951;

  corral_source_split_12949:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_12950;

  corral_source_split_12948:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_12949;

  corral_source_split_12947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} out_$p23 := v4l2_get_subdev_hostdata(out_$p22);
    goto corral_source_split_12948;

  corral_source_split_12946:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_12947;

  corral_source_split_12945:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3216)), $mul.ref(32, 1)), $mul.ref(out_$i18, 72)), $mul.ref(56, 1));
    goto corral_source_split_12946;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i9);
    goto corral_source_split_12945;

  $bb10:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb42:
    assume out_$i112 == 1;
    goto corral_source_split_13052;

  corral_source_split_13044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_13043:
    assume {:verifier.code 0} true;
    out_$i112 := $eq.i64(out_$i111, 0);
    goto corral_source_split_13044;

  corral_source_split_13042:
    assume {:verifier.code 0} true;
    out_$i111 := $p2i.ref.i64(out_$p103);
    goto corral_source_split_13043;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_13042;

  corral_source_split_13040:
    assume {:verifier.code 0} true;
    out_$i102, out_$p103 := out_$i78, $0.ref;
    goto $bb40;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    out_$i102, out_$p103 := 0, out_$p22;
    goto $bb40;

  corral_source_split_12969:
    assume {:verifier.code 0} true;
    goto corral_source_split_12970;

  $bb22:
    assume out_$i33 == 1;
    goto corral_source_split_12969;

  $bb17:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i28, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    out_$i33 := $ule.i32(out_$i32, 1);
    assume {:verifier.code 0} true;
    out_$p31 := out_$p23;
    assume true;
    goto $bb22;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i28, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_12955:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p24, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_12955;

  $bb14:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_13039:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, out_$p101, out_$p22);
    goto corral_source_split_13040;

  corral_source_split_13038:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(out_$i100, 8));
    goto corral_source_split_13039;

  corral_source_split_13037:
    assume {:verifier.code 0} true;
    out_$i100 := $sext.i32.i64(out_$i99);
    goto corral_source_split_13038;

  corral_source_split_13036:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i16.i32(out_$i98);
    goto corral_source_split_13037;

  corral_source_split_13035:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i16($M.0, out_$p97);
    goto corral_source_split_13036;

  corral_source_split_13034:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p24, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_13035;

  corral_source_split_13033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} out_vslice_dummy_var_124 := printk.ref.ref.ref.ref(.str.150, out_$p89, out_$p92, out_$p95);
    goto corral_source_split_13034;

  corral_source_split_13032:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_13033;

  corral_source_split_13031:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref($add.ref(out_$p60, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_13032;

  corral_source_split_13030:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.0, out_$p91);
    goto corral_source_split_13031;

  corral_source_split_13029:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref(out_$p22, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_13030;

  corral_source_split_13028:
    assume {:verifier.code 0} true;
    out_$p89 := $bitcast.ref.ref(out_$p88);
    goto corral_source_split_13029;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(104, 1));
    goto corral_source_split_13028;

  $bb38:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_13024:
    assume {:verifier.code 0} true;
    out_$i86 := out_$i84;
    assume true;
    goto $bb38;

  corral_source_split_13023:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i32(out_$i84, 0);
    goto corral_source_split_13024;

  corral_source_split_13022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} out_$i84 := media_entity_create_link(out_$p79, out_$i82, out_$p83, 0, 3);
    call {:si_unique_call 2050} {:cexpr "ret"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_13023;

  corral_source_split_13021:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p60, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_13022;

  corral_source_split_13020:
    assume {:verifier.code 0} true;
    out_$i82 := $trunc.i32.i16(out_$i81);
    goto corral_source_split_13021;

  corral_source_split_13019:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i16.i32(out_$i80);
    goto corral_source_split_13020;

  corral_source_split_13018:
    assume {:verifier.code 0} true;
    out_$i80 := $trunc.i32.i16(out_$i78);
    goto corral_source_split_13019;

  corral_source_split_13017:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p22, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_13018;

  corral_source_split_13016:
    assume {:verifier.code 0} true;
    out_$i78 := $add.i32(out_$i77, $sub.i32(0, 1));
    call {:si_unique_call 2048} {:cexpr "pad"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_13017;

  corral_source_split_13015:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i16.i32(out_$i76);
    goto corral_source_split_13016;

  corral_source_split_13014:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i16($M.0, out_$p75);
    goto corral_source_split_13015;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref($add.ref(out_$p22, $mul.ref(0, 304)), $mul.ref(0, 1)), $mul.ref(60, 1));
    goto corral_source_split_13014;

  $bb35:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_13010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_13009:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i64(out_$i72, 0);
    goto corral_source_split_13010;

  corral_source_split_13008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} out_$i72 := ldv__builtin_expect(out_$i71, 0);
    call {:si_unique_call 2047} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i72);
    goto corral_source_split_13009;

  corral_source_split_13007:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i70);
    goto corral_source_split_13008;

  corral_source_split_13006:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i1.i32(out_$i69);
    goto corral_source_split_13007;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i63, 0);
    goto corral_source_split_13006;

  $bb32:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_13004:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_13003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} warn_slowpath_fmt.ref.i32.ref(.str.132, 872, .str.149);
    goto corral_source_split_13004;

  $bb31:
    assume out_$i68 == 1;
    goto corral_source_split_13003;

  corral_source_split_13001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_13000:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i64(out_$i67, 0);
    goto corral_source_split_13001;

  corral_source_split_12999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} out_$i67 := ldv__builtin_expect(out_$i66, 0);
    call {:si_unique_call 2044} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i67);
    goto corral_source_split_13000;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i65);
    goto corral_source_split_12999;

  corral_source_split_12997:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i1.i32(out_$i64);
    goto corral_source_split_12998;

  corral_source_split_12996:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i63, 0);
    goto corral_source_split_12997;

  corral_source_split_12995:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i1.i32(out_$i62);
    call {:si_unique_call 2042} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_12996;

  corral_source_split_12994:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i64(out_$i61, 0);
    goto corral_source_split_12995;

  corral_source_split_12993:
    assume {:verifier.code 0} true;
    out_$i61 := $p2i.ref.i64(out_$p60);
    goto corral_source_split_12994;

  corral_source_split_12992:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_12993;

  corral_source_split_12991:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3216)), $mul.ref(0, 1)), $mul.ref(out_$i56, 16)), $mul.ref(0, 1));
    goto corral_source_split_12992;

  corral_source_split_12990:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i55);
    goto corral_source_split_12991;

  corral_source_split_12989:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i16.i32(out_$i54);
    goto corral_source_split_12990;

  corral_source_split_12988:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i16($M.0, out_$p53);
    goto corral_source_split_12989;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p24, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_12988;

  $bb28:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_12982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_12981:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i50, 0);
    goto corral_source_split_12982;

  corral_source_split_12980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} out_$i50 := ldv__builtin_expect(out_$i49, 0);
    call {:si_unique_call 2041} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i50);
    goto corral_source_split_12981;

  corral_source_split_12979:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i48);
    goto corral_source_split_12980;

  corral_source_split_12978:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i1.i32(out_$i47);
    goto corral_source_split_12979;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i32(out_$i38, 0);
    goto corral_source_split_12978;

  $bb25:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_12975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} warn_slowpath_fmt.ref.i32.ref.i32(.str.132, 866, .str.148, out_$i46);
    goto corral_source_split_12976;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i16.i32(out_$i45);
    goto corral_source_split_12975;

  corral_source_split_12973:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i16($M.0, out_$p44);
    goto corral_source_split_12974;

  corral_source_split_12972:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p24, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_12973;

  $bb24:
    assume out_$i43 == 1;
    goto corral_source_split_12972;

  corral_source_split_12967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_12966:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_12967;

  corral_source_split_12965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} out_$i42 := ldv__builtin_expect(out_$i41, 0);
    call {:si_unique_call 2038} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i42);
    goto corral_source_split_12966;

  corral_source_split_12964:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i40);
    goto corral_source_split_12965;

  corral_source_split_12963:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i1.i32(out_$i39);
    goto corral_source_split_12964;

  corral_source_split_12962:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_12963;

  corral_source_split_12961:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i1.i32(out_$i37);
    call {:si_unique_call 2036} {:cexpr "__ret_warn_on"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_12962;

  corral_source_split_12960:
    assume {:verifier.code 0} true;
    out_$i37 := $ugt.i32(out_$i36, 1);
    goto corral_source_split_12961;

  corral_source_split_12959:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i16.i32(out_$i35);
    goto corral_source_split_12960;

  corral_source_split_12958:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i16($M.0, out_$p34);
    goto corral_source_split_12959;

  corral_source_split_12957:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p24, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_12958;

  $bb19:
    assume out_$i30 == 1;
    goto corral_source_split_12957;

  $bb18:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i28, 3);
    assume {:verifier.code 0} true;
    out_$p31 := out_$p23;
    assume true;
    goto $bb19;

  corral_source_split_13055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} out_$i115 := __fimc_md_create_fimc_sink_links(in_$p0, out_$p103, out_$p22, out_$i102, out_$i114);
    call {:si_unique_call 2056} {:cexpr "ret"} boogie_si_record_i32(out_$i115);
    goto corral_source_split_13056;

  corral_source_split_13054:
    assume {:verifier.code 0} true;
    out_$i114 := $shl.i32(1, out_$i8);
    call {:si_unique_call 2054} {:cexpr "link_mask"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_13055;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i113 := $add.i32(out_$i8, 1);
    call {:si_unique_call 2053} {:cexpr "fimc_id"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_13054;

  $bb43:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb45_dummy:
    call {:si_unique_call 1} out_$i10, out_$p13, out_$p14, out_$i15, out_$i16, out_$i18, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$i56, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$p88, out_$p89, out_$p91, out_$p92, out_$p94, out_$p95, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$p31, out_$i102, out_$p103, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i17, out_$i116, out_$i117, out_$i118, out_$i8, out_$i9, out_$i119, out_vslice_dummy_var_124 := fimc_md_create_links_loop_$bb7(in_$p0, in_$p1, in_$p4, out_$i10, out_$p13, out_$p14, out_$i15, out_$i16, out_$i18, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p53, out_$i54, out_$i55, out_$i56, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$i86, out_$p88, out_$p89, out_$p91, out_$p92, out_$p94, out_$p95, out_$p97, out_$i98, out_$i99, out_$i100, out_$p101, out_$p31, out_$i102, out_$p103, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i17, out_$i116, out_$i117, out_$i118, out_$i8, out_$i9, out_$i119, out_vslice_dummy_var_124);
    return;

  exit:
    return;
}



procedure fimc_md_create_links_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$i10: i64, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i18: i64, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i30: i1, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$i35: i16, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i64, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$i45: i16, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i64, in_$i50: i64, in_$i51: i1, in_$p53: ref, in_$i54: i16, in_$i55: i32, in_$i56: i64, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i64, in_$i67: i64, in_$i68: i1, in_$i69: i1, in_$i70: i32, in_$i71: i64, in_$i72: i64, in_$i73: i1, in_$p75: ref, in_$i76: i16, in_$i77: i32, in_$i78: i32, in_$p79: ref, in_$i80: i16, in_$i81: i32, in_$i82: i16, in_$p83: ref, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$p88: ref, in_$p89: ref, in_$p91: ref, in_$p92: ref, in_$p94: ref, in_$p95: ref, in_$p97: ref, in_$i98: i16, in_$i99: i32, in_$i100: i64, in_$p101: ref, in_$p31: ref, in_$i102: i32, in_$p103: ref, in_$i111: i64, in_$i112: i1, in_$i113: i32, in_$i114: i32, in_$i115: i32, in_$i17: i32, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i8: i32, in_$i9: i32, in_$i119: i32, in_vslice_dummy_var_124: i32) returns (out_$i10: i64, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i18: i64, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i30: i1, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$i35: i16, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i64, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$i45: i16, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i64, out_$i50: i64, out_$i51: i1, out_$p53: ref, out_$i54: i16, out_$i55: i32, out_$i56: i64, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i64, out_$i67: i64, out_$i68: i1, out_$i69: i1, out_$i70: i32, out_$i71: i64, out_$i72: i64, out_$i73: i1, out_$p75: ref, out_$i76: i16, out_$i77: i32, out_$i78: i32, out_$p79: ref, out_$i80: i16, out_$i81: i32, out_$i82: i16, out_$p83: ref, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$p88: ref, out_$p89: ref, out_$p91: ref, out_$p92: ref, out_$p94: ref, out_$p95: ref, out_$p97: ref, out_$i98: i16, out_$i99: i32, out_$i100: i64, out_$p101: ref, out_$p31: ref, out_$i102: i32, out_$p103: ref, out_$i111: i64, out_$i112: i1, out_$i113: i32, out_$i114: i32, out_$i115: i32, out_$i17: i32, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i8: i32, out_$i9: i32, out_$i119: i32, out_vslice_dummy_var_124: i32);
  modifies $M.32, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $CurrAddr;



implementation __fimc_md_create_fimc_sink_links_loop_$bb13(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$i4: i32, in_$i19: i64, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$i26: i64, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i32, in_$i39: i64, in_$p41: ref, in_$p42: ref, in_$p45: ref, in_$i46: i16, in_$i47: i32, in_$i48: i16, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i1, in_$i82: i32, in_$p83: ref, in_$p84: ref, in_$i25: i32, in_$i86: i32, in_$i87: i1, in_$i17: i32, in_$i18: i32, in_$i88: i1, in_vslice_dummy_var_127: i32) returns (out_$i19: i64, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$i26: i64, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i32, out_$i39: i64, out_$p41: ref, out_$p42: ref, out_$p45: ref, out_$i46: i16, out_$i47: i32, out_$i48: i16, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i1, out_$i82: i32, out_$p83: ref, out_$p84: ref, out_$i25: i32, out_$i86: i32, out_$i87: i1, out_$i17: i32, out_$i18: i32, out_$i88: i1, out_vslice_dummy_var_127: i32)
{

  entry:
    out_$i19, out_$p21, out_$p22, out_$i23, out_$i24, out_$i26, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p41, out_$p42, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$i25, out_$i86, out_$i87, out_$i17, out_$i18, out_$i88, out_vslice_dummy_var_127 := in_$i19, in_$p21, in_$p22, in_$i23, in_$i24, in_$i26, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p41, in_$p42, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$p53, in_$p54, in_$i55, in_$i56, in_$p57, in_$p58, in_$p59, in_$p60, in_$i61, in_$i62, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$p68, in_$p69, in_$p70, in_$i71, in_$p72, in_$i73, in_$i74, in_$i75, in_$p77, in_$p78, in_$p79, in_$p80, in_$i81, in_$i82, in_$p83, in_$p84, in_$i25, in_$i86, in_$i87, in_$i17, in_$i18, in_$i88, in_vslice_dummy_var_127;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_13201;

  $bb36:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i17, out_$i18 := out_$i25, out_$i86;
    goto $bb36_dummy;

  corral_source_split_13214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_13213:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i25, 0);
    goto corral_source_split_13214;

  corral_source_split_13212:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i32(out_$i18, 1);
    call {:si_unique_call 2081} {:cexpr "i"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_13213;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_13212;

  corral_source_split_13279:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i74;
    goto $bb17;

  corral_source_split_13227:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i17;
    goto $bb17;

  corral_source_split_13210:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i17;
    goto $bb17;

  $bb15:
    assume out_$i24 == 1;
    goto corral_source_split_13210;

  corral_source_split_13208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_13207:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i64(out_$i23, 0);
    goto corral_source_split_13208;

  corral_source_split_13206:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_13207;

  corral_source_split_13205:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_13206;

  corral_source_split_13204:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(out_$i19, 8));
    goto corral_source_split_13205;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i18);
    goto corral_source_split_13204;

  corral_source_split_13283:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb38:
    assume out_$i88 == 1;
    goto corral_source_split_13283;

  corral_source_split_13202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_13201:
    assume {:verifier.code 0} true;
    out_$i88 := $sle.i32(out_$i18, 3);
    goto corral_source_split_13202;

  $bb19:
    assume out_$i36 == 1;
    goto corral_source_split_13227;

  corral_source_split_13225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_13224:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 0);
    goto corral_source_split_13225;

  corral_source_split_13223:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    goto corral_source_split_13224;

  corral_source_split_13222:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.0, out_$p33);
    goto corral_source_split_13223;

  corral_source_split_13221:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(out_$p32, $mul.ref(0, 1));
    goto corral_source_split_13222;

  corral_source_split_13220:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_13221;

  corral_source_split_13219:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_13220;

  corral_source_split_13218:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p29, $mul.ref(0, 5568)), $mul.ref(256, 1));
    goto corral_source_split_13219;

  corral_source_split_13217:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_13218;

  corral_source_split_13216:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(out_$i26, 8));
    goto corral_source_split_13217;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i18);
    goto corral_source_split_13216;

  $bb16:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_13278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} out_vslice_dummy_var_127 := printk.ref.ref.ref.i32.ref(.str.152, out_$p78, out_$p80, out_$i82, out_$p84);
    goto corral_source_split_13279;

  corral_source_split_13277:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.0, out_$p83);
    goto corral_source_split_13278;

  corral_source_split_13276:
    assume {:verifier.code 0} true;
    out_$i82 := (if out_$i81 == 1 then 61 else 45);
    out_$p83 := $add.ref($add.ref($add.ref($add.ref($add.ref(out_$p42, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_13277;

  corral_source_split_13275:
    assume {:verifier.code 0} true;
    out_$i81 := $ne.i32(out_$i38, 0);
    goto corral_source_split_13276;

  corral_source_split_13274:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.0, out_$p79);
    goto corral_source_split_13275;

  corral_source_split_13273:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p1, $mul.ref(0, 120)), $mul.ref(32, 1));
    goto corral_source_split_13274;

  corral_source_split_13272:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(out_$p77);
    goto corral_source_split_13273;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3216)), $mul.ref(2656, 1)), $mul.ref(104, 1));
    goto corral_source_split_13272;

  $bb33:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_13268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_13267:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i32(out_$i74, 0);
    goto corral_source_split_13268;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_13267;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i74 := $sub.i32(0, 515);
    goto $bb31;

  corral_source_split_13265:
    assume {:verifier.code 0} true;
    out_$i74 := out_$i73;
    goto $bb31;

  corral_source_split_13264:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(out_$p70, $mul.ref(out_$i71, 24));
    call {:si_unique_call 2085} out_$i73 := devirtbounce.14(out_$p66, out_$p45, out_$p68, out_$p72, out_$i38);
    call {:si_unique_call 2086} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_13265;

  corral_source_split_13263:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(in_$i3);
    goto corral_source_split_13264;

  corral_source_split_13262:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.0, out_$p69);
    goto corral_source_split_13263;

  corral_source_split_13261:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p1, $mul.ref(0, 120)), $mul.ref(72, 1));
    goto corral_source_split_13262;

  corral_source_split_13260:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_13261;

  corral_source_split_13259:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    out_$p67 := $add.ref($add.ref($add.ref($add.ref($add.ref(out_$p42, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_13260;

  corral_source_split_13258:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p64, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13259;

  corral_source_split_13257:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.0, out_$p63);
    goto corral_source_split_13258;

  $bb29:
    assume out_$i62 == 1;
    out_$p63 := $add.ref($add.ref($add.ref($add.ref($add.ref(out_$p42, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_13257;

  corral_source_split_13255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_13254:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i64(out_$i61, 0);
    goto corral_source_split_13255;

  corral_source_split_13253:
    assume {:verifier.code 0} true;
    out_$i61 := $p2i.ref.i64(out_$p60);
    goto corral_source_split_13254;

  corral_source_split_13252:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_13253;

  corral_source_split_13251:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p58, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13252;

  corral_source_split_13250:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_13251;

  $bb26:
    assume out_$i56 == 1;
    out_$p57 := $add.ref($add.ref($add.ref($add.ref($add.ref(out_$p42, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_13250;

  corral_source_split_13248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_13247:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, 0);
    goto corral_source_split_13248;

  corral_source_split_13246:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    goto corral_source_split_13247;

  corral_source_split_13245:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_13246;

  $bb25:
    out_$p53 := $add.ref($add.ref($add.ref($add.ref($add.ref(out_$p42, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_13245;

  $bb23:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_13239:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i49;
    assume true;
    goto $bb23;

  corral_source_split_13238:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i49, 0);
    goto corral_source_split_13239;

  corral_source_split_13237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} out_$i49 := media_entity_create_link(in_$p1, out_$i48, out_$p45, 0, out_$i38);
    call {:si_unique_call 2084} {:cexpr "ret"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_13238;

  corral_source_split_13236:
    assume {:verifier.code 0} true;
    out_$i48 := $trunc.i32.i16(out_$i47);
    goto corral_source_split_13237;

  corral_source_split_13235:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i16.i32(out_$i46);
    goto corral_source_split_13236;

  corral_source_split_13234:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i32.i16(in_$i3);
    goto corral_source_split_13235;

  corral_source_split_13233:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref($add.ref(out_$p42, $mul.ref(0, 5568)), $mul.ref(2264, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_13234;

  corral_source_split_13232:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_13233;

  corral_source_split_13231:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3216)), $mul.ref(416, 1)), $mul.ref(out_$i39, 8));
    goto corral_source_split_13232;

  corral_source_split_13230:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i18);
    goto corral_source_split_13231;

  corral_source_split_13229:
    assume {:verifier.code 0} true;
    out_$i38 := $and.i32(out_$i37, 1);
    call {:si_unique_call 2082} {:cexpr "flags"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_13230;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i37 := $ashr.i32(in_$i4, out_$i18);
    goto corral_source_split_13229;

  $bb20:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb28;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i62 == 1);
    goto $bb28;

  $bb36_dummy:
    call {:si_unique_call 1} out_$i19, out_$p21, out_$p22, out_$i23, out_$i24, out_$i26, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p41, out_$p42, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$i25, out_$i86, out_$i87, out_$i17, out_$i18, out_$i88, out_vslice_dummy_var_127 := __fimc_md_create_fimc_sink_links_loop_$bb13(in_$p0, in_$p1, in_$i3, in_$i4, out_$i19, out_$p21, out_$p22, out_$i23, out_$i24, out_$i26, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p41, out_$p42, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p83, out_$p84, out_$i25, out_$i86, out_$i87, out_$i17, out_$i18, out_$i88, out_vslice_dummy_var_127);
    return;

  exit:
    return;
}



procedure __fimc_md_create_fimc_sink_links_loop_$bb13(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$i4: i32, in_$i19: i64, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$i26: i64, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i32, in_$i39: i64, in_$p41: ref, in_$p42: ref, in_$p45: ref, in_$i46: i16, in_$i47: i32, in_$i48: i16, in_$i49: i32, in_$i50: i1, in_$i51: i32, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i1, in_$i82: i32, in_$p83: ref, in_$p84: ref, in_$i25: i32, in_$i86: i32, in_$i87: i1, in_$i17: i32, in_$i18: i32, in_$i88: i1, in_vslice_dummy_var_127: i32) returns (out_$i19: i64, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$i26: i64, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i32, out_$i39: i64, out_$p41: ref, out_$p42: ref, out_$p45: ref, out_$i46: i16, out_$i47: i32, out_$i48: i16, out_$i49: i32, out_$i50: i1, out_$i51: i32, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i1, out_$i82: i32, out_$p83: ref, out_$p84: ref, out_$i25: i32, out_$i86: i32, out_$i87: i1, out_$i17: i32, out_$i18: i32, out_$i88: i1, out_vslice_dummy_var_127: i32);
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.0, $CurrAddr;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$i11: i32, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i95: i1, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i1, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$i119: i32, in_$i120: i1, in_$p121: ref, in_$p122: ref, in_$i124: i32, in_$i125: i1, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i1, in_$i130: i32, in_$i131: i1, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i144: i8, in_$i145: i1, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i150: i8, in_$i151: i1, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$i156: i8, in_$i157: i1, in_$i158: i32, in_$i159: i32, in_$i160: i1, in_$i161: i32, in_$i162: i32, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$i166: i32, in_$i167: i32, in_$i168: i1, in_$i169: i32, in_$i170: i32, in_$i171: i32, in_$i172: i1, in_$i173: i32, in_$i174: i1, in_vslice_dummy_var_221: i32, in_vslice_dummy_var_222: i64, in_vslice_dummy_var_223: i64, in_vslice_dummy_var_224: i32, in_vslice_dummy_var_225: i32) returns (out_$i11: i32, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i95: i1, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i1, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$i119: i32, out_$i120: i1, out_$p121: ref, out_$p122: ref, out_$i124: i32, out_$i125: i1, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i1, out_$i130: i32, out_$i131: i1, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i144: i8, out_$i145: i1, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i150: i8, out_$i151: i1, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$i156: i8, out_$i157: i1, out_$i158: i32, out_$i159: i32, out_$i160: i1, out_$i161: i32, out_$i162: i32, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$i166: i32, out_$i167: i32, out_$i168: i1, out_$i169: i32, out_$i170: i32, out_$i171: i32, out_$i172: i1, out_$i173: i32, out_$i174: i1, out_vslice_dummy_var_221: i32, out_vslice_dummy_var_222: i64, out_vslice_dummy_var_223: i64, out_vslice_dummy_var_224: i32, out_vslice_dummy_var_225: i32)
{

  entry:
    out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$i119, out_$i120, out_$p121, out_$p122, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$p143, out_$i144, out_$i145, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_vslice_dummy_var_221, out_vslice_dummy_var_222, out_vslice_dummy_var_223, out_vslice_dummy_var_224, out_vslice_dummy_var_225 := in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$p78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$p115, in_$p116, in_$i117, in_$i119, in_$i120, in_$p121, in_$p122, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$p143, in_$i144, in_$i145, in_$i147, in_$i148, in_$p149, in_$i150, in_$i151, in_$i153, in_$i154, in_$p155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$p165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_vslice_dummy_var_221, in_vslice_dummy_var_222, in_vslice_dummy_var_223, in_vslice_dummy_var_224, in_vslice_dummy_var_225;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2749} out_$i11 := __VERIFIER_nondet_int();
    call {:si_unique_call 2750} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i11);
    call {:si_unique_call 2751} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i11);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb45_dummy;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_15807:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_351:
    goto corral_source_split_15807;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  corral_source_split_15806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2752} ldv_main_exported_11();
    goto SeqInstr_350;

  $bb42:
    assume out_$i32 == 1;
    goto corral_source_split_15806;

  corral_source_split_15804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_15803:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_15804;

  corral_source_split_15802:
    assume {:verifier.code 0} true;
    out_$i31 := $M.77;
    goto corral_source_split_15803;

  $bb40:
    assume out_$i30 == 1;
    goto corral_source_split_15802;

  $bb38:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i11, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb34:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i11, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb24:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i11, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb3:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i11, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i11, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb47:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_15810:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_15809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2753} ldv_main_exported_7();
    goto corral_source_split_15810;

  $bb46:
    assume out_$i34 == 1;
    goto corral_source_split_15809;

  corral_source_split_15800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_15799:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_15800;

  corral_source_split_15798:
    assume {:verifier.code 0} true;
    out_$i33 := $M.96;
    goto corral_source_split_15799;

  $bb39:
    assume !(out_$i29 == 1);
    goto corral_source_split_15798;

  $bb50:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_15813:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_15812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} ldv_main_exported_17();
    goto corral_source_split_15813;

  $bb49:
    assume out_$i36 == 1;
    goto corral_source_split_15812;

  corral_source_split_15792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_15791:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_15792;

  corral_source_split_15790:
    assume {:verifier.code 0} true;
    out_$i35 := $M.64;
    goto corral_source_split_15791;

  $bb36:
    assume out_$i28 == 1;
    goto corral_source_split_15790;

  $bb35:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i11, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb53:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb63:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_15828:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_15827:
    assume {:verifier.code 0} true;
    $M.105 := 1;
    call {:si_unique_call 2759} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_15828;

  corral_source_split_15826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2758} out_vslice_dummy_var_221 := cam_clk_prepare(out_$p45);
    goto corral_source_split_15827;

  corral_source_split_15825:
    assume {:verifier.code 0} true;
    out_$p45 := $M.102;
    goto corral_source_split_15826;

  $bb62:
    assume out_$i44 == 1;
    goto corral_source_split_15825;

  corral_source_split_15823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_15822:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, 1);
    goto corral_source_split_15823;

  corral_source_split_15821:
    assume {:verifier.code 0} true;
    out_$i43 := $M.105;
    goto corral_source_split_15822;

  $bb60:
    assume out_$i42 == 1;
    goto corral_source_split_15821;

  $bb55:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i39, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i39, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_15815:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2755} out_$i39 := __VERIFIER_nondet_int();
    call {:si_unique_call 2756} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i39);
    call {:si_unique_call 2757} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i39);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume out_$i38 == 1;
    goto corral_source_split_15815;

  corral_source_split_15796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_15795:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_15796;

  corral_source_split_15794:
    assume {:verifier.code 0} true;
    out_$i37 := $M.105;
    goto corral_source_split_15795;

  $bb37:
    assume !(out_$i28 == 1);
    goto corral_source_split_15794;

  $bb67:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_15833:
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_15832:
    assume {:verifier.code 0} true;
    $M.105 := 1;
    call {:si_unique_call 2761} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_15833;

  corral_source_split_15831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2760} cam_clk_unprepare(out_$p49);
    goto corral_source_split_15832;

  corral_source_split_15830:
    assume {:verifier.code 0} true;
    out_$p49 := $M.102;
    goto corral_source_split_15831;

  $bb66:
    assume out_$i48 == 1;
    goto corral_source_split_15830;

  corral_source_split_15819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_15818:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, 1);
    goto corral_source_split_15819;

  corral_source_split_15817:
    assume {:verifier.code 0} true;
    out_$i47 := $M.105;
    goto corral_source_split_15818;

  $bb57:
    assume out_$i41 == 1;
    goto corral_source_split_15817;

  $bb56:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i39, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_15835:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2762} ldv_stop();
    goto corral_source_split_15835;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb58:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb59;

  $bb61:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb59;

  $bb73:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb83:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb85:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_15859:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_15858:
    assume {:verifier.code 0} true;
    $M.110 := 1;
    call {:si_unique_call 2770} {:cexpr "probed_1"} boogie_si_record_i32(1);
    goto corral_source_split_15859;

  corral_source_split_15857:
    assume {:verifier.code 0} true;
    $M.43 := out_$i63;
    call {:si_unique_call 2769} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_15858;

  corral_source_split_15856:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i62, 1);
    goto corral_source_split_15857;

  corral_source_split_15855:
    assume {:verifier.code 0} true;
    out_$i62 := $M.43;
    goto corral_source_split_15856;

  corral_source_split_15854:
    assume {:verifier.code 0} true;
    $M.38 := 2;
    call {:si_unique_call 2768} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_15855;

  $bb84:
    assume out_$i61 == 1;
    goto corral_source_split_15854;

  corral_source_split_15852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_15851:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 0);
    goto corral_source_split_15852;

  corral_source_split_15850:
    assume {:verifier.code 0} true;
    out_$i60 := $M.109;
    goto corral_source_split_15851;

  corral_source_split_15849:
    assume {:verifier.code 0} true;
    $M.109 := out_$i59;
    call {:si_unique_call 2767} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i59);
    goto corral_source_split_15850;

  SeqInstr_354:
    goto corral_source_split_15849;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  corral_source_split_15848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2766} out_$i59 := fimc_md_probe(out_$p58);
    goto SeqInstr_353;

  corral_source_split_15847:
    assume {:verifier.code 0} true;
    out_$p58 := $M.39;
    goto corral_source_split_15848;

  $bb82:
    assume out_$i57 == 1;
    goto corral_source_split_15847;

  corral_source_split_15845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_15844:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, 1);
    goto corral_source_split_15845;

  corral_source_split_15843:
    assume {:verifier.code 0} true;
    out_$i56 := $M.38;
    goto corral_source_split_15844;

  $bb80:
    assume out_$i55 == 1;
    goto corral_source_split_15843;

  $bb75:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i52, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb74:
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i52, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_15837:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2763} out_$i52 := __VERIFIER_nondet_int();
    call {:si_unique_call 2764} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i52);
    call {:si_unique_call 2765} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i52);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb72:
    assume out_$i51 == 1;
    goto corral_source_split_15837;

  corral_source_split_15784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_15783:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i50, 0);
    goto corral_source_split_15784;

  corral_source_split_15782:
    assume {:verifier.code 0} true;
    out_$i50 := $M.38;
    goto corral_source_split_15783;

  $bb32:
    assume out_$i26 == 1;
    goto corral_source_split_15782;

  $bb26:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i11, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb25:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i11, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb104:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_15898:
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_15897:
    assume {:verifier.code 0} true;
    $M.110 := 0;
    call {:si_unique_call 2780} {:cexpr "probed_1"} boogie_si_record_i32(0);
    goto corral_source_split_15898;

  corral_source_split_15896:
    assume {:verifier.code 0} true;
    $M.43 := out_$i83;
    call {:si_unique_call 2779} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i83);
    goto corral_source_split_15897;

  corral_source_split_15895:
    assume {:verifier.code 0} true;
    out_$i83 := $sub.i32(out_$i82, 1);
    goto corral_source_split_15896;

  corral_source_split_15894:
    assume {:verifier.code 0} true;
    out_$i82 := $M.43;
    goto corral_source_split_15895;

  corral_source_split_15893:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 2778} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_15894;

  $bb103:
    assume out_$i81 == 1;
    goto corral_source_split_15893;

  corral_source_split_15891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_15890:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 0);
    goto corral_source_split_15891;

  corral_source_split_15889:
    assume {:verifier.code 0} true;
    out_$i80 := $M.111;
    goto corral_source_split_15890;

  corral_source_split_15888:
    assume {:verifier.code 0} true;
    $M.111 := out_$i79;
    call {:si_unique_call 2777} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_15889;

  corral_source_split_15887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2776} out_$i79 := fimc_md_remove(out_$p78);
    goto corral_source_split_15888;

  corral_source_split_15886:
    assume {:verifier.code 0} true;
    out_$p78 := $M.39;
    goto corral_source_split_15887;

  $bb101:
    assume out_$i77 == 1;
    goto corral_source_split_15886;

  corral_source_split_15884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_15883:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i76, 1);
    goto corral_source_split_15884;

  corral_source_split_15882:
    assume {:verifier.code 0} true;
    out_$i76 := $M.110;
    goto corral_source_split_15883;

  $bb98:
    assume out_$i75 == 1;
    goto corral_source_split_15882;

  corral_source_split_15880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_15879:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 2);
    goto corral_source_split_15880;

  $bb97:
    assume {:verifier.code 0} true;
    out_$i74 := $M.38;
    goto corral_source_split_15879;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb95:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_15877:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_15876:
    assume {:verifier.code 0} true;
    $M.110 := 0;
    call {:si_unique_call 2775} {:cexpr "probed_1"} boogie_si_record_i32(0);
    goto corral_source_split_15877;

  corral_source_split_15875:
    assume {:verifier.code 0} true;
    $M.43 := out_$i73;
    call {:si_unique_call 2774} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_15876;

  corral_source_split_15874:
    assume {:verifier.code 0} true;
    out_$i73 := $sub.i32(out_$i72, 1);
    goto corral_source_split_15875;

  corral_source_split_15873:
    assume {:verifier.code 0} true;
    out_$i72 := $M.43;
    goto corral_source_split_15874;

  corral_source_split_15872:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 2773} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_15873;

  $bb94:
    assume out_$i71 == 1;
    goto corral_source_split_15872;

  corral_source_split_15870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_15869:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 0);
    goto corral_source_split_15870;

  corral_source_split_15868:
    assume {:verifier.code 0} true;
    out_$i70 := $M.111;
    goto corral_source_split_15869;

  corral_source_split_15867:
    assume {:verifier.code 0} true;
    $M.111 := out_$i69;
    call {:si_unique_call 2772} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_15868;

  corral_source_split_15866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2771} out_$i69 := fimc_md_remove(out_$p68);
    goto corral_source_split_15867;

  corral_source_split_15865:
    assume {:verifier.code 0} true;
    out_$p68 := $M.39;
    goto corral_source_split_15866;

  $bb92:
    assume out_$i67 == 1;
    goto corral_source_split_15865;

  corral_source_split_15863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_15862:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i66, 1);
    goto corral_source_split_15863;

  corral_source_split_15861:
    assume {:verifier.code 0} true;
    out_$i66 := $M.110;
    goto corral_source_split_15862;

  $bb89:
    assume out_$i65 == 1;
    goto corral_source_split_15861;

  corral_source_split_15841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_15840:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 1);
    goto corral_source_split_15841;

  corral_source_split_15839:
    assume {:verifier.code 0} true;
    out_$i64 := $M.38;
    goto corral_source_split_15840;

  $bb77:
    assume out_$i54 == 1;
    goto corral_source_split_15839;

  $bb76:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i52, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb90:
    assume {:verifier.code 0} true;
    assume !(out_$i65 == 1);
    goto $bb91;

  $bb93:
    assume {:verifier.code 0} true;
    assume !(out_$i67 == 1);
    goto $bb91;

  $bb99:
    assume {:verifier.code 0} true;
    assume !(out_$i75 == 1);
    goto $bb100;

  $bb102:
    assume {:verifier.code 0} true;
    assume !(out_$i77 == 1);
    goto $bb100;

  corral_source_split_15900:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2781} ldv_stop();
    goto corral_source_split_15900;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb78:
    assume {:verifier.code 0} true;
    assume !(out_$i54 == 1);
    goto $bb79;

  $bb81:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb79;

  $bb111:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb121:
    assume {:verifier.code 0} true;
    assume !(out_$i91 == 1);
    goto $bb122;

  $bb124:
    assume {:verifier.code 0} true;
    assume !(out_$i93 == 1);
    goto $bb122;

  corral_source_split_15914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124;

  corral_source_split_15913:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i92, 0);
    goto corral_source_split_15914;

  corral_source_split_15912:
    assume {:verifier.code 0} true;
    out_$i92 := $M.43;
    goto corral_source_split_15913;

  $bb120:
    assume out_$i91 == 1;
    goto corral_source_split_15912;

  corral_source_split_15910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_15909:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i90, 2);
    goto corral_source_split_15910;

  corral_source_split_15908:
    assume {:verifier.code 0} true;
    out_$i90 := $M.106;
    goto corral_source_split_15909;

  $bb118:
    assume out_$i89 == 1;
    goto corral_source_split_15908;

  $bb113:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i86, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb112:
    assume {:verifier.code 0} true;
    out_$i87 := $slt.i32(out_$i86, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_15902:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2782} out_$i86 := __VERIFIER_nondet_int();
    call {:si_unique_call 2783} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i86);
    call {:si_unique_call 2784} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i86);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb110:
    assume out_$i85 == 1;
    goto corral_source_split_15902;

  corral_source_split_15788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_15787:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i32(out_$i84, 0);
    goto corral_source_split_15788;

  corral_source_split_15786:
    assume {:verifier.code 0} true;
    out_$i84 := $M.106;
    goto corral_source_split_15787;

  $bb33:
    assume !(out_$i26 == 1);
    goto corral_source_split_15786;

  $bb129:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb134:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_15962:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_15961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2818} ldv_initialize_v4l2_subdev_pad_ops_6();
    goto corral_source_split_15962;

  corral_source_split_15960:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 2817} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_15961;

  corral_source_split_15959:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2816} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_15960;

  corral_source_split_15958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2815} ldv_initialize_device_attribute_3();
    goto corral_source_split_15959;

  corral_source_split_15957:
    assume {:verifier.code 0} true;
    $M.107 := 1;
    call {:si_unique_call 2814} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_15958;

  corral_source_split_15956:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 2813} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_15957;

  corral_source_split_15955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2812} ldv_initialize_v4l2_file_operations_9();
    goto corral_source_split_15956;

  corral_source_split_15954:
    assume {:verifier.code 0} true;
    $M.98 := 1;
    call {:si_unique_call 2811} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_15955;

  corral_source_split_15953:
    assume {:verifier.code 0} true;
    $M.64 := 1;
    call {:si_unique_call 2810} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_15954;

  corral_source_split_15952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2809} ldv_initialize_v4l2_file_operations_12();
    goto corral_source_split_15953;

  corral_source_split_15951:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2808} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_15952;

  corral_source_split_15950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2807} ldv_initialize_clk_ops_2();
    goto corral_source_split_15951;

  corral_source_split_15949:
    assume {:verifier.code 0} true;
    $M.105 := 1;
    call {:si_unique_call 2806} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_15950;

  corral_source_split_15948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2805} ldv_initialize_vb2_ops_14();
    goto corral_source_split_15949;

  corral_source_split_15947:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2804} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_15948;

  corral_source_split_15946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2803} ldv_initialize_v4l2_ioctl_ops_8();
    goto corral_source_split_15947;

  corral_source_split_15945:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 2802} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15946;

  corral_source_split_15944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2801} ldv_initialize_exynos_media_pipeline_ops_4();
    goto corral_source_split_15945;

  corral_source_split_15943:
    assume {:verifier.code 0} true;
    $M.108 := 1;
    call {:si_unique_call 2800} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_15944;

  corral_source_split_15942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2799} ldv_dev_pm_ops_16();
    goto corral_source_split_15943;

  corral_source_split_15941:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 2798} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_15942;

  corral_source_split_15940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2797} ldv_initialize_v4l2_ioctl_ops_13();
    goto corral_source_split_15941;

  corral_source_split_15939:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2796} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_15940;

  corral_source_split_15938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2795} ldv_initialize_vb2_ops_10();
    goto corral_source_split_15939;

  corral_source_split_15937:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 2794} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_15938;

  corral_source_split_15936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2793} ldv_initialize_v4l2_subdev_internal_ops_5();
    goto corral_source_split_15937;

  corral_source_split_15935:
    assume {:verifier.code 0} true;
    $M.100 := 1;
    call {:si_unique_call 2792} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_15936;

  corral_source_split_15934:
    assume {:verifier.code 0} true;
    $M.106 := 2;
    call {:si_unique_call 2791} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_15935;

  $bb133:
    assume out_$i100 == 1;
    goto corral_source_split_15934;

  corral_source_split_15932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_15931:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i99, 0);
    goto corral_source_split_15932;

  $bb132:
    assume {:verifier.code 0} true;
    out_$i99 := $M.112;
    goto corral_source_split_15931;

  $bb131:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_15926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131;

  corral_source_split_15925:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i97, 0);
    goto corral_source_split_15926;

  corral_source_split_15924:
    assume {:verifier.code 0} true;
    out_$i97 := $M.112;
    goto corral_source_split_15925;

  corral_source_split_15923:
    assume {:verifier.code 0} true;
    $M.112 := out_$i96;
    call {:si_unique_call 2789} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_15924;

  corral_source_split_15922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} out_$i96 := fimc_md_init();
    goto corral_source_split_15923;

  $bb128:
    assume out_$i95 == 1;
    goto corral_source_split_15922;

  corral_source_split_15906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_15905:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i94, 1);
    goto corral_source_split_15906;

  corral_source_split_15904:
    assume {:verifier.code 0} true;
    out_$i94 := $M.106;
    goto corral_source_split_15905;

  $bb115:
    assume out_$i88 == 1;
    goto corral_source_split_15904;

  $bb114:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i86, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_15964:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2819} ldv_stop();
    goto corral_source_split_15964;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb116:
    assume {:verifier.code 0} true;
    assume !(out_$i88 == 1);
    goto $bb117;

  $bb119:
    assume {:verifier.code 0} true;
    assume !(out_$i89 == 1);
    goto $bb117;

  $bb141:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_15967:
    assume {:verifier.code 0} true;
    goto $bb142;

  SeqInstr_360:
    goto corral_source_split_15967;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  corral_source_split_15966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2820} ldv_main_exported_16();
    goto SeqInstr_359;

  $bb140:
    assume out_$i102 == 1;
    goto corral_source_split_15966;

  corral_source_split_15772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_15771:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i32(out_$i101, 0);
    goto corral_source_split_15772;

  corral_source_split_15770:
    assume {:verifier.code 0} true;
    out_$i101 := $M.41;
    goto corral_source_split_15771;

  $bb28:
    assume out_$i24 == 1;
    goto corral_source_split_15770;

  $bb27:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i32(out_$i11, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb144:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_15970:
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_15969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2821} ldv_main_exported_13();
    goto corral_source_split_15970;

  $bb143:
    assume out_$i104 == 1;
    goto corral_source_split_15969;

  corral_source_split_15776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_15775:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i32(out_$i103, 0);
    goto corral_source_split_15776;

  corral_source_split_15774:
    assume {:verifier.code 0} true;
    out_$i103 := $M.78;
    goto corral_source_split_15775;

  $bb30:
    assume out_$i25 == 1;
    goto corral_source_split_15774;

  $bb29:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i11, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb147:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_15973:
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_15972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2822} ldv_main_exported_6();
    goto corral_source_split_15973;

  $bb146:
    assume out_$i106 == 1;
    goto corral_source_split_15972;

  corral_source_split_15780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_15779:
    assume {:verifier.code 0} true;
    out_$i106 := $ne.i32(out_$i105, 0);
    goto corral_source_split_15780;

  corral_source_split_15778:
    assume {:verifier.code 0} true;
    out_$i105 := $M.95;
    goto corral_source_split_15779;

  $bb31:
    assume !(out_$i25 == 1);
    goto corral_source_split_15778;

  $bb150:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb160:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  corral_source_split_15990:
    assume {:verifier.code 0} true;
    goto $bb161;

  corral_source_split_15989:
    assume {:verifier.code 0} true;
    $M.107 := 1;
    call {:si_unique_call 2827} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_15990;

  corral_source_split_15988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2826} out_vslice_dummy_var_222 := fimc_md_sysfs_store(out_$p115, out_$p116, in_$p3, out_$i117);
    goto corral_source_split_15989;

  corral_source_split_15987:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i64($M.37, in_$p0);
    goto corral_source_split_15988;

  corral_source_split_15986:
    assume {:verifier.code 0} true;
    out_$p116 := $M.103;
    goto corral_source_split_15987;

  corral_source_split_15985:
    assume {:verifier.code 0} true;
    out_$p115 := $M.104;
    goto corral_source_split_15986;

  $bb159:
    assume out_$i114 == 1;
    goto corral_source_split_15985;

  corral_source_split_15983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  corral_source_split_15982:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 1);
    goto corral_source_split_15983;

  corral_source_split_15981:
    assume {:verifier.code 0} true;
    out_$i113 := $M.107;
    goto corral_source_split_15982;

  $bb157:
    assume out_$i112 == 1;
    goto corral_source_split_15981;

  $bb152:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$i112 := $eq.i32(out_$i109, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb151:
    assume {:verifier.code 0} true;
    out_$i110 := $slt.i32(out_$i109, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_15975:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2823} out_$i109 := __VERIFIER_nondet_int();
    call {:si_unique_call 2824} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i109);
    call {:si_unique_call 2825} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i109);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb149:
    assume out_$i108 == 1;
    goto corral_source_split_15975;

  corral_source_split_15764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_15763:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i32(out_$i107, 0);
    goto corral_source_split_15764;

  corral_source_split_15762:
    assume {:verifier.code 0} true;
    out_$i107 := $M.107;
    goto corral_source_split_15763;

  $bb22:
    assume out_$i21 == 1;
    goto corral_source_split_15762;

  $bb18:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i11, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb5:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i11, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb4:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i11, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb164:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_15996:
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_15995:
    assume {:verifier.code 0} true;
    $M.107 := 1;
    call {:si_unique_call 2829} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_15996;

  corral_source_split_15994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2828} out_vslice_dummy_var_223 := fimc_md_sysfs_show(out_$p121, out_$p122, in_$p4);
    goto corral_source_split_15995;

  corral_source_split_15993:
    assume {:verifier.code 0} true;
    out_$p122 := $M.103;
    goto corral_source_split_15994;

  corral_source_split_15992:
    assume {:verifier.code 0} true;
    out_$p121 := $M.104;
    goto corral_source_split_15993;

  $bb163:
    assume out_$i120 == 1;
    goto corral_source_split_15992;

  corral_source_split_15979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_15978:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 1);
    goto corral_source_split_15979;

  corral_source_split_15977:
    assume {:verifier.code 0} true;
    out_$i119 := $M.107;
    goto corral_source_split_15978;

  $bb154:
    assume out_$i111 == 1;
    goto corral_source_split_15977;

  $bb153:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i109, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_15998:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2830} ldv_stop();
    goto corral_source_split_15998;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb155:
    assume {:verifier.code 0} true;
    assume !(out_$i111 == 1);
    goto $bb156;

  $bb158:
    assume {:verifier.code 0} true;
    assume !(out_$i112 == 1);
    goto $bb156;

  $bb170:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_16001:
    assume {:verifier.code 0} true;
    goto $bb171;

  SeqInstr_363:
    goto corral_source_split_16001;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  corral_source_split_16000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2831} ldv_main_exported_9();
    goto SeqInstr_362;

  $bb169:
    assume out_$i125 == 1;
    goto corral_source_split_16000;

  corral_source_split_15768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_15767:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i32(out_$i124, 0);
    goto corral_source_split_15768;

  corral_source_split_15766:
    assume {:verifier.code 0} true;
    out_$i124 := $M.98;
    goto corral_source_split_15767;

  $bb23:
    assume !(out_$i21 == 1);
    goto corral_source_split_15766;

  $bb173:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_16004:
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_16003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2832} ldv_main_exported_12();
    goto corral_source_split_16004;

  $bb172:
    assume out_$i127 == 1;
    goto corral_source_split_16003;

  corral_source_split_15756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_15755:
    assume {:verifier.code 0} true;
    out_$i127 := $ne.i32(out_$i126, 0);
    goto corral_source_split_15756;

  corral_source_split_15754:
    assume {:verifier.code 0} true;
    out_$i126 := $M.79;
    goto corral_source_split_15755;

  $bb20:
    assume out_$i20 == 1;
    goto corral_source_split_15754;

  $bb19:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i11, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb176:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_16007:
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_16006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2833} ldv_main_exported_14();
    goto corral_source_split_16007;

  $bb175:
    assume out_$i129 == 1;
    goto corral_source_split_16006;

  corral_source_split_15760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_15759:
    assume {:verifier.code 0} true;
    out_$i129 := $ne.i32(out_$i128, 0);
    goto corral_source_split_15760;

  corral_source_split_15758:
    assume {:verifier.code 0} true;
    out_$i128 := $M.81;
    goto corral_source_split_15759;

  $bb21:
    assume !(out_$i20 == 1);
    goto corral_source_split_15758;

  $bb179:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_16010:
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_16009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2834} ldv_main_exported_15();
    goto corral_source_split_16010;

  $bb178:
    assume out_$i131 == 1;
    goto corral_source_split_16009;

  corral_source_split_15748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  corral_source_split_15747:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i32(out_$i130, 0);
    goto corral_source_split_15748;

  corral_source_split_15746:
    assume {:verifier.code 0} true;
    out_$i130 := $M.65;
    goto corral_source_split_15747;

  $bb16:
    assume out_$i18 == 1;
    goto corral_source_split_15746;

  $bb7:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i11, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb6:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i11, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb182:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_16013:
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_16012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2835} ldv_main_exported_8();
    goto corral_source_split_16013;

  $bb181:
    assume out_$i133 == 1;
    goto corral_source_split_16012;

  corral_source_split_15752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_15751:
    assume {:verifier.code 0} true;
    out_$i133 := $ne.i32(out_$i132, 0);
    goto corral_source_split_15752;

  corral_source_split_15750:
    assume {:verifier.code 0} true;
    out_$i132 := $M.94;
    goto corral_source_split_15751;

  $bb17:
    assume !(out_$i18 == 1);
    goto corral_source_split_15750;

  $bb185:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb200:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_16044:
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_16043:
    assume {:verifier.code 0} true;
    $M.108 := 1;
    call {:si_unique_call 2842} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_16044;

  SeqInstr_369:
    goto corral_source_split_16043;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  corral_source_split_16042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2841} out_vslice_dummy_var_225 := __fimc_pipeline_s_stream(out_$p149, out_$i151);
    goto SeqInstr_368;

  corral_source_split_16041:
    assume {:verifier.code 0} true;
    out_$i151 := $trunc.i8.i1(out_$i150);
    goto corral_source_split_16042;

  corral_source_split_16040:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i8($M.37, in_$p2);
    goto corral_source_split_16041;

  corral_source_split_16039:
    assume {:verifier.code 0} true;
    out_$p149 := $M.101;
    goto corral_source_split_16040;

  $bb199:
    assume out_$i148 == 1;
    goto corral_source_split_16039;

  corral_source_split_16037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  corral_source_split_16036:
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i147, 1);
    goto corral_source_split_16037;

  $bb198:
    assume {:verifier.code 0} true;
    out_$i147 := $M.108;
    goto corral_source_split_16036;

  $bb197:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_16034:
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_16033:
    assume {:verifier.code 0} true;
    $M.108 := 2;
    call {:si_unique_call 2840} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_16034;

  SeqInstr_366:
    goto corral_source_split_16033;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  corral_source_split_16032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2839} out_vslice_dummy_var_224 := __fimc_pipeline_s_stream(out_$p143, out_$i145);
    goto SeqInstr_365;

  corral_source_split_16031:
    assume {:verifier.code 0} true;
    out_$i145 := $trunc.i8.i1(out_$i144);
    goto corral_source_split_16032;

  corral_source_split_16030:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i8($M.37, in_$p2);
    goto corral_source_split_16031;

  corral_source_split_16029:
    assume {:verifier.code 0} true;
    out_$p143 := $M.101;
    goto corral_source_split_16030;

  $bb196:
    assume out_$i142 == 1;
    goto corral_source_split_16029;

  corral_source_split_16027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  corral_source_split_16026:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 2);
    goto corral_source_split_16027;

  corral_source_split_16025:
    assume {:verifier.code 0} true;
    out_$i141 := $M.108;
    goto corral_source_split_16026;

  $bb194:
    assume out_$i140 == 1;
    goto corral_source_split_16025;

  $bb187:
    assume out_$i137 == 1;
    assume {:verifier.code 0} true;
    out_$i140 := $eq.i32(out_$i136, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb186:
    assume {:verifier.code 0} true;
    out_$i137 := $slt.i32(out_$i136, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  corral_source_split_16015:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2836} out_$i136 := __VERIFIER_nondet_int();
    call {:si_unique_call 2837} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i136);
    call {:si_unique_call 2838} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i136);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb184:
    assume out_$i135 == 1;
    goto corral_source_split_16015;

  corral_source_split_15736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_15735:
    assume {:verifier.code 0} true;
    out_$i135 := $ne.i32(out_$i134, 0);
    goto corral_source_split_15736;

  corral_source_split_15734:
    assume {:verifier.code 0} true;
    out_$i134 := $M.108;
    goto corral_source_split_15735;

  $bb9:
    assume out_$i15 == 1;
    goto corral_source_split_15734;

  $bb8:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i11, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb204:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb206:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_16059:
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_16058:
    assume {:verifier.code 0} true;
    $M.43 := out_$i162;
    call {:si_unique_call 2846} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i162);
    goto corral_source_split_16059;

  corral_source_split_16057:
    assume {:verifier.code 0} true;
    out_$i162 := $add.i32(out_$i161, 1);
    goto corral_source_split_16058;

  corral_source_split_16056:
    assume {:verifier.code 0} true;
    out_$i161 := $M.43;
    goto corral_source_split_16057;

  corral_source_split_16055:
    assume {:verifier.code 0} true;
    $M.108 := 2;
    call {:si_unique_call 2845} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_16056;

  $bb205:
    assume out_$i160 == 1;
    goto corral_source_split_16055;

  corral_source_split_16053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  corral_source_split_16052:
    assume {:verifier.code 0} true;
    out_$i160 := $eq.i32(out_$i159, 0);
    goto corral_source_split_16053;

  corral_source_split_16051:
    assume {:verifier.code 0} true;
    out_$i159 := $M.113;
    goto corral_source_split_16052;

  corral_source_split_16050:
    assume {:verifier.code 0} true;
    $M.113 := out_$i158;
    call {:si_unique_call 2844} {:cexpr "ldv_retval_29"} boogie_si_record_i32(out_$i158);
    goto corral_source_split_16051;

  SeqInstr_372:
    goto corral_source_split_16050;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  corral_source_split_16049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2843} out_$i158 := __fimc_pipeline_open(out_$p155, in_$p6, out_$i157);
    goto SeqInstr_371;

  corral_source_split_16048:
    assume {:verifier.code 0} true;
    out_$i157 := $trunc.i8.i1(out_$i156);
    goto corral_source_split_16049;

  corral_source_split_16047:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i8($M.37, in_$p1);
    goto corral_source_split_16048;

  corral_source_split_16046:
    assume {:verifier.code 0} true;
    out_$p155 := $M.101;
    goto corral_source_split_16047;

  $bb203:
    assume out_$i154 == 1;
    goto corral_source_split_16046;

  corral_source_split_16019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_16018:
    assume {:verifier.code 0} true;
    out_$i154 := $eq.i32(out_$i153, 1);
    goto corral_source_split_16019;

  corral_source_split_16017:
    assume {:verifier.code 0} true;
    out_$i153 := $M.108;
    goto corral_source_split_16018;

  $bb189:
    assume out_$i138 == 1;
    goto corral_source_split_16017;

  $bb188:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    out_$i138 := $slt.i32(out_$i136, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb210:
    assume !(out_$i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb212:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_16072:
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_16071:
    assume {:verifier.code 0} true;
    $M.43 := out_$i170;
    call {:si_unique_call 2850} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i170);
    goto corral_source_split_16072;

  corral_source_split_16070:
    assume {:verifier.code 0} true;
    out_$i170 := $sub.i32(out_$i169, 1);
    goto corral_source_split_16071;

  corral_source_split_16069:
    assume {:verifier.code 0} true;
    out_$i169 := $M.43;
    goto corral_source_split_16070;

  corral_source_split_16068:
    assume {:verifier.code 0} true;
    $M.108 := 1;
    call {:si_unique_call 2849} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_16069;

  $bb211:
    assume out_$i168 == 1;
    goto corral_source_split_16068;

  corral_source_split_16066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_16065:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 0);
    goto corral_source_split_16066;

  corral_source_split_16064:
    assume {:verifier.code 0} true;
    out_$i167 := $M.114;
    goto corral_source_split_16065;

  corral_source_split_16063:
    assume {:verifier.code 0} true;
    $M.114 := out_$i166;
    call {:si_unique_call 2848} {:cexpr "ldv_retval_28"} boogie_si_record_i32(out_$i166);
    goto corral_source_split_16064;

  SeqInstr_375:
    goto corral_source_split_16063;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  corral_source_split_16062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2847} out_$i166 := __fimc_pipeline_close(out_$p165);
    goto SeqInstr_374;

  corral_source_split_16061:
    assume {:verifier.code 0} true;
    out_$p165 := $M.101;
    goto corral_source_split_16062;

  $bb209:
    assume out_$i164 == 1;
    goto corral_source_split_16061;

  corral_source_split_16023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_16022:
    assume {:verifier.code 0} true;
    out_$i164 := $eq.i32(out_$i163, 2);
    goto corral_source_split_16023;

  corral_source_split_16021:
    assume {:verifier.code 0} true;
    out_$i163 := $M.108;
    goto corral_source_split_16022;

  $bb191:
    assume out_$i139 == 1;
    goto corral_source_split_16021;

  $bb190:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i136, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_16074:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2851} ldv_stop();
    goto corral_source_split_16074;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb192:
    assume {:verifier.code 0} true;
    assume !(out_$i139 == 1);
    goto $bb193;

  $bb195:
    assume {:verifier.code 0} true;
    assume !(out_$i140 == 1);
    goto $bb193;

  $bb219:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_16077:
    assume {:verifier.code 0} true;
    goto $bb220;

  SeqInstr_378:
    goto corral_source_split_16077;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  corral_source_split_16076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2852} ldv_main_exported_10();
    goto SeqInstr_377;

  $bb218:
    assume out_$i172 == 1;
    goto corral_source_split_16076;

  corral_source_split_15740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_15739:
    assume {:verifier.code 0} true;
    out_$i172 := $ne.i32(out_$i171, 0);
    goto corral_source_split_15740;

  corral_source_split_15738:
    assume {:verifier.code 0} true;
    out_$i171 := $M.97;
    goto corral_source_split_15739;

  $bb11:
    assume out_$i16 == 1;
    goto corral_source_split_15738;

  $bb10:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i11, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb222:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_16080:
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_16079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2853} ldv_main_exported_5();
    goto corral_source_split_16080;

  $bb221:
    assume out_$i174 == 1;
    goto corral_source_split_16079;

  corral_source_split_15744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_15743:
    assume {:verifier.code 0} true;
    out_$i174 := $ne.i32(out_$i173, 0);
    goto corral_source_split_15744;

  corral_source_split_15742:
    assume {:verifier.code 0} true;
    out_$i173 := $M.100;
    goto corral_source_split_15743;

  $bb13:
    assume out_$i17 == 1;
    goto corral_source_split_15742;

  $bb12:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i11, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_16082:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2854} ldv_stop();
    goto corral_source_split_16082;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb15;

  $bb41:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb15;

  $bb45_dummy:
    call {:si_unique_call 1} out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$i119, out_$i120, out_$p121, out_$p122, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$p143, out_$i144, out_$i145, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_vslice_dummy_var_221, out_vslice_dummy_var_222, out_vslice_dummy_var_223, out_vslice_dummy_var_224, out_vslice_dummy_var_225 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p6, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$i119, out_$i120, out_$p121, out_$p122, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$p143, out_$i144, out_$i145, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_vslice_dummy_var_221, out_vslice_dummy_var_222, out_vslice_dummy_var_223, out_vslice_dummy_var_224, out_vslice_dummy_var_225);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$i11: i32, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i85: i1, in_$i86: i32, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i95: i1, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i1, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$i117: i64, in_$i119: i32, in_$i120: i1, in_$p121: ref, in_$p122: ref, in_$i124: i32, in_$i125: i1, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i1, in_$i130: i32, in_$i131: i1, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i135: i1, in_$i136: i32, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i144: i8, in_$i145: i1, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i150: i8, in_$i151: i1, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$i156: i8, in_$i157: i1, in_$i158: i32, in_$i159: i32, in_$i160: i1, in_$i161: i32, in_$i162: i32, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$i166: i32, in_$i167: i32, in_$i168: i1, in_$i169: i32, in_$i170: i32, in_$i171: i32, in_$i172: i1, in_$i173: i32, in_$i174: i1, in_vslice_dummy_var_221: i32, in_vslice_dummy_var_222: i64, in_vslice_dummy_var_223: i64, in_vslice_dummy_var_224: i32, in_vslice_dummy_var_225: i32) returns (out_$i11: i32, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i85: i1, out_$i86: i32, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i95: i1, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i1, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$i117: i64, out_$i119: i32, out_$i120: i1, out_$p121: ref, out_$p122: ref, out_$i124: i32, out_$i125: i1, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i1, out_$i130: i32, out_$i131: i1, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i135: i1, out_$i136: i32, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i144: i8, out_$i145: i1, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i150: i8, out_$i151: i1, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$i156: i8, out_$i157: i1, out_$i158: i32, out_$i159: i32, out_$i160: i1, out_$i161: i32, out_$i162: i32, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$i166: i32, out_$i167: i32, out_$i168: i1, out_$i169: i32, out_$i170: i32, out_$i171: i32, out_$i172: i1, out_$i173: i32, out_$i174: i1, out_vslice_dummy_var_221: i32, out_vslice_dummy_var_222: i64, out_vslice_dummy_var_223: i64, out_vslice_dummy_var_224: i32, out_vslice_dummy_var_225: i32);
  modifies $M.0, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.77, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.29, $M.32, $M.27, $M.28, $M.25, $M.36, assertsPassed, $M.37, $M.96, $M.64, $M.105, $M.110, $M.43, $M.38, $M.109, $M.111, $M.82, $M.83, $M.84, $M.85, $M.95, $M.103, $M.104, $M.107, $M.89, $M.98, $M.72, $M.79, $M.102, $M.70, $M.71, $M.81, $M.90, $M.91, $M.92, $M.93, $M.94, $M.101, $M.108, $M.40, $M.41, $M.73, $M.74, $M.75, $M.76, $M.78, $M.86, $M.87, $M.97, $M.88, $M.100, $M.106, $M.112, $M.39, $M.42, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.30, $M.31, $M.99, $M.80, $M.67, $M.65, $M.68, $M.69, $M.113, $M.114;


