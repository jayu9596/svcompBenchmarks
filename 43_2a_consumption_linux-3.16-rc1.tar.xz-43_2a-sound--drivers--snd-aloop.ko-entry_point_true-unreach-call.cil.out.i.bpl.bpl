var $M.0: [ref]i8;

var $M.1: [ref]i32;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]i32;

var $M.5: [ref]i32;

var $M.6: [ref]ref;

var $M.7: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]ref;

var $M.26: [ref]ref;

var $M.27: i32;

var $M.28: [ref]i32;

var $M.29: i32;

var $M.30: ref;

var $M.31: i32;

var $M.32: ref;

var $M.33: i32;

var $M.34: ref;

var $M.35: i32;

var $M.36: ref;

var $M.114: ref;

var $M.115: ref;

var $M.117: ref;

var $M.118: ref;

var $M.119: i32;

var $M.120: i32;

var $M.121: i32;

var $M.122: i32;

var $M.123: i32;

var $M.124: i32;

var $M.125: i32;

var $M.126: i32;

var $M.127: i32;

var $M.128: i32;

var $M.129: i32;

var $M.130: i32;

var $M.131: i32;

var $M.132: i32;

var $M.133: i32;

var $M.134: i32;

var $M.135: i32;

var $M.136: i32;

var $M.137: i32;

var $M.138: i32;

var $M.139: i32;

var $M.140: i32;

var $M.141: i32;

var $M.142: i32;

var $M.143: i32;

var $M.144: i32;

var $M.145: i32;

var $M.146: i32;

var $M.147: i32;

var $M.148: i32;

var $M.149: i32;

var $M.150: i32;

var $M.151: [ref]i8;

var $M.152: [ref]ref;

var $M.153: [ref]ref;

var $M.154: [ref]ref;

var $M.155: [ref]ref;

var $M.156: [ref]i32;

var $M.157: [ref]ref;

var $M.158: [ref]i32;

var $M.159: [ref]ref;

var $M.160: [ref]i64;

var $M.161: [ref]i64;

var $M.162: [ref]i32;

var $M.163: [ref]i32;

var $M.164: [ref]i32;

var $M.165: [ref]ref;

var $M.166: [ref]i32;

var $M.167: [ref]i32;

var $M.168: [ref]i32;

var $M.169: [ref]ref;

var $M.170: [ref]ref;

var $M.171: [ref]ref;

var $M.172: [ref]ref;

var $M.173: [ref]i64;

var $M.174: [ref]ref;

var $M.175: [ref]ref;

var $M.176: [ref]ref;

var $M.177: [ref]ref;

var $M.178: [ref]ref;

var $M.179: [ref]ref;

var $M.180: [ref]ref;

var $M.181: [ref]ref;

var $M.182: [ref]ref;

var $M.183: [ref]ref;

var $M.184: [ref]ref;

var $M.185: [ref]ref;

var $M.186: [ref]ref;

var $M.187: [ref]ref;

var $M.233: [ref]i8;

var $M.234: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 318980);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const ldv_timer_1_0: ref;

axiom ldv_timer_1_0 == $sub.ref(0, 2056);

const ldv_timer_1_1: ref;

axiom ldv_timer_1_1 == $sub.ref(0, 3084);

const ldv_timer_1_2: ref;

axiom ldv_timer_1_2 == $sub.ref(0, 4112);

const ldv_timer_1_3: ref;

axiom ldv_timer_1_3 == $sub.ref(0, 5140);

const loopback_capture_ops_group0: ref;

axiom loopback_capture_ops_group0 == $sub.ref(0, 6172);

const loopback_driver_group0: ref;

axiom loopback_driver_group0 == $sub.ref(0, 7204);

const ldv_timer_list_1_0: ref;

axiom ldv_timer_list_1_0 == $sub.ref(0, 8236);

const ldv_timer_list_1_1: ref;

axiom ldv_timer_list_1_1 == $sub.ref(0, 9268);

const ldv_timer_list_1_2: ref;

axiom ldv_timer_list_1_2 == $sub.ref(0, 10300);

const ldv_timer_list_1_3: ref;

axiom ldv_timer_list_1_3 == $sub.ref(0, 11332);

const loopback_pm_group1: ref;

axiom loopback_pm_group1 == $sub.ref(0, 12364);

const loopback_playback_ops_group0: ref;

axiom loopback_playback_ops_group0 == $sub.ref(0, 13396);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 14424);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 15452);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 16480);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 17508);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 18536);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 19564);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 20592);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 21620);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 22648);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 23676);

const ldv_retval_21: ref;

axiom ldv_retval_21 == $sub.ref(0, 24704);

const ldv_retval_20: ref;

axiom ldv_retval_20 == $sub.ref(0, 25732);

const ldv_retval_19: ref;

axiom ldv_retval_19 == $sub.ref(0, 26760);

const ldv_retval_18: ref;

axiom ldv_retval_18 == $sub.ref(0, 27788);

const ldv_retval_17: ref;

axiom ldv_retval_17 == $sub.ref(0, 28816);

const ldv_retval_16: ref;

axiom ldv_retval_16 == $sub.ref(0, 29844);

const ldv_retval_15: ref;

axiom ldv_retval_15 == $sub.ref(0, 30872);

const ldv_retval_14: ref;

axiom ldv_retval_14 == $sub.ref(0, 31900);

const ldv_retval_13: ref;

axiom ldv_retval_13 == $sub.ref(0, 32928);

const ldv_retval_12: ref;

axiom ldv_retval_12 == $sub.ref(0, 33956);

const ldv_retval_11: ref;

axiom ldv_retval_11 == $sub.ref(0, 34984);

const ldv_retval_10: ref;

axiom ldv_retval_10 == $sub.ref(0, 36012);

const ldv_retval_9: ref;

axiom ldv_retval_9 == $sub.ref(0, 37040);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 38068);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 39096);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 40124);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 41152);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 42180);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 43208);

const ldv_retval_22: ref;

axiom ldv_retval_22 == $sub.ref(0, 44236);

const ldv_retval_24: ref;

axiom ldv_retval_24 == $sub.ref(0, 45264);

const ldv_retval_23: ref;

axiom ldv_retval_23 == $sub.ref(0, 46292);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 47320);

const {:count 32} pcm_notify: ref;

axiom pcm_notify == $sub.ref(0, 48472);

const {:count 6} loopback_controls: ref;

axiom loopback_controls == $sub.ref(0, 49976);

const loopback_capture_ops: ref;

axiom loopback_capture_ops == $sub.ref(0, 51112);

const loopback_playback_ops: ref;

axiom loopback_playback_ops == $sub.ref(0, 52248);

const {:count 32} pcm_substreams: ref;

axiom pcm_substreams == $sub.ref(0, 53400);

const {:count 32} id: ref;

axiom id == $sub.ref(0, 54680);

const {:count 32} index: ref;

axiom index == $sub.ref(0, 55832);

const {:count 32} enable: ref;

axiom enable == $sub.ref(0, 56888);

const loopback_pm: ref;

axiom loopback_pm == $sub.ref(0, 58096);

const loopback_driver: ref;

axiom loopback_driver == $sub.ref(0, 59296);

const {:count 32} devices: ref;

axiom devices == $sub.ref(0, 60576);

const loopback_pcm_hardware: ref;

axiom loopback_pcm_hardware == $sub.ref(0, 61680);

const {:count 10} .str.1: ref;

axiom .str.1 == $sub.ref(0, 62714);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 22} .str.3: ref;

axiom .str.3 == $sub.ref(0, 63760);

const {:count 9} .str.4: ref;

axiom .str.4 == $sub.ref(0, 64793);

const {:count 12} .str.5: ref;

axiom .str.5 == $sub.ref(0, 65829);

const {:count 9} .str.14: ref;

axiom .str.14 == $sub.ref(0, 66862);

const {:count 24} .str.15: ref;

axiom .str.15 == $sub.ref(0, 67910);

const {:count 12} .str.16: ref;

axiom .str.16 == $sub.ref(0, 68946);

const {:count 13} .str.17: ref;

axiom .str.17 == $sub.ref(0, 69983);

const {:count 15} .str.18: ref;

axiom .str.18 == $sub.ref(0, 71022);

const {:count 13} .str.19: ref;

axiom .str.19 == $sub.ref(0, 72059);

const {:count 9} .str.20: ref;

axiom .str.20 == $sub.ref(0, 73092);

const {:count 8} .str.21: ref;

axiom .str.21 == $sub.ref(0, 74124);

const {:count 6} .str.22: ref;

axiom .str.22 == $sub.ref(0, 75154);

const {:count 14} .str.23: ref;

axiom .str.23 == $sub.ref(0, 76192);

const {:count 21} .str.24: ref;

axiom .str.24 == $sub.ref(0, 77237);

const {:count 21} .str.25: ref;

axiom .str.25 == $sub.ref(0, 78282);

const {:count 21} .str.26: ref;

axiom .str.26 == $sub.ref(0, 79327);

const {:count 21} .str.27: ref;

axiom .str.27 == $sub.ref(0, 80372);

const {:count 23} .str.28: ref;

axiom .str.28 == $sub.ref(0, 81419);

const {:count 22} .str.29: ref;

axiom .str.29 == $sub.ref(0, 82465);

const {:count 21} .str.30: ref;

axiom .str.30 == $sub.ref(0, 83510);

const {:count 24} .str.31: ref;

axiom .str.31 == $sub.ref(0, 84558);

const {:count 18} .str.32: ref;

axiom .str.32 == $sub.ref(0, 85600);

const {:count 21} .str.33: ref;

axiom .str.33 == $sub.ref(0, 86645);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 29} .str.34: ref;

axiom .str.34 == $sub.ref(0, 87698);

const {:count 24} .str.35: ref;

axiom .str.35 == $sub.ref(0, 88746);

const {:count 15} .str.7: ref;

axiom .str.7 == $sub.ref(0, 89785);

const {:count 13} .str.6: ref;

axiom .str.6 == $sub.ref(0, 90822);

const .str: ref;

axiom .str == $sub.ref(0, 91869);

const {:count 22} .str.8: ref;

axiom .str.8 == $sub.ref(0, 92915);

const {:count 11} .str.9: ref;

axiom .str.9 == $sub.ref(0, 93950);

const {:count 17} .str.10: ref;

axiom .str.10 == $sub.ref(0, 94991);

const {:count 17} .str.11: ref;

axiom .str.11 == $sub.ref(0, 96032);

const {:count 15} .str.12: ref;

axiom .str.12 == $sub.ref(0, 97071);

const {:count 19} .str.13: ref;

axiom .str.13 == $sub.ref(0, 98114);

const {:count 29} .str.2: ref;

axiom .str.2 == $sub.ref(0, 99167);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 100199);

const {:count 3} .str.1.82: ref;

axiom .str.1.82 == $sub.ref(0, 101226);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 102264);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 103292);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 104324);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 105356);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const loopback_probe: ref;

axiom loopback_probe == $sub.ref(0, 106388);

procedure loopback_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $CurrAddr, $M.11, $M.12;



implementation loopback_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i40: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i39: i32;
  var $p72: ref;
  var $i14: i32;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: ref;
  var vslice_dummy_var_33: ref;
  var vslice_dummy_var_34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 3} {:cexpr "dev"} boogie_si_record_i32($i4);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref($i6, 4));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i4);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref($i9, 8));
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.2, $p10);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $i12 := snd_card_new($p5, $i8, $p11, __this_module, 4736, $p1);
    call {:si_unique_call 5} {:cexpr "err"} boogie_si_record_i32($i12);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.3, $p1);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2528)), $mul.ref(368, 1));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i4);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref($i19, 4));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.4, $p20);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i22 := $sle.i32($i21, 0);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i4);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref($i25, 4));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.4, $p26);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i27, 8);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.3, $p1);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p18, $mul.ref(0, 4736)), $mul.ref(0, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p31);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p18, $mul.ref(0, 4736)), $mul.ref(8, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} __mutex_init($p33, .str.3, $p2);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i4);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref($i34, 4));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.4, $p35);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $i37 := loopback_pcm_new($p18, 0, $i36);
    call {:si_unique_call 8} {:cexpr "err"} boogie_si_record_i32($i37);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i4);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref($i40, 4));
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.4, $p41);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $i43 := loopback_pcm_new($p18, 1, $i42);
    call {:si_unique_call 11} {:cexpr "err"} boogie_si_record_i32($i43);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 0);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i4);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref($i45, 4));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.5, $p46);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i32($i48);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $i50 := loopback_mixer_new($p18, $i49);
    call {:si_unique_call 13} {:cexpr "err"} boogie_si_record_i32($i50);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, 0);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} vslice_dummy_var_30 := loopback_proc_new($p18, 0);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} vslice_dummy_var_31 := loopback_proc_new($p18, 1);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.3, $p1);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 2528)), $mul.ref(20, 1));
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} vslice_dummy_var_32 := strcpy($p56, .str.4);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.3, $p1);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 2528)), $mul.ref(36, 1));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} vslice_dummy_var_33 := strcpy($p60, .str.4);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.3, $p1);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 2528)), $mul.ref(68, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i4, 1);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} vslice_dummy_var_34 := sprintf.ref.ref.i32($p64, .str.5, $i65);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.3, $p1);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i68 := snd_card_register($p67);
    call {:si_unique_call 20} {:cexpr "err"} boogie_si_record_i32($i68);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i39 := $i68;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.3, $p1);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} vslice_dummy_var_29 := snd_card_free($p72);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i14 := $i39;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb21:
    assume $i69 == 1;
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.3, $p1);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} platform_set_drvdata($p0, $p71);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb18:
    assume $i51 == 1;
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i39 := $i50;
    goto $bb13;

  $bb15:
    assume $i44 == 1;
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i39 := $i43;
    goto $bb13;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i39 := $i37;
    goto $bb13;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i4);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref($i29, 4));
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p30, 8);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i4);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref($i23, 4));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p24, 1);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb3;
}



const loopback_remove: ref;

axiom loopback_remove == $sub.ref(0, 107420);

procedure loopback_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation loopback_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $p1 := platform_get_drvdata($p0);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} vslice_dummy_var_35 := snd_card_free($p2);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const platform_get_drvdata: ref;

axiom platform_get_drvdata == $sub.ref(0, 108452);

procedure platform_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const snd_card_free: ref;

axiom snd_card_free == $sub.ref(0, 109484);

procedure snd_card_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_card_free($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 1} true;
    call {:si_unique_call 25} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 26} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 110516);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const snd_card_new: ref;

axiom snd_card_new == $sub.ref(0, 111548);

procedure snd_card_new($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_card_new($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 27} {:cexpr "snd_card_new:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 28} {:cexpr "snd_card_new:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 1} true;
    call {:si_unique_call 29} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 30} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 112580);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    return;
}



const loopback_pcm_new: ref;

axiom loopback_pcm_new == $sub.ref(0, 113612);

procedure loopback_pcm_new($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation loopback_pcm_new($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i64;
  var $p23: ref;
  var $i8: i32;
  var vslice_dummy_var_36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 32} {:cexpr "loopback_pcm_new:arg:device"} boogie_si_record_i32($i1);
    call {:si_unique_call 33} {:cexpr "loopback_pcm_new:arg:substreams"} boogie_si_record_i32($i2);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4736)), $mul.ref(0, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $i6 := snd_pcm_new($p5, .str.6, $i1, $i2, $i2, $p3);
    call {:si_unique_call 35} {:cexpr "err"} boogie_si_record_i32($i6);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p3);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} snd_pcm_set_ops($p9, 0, loopback_playback_ops);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p3);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} snd_pcm_set_ops($p10, 1, loopback_capture_ops);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p3);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 992)), $mul.ref(952, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p0);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p3);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 992)), $mul.ref(28, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 0);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p3);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 992)), $mul.ref(100, 1));
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} vslice_dummy_var_36 := strcpy($p18, .str.6);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p3);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i1);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4736)), $mul.ref(304, 1)), $mul.ref($i21, 8));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p20);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;
}



const loopback_mixer_new: ref;

axiom loopback_mixer_new == $sub.ref(0, 114644);

procedure loopback_mixer_new($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation loopback_mixer_new($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i8;
  var $p25: ref;
  var $i26: i8;
  var $i27: i8;
  var $i28: i8;
  var $i29: i8;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p43: ref;
  var $p45: ref;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i34: i32;
  var $i72: i32;
  var $i73: i1;
  var $i17: i32;
  var $i74: i32;
  var $i75: i1;
  var $i7: i32;
  var $i41: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var vslice_dummy_var_37: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} {:cexpr "loopback_mixer_new:arg:notify"} boogie_si_record_i32($i1);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4736)), $mul.ref(0, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2528)), $mul.ref(148, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} vslice_dummy_var_37 := strcpy($p5, .str.7);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb1;

  $bb1:
    call $i8, $p10, $p11, $p14, $i15, $i16, $p18, $p19, $i20, $i21, $i22, $p23, $i24, $p25, $i26, $i27, $i28, $i29, $p30, $p31, $p32, $p33, $i35, $p36, $p37, $p38, $i39, $i40, $p43, $p45, $i46, $i47, $i48, $i49, $i50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $p60, $p61, $p62, $p63, $p64, $p65, $p66, $i67, $i68, $i69, $i70, $i71, $i34, $i72, $i73, $i17, $i74, $i75, $i7, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5, cmdloc_dummy_var_6, cmdloc_dummy_var_7, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11 := loopback_mixer_new_loop_$bb1($p0, $i1, $p3, $i8, $p10, $p11, $p14, $i15, $i16, $p18, $p19, $i20, $i21, $i22, $p23, $i24, $p25, $i26, $i27, $i28, $i29, $p30, $p31, $p32, $p33, $i35, $p36, $p37, $p38, $i39, $i40, $p43, $p45, $i46, $i47, $i48, $i49, $i50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $p60, $p61, $p62, $p63, $p64, $p65, $p66, $i67, $i68, $i69, $i70, $i71, $i34, $i72, $i73, $i17, $i74, $i75, $i7, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5, cmdloc_dummy_var_6, cmdloc_dummy_var_7, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11);
    goto $bb1_last;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 4736)), $mul.ref(304, 1)), $mul.ref($i8, 8));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p11, $mul.ref(0, 992)), $mul.ref(184, 1)), $mul.ref(1, 256)), $mul.ref(16, 1));
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 41} {:cexpr "substr_count"} boogie_si_record_i32($i15);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32(0, $i15);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i7, 1);
    call {:si_unique_call 51} {:cexpr "dev"} boogie_si_record_i32($i74);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i75 := $sle.i32($i74, 1);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb37:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i74;
    goto $bb37_dummy;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb6;

  $bb6:
    call $p18, $p19, $i20, $i21, $i22, $p23, $i24, $p25, $i26, $i27, $i28, $i29, $p30, $p31, $p32, $p33, $i35, $p36, $p37, $p38, $i39, $i40, $p43, $p45, $i46, $i47, $i48, $i49, $i50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $p60, $p61, $p62, $p63, $p64, $p65, $p66, $i67, $i68, $i69, $i70, $i71, $i34, $i72, $i73, $i17, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5, cmdloc_dummy_var_6, cmdloc_dummy_var_7, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11 := loopback_mixer_new_loop_$bb6($p0, $i1, $p3, $i15, $p18, $p19, $i20, $i21, $i22, $p23, $i24, $p25, $i26, $i27, $i28, $i29, $p30, $p31, $p32, $p33, $i35, $p36, $p37, $p38, $i39, $i40, $p43, $p45, $i46, $i47, $i48, $i49, $i50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $p60, $p61, $p62, $p63, $p64, $p65, $p66, $i67, $i68, $i69, $i70, $i71, $i34, $i72, $i73, $i17, $i7, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5, cmdloc_dummy_var_6, cmdloc_dummy_var_7, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11);
    goto $bb6_last;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 4736)), $mul.ref(320, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i17);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i7);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i20, $i21);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p19, $mul.ref($i22, 276));
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i1);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p23);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i27 := $and.i8($i24, 1);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i28 := $and.i8($i26, $sub.i8(0, 2));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i29 := $or.i8($i28, $i27);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, $i29);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p19, $mul.ref($i22, 276)), $mul.ref(4, 1));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 100000);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p19, $mul.ref($i22, 276)), $mul.ref(8, 1));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 2);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p19, $mul.ref($i22, 276)), $mul.ref(12, 1));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 48000);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p19, $mul.ref($i22, 276)), $mul.ref(16, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 2);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb8;

  $bb8:
    call $i35, $p36, $p37, $p38, $i39, $i40, $p43, $p45, $i46, $i47, $i48, $i49, $i50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $p60, $p61, $p62, $p63, $p64, $p65, $p66, $i67, $i68, $i69, $i70, $i71, $i34, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5, cmdloc_dummy_var_6, cmdloc_dummy_var_7, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11 := loopback_mixer_new_loop_$bb8($p0, $p3, $p19, $i22, $i35, $p36, $p37, $p38, $i39, $i40, $p43, $p45, $i46, $i47, $i48, $i49, $i50, $p51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $p60, $p61, $p62, $p63, $p64, $p65, $p66, $i67, $i68, $i69, $i70, $i71, $i34, $i17, $i7, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2, cmdloc_dummy_var_3, cmdloc_dummy_var_4, cmdloc_dummy_var_5, cmdloc_dummy_var_6, cmdloc_dummy_var_7, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, cmdloc_dummy_var_11);
    goto $bb8_last;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    $p36 := $add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref($i35, 80));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p0);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $p38 := snd_ctl_new1($p36, $p37);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i7);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i17);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i34, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i34, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i34, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i67 := snd_ctl_add($p3, $p38);
    call {:si_unique_call 48} {:cexpr "err"} boogie_si_record_i32($i67);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i67, 0);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i69 := $i67;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i34, 1);
    call {:si_unique_call 49} {:cexpr "idx"} boogie_si_record_i32($i70);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i71 := $ule.i32($i70, 5);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i17, 1);
    call {:si_unique_call 50} {:cexpr "substr"} boogie_si_record_i32($i72);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i72, $i15);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i73 == 1);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb34:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i17 := $i72;
    goto $bb34_dummy;

  $bb31:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i34 := $i70;
    goto $bb31_dummy;

  $bb28:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i41 := $i69;
    goto $bb12;

  $bb19:
    assume $i48 == 1;
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p19, $mul.ref($i22, 276)), $mul.ref(212, 1));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p38, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p63);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p64);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 44} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p65, $p66, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb17:
    assume $i47 == 1;
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p19, $mul.ref($i22, 276)), $mul.ref(148, 1));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p38, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p59);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p60);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 43} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p61, $p62, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb15:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i34, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i49 == 1);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p19, $mul.ref($i22, 276)), $mul.ref(84, 1));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p38, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p55);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p56);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 45} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p57, $p58, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb22:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i34, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb21;

  $bb24:
    assume $i50 == 1;
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p19, $mul.ref($i22, 276)), $mul.ref(20, 1));
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p38, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p51);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p52);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 46} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p53, $p54, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb10:
    assume $i40 == 1;
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 12);
    goto $bb12;

  $bb31_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_194;

  $bb34_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_170;

  $bb37_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_159;
}



const loopback_proc_new: ref;

axiom loopback_proc_new == $sub.ref(0, 115676);

procedure loopback_proc_new($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.12, $CurrAddr;



implementation loopback_proc_new($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i11: i32;
  var vslice_dummy_var_38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 54} {:cexpr "loopback_proc_new:arg:cidx"} boogie_si_record_i32($i1);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} vslice_dummy_var_38 := snprintf.ref.i64.ref.i32($p4, 32, .str.14, $i1);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 4736)), $mul.ref(0, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $i9 := snd_card_proc_new($p7, $p8, $p3);
    call {:si_unique_call 57} {:cexpr "err"} boogie_si_record_i32($i9);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.7, $p3);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p0);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} snd_info_set_text_ops($p12, $p13, print_cable_info);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb3;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 116708);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const sprintf: ref;

axiom sprintf == $sub.ref(0, 117740);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const snd_card_register: ref;

axiom snd_card_register == $sub.ref(0, 118772);

procedure snd_card_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_card_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 1} true;
    call {:si_unique_call 59} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 60} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const platform_set_drvdata: ref;

axiom platform_set_drvdata == $sub.ref(0, 119804);

procedure platform_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation platform_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} dev_set_drvdata($p2, $p1);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 120836);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 121868);

procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



const snd_card_proc_new: ref;

axiom snd_card_proc_new == $sub.ref(0, 122900);

procedure snd_card_proc_new($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_card_proc_new($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 1} true;
    call {:si_unique_call 62} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 63} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const print_cable_info: ref;

axiom print_cable_info == $sub.ref(0, 123932);

procedure print_cable_info($p0: ref, $p1: ref);



const snd_info_set_text_ops: ref;

axiom snd_info_set_text_ops == $sub.ref(0, 124964);

procedure snd_info_set_text_ops($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.11, $M.12;



implementation snd_info_set_text_ops($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(72, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p3, $p1);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(32, 1));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p6, $p2);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 125996);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    return;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 127028);

procedure strlen($p0: ref) returns ($r: i64);



const print_substream_info: ref;

axiom print_substream_info == $sub.ref(0, 128060);

procedure print_substream_info($p0: ref, $p1: ref, $i2: i32, $i3: i32);



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 129092);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    return;
}



const snd_iprintf: ref;

axiom snd_iprintf == $sub.ref(0, 130124);

procedure snd_iprintf.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32);



procedure snd_iprintf.ref.ref.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64) returns ($r: i32);



procedure snd_iprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure snd_iprintf.ref.ref($p0: ref, $p1: ref) returns ($r: i32);



procedure snd_iprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



procedure snd_iprintf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);



const print_dpcm_info: ref;

axiom print_dpcm_info == $sub.ref(0, 131156);

procedure print_dpcm_info($p0: ref, $p1: ref, $p2: ref);



const snd_ctl_new1: ref;

axiom snd_ctl_new1 == $sub.ref(0, 132188);

procedure snd_ctl_new1($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation snd_ctl_new1($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $p2 := external_alloc();
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 133220);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const snd_ctl_add: ref;

axiom snd_ctl_add == $sub.ref(0, 134252);

procedure snd_ctl_add($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_ctl_add($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 1} true;
    call {:si_unique_call 66} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 67} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 135284);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 1} true;
    call {:si_unique_call 68} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 69} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const snd_pcm_new: ref;

axiom snd_pcm_new == $sub.ref(0, 136316);

procedure snd_pcm_new($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_new($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 70} {:cexpr "snd_pcm_new:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 71} {:cexpr "snd_pcm_new:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 72} {:cexpr "snd_pcm_new:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 1} true;
    call {:si_unique_call 73} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 74} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const snd_pcm_set_ops: ref;

axiom snd_pcm_set_ops == $sub.ref(0, 137348);

procedure snd_pcm_set_ops($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation snd_pcm_set_ops($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} {:cexpr "snd_pcm_set_ops:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    return;
}



const loopback_suspend: ref;

axiom loopback_suspend == $sub.ref(0, 138380);

procedure loopback_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation loopback_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p11: ref;
  var $p12: ref;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2528)), $mul.ref(368, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} snd_power_change_state($p2, 768);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4736)), $mul.ref(304, 1)), $mul.ref(0, 8));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.26, $p7);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} vslice_dummy_var_39 := snd_pcm_suspend_all($p8);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4736)), $mul.ref(304, 1)), $mul.ref(1, 8));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.26, $p11);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} vslice_dummy_var_40 := snd_pcm_suspend_all($p12);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const loopback_resume: ref;

axiom loopback_resume == $sub.ref(0, 139412);

procedure loopback_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation loopback_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} snd_power_change_state($p2, 0);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const snd_power_change_state: ref;

axiom snd_power_change_state == $sub.ref(0, 140444);

procedure snd_power_change_state($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation snd_power_change_state($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} {:cexpr "snd_power_change_state:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2528)), $mul.ref(2252, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2528)), $mul.ref(2424, 1));
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} __wake_up($p3, 3, 1, $0.ref);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 141476);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 85} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    return;
}



const snd_pcm_suspend_all: ref;

axiom snd_pcm_suspend_all == $sub.ref(0, 142508);

procedure snd_pcm_suspend_all($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_suspend_all($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 1} true;
    call {:si_unique_call 86} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 87} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const loopback_open: ref;

axiom loopback_open == $sub.ref(0, 143540);

procedure loopback_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.36, $M.35, assertsPassed;



implementation loopback_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $i43: i32;
  var $i44: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i64;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i13: i32;
  var $p79: ref;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: ref;
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(16, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i7 := get_cable_index($p0);
    call {:si_unique_call 90} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 4736)), $mul.ref(8, 1));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} mutex_lock_nested($p8, 0);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $p9 := kzalloc(208, 208);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p10, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p5);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p0);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p10, $mul.ref(0, 208)), $mul.ref(80, 1));
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p10);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} vslice_dummy_var_41 := reg_timer_1($p16, loopback_timer_function, $i17);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i7);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(24, 1));
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 4736)), $mul.ref(176, 1)), $mul.ref($i22, 16)), $mul.ref($i19, 8));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $p48 := $p26;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p10, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $p48);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(60, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p48, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref($i52, 8));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, $p9);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} vslice_dummy_var_43 := snd_pcm_hw_constraint_integer($p3, 15);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(480, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $i58 := snd_pcm_hw_rule_add.ref.i32.i32.ref.ref.i32.i32($p3, 0, 1, rule_format, $p57, 1, $sub.i32(0, 1));
    call {:si_unique_call 102} {:cexpr "err"} boogie_si_record_i32($i58);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i58, 0);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(480, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $i62 := snd_pcm_hw_rule_add.ref.i32.i32.ref.ref.i32.i32($p3, 0, 11, rule_rate, $p61, 11, $sub.i32(0, 1));
    call {:si_unique_call 104} {:cexpr "err"} boogie_si_record_i32($i62);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i62, 0);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(480, 1));
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $i66 := snd_pcm_hw_rule_add.ref.i32.i32.ref.ref.i32.i32($p3, 0, 10, rule_channels, $p65, 10, $sub.i32(0, 1));
    call {:si_unique_call 106} {:cexpr "err"} boogie_si_record_i32($i66);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i66, 0);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(464, 1));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, $p9);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(472, 1));
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, loopback_runtime_free);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} $i71 := get_notify($p10);
    call {:si_unique_call 108} {:cexpr "tmp___2"} boogie_si_record_i32($i71);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i72 == 1);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(480, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p48, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p75);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p76);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 110} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p77, $p78, 80, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i13 := $i66;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p6, $mul.ref(0, 4736)), $mul.ref(8, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} mutex_unlock($p79);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb20:
    assume $i72 == 1;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(480, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 109} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p74, loopback_pcm_hardware, 80, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i67 == 1;
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i13 := $i66;
    goto $bb3;

  $bb14:
    assume $i63 == 1;
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i13 := $i62;
    goto $bb3;

  $bb11:
    assume $i59 == 1;
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i13 := $i58;
    goto $bb3;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $p29 := kzalloc(184, 208);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p30, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} vslice_dummy_var_42 := spinlock_check($p34);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 184)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} __raw_spin_lock_init($p38, .str, $p1);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p30, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 99} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p40, loopback_pcm_hardware, 80, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i7);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(24, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p6, $mul.ref(0, 4736)), $mul.ref(176, 1)), $mul.ref($i44, 16)), $mul.ref($i41, 8));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, $p29);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p48 := $p29;
    goto $bb10;

  $bb7:
    assume $i32 == 1;
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p10);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} kfree($p33);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const loopback_close: ref;

axiom loopback_close == $sub.ref(0, 144572);

procedure loopback_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.31, $M.33, $M.35;



implementation loopback_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(16, 1));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1176)), $mul.ref(464, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i9 := get_cable_index($p0);
    call {:si_unique_call 112} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} loopback_timer_stop($p8);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 4736)), $mul.ref(8, 1));
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} mutex_lock_nested($p10, 0);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i9);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(24, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 4736)), $mul.ref(176, 1)), $mul.ref($i14, 16)), $mul.ref($i11, 8));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(60, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref($i23, 8));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i9);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(24, 1));
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 4736)), $mul.ref(176, 1)), $mul.ref($i37, 16)), $mul.ref($i34, 8));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $0.ref);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p18);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} kfree($p41);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 4736)), $mul.ref(8, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} mutex_unlock($p42);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(60, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref($i31, 8));
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $0.ref);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_pcm_lib_ioctl: ref;

axiom snd_pcm_lib_ioctl == $sub.ref(0, 145604);

procedure snd_pcm_lib_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_lib_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 117} {:cexpr "snd_pcm_lib_ioctl:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 1} true;
    call {:si_unique_call 118} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 119} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const loopback_hw_params: ref;

axiom loopback_hw_params == $sub.ref(0, 146636);

procedure loopback_hw_params($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation loopback_hw_params($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $p2 := hw_param_interval_c($p1, 18);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i6 := _snd_pcm_lib_alloc_vmalloc_buffer($p0, $i5, 32978);
    call {:si_unique_call 122} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const loopback_hw_free: ref;

axiom loopback_hw_free == $sub.ref(0, 147668);

procedure loopback_hw_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation loopback_hw_free($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(464, 1));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 4736)), $mul.ref(8, 1));
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} mutex_lock_nested($p10, 0);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(60, 1));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i15 := $shl.i32(1, $i14);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i16 := $xor.i32($i15, $sub.i32(0, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i12, $i16);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 4736)), $mul.ref(8, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} mutex_unlock($p21);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i22 := snd_pcm_lib_free_vmalloc_buffer($p0);
    call {:si_unique_call 126} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;
}



const loopback_prepare: ref;

axiom loopback_prepare == $sub.ref(0, 148700);

procedure loopback_prepare($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation loopback_prepare($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i8;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i20: i32;
  var vslice_dummy_var_44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(464, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(92, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i10 := snd_pcm_format_width($i9);
    call {:si_unique_call 128} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(104, 1));
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i13 := $mul.i32($i10, $i12);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i14 := $udiv.i32($i13, 8);
    call {:si_unique_call 129} {:cexpr "salign"} boogie_si_record_i32($i14);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(100, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i16, $i14);
    call {:si_unique_call 130} {:cexpr "bps"} boogie_si_record_i32($i17);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i18 := $sle.i32($i17, 0);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i18 == 1);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i19 := $sle.i32($i14, 0);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(28, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 0);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(128, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $i24 := frames_to_bytes($p2, $i23);
    call {:si_unique_call 132} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i32($i24);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(60, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(56, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 0);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(52, 1));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i47 := $and.i8($i46, $sub.i8(0, 2));
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, $i47);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(40, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i17);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(44, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i14);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(112, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $i52 := frames_to_bytes($p2, $i51);
    call {:si_unique_call 135} {:cexpr "tmp___1"} boogie_si_record_i64($i52);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i52);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(36, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 4736)), $mul.ref(8, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} mutex_lock_nested($p57, 0);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(60, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i62 := $shl.i32(1, $i61);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i63 := $xor.i32($i62, $sub.i32(0, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i59, $i63);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i65 == 1);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} $p66 := get_setup($p5);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p67, $mul.ref(0, 1));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(60, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i79 := $shl.i32(1, $i78);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i80 := $or.i32($i76, $i79);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i80);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 4736)), $mul.ref(8, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} mutex_unlock($p84);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb14:
    assume $i71 == 1;
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(60, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 0);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb16;

  $bb17:
    assume $i74 == 1;
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} params_change($p0);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i65 == 1;
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} params_change($p0);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(92, 1));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(840, 1));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(128, 1));
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i64.i32($i38);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(104, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i42 := $mul.i32($i39, $i41);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} vslice_dummy_var_44 := snd_pcm_format_set_silence($i34, $p36, $i42);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb2;
}



const loopback_trigger: ref;

axiom loopback_trigger == $sub.ref(0, 149732);

procedure loopback_trigger($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.29, $M.31, $M.33, $M.35, $M.28, $CurrAddr;



implementation loopback_trigger($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $i24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} {:cexpr "loopback_trigger:arg:cmd"} boogie_si_record_i32($i1);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(464, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(60, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i11 := $shl.i32(1, $i10);
    call {:si_unique_call 142} {:cexpr "stream"} boogie_si_record_i32($i11);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p8, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} spin_lock($p64);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, jiffies);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(72, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p66, $i65);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p8, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i69 := $xor.i32($i11, $sub.i32(0, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i68, $i69);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p8, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, $i70);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} loopback_timer_start($p6);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p8, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} spin_unlock($p72);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb23;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p8, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} spin_lock($p58);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p8, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i61 := $or.i32($i60, $i11);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p8, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i61);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} loopback_timer_stop($p6);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p8, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} spin_unlock($p63);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb2:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i17 == 1);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb15:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb12;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(60, 1));
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $i22 := loopback_check_format($p8, $i21);
    call {:si_unique_call 150} {:cexpr "err"} boogie_si_record_i32($i22);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 0);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, jiffies);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(72, 1));
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p26, $i25);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(48, 1));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 0);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(64, 1));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 0);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p8, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} spin_lock($p29);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p8, $mul.ref(0, 184)), $mul.ref(172, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i31, $i11);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p8, $mul.ref(0, 184)), $mul.ref(172, 1));
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p8, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i36 := $xor.i32($i11, $sub.i32(0, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i35, $i36);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p8, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} loopback_timer_start($p6);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p8, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} spin_unlock($p39);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(60, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i42 == 1;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} loopback_active_notify($p6);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume $i23 == 1;
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb23;

  $bb13:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb12;

  $bb19:
    assume $i19 == 1;
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p8, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} spin_lock($p43);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p8, $mul.ref(0, 184)), $mul.ref(172, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i46 := $xor.i32($i11, $sub.i32(0, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i45, $i46);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p8, $mul.ref(0, 184)), $mul.ref(172, 1));
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p8, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i51 := $xor.i32($i11, $sub.i32(0, 1));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i50, $i51);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p8, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} loopback_timer_stop($p6);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p8, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} spin_unlock($p54);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(60, 1));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29:
    assume $i57 == 1;
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} loopback_active_notify($p6);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    goto $bb31;
}



const loopback_pointer: ref;

axiom loopback_pointer == $sub.ref(0, 150764);

procedure loopback_pointer($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $CurrAddr;



implementation loopback_pointer($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(464, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} spin_lock($p8);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} vslice_dummy_var_45 := loopback_pos_update($p10);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(28, 1));
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    call {:si_unique_call 161} {:cexpr "pos"} boogie_si_record_i64($i14);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} spin_unlock($p17);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i18 := bytes_to_frames($p2, $i14);
    call {:si_unique_call 164} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;
}



const snd_pcm_lib_get_vmalloc_page: ref;

axiom snd_pcm_lib_get_vmalloc_page == $sub.ref(0, 151796);

procedure snd_pcm_lib_get_vmalloc_page($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation snd_pcm_lib_get_vmalloc_page($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} {:cexpr "snd_pcm_lib_get_vmalloc_page:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $p2 := external_alloc();
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 152828);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.27;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} ldv_spin_lock();
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} ldv_spin_lock_1($p0);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    return;
}



const loopback_pos_update: ref;

axiom loopback_pos_update == $sub.ref(0, 153860);

procedure loopback_pos_update($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.28, $CurrAddr;



implementation loopback_pos_update($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i32;
  var $i24: i1;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i64;
  var $i41: i64;
  var $i42: i64;
  var $i49: i1;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $p57: ref;
  var $i59: i1;
  var $i60: i32;
  var $p61: ref;
  var $i58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref(0, 8));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref(1, 8));
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(172, 1));
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i11 := $xor.i32($i8, $i10);
    call {:si_unique_call 169} {:cexpr "running"} boogie_si_record_i32($i11);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i11, 2);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i22, 0);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i36 := $ugt.i64($i22, $i33);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i43 := $ult.i64($i22, $i33);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i48 := $i33;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i41, $i42 := $i22, $i48;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i41, 0);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i64.i32($i41);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i52 := bytepos_delta($p3, $i51);
    call {:si_unique_call 180} {:cexpr "count1"} boogie_si_record_i32($i52);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i42);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $i54 := bytepos_delta($p6, $i53);
    call {:si_unique_call 182} {:cexpr "count2"} boogie_si_record_i32($i54);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i55 := $ult.i32($i52, $i54);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i55 == 1);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i59 := $ugt.i32($i52, $i54);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i58 := $i52;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} copy_play_buf($p3, $p6, $i58);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} bytepos_finish($p3, $i58);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} bytepos_finish($p6, $i58);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb29:
    assume $i59 == 1;
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32($i52, $i54);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 208)), $mul.ref(64, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i60);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i55 == 1;
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32($i54, $i52);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(64, 1));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i58 := $i54;
    goto $bb28;

  $bb20:
    assume $i49 == 1;
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i42, 0);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb22;

  $bb23:
    assume $i50 == 1;
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb17:
    assume $i43 == 1;
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i64.i32($i33);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i64.i32($i22);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32($i44, $i45);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $i47 := bytepos_delta($p6, $i46);
    call {:si_unique_call 176} {:cexpr "count1"} boogie_si_record_i32($i47);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} clear_capture_buf($p6, $i47);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} bytepos_finish($p6, $i47);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i48 := $i22;
    goto $bb19;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i32($i22);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i33);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i37, $i38);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i40 := bytepos_delta($p3, $i39);
    call {:si_unique_call 173} {:cexpr "count1"} boogie_si_record_i32($i40);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} bytepos_finish($p3, $i40);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i41, $i42 := $i33, $i33;
    goto $bb16;

  $bb7:
    assume $i34 == 1;
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i33, 0);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb9;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, jiffies);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(72, 1));
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i28 := $sub.i64($i25, $i27);
    call {:si_unique_call 171} {:cexpr "delta_capt"} boogie_si_record_i64($i28);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(72, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i30, $i28);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 208)), $mul.ref(72, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p32, $i31);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i33 := $i28;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, jiffies);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 208)), $mul.ref(72, 1));
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i17 := $sub.i64($i14, $i16);
    call {:si_unique_call 170} {:cexpr "delta_play"} boogie_si_record_i64($i17);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 208)), $mul.ref(72, 1));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, $i17);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 208)), $mul.ref(72, 1));
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p21, $i20);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i22 := $i17;
    goto $bb3;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 154892);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.27;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} ldv_spin_unlock();
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} ldv_spin_unlock_5($p0);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    return;
}



const bytes_to_frames: ref;

axiom bytes_to_frames == $sub.ref(0, 155924);

procedure bytes_to_frames($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation bytes_to_frames($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} {:cexpr "bytes_to_frames:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i2 := $mul.i64($i1, 8);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1176)), $mul.ref(152, 1));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i6 := $sdiv.i64($i2, $i5);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 156956);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.27;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $M.27 := 0;
    call {:si_unique_call 189} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_5: ref;

axiom ldv_spin_unlock_5 == $sub.ref(0, 157988);

procedure ldv_spin_unlock_5($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_5($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} _raw_spin_unlock($p2);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 159020);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    return;
}



const bytepos_delta: ref;

axiom bytepos_delta == $sub.ref(0, 160052);

procedure bytepos_delta($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.28, $CurrAddr;



implementation bytepos_delta($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i8;
  var $i40: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} {:cexpr "bytepos_delta:arg:jiffies_delta"} boogie_si_record_i32($i1);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(56, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i4 := byte_pos($p0, $i3);
    call {:si_unique_call 193} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    call {:si_unique_call 194} {:cexpr "last_pos"} boogie_si_record_i64($i5);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(56, 1));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(40, 1));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i10 := $mul.i32($i9, $i1);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i7, $i10);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(56, 1));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(56, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $i15 := byte_pos($p0, $i14);
    call {:si_unique_call 196} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i5);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i15, $i16);
    call {:si_unique_call 197} {:cexpr "delta"} boogie_si_record_i32($i17);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(64, 1));
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i20 := $ule.i32($i19, $i17);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(64, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 0);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(56, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(60, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i30 := $uge.i32($i27, $i29);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(56, 1));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(60, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i35 := $urem.i32($i32, $i34);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(56, 1));
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(52, 1));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i39 := $and.i8($i38, $sub.i8(0, 2));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i40 := $or.i8($i39, 1);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $i40);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(64, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32($i17, $i22);
    call {:si_unique_call 198} {:cexpr "delta"} boogie_si_record_i32($i23);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb3;
}



const bytepos_finish: ref;

axiom bytepos_finish == $sub.ref(0, 161084);

procedure bytepos_finish($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation bytepos_finish($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} {:cexpr "bytepos_finish:arg:delta"} boogie_si_record_i32($i1);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(28, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i1);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(28, 1));
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(28, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i10 := $urem.i32($i7, $i9);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(28, 1));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    return;
}



const clear_capture_buf: ref;

axiom clear_capture_buf == $sub.ref(0, 162116);

procedure clear_capture_buf($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation clear_capture_buf($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i64;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var vslice_dummy_var_46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} {:cexpr "clear_capture_buf:arg:bytes"} boogie_si_record_i32($i1);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1176)), $mul.ref(840, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(28, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 201} {:cexpr "dst_off"} boogie_si_record_i32($i9);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i14 := $uge.i32($i11, $i13);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, $i1);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i32($i17, $i19);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i27, $i28 := $i9, $i26;
    goto $bb8;

  $bb8:
    call $i27, $i28, $i29, $p30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $p42, $i43, $p44, $i45, $i46, $p48, $i49, $i50, $p51, $i52, $i53, vslice_dummy_var_46 := clear_capture_buf_loop_$bb8($p0, $p5, $p7, $i27, $i28, $i29, $p30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $p42, $i43, $p44, $i45, $i46, $p48, $i49, $i50, $p51, $i52, $i53, vslice_dummy_var_46);
    goto $bb8_last;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i27, $i28);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i32 := $ugt.i32($i29, $i31);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i36 := $i28;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i36);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $i38 := bytes_to_frames($p5, $i37);
    call {:si_unique_call 205} {:cexpr "tmp"} boogie_si_record_i64($i38);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 1176)), $mul.ref(92, 1));
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i27);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p7, $mul.ref($i41, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i64.i32($i38);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 1176)), $mul.ref(104, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i46 := $mul.i32($i43, $i45);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} vslice_dummy_var_46 := snd_pcm_format_set_silence($i40, $p42, $i46);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, $i36);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i50);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i28, $i36);
    call {:si_unique_call 207} {:cexpr "bytes"} boogie_si_record_i32($i52);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i27, $i28 := 0, $i52;
    goto $bb15_dummy;

  $bb12:
    assume $i53 == 1;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32($i34, $i27);
    call {:si_unique_call 203} {:cexpr "size"} boogie_si_record_i32($i35);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb11;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i22, $i24);
    call {:si_unique_call 202} {:cexpr "bytes"} boogie_si_record_i32($i25);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb7;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1005;
}



const copy_play_buf: ref;

axiom copy_play_buf == $sub.ref(0, 163148);

procedure copy_play_buf($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation copy_play_buf($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i64;
  var $i84: i64;
  var $p85: ref;
  var $i86: i64;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} {:cexpr "copy_play_buf:arg:bytes"} boogie_si_record_i32($i2);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1176)), $mul.ref(840, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 1176)), $mul.ref(840, 1));
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(28, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 209} {:cexpr "src_off"} boogie_si_record_i32($i16);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(28, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    call {:si_unique_call 210} {:cexpr "dst_off"} boogie_si_record_i32($i18);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p6, $mul.ref(0, 1176)), $mul.ref(256, 1));
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 5);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i62, $i63 := 0, $i2;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i64, $i65, $i66 := $i16, $i18, $i63;
    goto $bb13;

  $bb13:
    call $i64, $i65, $i66, $i67, $p68, $i69, $i70, $p71, $i72, $i73, $i74, $i75, $p76, $i77, $i78, $p79, $i80, $i81, $i82, $i83, $i84, $p85, $i86, $p87, $p88, $i89, $i90, $i91, $p92, $i93, $i94, $i95, $p96, $i97, $i98, cmdloc_dummy_var_21, cmdloc_dummy_var_22, cmdloc_dummy_var_23 := copy_play_buf_loop_$bb13($p0, $p1, $p8, $p14, $i64, $i65, $i66, $i67, $p68, $i69, $i70, $p71, $i72, $i73, $i74, $i75, $p76, $i77, $i78, $p79, $i80, $i81, $i82, $i83, $i84, $p85, $i86, $p87, $p88, $i89, $i90, $i91, $p92, $i93, $i94, $i95, $p96, $i97, $i98, cmdloc_dummy_var_21, cmdloc_dummy_var_22, cmdloc_dummy_var_23);
    goto $bb13_last;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i64, $i66);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i70 := $ugt.i32($i67, $i69);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i74 := $i66;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i65, $i74);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i78 := $ugt.i32($i75, $i77);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i82 := $i74;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i83 := $zext.i32.i64($i82);
    call {:si_unique_call 222} {:cexpr "__len"} boogie_si_record_i64($i83);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i84 := $zext.i32.i64($i65);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p14, $mul.ref($i84, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i86 := $zext.i32.i64($i64);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p8, $mul.ref($i86, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 223} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p85, $p87, $i83, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, 0);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i89 := $sub.i32($i66, $i82);
    call {:si_unique_call 224} {:cexpr "bytes"} boogie_si_record_i32($i89);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 0);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i64, $i82);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i94 := $urem.i32($i91, $i93);
    call {:si_unique_call 225} {:cexpr "src_off"} boogie_si_record_i32($i94);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i65, $i82);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i98 := $urem.i32($i95, $i97);
    call {:si_unique_call 226} {:cexpr "dst_off"} boogie_si_record_i32($i98);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i64, $i65, $i66 := $i94, $i98, $i89;
    goto corral_source_split_1155_dummy;

  $bb20:
    assume $i90 == 1;
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i62, 0);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    return;

  $bb24:
    assume $i99 == 1;
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} clear_capture_buf($p1, $i62);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p100, 0);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb17:
    assume $i78 == 1;
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i81 := $sub.i32($i80, $i65);
    call {:si_unique_call 221} {:cexpr "size"} boogie_si_record_i32($i81);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i82 := $i81;
    goto $bb19;

  $bb14:
    assume $i70 == 1;
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32($i72, $i64);
    call {:si_unique_call 220} {:cexpr "size"} boogie_si_record_i32($i73);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i74 := $i73;
    goto $bb16;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $i24 := snd_pcm_playback_hw_avail($p6);
    call {:si_unique_call 212} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 1176)), $mul.ref(128, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i27 := $ult.i64($i24, $i26);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i60, $i61 := 0, $i2;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i62, $i63 := $i60, $i61;
    goto $bb12;

  $bb3:
    assume $i27 == 1;
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 1176)), $mul.ref(264, 1));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    call {:si_unique_call 213} {:cexpr "appl_ptr1"} boogie_si_record_i64($i31);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 1176)), $mul.ref(128, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i34 := $urem.i64($i31, $i33);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i35 := $sub.i64($i31, $i34);
    call {:si_unique_call 214} {:cexpr "appl_ptr1"} boogie_si_record_i64($i35);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(28, 1));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(44, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i40 := $udiv.i32($i37, $i39);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i40);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, $i35);
    call {:si_unique_call 215} {:cexpr "appl_ptr1"} boogie_si_record_i64($i42);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i43 := $ult.i64($i31, $i42);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i47 := $i42;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i48 := $sub.i64($i31, $i47);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(44, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i51 := $zext.i32.i64($i50);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i52 := $mul.i64($i48, $i51);
    call {:si_unique_call 217} {:cexpr "diff"} boogie_si_record_i64($i52);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i2);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i54 := $ugt.i64($i53, $i52);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i58, $i59 := 0, $i2;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i60, $i61 := $i58, $i59;
    goto $bb11;

  $bb8:
    assume $i54 == 1;
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i64.i32($i52);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32($i2, $i55);
    call {:si_unique_call 218} {:cexpr "clear_bytes"} boogie_si_record_i32($i56);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i64.i32($i52);
    call {:si_unique_call 219} {:cexpr "bytes"} boogie_si_record_i32($i57);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i58, $i59 := $i56, $i57;
    goto $bb10;

  $bb5:
    assume $i43 == 1;
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 1176)), $mul.ref(128, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i46 := $sub.i64($i42, $i45);
    call {:si_unique_call 216} {:cexpr "appl_ptr1"} boogie_si_record_i64($i46);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb7;

  corral_source_split_1155_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1110;
}



const snd_pcm_playback_hw_avail: ref;

axiom snd_pcm_playback_hw_avail == $sub.ref(0, 164180);

procedure snd_pcm_playback_hw_avail($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation snd_pcm_playback_hw_avail($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i1 := snd_pcm_playback_avail($p0);
    call {:si_unique_call 229} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1176)), $mul.ref(128, 1));
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i4 := $sub.i64($i3, $i1);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const snd_pcm_playback_avail: ref;

axiom snd_pcm_playback_avail == $sub.ref(0, 165212);

procedure snd_pcm_playback_avail($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation snd_pcm_playback_avail($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1176)), $mul.ref(256, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1176)), $mul.ref(128, 1));
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i4, $i6);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1176)), $mul.ref(264, 1));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64($i7, $i11);
    call {:si_unique_call 230} {:cexpr "avail"} boogie_si_record_i64($i12);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i13 := $slt.i64($i12, 0);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1176)), $mul.ref(216, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i20 := $uge.i64($i12, $i19);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i17 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1176)), $mul.ref(216, 1));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i23 := $sub.i64($i12, $i22);
    call {:si_unique_call 232} {:cexpr "avail"} boogie_si_record_i64($i23);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1176)), $mul.ref(216, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, $i12);
    call {:si_unique_call 231} {:cexpr "avail"} boogie_si_record_i64($i16);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb3;
}



const snd_pcm_format_set_silence: ref;

axiom snd_pcm_format_set_silence == $sub.ref(0, 166244);

procedure snd_pcm_format_set_silence($i0: i32, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_format_set_silence($i0: i32, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 233} {:cexpr "snd_pcm_format_set_silence:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 234} {:cexpr "snd_pcm_format_set_silence:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 1} true;
    call {:si_unique_call 235} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 236} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const byte_pos: ref;

axiom byte_pos == $sub.ref(0, 167276);

procedure byte_pos($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $CurrAddr;



implementation byte_pos($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;
  var $i13: i32;
  var $i6: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} {:cexpr "byte_pos:arg:x"} boogie_si_record_i32($i1);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(48, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 100000);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i1);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i8 := $mul.i64($i7, 100000);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(48, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i11 := $mul.i32($i10, 250);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $i12 := div_u64($i8, $i11);
    call {:si_unique_call 240} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    call {:si_unique_call 241} {:cexpr "x"} boogie_si_record_i32($i13);
    assume {:verifier.code 0} true;
    $i6 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(44, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i16 := $urem.i32($i6, $i15);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i6, $i16);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i5 := $udiv.i32($i1, 250);
    call {:si_unique_call 238} {:cexpr "x"} boogie_si_record_i32($i5);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const div_u64: ref;

axiom div_u64 == $sub.ref(0, 168308);

procedure div_u64($i0: i64, $i1: i32) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.28, $CurrAddr;



implementation div_u64($i0: i64, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 243} {:cexpr "div_u64:arg:dividend"} boogie_si_record_i64($i0);
    call {:si_unique_call 244} {:cexpr "div_u64:arg:divisor"} boogie_si_record_i32($i1);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $i3 := div_u64_rem($i0, $i1, $p2);
    call {:si_unique_call 246} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const div_u64_rem: ref;

axiom div_u64_rem == $sub.ref(0, 169340);

procedure div_u64_rem($i0: i64, $i1: i32, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.28;



implementation div_u64_rem($i0: i64, $i1: i32, $p2: ref) returns ($r: i64)
{
  var $i3: i64;
  var $i4: i64;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} {:cexpr "div_u64_rem:arg:dividend"} boogie_si_record_i64($i0);
    call {:si_unique_call 248} {:cexpr "div_u64_rem:arg:divisor"} boogie_si_record_i32($i1);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i1);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i4 := $urem.i64($i0, $i3);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p2, $i5);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i1);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i7 := $udiv.i64($i0, $i6);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 170372);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.27;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 249} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_1: ref;

axiom ldv_spin_lock_1 == $sub.ref(0, 171404);

procedure ldv_spin_lock_1($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_1($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} _raw_spin_lock($p2);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 172436);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    return;
}



const loopback_check_format: ref;

axiom loopback_check_format == $sub.ref(0, 173468);

procedure loopback_check_format($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation loopback_check_format($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i26: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $i6: i32;
  var vslice_dummy_var_47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} {:cexpr "loopback_check_format:arg:stream"} boogie_si_record_i32($i1);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 3);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref(0, 8));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref(1, 8));
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p13, $mul.ref(0, 1176)), $mul.ref(92, 1));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref(0, 1176)), $mul.ref(92, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i22, $i24);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i26 := 1;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i25 == 1);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p13, $mul.ref(0, 1176)), $mul.ref(100, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p20, $mul.ref(0, 1176)), $mul.ref(100, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i28, $i30);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i26 := 1;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p13, $mul.ref(0, 1176)), $mul.ref(104, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p20, $mul.ref(0, 1176)), $mul.ref(104, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i33, $i35);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i26 := $i36;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i32($i26);
    call {:si_unique_call 253} {:cexpr "check"} boogie_si_record_i32($i37);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i1, 1);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref(1, 8));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} vslice_dummy_var_47 := snd_pcm_stop($p44, 5);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref(0, 8));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref(0, 8));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $p56 := get_setup($p55);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref(0, 8));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 4736)), $mul.ref(0, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p56, $mul.ref(0, 276)), $mul.ref(8, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p52, $mul.ref(0, 1176)), $mul.ref(92, 1));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i65, $i67);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p56, $mul.ref(0, 276)), $mul.ref(12, 1));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p52, $mul.ref(0, 1176)), $mul.ref(100, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i74, $i76);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p56, $mul.ref(0, 276)), $mul.ref(16, 1));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p52, $mul.ref(0, 1176)), $mul.ref(104, 1));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i83, $i85);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb25:
    assume $i86 == 1;
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p56, $mul.ref(0, 276)), $mul.ref(212, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} snd_ctl_notify($p63, 1, $p87);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p52, $mul.ref(0, 1176)), $mul.ref(104, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p56, $mul.ref(0, 276)), $mul.ref(16, 1));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, $i89);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i77 == 1;
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p56, $mul.ref(0, 276)), $mul.ref(148, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} snd_ctl_notify($p63, 1, $p78);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p52, $mul.ref(0, 1176)), $mul.ref(100, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p56, $mul.ref(0, 276)), $mul.ref(12, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i80);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i68 == 1;
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p56, $mul.ref(0, 276)), $mul.ref(84, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} snd_ctl_notify($p63, 1, $p69);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p52, $mul.ref(0, 1176)), $mul.ref(92, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p56, $mul.ref(0, 276)), $mul.ref(8, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb17:
    assume $i39 == 1;
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 5);
    goto $bb7;

  $bb14:
    assume $i38 == 1;
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb7;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb10;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 0);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb7;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const loopback_timer_start: ref;

axiom loopback_timer_start == $sub.ref(0, 174500);

procedure loopback_timer_start($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.28, $CurrAddr;



implementation loopback_timer_start($p0: ref)
{
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i8;
  var $i24: i8;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $p43: ref;
  var $p44: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $i1 := get_rate_shift($p0);
    call {:si_unique_call 259} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(48, 1));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, $i1);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(60, 1));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(56, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i14 := $ule.i32($i11, $i13);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(60, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(56, 1));
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i26, $i28);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    call {:si_unique_call 261} {:cexpr "tick"} boogie_si_record_i64($i30);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(40, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, $i30);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i35 := $sub.i64($i34, 1);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(40, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i37);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i39 := $udiv.i64($i35, $i38);
    call {:si_unique_call 262} {:cexpr "tick"} boogie_si_record_i64($i39);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, jiffies);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, $i39);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(80, 1)), $mul.ref(16, 1));
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p43, $i41);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(80, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} add_timer($p44);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(56, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(60, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i19 := $urem.i32($i16, $i18);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(56, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(52, 1));
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i23 := $and.i8($i22, $sub.i8(0, 2));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i24 := $or.i8($i23, 1);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $i24);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(48, 1));
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i1);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(36, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i8 := frac_pos($p0, $i7);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(60, 1));
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const loopback_active_notify: ref;

axiom loopback_active_notify == $sub.ref(0, 175532);

procedure loopback_active_notify($p0: ref);
  free requires assertsPassed;



implementation loopback_active_notify($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $p1 := get_setup($p0);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4736)), $mul.ref(0, 1));
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 276)), $mul.ref(20, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} snd_ctl_notify($p5, 1, $p6);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    return;
}



const loopback_timer_stop: ref;

axiom loopback_timer_stop == $sub.ref(0, 176564);

procedure loopback_timer_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.31, $M.33, $M.35;



implementation loopback_timer_stop($p0: ref)
{
  var $p1: ref;
  var $p4: ref;
  var vslice_dummy_var_48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(80, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} vslice_dummy_var_48 := ldv_del_timer_19($p1);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(80, 1)), $mul.ref(16, 1));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p4, 0);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_19: ref;

axiom ldv_del_timer_19 == $sub.ref(0, 177596);

procedure ldv_del_timer_19($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.31, $M.33, $M.35;



implementation ldv_del_timer_19($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $i1 := del_timer($p0);
    call {:si_unique_call 268} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} disable_suitable_timer_1($p0);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const del_timer: ref;

axiom del_timer == $sub.ref(0, 178628);

procedure del_timer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 1} true;
    call {:si_unique_call 270} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 271} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_1: ref;

axiom disable_suitable_timer_1 == $sub.ref(0, 179660);

procedure disable_suitable_timer_1($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $M.31, $M.33, $M.35;



implementation disable_suitable_timer_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i1 := $M.29;
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $M.31;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := $M.33;
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := $M.35;
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p22 := $M.36;
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb22;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $M.35 := 0;
    call {:si_unique_call 275} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p16 := $M.34;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i15, $i17);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $M.33 := 0;
    call {:si_unique_call 274} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p10 := $M.32;
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i9, $i11);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $M.31 := 0;
    call {:si_unique_call 273} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p4 := $M.30;
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 272} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const get_setup: ref;

axiom get_setup == $sub.ref(0, 180692);

procedure get_setup($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_setup($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 704)), $mul.ref(8, 1));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 256)), $mul.ref(8, 1));
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 992)), $mul.ref(24, 1));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 276} {:cexpr "device"} boogie_si_record_i32($i8);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 704)), $mul.ref(60, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i15 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 4736)), $mul.ref(320, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 704)), $mul.ref(24, 1));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i15);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i24, $i25);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p19, $mul.ref($i26, 276));
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $r := $p27;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i14 := $xor.i32($i8, 1);
    call {:si_unique_call 277} {:cexpr "device"} boogie_si_record_i32($i14);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;
}



const snd_ctl_notify: ref;

axiom snd_ctl_notify == $sub.ref(0, 181724);

procedure snd_ctl_notify($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation snd_ctl_notify($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} {:cexpr "snd_ctl_notify:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    return;
}



const get_rate_shift: ref;

axiom get_rate_shift == $sub.ref(0, 182756);

procedure get_rate_shift($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_rate_shift($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $p1 := get_setup($p0);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 276)), $mul.ref(4, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const frac_pos: ref;

axiom frac_pos == $sub.ref(0, 183788);

procedure frac_pos($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $CurrAddr;



implementation frac_pos($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} {:cexpr "frac_pos:arg:x"} boogie_si_record_i32($i1);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(48, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 100000);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(48, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i1);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i11 := $mul.i64($i9, $i10);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i12 := $mul.i64($i11, 250);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $i13 := div_u64($i12, 100000);
    call {:si_unique_call 282} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    call {:si_unique_call 283} {:cexpr "x"} boogie_si_record_i32($i14);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i5 := $mul.i32($i1, 250);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const add_timer: ref;

axiom add_timer == $sub.ref(0, 184820);

procedure add_timer($p0: ref);
  free requires assertsPassed;



implementation add_timer($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    return;
}



const snd_pcm_stop: ref;

axiom snd_pcm_stop == $sub.ref(0, 185852);

procedure snd_pcm_stop($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_stop($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 284} {:cexpr "snd_pcm_stop:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 1} true;
    call {:si_unique_call 285} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 286} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const snd_pcm_format_width: ref;

axiom snd_pcm_format_width == $sub.ref(0, 186884);

procedure snd_pcm_format_width($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_format_width($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 287} {:cexpr "snd_pcm_format_width:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 1} true;
    call {:si_unique_call 288} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 289} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const frames_to_bytes: ref;

axiom frames_to_bytes == $sub.ref(0, 187916);

procedure frames_to_bytes($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation frames_to_bytes($p0: ref, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} {:cexpr "frames_to_bytes:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1176)), $mul.ref(152, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i4, $i1);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i6 := $sdiv.i64($i5, 8);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const params_change: ref;

axiom params_change == $sub.ref(0, 188948);

procedure params_change($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation params_change($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(464, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(92, 1));
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $i10 := pcm_format_to_bits($i9);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(88, 1)), $mul.ref(8, 1));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p12, $i10);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(100, 1));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(88, 1)), $mul.ref(20, 1));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i14);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(100, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(88, 1)), $mul.ref(24, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i18);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(104, 1));
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(88, 1)), $mul.ref(28, 1));
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i22);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(104, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(88, 1)), $mul.ref(32, 1));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i26);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref(0, 8));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} params_change_substream($p31, $p2);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref(1, 8));
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} params_change_substream($p34, $p2);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    return;
}



const pcm_format_to_bits: ref;

axiom pcm_format_to_bits == $sub.ref(0, 189980);

procedure pcm_format_to_bits($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation pcm_format_to_bits($i0: i32) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} {:cexpr "pcm_format_to_bits:arg:pcm_format"} boogie_si_record_i32($i0);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i2 := $shl.i64(1, $i1);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const params_change_substream: ref;

axiom params_change_substream == $sub.ref(0, 191012);

procedure params_change_substream($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation params_change_substream($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 1176)), $mul.ref(480, 1));
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p14);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p17);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 295} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p18, $p19, 80, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const snd_pcm_lib_free_vmalloc_buffer: ref;

axiom snd_pcm_lib_free_vmalloc_buffer == $sub.ref(0, 192044);

procedure snd_pcm_lib_free_vmalloc_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_lib_free_vmalloc_buffer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 1} true;
    call {:si_unique_call 296} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 297} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const hw_param_interval_c: ref;

axiom hw_param_interval_c == $sub.ref(0, 193076);

procedure hw_param_interval_c($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation hw_param_interval_c($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} {:cexpr "hw_param_interval_c:arg:var"} boogie_si_record_i32($i1);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(260, 1));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 8));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 12));
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const _snd_pcm_lib_alloc_vmalloc_buffer: ref;

axiom _snd_pcm_lib_alloc_vmalloc_buffer == $sub.ref(0, 194108);

procedure _snd_pcm_lib_alloc_vmalloc_buffer($p0: ref, $i1: i64, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _snd_pcm_lib_alloc_vmalloc_buffer($p0: ref, $i1: i64, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 299} {:cexpr "_snd_pcm_lib_alloc_vmalloc_buffer:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 300} {:cexpr "_snd_pcm_lib_alloc_vmalloc_buffer:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 1} true;
    call {:si_unique_call 301} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 302} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const get_cable_index: ref;

axiom get_cable_index == $sub.ref(0, 195140);

procedure get_cable_index($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_cable_index($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(0, 1));
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 992)), $mul.ref(24, 1));
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(60, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i8 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(60, 1));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 196172);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} free_($p0);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 197204);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 304} $free($p0);
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 198236);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 306} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} ldv_check_alloc_flags($i1);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const loopback_timer_function: ref;

axiom loopback_timer_function == $sub.ref(0, 199268);

procedure loopback_timer_function($i0: i64);
  free requires assertsPassed;
  modifies $M.27, $M.0, $M.28, $CurrAddr;



implementation loopback_timer_function($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i8;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} {:cexpr "loopback_timer_function:arg:data"} boogie_si_record_i64($i0);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} ldv_spin_lock();
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $i4 := loopback_pos_update($p3);
    call {:si_unique_call 311} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 704)), $mul.ref(60, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i9 := $shl.i32(1, $i8);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i4, $i9);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} spin_unlock_irqrestore($p27, $u0);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} loopback_timer_start($p1);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(52, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(52, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i19 := $and.i8($i18, $sub.i8(0, 2));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, $i19);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} spin_unlock_irqrestore($p22, $u0);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} snd_pcm_period_elapsed($p24);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const reg_timer_1: ref;

axiom reg_timer_1 == $sub.ref(0, 200300);

procedure reg_timer_1($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.30, $M.0, $M.29, $M.32, $M.31, $M.34, $M.33, $M.36, $M.35;



implementation reg_timer_1($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} {:cexpr "reg_timer_1:arg:data"} boogie_si_record_i64($i2);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(loopback_timer_function));
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} activate_suitable_timer_1($p0, $i2);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 201332);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 202364);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    return;
}



const snd_pcm_hw_constraint_integer: ref;

axiom snd_pcm_hw_constraint_integer == $sub.ref(0, 203396);

procedure snd_pcm_hw_constraint_integer($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_hw_constraint_integer($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 318} {:cexpr "snd_pcm_hw_constraint_integer:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 1} true;
    call {:si_unique_call 319} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 320} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const rule_format: ref;

axiom rule_format == $sub.ref(0, 204428);

procedure rule_format($p0: ref, $p1: ref) returns ($r: i32);



const snd_pcm_hw_rule_add: ref;

axiom snd_pcm_hw_rule_add == $sub.ref(0, 205460);

procedure snd_pcm_hw_rule_add.ref.i32.i32.ref.ref.i32.i32($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, $i5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_hw_rule_add.ref.i32.i32.ref.ref.i32.i32($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, $i5: i32, p.6: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 321} {:cexpr "snd_pcm_hw_rule_add:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 322} {:cexpr "snd_pcm_hw_rule_add:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 323} {:cexpr "snd_pcm_hw_rule_add:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 1} true;
    call {:si_unique_call 324} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 325} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const rule_rate: ref;

axiom rule_rate == $sub.ref(0, 206492);

procedure rule_rate($p0: ref, $p1: ref) returns ($r: i32);



const rule_channels: ref;

axiom rule_channels == $sub.ref(0, 207524);

procedure rule_channels($p0: ref, $p1: ref) returns ($r: i32);



const loopback_runtime_free: ref;

axiom loopback_runtime_free == $sub.ref(0, 208556);

procedure loopback_runtime_free($p0: ref);



const get_notify: ref;

axiom get_notify == $sub.ref(0, 209588);

procedure get_notify($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_notify($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i8;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $p1 := get_setup($p0);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i4 := $and.i8($i3, 1);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const hw_param_interval: ref;

axiom hw_param_interval == $sub.ref(0, 210620);

procedure hw_param_interval($p0: ref, $i1: i32) returns ($r: ref);



const snd_interval_refine: ref;

axiom snd_interval_refine == $sub.ref(0, 211652);

procedure snd_interval_refine($p0: ref, $p1: ref) returns ($r: i32);



const hw_param_mask: ref;

axiom hw_param_mask == $sub.ref(0, 212684);

procedure hw_param_mask($p0: ref, $i1: i32) returns ($r: ref);



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 213716);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const activate_suitable_timer_1: ref;

axiom activate_suitable_timer_1 == $sub.ref(0, 214748);

procedure activate_suitable_timer_1($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.30, $M.0, $M.29, $M.32, $M.31, $M.34, $M.33, $M.36, $M.35;



implementation activate_suitable_timer_1($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} {:cexpr "activate_suitable_timer_1:arg:data"} boogie_si_record_i64($i1);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i2 := $M.29;
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i4 := $M.29;
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $M.31;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i9 == 1);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i10 := $M.31;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $M.33;
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i15 == 1);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i16 := $M.33;
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $M.35;
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i21 == 1);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i22 := $M.35;
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.36 := $p0;
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p24 := $M.36;
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i1);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 331} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.34 := $p0;
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p18 := $M.34;
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i1);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 330} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.32 := $p0;
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $p12 := $M.32;
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i1);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 329} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $M.30 := $p0;
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p6 := $M.30;
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $i1);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 328} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 215780);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.27;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} ldv_spin_unlock();
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} ldv_spin_unlock_irqrestore_8($p0, $i1);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    return;
}



const snd_pcm_period_elapsed: ref;

axiom snd_pcm_period_elapsed == $sub.ref(0, 216812);

procedure snd_pcm_period_elapsed($p0: ref);
  free requires assertsPassed;



implementation snd_pcm_period_elapsed($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_8: ref;

axiom ldv_spin_unlock_irqrestore_8 == $sub.ref(0, 217844);

procedure ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} {:cexpr "ldv_spin_unlock_irqrestore_8:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 218876);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 219908);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i1 := $M.27;
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} ldv_error();
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 220940);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 340} __VERIFIER_error();
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const loopback_rate_shift_info: ref;

axiom loopback_rate_shift_info == $sub.ref(0, 221972);

procedure loopback_rate_shift_info($p0: ref, $p1: ref) returns ($r: i32);



const loopback_rate_shift_get: ref;

axiom loopback_rate_shift_get == $sub.ref(0, 223004);

procedure loopback_rate_shift_get($p0: ref, $p1: ref) returns ($r: i32);



const loopback_rate_shift_put: ref;

axiom loopback_rate_shift_put == $sub.ref(0, 224036);

procedure loopback_rate_shift_put($p0: ref, $p1: ref) returns ($r: i32);



const snd_ctl_boolean_mono_info: ref;

axiom snd_ctl_boolean_mono_info == $sub.ref(0, 225068);

procedure snd_ctl_boolean_mono_info($p0: ref, $p1: ref) returns ($r: i32);



const loopback_notify_get: ref;

axiom loopback_notify_get == $sub.ref(0, 226100);

procedure loopback_notify_get($p0: ref, $p1: ref) returns ($r: i32);



const loopback_notify_put: ref;

axiom loopback_notify_put == $sub.ref(0, 227132);

procedure loopback_notify_put($p0: ref, $p1: ref) returns ($r: i32);



const loopback_active_get: ref;

axiom loopback_active_get == $sub.ref(0, 228164);

procedure loopback_active_get($p0: ref, $p1: ref) returns ($r: i32);



const loopback_format_info: ref;

axiom loopback_format_info == $sub.ref(0, 229196);

procedure loopback_format_info($p0: ref, $p1: ref) returns ($r: i32);



const loopback_format_get: ref;

axiom loopback_format_get == $sub.ref(0, 230228);

procedure loopback_format_get($p0: ref, $p1: ref) returns ($r: i32);



const loopback_rate_info: ref;

axiom loopback_rate_info == $sub.ref(0, 231260);

procedure loopback_rate_info($p0: ref, $p1: ref) returns ($r: i32);



const loopback_rate_get: ref;

axiom loopback_rate_get == $sub.ref(0, 232292);

procedure loopback_rate_get($p0: ref, $p1: ref) returns ($r: i32);



const loopback_channels_info: ref;

axiom loopback_channels_info == $sub.ref(0, 233324);

procedure loopback_channels_info($p0: ref, $p1: ref) returns ($r: i32);



const loopback_channels_get: ref;

axiom loopback_channels_get == $sub.ref(0, 234356);

procedure loopback_channels_get($p0: ref, $p1: ref) returns ($r: i32);



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 235388);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 341} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 1} true;
    call {:si_unique_call 342} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 343} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 344} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $p4 := calloc(1, $i0);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 1} true;
    call {:si_unique_call 346} __VERIFIER_assume($i7);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 236420);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 348} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const timer_init_1: ref;

axiom timer_init_1 == $sub.ref(0, 237452);

procedure timer_init_1();
  free requires assertsPassed;
  modifies $M.29, $M.31, $M.33, $M.35;



implementation timer_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 349} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $M.31 := 0;
    call {:si_unique_call 350} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $M.33 := 0;
    call {:si_unique_call 351} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $M.35 := 0;
    call {:si_unique_call 352} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_snd_pcm_ops_4: ref;

axiom ldv_initialize_snd_pcm_ops_4 == $sub.ref(0, 238484);

procedure ldv_initialize_snd_pcm_ops_4();
  free requires assertsPassed;
  modifies $M.114, $M.0, $CurrAddr;



implementation ldv_initialize_snd_pcm_ops_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $p0 := ldv_zalloc(704);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $M.114 := $p0;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_platform_driver_2: ref;

axiom ldv_initialize_platform_driver_2 == $sub.ref(0, 239516);

procedure ldv_initialize_platform_driver_2();
  free requires assertsPassed;
  modifies $M.115, $M.0, $CurrAddr;



implementation ldv_initialize_platform_driver_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $p0 := ldv_zalloc(1464);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $M.115 := $p0;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    return;
}



const choose_timer_1: ref;

axiom choose_timer_1 == $sub.ref(0, 240548);

procedure choose_timer_1();
  free requires assertsPassed;
  modifies $M.29, $M.31, $M.33, $M.35, $M.27, $M.0, $M.28, $CurrAddr;



implementation choose_timer_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 1} true;
    call {:si_unique_call 355} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 356} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 357} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} ldv_stop();
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i18 := $M.35;
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $M.35 := 2;
    call {:si_unique_call 364} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(2);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i20 := $M.35;
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p21 := $M.36;
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} ldv_timer_1($i20, $p21);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i14 := $M.33;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $M.33 := 2;
    call {:si_unique_call 362} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(2);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i16 := $M.33;
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p17 := $M.34;
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} ldv_timer_1($i16, $p17);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i10 := $M.31;
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 360} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(2);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i12 := $M.31;
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p13 := $M.32;
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} ldv_timer_1($i12, $p13);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i6 := $M.29;
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 358} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(2);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i8 := $M.29;
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p9 := $M.30;
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} ldv_timer_1($i8, $p9);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ldv_timer_1: ref;

axiom ldv_timer_1 == $sub.ref(0, 241580);

procedure ldv_timer_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.27, $M.0, $M.28, $CurrAddr;



implementation ldv_timer_1($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} {:cexpr "ldv_timer_1:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} loopback_timer_function($i3);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 242612);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_dev_pm_ops_3: ref;

axiom ldv_dev_pm_ops_3 == $sub.ref(0, 243644);

procedure ldv_dev_pm_ops_3();
  free requires assertsPassed;
  modifies $M.117, $M.0, $CurrAddr;



implementation ldv_dev_pm_ops_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $p0 := ldv_zalloc(1416);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $M.117 := $p0;
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_snd_pcm_ops_5: ref;

axiom ldv_initialize_snd_pcm_ops_5 == $sub.ref(0, 244676);

procedure ldv_initialize_snd_pcm_ops_5();
  free requires assertsPassed;
  modifies $M.118, $M.0, $CurrAddr;



implementation ldv_initialize_snd_pcm_ops_5()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $p0 := ldv_zalloc(704);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $M.118 := $p0;
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 245708);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.119, $M.29, $M.31, $M.33, $M.35, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.0, $M.126, $M.127, $M.128, $M.118, $M.117, $M.114, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.4, $M.148, $M.149, $M.150, $M.115, $M.30, $M.32, $M.34, $M.36, $M.27, $M.5, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.2, $M.1, $M.151, $M.152, $M.233, $M.234, $CurrAddr, $M.11, $M.12, $M.28, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i32;
  var $i114: i1;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $i122: i32;
  var $i123: i1;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i1;
  var $i133: i1;
  var $i134: i1;
  var $i135: i1;
  var $i136: i1;
  var $i137: i1;
  var $i138: i1;
  var $i139: i1;
  var $i140: i1;
  var $i141: i1;
  var $i142: i1;
  var $i143: i1;
  var $i144: i1;
  var $i145: i1;
  var $i146: i1;
  var $i147: i1;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i157: i32;
  var $i158: i32;
  var $i159: i1;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i163: i32;
  var $i164: i32;
  var $i165: i1;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $i169: i32;
  var $i170: i32;
  var $i171: i1;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $i175: i32;
  var $i176: i32;
  var $i177: i1;
  var $i178: i32;
  var $i179: i1;
  var $p180: ref;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $i184: i32;
  var $i185: i1;
  var $i186: i32;
  var $i187: i32;
  var $i188: i1;
  var $i189: i32;
  var $i190: i1;
  var $i191: i32;
  var $i192: i32;
  var $i193: i1;
  var $i194: i32;
  var $i195: i1;
  var $i196: i32;
  var $i197: i32;
  var $i198: i1;
  var $i199: i32;
  var $i200: i1;
  var $i201: i32;
  var $i202: i32;
  var $i203: i1;
  var $i204: i32;
  var $i205: i1;
  var $i206: i32;
  var $i207: i32;
  var $i208: i1;
  var $i209: i32;
  var $i210: i1;
  var $i211: i32;
  var $i212: i32;
  var $i213: i1;
  var $i214: i32;
  var $i215: i1;
  var $i216: i32;
  var $i217: i32;
  var $i218: i1;
  var $i219: i32;
  var $i220: i32;
  var $i221: i32;
  var $i222: i1;
  var $i223: i32;
  var $i224: i32;
  var $i225: i1;
  var $i226: i32;
  var $i227: i1;
  var $i228: i32;
  var $i229: i32;
  var $i230: i1;
  var $i231: i32;
  var $i232: i1;
  var $i233: i32;
  var $i234: i32;
  var $i235: i1;
  var $i236: i32;
  var $i237: i1;
  var $i238: i32;
  var $i239: i32;
  var $i240: i1;
  var $i241: i32;
  var $i242: i1;
  var $i243: i32;
  var $i244: i32;
  var $i245: i1;
  var $i246: i32;
  var $i247: i1;
  var $i248: i32;
  var $i249: i32;
  var $i250: i1;
  var $i251: i32;
  var $i252: i1;
  var $i254: i32;
  var $i255: i32;
  var $i256: i32;
  var $i257: i1;
  var $i258: i32;
  var $i259: i1;
  var $i260: i1;
  var $i261: i1;
  var $i262: i32;
  var $i263: i1;
  var $p264: ref;
  var $i265: i32;
  var $i266: i32;
  var $i267: i1;
  var $i268: i32;
  var $i269: i32;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $i274: i32;
  var $i275: i32;
  var $i276: i32;
  var $i277: i1;
  var $i278: i32;
  var $i279: i1;
  var $i280: i1;
  var $i281: i1;
  var $i282: i1;
  var $i283: i1;
  var $i284: i1;
  var $i285: i1;
  var $i286: i1;
  var $i287: i1;
  var $i288: i1;
  var $i289: i32;
  var $i290: i1;
  var $p291: ref;
  var $i293: i32;
  var $i294: i1;
  var $p295: ref;
  var $i297: i32;
  var $i298: i1;
  var $p299: ref;
  var $i301: i32;
  var $i302: i1;
  var $p303: ref;
  var $i305: i32;
  var $i306: i1;
  var $p307: ref;
  var $i309: i32;
  var $i310: i1;
  var $p311: ref;
  var $i313: i32;
  var $i314: i1;
  var $p315: ref;
  var $i317: i32;
  var $i318: i1;
  var $p319: ref;
  var $i321: i32;
  var $i322: i1;
  var $p323: ref;
  var $i325: i32;
  var $i326: i1;
  var $p327: ref;
  var $i329: i32;
  var $i330: i1;
  var $p331: ref;
  var $i333: i32;
  var $i334: i1;
  var $p335: ref;
  var $i337: i32;
  var $i338: i1;
  var $p339: ref;
  var $i341: i32;
  var $i342: i1;
  var $p343: ref;
  var $i345: i32;
  var $i346: i1;
  var $p347: ref;
  var $i348: i32;
  var $i349: i32;
  var $i350: i1;
  var $i351: i32;
  var $i352: i32;
  var $i353: i32;
  var $i354: i1;
  var $p355: ref;
  var $i356: i32;
  var $i357: i32;
  var $i358: i1;
  var $i359: i32;
  var $i360: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: ref;
  var vslice_dummy_var_56: ref;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i64;
  var vslice_dummy_var_60: i64;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: ref;
  var vslice_dummy_var_72: ref;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i64;
  var vslice_dummy_var_76: i64;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;

  $bb0:
    call {:si_unique_call 373} $initialize();
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $p0 := ldv_zalloc(608);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 1} true;
    call {:si_unique_call 376} $i2 := __VERIFIER_nondet_uint();
    call {:si_unique_call 377} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i2);
    call {:si_unique_call 378} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $p3 := ldv_zalloc(1);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 1} true;
    call {:si_unique_call 380} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 381} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 382} {:cexpr "tmp___2"} boogie_si_record_i32($i4);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 1} true;
    call {:si_unique_call 383} $i5 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 384} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i5);
    call {:si_unique_call 385} {:cexpr "tmp___3"} boogie_si_record_i64($i5);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $p6 := ldv_zalloc(1);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 1} true;
    call {:si_unique_call 387} $i7 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 388} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i7);
    call {:si_unique_call 389} {:cexpr "tmp___5"} boogie_si_record_i64($i7);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 1} true;
    call {:si_unique_call 390} $i8 := __VERIFIER_nondet_uint();
    call {:si_unique_call 391} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i8);
    call {:si_unique_call 392} {:cexpr "tmp___6"} boogie_si_record_i32($i8);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 1} true;
    call {:si_unique_call 393} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 394} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    call {:si_unique_call 395} {:cexpr "tmp___7"} boogie_si_record_i32($i9);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $p10 := ldv_zalloc(608);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} ldv_initialize();
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $M.119 := 0;
    call {:si_unique_call 398} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} timer_init_1();
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $M.120 := 1;
    call {:si_unique_call 400} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $M.121 := 0;
    call {:si_unique_call 401} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $M.122 := 1;
    call {:si_unique_call 402} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $M.123 := 0;
    call {:si_unique_call 403} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $M.124 := 0;
    call {:si_unique_call 404} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $M.125 := 0;
    call {:si_unique_call 405} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $p35, $i37, $i38, $p39, $i41, $i42, $p43, $i45, $i46, $p47, $i49, $i50, $p51, $i53, $i54, $p55, $i57, $i58, $p59, $i61, $i62, $p63, $i65, $i66, $p67, $i69, $i70, $p71, $i73, $i74, $p75, $i77, $i78, $p79, $i81, $i82, $p83, $i85, $i86, $p87, $i89, $i90, $p91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $p150, $i151, $i152, $i153, $i154, $i155, $p156, $i157, $i158, $i159, $i160, $i161, $p162, $i163, $i164, $i165, $i166, $i167, $p168, $i169, $i170, $i171, $i172, $i173, $p174, $i175, $i176, $i177, $i178, $i179, $p180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $p264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $p272, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $p291, $i293, $i294, $p295, $i297, $i298, $p299, $i301, $i302, $p303, $i305, $i306, $p307, $i309, $i310, $p311, $i313, $i314, $p315, $i317, $i318, $p319, $i321, $i322, $p323, $i325, $i326, $p327, $i329, $i330, $p331, $i333, $i334, $p335, $i337, $i338, $p339, $i341, $i342, $p343, $i345, $i346, $p347, $i348, $i349, $i350, $i351, $i352, $i353, $i354, $p355, $i356, $i357, $i358, $i359, $i360, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52, vslice_dummy_var_53, vslice_dummy_var_54, vslice_dummy_var_55, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78 := main_loop_$bb1($p1, $i2, $p3, $i4, $i5, $p6, $i7, $i8, $i9, $p11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $p35, $i37, $i38, $p39, $i41, $i42, $p43, $i45, $i46, $p47, $i49, $i50, $p51, $i53, $i54, $p55, $i57, $i58, $p59, $i61, $i62, $p63, $i65, $i66, $p67, $i69, $i70, $p71, $i73, $i74, $p75, $i77, $i78, $p79, $i81, $i82, $p83, $i85, $i86, $p87, $i89, $i90, $p91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $p150, $i151, $i152, $i153, $i154, $i155, $p156, $i157, $i158, $i159, $i160, $i161, $p162, $i163, $i164, $i165, $i166, $i167, $p168, $i169, $i170, $i171, $i172, $i173, $p174, $i175, $i176, $i177, $i178, $i179, $p180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $p264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $p272, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $p291, $i293, $i294, $p295, $i297, $i298, $p299, $i301, $i302, $p303, $i305, $i306, $p307, $i309, $i310, $p311, $i313, $i314, $p315, $i317, $i318, $p319, $i321, $i322, $p323, $i325, $i326, $p327, $i329, $i330, $p331, $i333, $i334, $p335, $i337, $i338, $p339, $i341, $i342, $p343, $i345, $i346, $p347, $i348, $i349, $i350, $i351, $i352, $i353, $i354, $p355, $i356, $i357, $i358, $i359, $i360, vslice_dummy_var_49, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52, vslice_dummy_var_53, vslice_dummy_var_54, vslice_dummy_var_55, vslice_dummy_var_56, vslice_dummy_var_57, vslice_dummy_var_58, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i12, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i12, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} ldv_stop();
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb100_dummy;

  $bb9:
    assume $i16 == 1;
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i276 := $M.125;
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i277 := $ne.i32($i276, 0);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb324:
    assume $i277 == 1;
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 1} true;
    call {:si_unique_call 543} $i278 := __VERIFIER_nondet_int();
    call {:si_unique_call 544} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i278);
    call {:si_unique_call 545} {:cexpr "tmp___14"} boogie_si_record_i32($i278);
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    $i279 := $slt.i32($i278, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    $i280 := $slt.i32($i278, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  $bb330:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    $i281 := $slt.i32($i278, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  $bb332:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    $i282 := $slt.i32($i278, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb333, $bb334;

  $bb334:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    $i283 := $eq.i32($i278, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    assume !($i283 == 1);
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} ldv_stop();
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb335:
    assume $i283 == 1;
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i353 := $M.125;
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i354 := $eq.i32($i353, 1);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb397, $bb398;

  $bb398:
    assume !($i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb397:
    assume $i354 == 1;
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p355 := $M.118;
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $i356 := loopback_open($p355);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $M.150 := $i356;
    call {:si_unique_call 579} {:cexpr "ldv_retval_23"} boogie_si_record_i32($i356);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i357 := $M.150;
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i358 := $eq.i32($i357, 0);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb399, $bb400;

  $bb400:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb399:
    assume $i358 == 1;
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $M.125 := 2;
    call {:si_unique_call 580} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i359 := $M.121;
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i360 := $add.i32($i359, 1);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $M.121 := $i360;
    call {:si_unique_call 581} {:cexpr "ref_cnt"} boogie_si_record_i32($i360);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    goto $bb401;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb333:
    assume $i282 == 1;
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i345 := $M.125;
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i346 := $eq.i32($i345, 2);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  $bb392:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb391:
    assume $i346 == 1;
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p347 := $M.118;
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i348 := loopback_close($p347);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $M.149 := $i348;
    call {:si_unique_call 575} {:cexpr "ldv_retval_24"} boogie_si_record_i32($i348);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i349 := $M.149;
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i349, 0);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb393, $bb394;

  $bb394:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb393:
    assume $i350 == 1;
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 576} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i351 := $M.121;
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i352 := $sub.i32($i351, 1);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $M.121 := $i352;
    call {:si_unique_call 577} {:cexpr "ref_cnt"} boogie_si_record_i32($i352);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb331:
    assume $i281 == 1;
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i337 := $M.125;
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i338 := $eq.i32($i337, 2);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb385, $bb386;

  $bb386:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    $i341 := $M.125;
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i342 := $eq.i32($i341, 1);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb388, $bb389;

  $bb389:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb388:
    assume $i342 == 1;
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p343 := $M.118;
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} vslice_dummy_var_78 := loopback_trigger($p343, $i9);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 573} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb385:
    assume $i338 == 1;
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p339 := $M.118;
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} vslice_dummy_var_77 := loopback_trigger($p339, $i9);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $M.125 := 2;
    call {:si_unique_call 571} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb329:
    assume $i280 == 1;
    assume {:verifier.code 0} true;
    $i284 := $slt.i32($i278, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  $bb339:
    assume !($i284 == 1);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i329 := $M.125;
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i330 := $eq.i32($i329, 2);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  $bb380:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    $i333 := $M.125;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i334 := $eq.i32($i333, 1);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  $bb383:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb382:
    assume $i334 == 1;
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p335 := $M.118;
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} vslice_dummy_var_76 := loopback_pointer($p335);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 569} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb379:
    assume $i330 == 1;
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p331 := $M.118;
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} vslice_dummy_var_75 := loopback_pointer($p331);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $M.125 := 2;
    call {:si_unique_call 567} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb338:
    assume $i284 == 1;
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i321 := $M.125;
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i322 := $eq.i32($i321, 2);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    $i325 := $M.125;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i325, 1);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  $bb377:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb376:
    assume $i326 == 1;
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p327 := $M.118;
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} vslice_dummy_var_74 := loopback_hw_params($p327, $p11);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 565} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb373:
    assume $i322 == 1;
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p323 := $M.118;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} vslice_dummy_var_73 := loopback_hw_params($p323, $p11);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $M.125 := 2;
    call {:si_unique_call 563} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb327:
    assume $i279 == 1;
    assume {:verifier.code 0} true;
    $i285 := $slt.i32($i278, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  $bb341:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    $i286 := $slt.i32($i278, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  $bb343:
    assume !($i286 == 1);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i313 := $M.125;
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i314 := $eq.i32($i313, 2);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  $bb368:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    $i317 := $M.125;
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i318 := $eq.i32($i317, 1);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  $bb371:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb370:
    assume $i318 == 1;
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p319 := $M.118;
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} vslice_dummy_var_72 := snd_pcm_lib_get_vmalloc_page($p319, $i7);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 561} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb367:
    assume $i314 == 1;
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p315 := $M.118;
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} vslice_dummy_var_71 := snd_pcm_lib_get_vmalloc_page($p315, $i7);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $M.125 := 2;
    call {:si_unique_call 559} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb342:
    assume $i286 == 1;
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i305 := $M.125;
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i305, 2);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  $bb362:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    $i309 := $M.125;
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i310 := $eq.i32($i309, 1);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  $bb365:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb364:
    assume $i310 == 1;
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p311 := $M.118;
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} vslice_dummy_var_70 := loopback_hw_free($p311);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 557} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb361:
    assume $i306 == 1;
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p307 := $M.118;
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} vslice_dummy_var_69 := loopback_hw_free($p307);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $M.125 := 2;
    call {:si_unique_call 555} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb340:
    assume $i285 == 1;
    assume {:verifier.code 0} true;
    $i287 := $slt.i32($i278, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  $bb345:
    assume !($i287 == 1);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $i297 := $M.125;
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i298 := $eq.i32($i297, 2);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb355, $bb356;

  $bb356:
    assume !($i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    $i301 := $M.125;
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i301, 1);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  $bb359:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb358:
    assume $i302 == 1;
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p303 := $M.118;
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} vslice_dummy_var_68 := snd_pcm_lib_ioctl($p303, $i8, $p6);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 553} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb355:
    assume $i298 == 1;
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p299 := $M.118;
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} vslice_dummy_var_67 := snd_pcm_lib_ioctl($p299, $i8, $p6);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $M.125 := 2;
    call {:si_unique_call 551} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb344:
    assume $i287 == 1;
    assume {:verifier.code 0} true;
    $i288 := $eq.i32($i278, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    assume !($i288 == 1);
    goto $bb337;

  $bb346:
    assume $i288 == 1;
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i289 := $M.125;
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i289, 2);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  $bb349:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    $i293 := $M.125;
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i293, 1);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb351, $bb352;

  $bb352:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb351:
    assume $i294 == 1;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p295 := $M.118;
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} vslice_dummy_var_66 := loopback_prepare($p295);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 549} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb348:
    assume $i290 == 1;
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p291 := $M.118;
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} vslice_dummy_var_65 := loopback_prepare($p291);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $M.125 := 2;
    call {:si_unique_call 547} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i256 := $M.124;
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i257 := $ne.i32($i256, 0);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb301:
    assume $i257 == 1;
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 1} true;
    call {:si_unique_call 532} $i258 := __VERIFIER_nondet_int();
    call {:si_unique_call 533} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i258);
    call {:si_unique_call 534} {:cexpr "tmp___13"} boogie_si_record_i32($i258);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    $i259 := $slt.i32($i258, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i258, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    assume !($i260 == 1);
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} ldv_stop();
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb306:
    assume $i260 == 1;
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i270 := $M.124;
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 2);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb318, $bb319;

  $bb319:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb318:
    assume $i271 == 1;
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p272 := $M.115;
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} vslice_dummy_var_64 := loopback_remove($p272);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $M.124 := 1;
    call {:si_unique_call 540} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i274 := $M.121;
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i275 := $sub.i32($i274, 1);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $M.121 := $i275;
    call {:si_unique_call 541} {:cexpr "ref_cnt"} boogie_si_record_i32($i275);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb304:
    assume $i259 == 1;
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i258, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb309, $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    assume !($i261 == 1);
    goto $bb308;

  $bb309:
    assume $i261 == 1;
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i262 := $M.124;
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i262, 1);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb311:
    assume $i263 == 1;
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p264 := $M.115;
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $i265 := loopback_probe($p264);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $M.148 := $i265;
    call {:si_unique_call 536} {:cexpr "ldv_retval_22"} boogie_si_record_i32($i265);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i266 := $M.148;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i266, 0);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb313:
    assume $i267 == 1;
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $M.124 := 2;
    call {:si_unique_call 537} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i268 := $M.121;
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i269 := $add.i32($i268, 1);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $M.121 := $i269;
    call {:si_unique_call 538} {:cexpr "ref_cnt"} boogie_si_record_i32($i269);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i124 := $M.123;
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb134:
    assume $i125 == 1;
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 1} true;
    call {:si_unique_call 467} $i126 := __VERIFIER_nondet_int();
    call {:si_unique_call 468} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i126);
    call {:si_unique_call 469} {:cexpr "tmp___12"} boogie_si_record_i32($i126);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i126, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i126, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i126, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    $i130 := $slt.i32($i126, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i126, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i126, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    assume !($i132 == 1);
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} ldv_stop();
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb147:
    assume $i132 == 1;
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i251 := $M.123;
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i252 := $eq.i32($i251, 15);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb295:
    assume $i252 == 1;
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} vslice_dummy_var_63 := ldv_complete_3();
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $M.123 := 1;
    call {:si_unique_call 529} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i254 := $M.121;
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i255 := $sub.i32($i254, 1);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $M.121 := $i255;
    call {:si_unique_call 530} {:cexpr "ref_cnt"} boogie_si_record_i32($i255);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb145:
    assume $i131 == 1;
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i246 := $M.123;
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i246, 5);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb289:
    assume $i247 == 1;
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i248 := ldv_suspend_noirq_3();
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $M.147 := $i248;
    call {:si_unique_call 526} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i248);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i249 := $M.147;
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i249, 0);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  $bb292:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb291:
    assume $i250 == 1;
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $M.123 := 11;
    call {:si_unique_call 527} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(11);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb143:
    assume $i130 == 1;
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i241 := $M.123;
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i241, 6);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb283:
    assume $i242 == 1;
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i243 := ldv_restore_noirq_3();
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $M.146 := $i243;
    call {:si_unique_call 523} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i243);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i244 := $M.146;
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i244, 0);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb285:
    assume $i245 == 1;
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $M.123 := 12;
    call {:si_unique_call 524} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(12);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb141:
    assume $i129 == 1;
    assume {:verifier.code 0} true;
    $i133 := $slt.i32($i126, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i133 == 1);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i236 := $M.123;
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i236, 3);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb277:
    assume $i237 == 1;
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i238 := ldv_poweroff_late_3();
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $M.145 := $i238;
    call {:si_unique_call 520} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i238);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i239 := $M.145;
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i239, 0);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb279:
    assume $i240 == 1;
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $M.123 := 7;
    call {:si_unique_call 521} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(7);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb150:
    assume $i133 == 1;
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i231 := $M.123;
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i232 := $eq.i32($i231, 3);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb271:
    assume $i232 == 1;
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i233 := ldv_poweroff_noirq_3();
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $M.144 := $i233;
    call {:si_unique_call 517} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i233);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i234 := $M.144;
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 0);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  $bb274:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb273:
    assume $i235 == 1;
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $M.123 := 6;
    call {:si_unique_call 518} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(6);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb139:
    assume $i128 == 1;
    assume {:verifier.code 0} true;
    $i134 := $slt.i32($i126, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    $i135 := $slt.i32($i126, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    $i136 := $slt.i32($i126, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i136 == 1);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i226 := $M.123;
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i226, 8);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  $bb266:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb265:
    assume $i227 == 1;
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $i228 := ldv_thaw_noirq_3();
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $M.143 := $i228;
    call {:si_unique_call 514} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i228);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i229 := $M.143;
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 0);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb267:
    assume $i230 == 1;
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $M.123 := 13;
    call {:si_unique_call 515} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(13);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb156:
    assume $i136 == 1;
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i221 := $M.123;
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, 4);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb259:
    assume $i222 == 1;
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $i223 := ldv_freeze_late_3();
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $M.142 := $i223;
    call {:si_unique_call 511} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i223);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i224 := $M.142;
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i224, 0);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb261:
    assume $i225 == 1;
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $M.123 := 9;
    call {:si_unique_call 512} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(9);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb154:
    assume $i135 == 1;
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i214 := $M.123;
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, 1);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb253:
    assume $i215 == 1;
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $i216 := ldv_prepare_3();
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $M.141 := $i216;
    call {:si_unique_call 507} {:cexpr "ldv_retval_9"} boogie_si_record_i32($i216);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i217 := $M.141;
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 0);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb255:
    assume $i218 == 1;
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $M.123 := 2;
    call {:si_unique_call 508} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i219 := $M.121;
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i220 := $add.i32($i219, 1);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $M.121 := $i220;
    call {:si_unique_call 509} {:cexpr "ref_cnt"} boogie_si_record_i32($i220);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb152:
    assume $i134 == 1;
    assume {:verifier.code 0} true;
    $i137 := $slt.i32($i126, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i137 == 1);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i209 := $M.123;
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 4);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb247:
    assume $i210 == 1;
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i211 := ldv_freeze_noirq_3();
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $M.140 := $i211;
    call {:si_unique_call 504} {:cexpr "ldv_retval_10"} boogie_si_record_i32($i211);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i212 := $M.140;
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 0);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb249:
    assume $i213 == 1;
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $M.123 := 8;
    call {:si_unique_call 505} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(8);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb158:
    assume $i137 == 1;
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i204 := $M.123;
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i204, 11);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb241:
    assume $i205 == 1;
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i206 := ldv_resume_noirq_3();
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $M.139 := $i206;
    call {:si_unique_call 501} {:cexpr "ldv_retval_11"} boogie_si_record_i32($i206);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i207 := $M.139;
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i207, 0);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb243:
    assume $i208 == 1;
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $M.123 := 14;
    call {:si_unique_call 502} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(14);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb137:
    assume $i127 == 1;
    assume {:verifier.code 0} true;
    $i138 := $slt.i32($i126, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    $i139 := $slt.i32($i126, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    $i140 := $slt.i32($i126, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    $i141 := $slt.i32($i126, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i141 == 1);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i199 := $M.123;
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 9);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb235:
    assume $i200 == 1;
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i201 := ldv_thaw_early_3();
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $M.138 := $i201;
    call {:si_unique_call 498} {:cexpr "ldv_retval_12"} boogie_si_record_i32($i201);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i202 := $M.138;
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i202, 0);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb237:
    assume $i203 == 1;
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $M.123 := 13;
    call {:si_unique_call 499} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(13);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb166:
    assume $i141 == 1;
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i194 := $M.123;
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 10);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb229:
    assume $i195 == 1;
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i196 := ldv_resume_early_3();
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $M.137 := $i196;
    call {:si_unique_call 495} {:cexpr "ldv_retval_13"} boogie_si_record_i32($i196);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i197 := $M.137;
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i197, 0);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb231:
    assume $i198 == 1;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $M.123 := 14;
    call {:si_unique_call 496} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(14);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb164:
    assume $i140 == 1;
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i189 := $M.123;
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, 7);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb223:
    assume $i190 == 1;
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i191 := ldv_restore_early_3();
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $M.136 := $i191;
    call {:si_unique_call 492} {:cexpr "ldv_retval_14"} boogie_si_record_i32($i191);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i192 := $M.136;
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i193 := $eq.i32($i192, 0);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb225:
    assume $i193 == 1;
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $M.123 := 12;
    call {:si_unique_call 493} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(12);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb162:
    assume $i139 == 1;
    assume {:verifier.code 0} true;
    $i142 := $slt.i32($i126, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i142 == 1);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i184 := $M.123;
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 5);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb217:
    assume $i185 == 1;
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i186 := ldv_suspend_late_3();
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $M.135 := $i186;
    call {:si_unique_call 489} {:cexpr "ldv_retval_15"} boogie_si_record_i32($i186);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i187 := $M.135;
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 0);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb219:
    assume $i188 == 1;
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $M.123 := 10;
    call {:si_unique_call 490} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(10);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb168:
    assume $i142 == 1;
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i178 := $M.123;
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i178, 14);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb211:
    assume $i179 == 1;
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p180 := $M.117;
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i181 := loopback_resume($p180);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $M.134 := $i181;
    call {:si_unique_call 486} {:cexpr "ldv_retval_16"} boogie_si_record_i32($i181);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i182 := $M.134;
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 0);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb213:
    assume $i183 == 1;
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $M.123 := 15;
    call {:si_unique_call 487} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(15);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb160:
    assume $i138 == 1;
    assume {:verifier.code 0} true;
    $i143 := $slt.i32($i126, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    $i144 := $slt.i32($i126, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    $i145 := $slt.i32($i126, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i145 == 1);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i172 := $M.123;
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 2);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb205:
    assume $i173 == 1;
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p174 := $M.117;
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $i175 := loopback_suspend($p174);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $M.133 := $i175;
    call {:si_unique_call 483} {:cexpr "ldv_retval_17"} boogie_si_record_i32($i175);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i176 := $M.133;
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 0);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb207:
    assume $i177 == 1;
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $M.123 := 5;
    call {:si_unique_call 484} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb174:
    assume $i145 == 1;
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i166 := $M.123;
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 2);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb199:
    assume $i167 == 1;
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p168 := $M.117;
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $i169 := loopback_suspend($p168);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $M.132 := $i169;
    call {:si_unique_call 480} {:cexpr "ldv_retval_18"} boogie_si_record_i32($i169);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i170 := $M.132;
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 0);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb201:
    assume $i171 == 1;
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $M.123 := 4;
    call {:si_unique_call 481} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb172:
    assume $i144 == 1;
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i160 := $M.123;
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 2);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb193:
    assume $i161 == 1;
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p162 := $M.117;
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $i163 := loopback_suspend($p162);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $M.131 := $i163;
    call {:si_unique_call 477} {:cexpr "ldv_retval_19"} boogie_si_record_i32($i163);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i164 := $M.131;
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 0);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb195:
    assume $i165 == 1;
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $M.123 := 3;
    call {:si_unique_call 478} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb170:
    assume $i143 == 1;
    assume {:verifier.code 0} true;
    $i146 := $slt.i32($i126, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i146 == 1);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i154 := $M.123;
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 13);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb187:
    assume $i155 == 1;
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p156 := $M.117;
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $i157 := loopback_resume($p156);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $M.130 := $i157;
    call {:si_unique_call 474} {:cexpr "ldv_retval_20"} boogie_si_record_i32($i157);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i158 := $M.130;
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 0);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb189:
    assume $i159 == 1;
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $M.123 := 15;
    call {:si_unique_call 475} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(15);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb176:
    assume $i146 == 1;
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i126, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    assume !($i147 == 1);
    goto $bb149;

  $bb178:
    assume $i147 == 1;
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i148 := $M.123;
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 12);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb180:
    assume $i149 == 1;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p150 := $M.117;
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i151 := loopback_resume($p150);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $M.129 := $i151;
    call {:si_unique_call 471} {:cexpr "ldv_retval_21"} boogie_si_record_i32($i151);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i152 := $M.129;
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 0);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb182:
    assume $i153 == 1;
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $M.123 := 15;
    call {:si_unique_call 472} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(15);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb3:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i18 == 1);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i107 := $M.122;
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb104:
    assume $i108 == 1;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 1} true;
    call {:si_unique_call 450} $i109 := __VERIFIER_nondet_int();
    call {:si_unique_call 451} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i109);
    call {:si_unique_call 452} {:cexpr "tmp___11"} boogie_si_record_i32($i109);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i109, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i109, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} ldv_stop();
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb109:
    assume $i111 == 1;
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i117 := $M.122;
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 1);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb122:
    assume $i118 == 1;
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $i119 := alsa_card_loopback_init();
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $M.128 := $i119;
    call {:si_unique_call 457} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i119);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i120 := $M.128;
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i122 := $M.128;
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 0);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb127:
    assume $i123 == 1;
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $M.122 := 2;
    call {:si_unique_call 459} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 460} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} ldv_initialize_snd_pcm_ops_5();
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $M.123 := 1;
    call {:si_unique_call 462} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} ldv_dev_pm_ops_3();
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 464} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} ldv_initialize_snd_pcm_ops_4();
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb124:
    assume $i121 == 1;
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $M.122 := 3;
    call {:si_unique_call 458} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} ldv_check_final_state();
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb107:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i109, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb111;

  $bb112:
    assume $i112 == 1;
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i113 := $M.122;
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 2);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb114:
    assume $i114 == 1;
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i115 := $M.121;
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 0);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb116;

  $bb117:
    assume $i116 == 1;
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} alsa_card_loopback_exit();
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $M.122 := 3;
    call {:si_unique_call 454} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb14:
    assume $i18 == 1;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i105 := $M.120;
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb101:
    assume $i106 == 1;
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} choose_timer_1();
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb12:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb11;

  $bb16:
    assume $i19 == 1;
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i20 := $M.119;
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb18:
    assume $i21 == 1;
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 1} true;
    call {:si_unique_call 409} $i22 := __VERIFIER_nondet_int();
    call {:si_unique_call 410} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i22);
    call {:si_unique_call 411} {:cexpr "tmp___10"} boogie_si_record_i32($i22);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i22, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i22, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i22, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i22, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} ldv_stop();
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb29:
    assume $i27 == 1;
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i97 := $M.119;
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 1);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb91:
    assume $i98 == 1;
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p99 := $M.114;
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i100 := loopback_open($p99);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $M.127 := $i100;
    call {:si_unique_call 445} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i100);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i101 := $M.127;
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 0);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb93:
    assume $i102 == 1;
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $M.119 := 2;
    call {:si_unique_call 446} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i103 := $M.121;
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i103, 1);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $M.121 := $i104;
    call {:si_unique_call 447} {:cexpr "ref_cnt"} boogie_si_record_i32($i104);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    goto $bb95;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i26 == 1;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i89 := $M.119;
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 2);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb85:
    assume $i90 == 1;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p91 := $M.114;
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i92 := loopback_close($p91);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $M.126 := $i92;
    call {:si_unique_call 441} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i92);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i93 := $M.126;
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 0);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb87:
    assume $i94 == 1;
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 442} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i95 := $M.121;
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i96 := $sub.i32($i95, 1);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $M.121 := $i96;
    call {:si_unique_call 443} {:cexpr "ref_cnt"} boogie_si_record_i32($i96);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb25:
    assume $i25 == 1;
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i81 := $M.119;
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 1);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i85 := $M.119;
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 2);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb82:
    assume $i86 == 1;
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p87 := $M.114;
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} vslice_dummy_var_62 := loopback_trigger($p87, $i4);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $M.119 := 2;
    call {:si_unique_call 439} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb79:
    assume $i82 == 1;
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p83 := $M.114;
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} vslice_dummy_var_61 := loopback_trigger($p83, $i4);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 437} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb23:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i22, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i28 == 1);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i73 := $M.119;
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 1);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i77 := $M.119;
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 2);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb76:
    assume $i78 == 1;
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p79 := $M.114;
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} vslice_dummy_var_60 := loopback_pointer($p79);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $M.119 := 2;
    call {:si_unique_call 435} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb73:
    assume $i74 == 1;
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p75 := $M.114;
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} vslice_dummy_var_59 := loopback_pointer($p75);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 433} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb32:
    assume $i28 == 1;
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i65 := $M.119;
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 1);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i69 := $M.119;
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 2);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb70:
    assume $i70 == 1;
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p71 := $M.114;
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} vslice_dummy_var_58 := loopback_hw_params($p71, $p1);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $M.119 := 2;
    call {:si_unique_call 431} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb67:
    assume $i66 == 1;
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p67 := $M.114;
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} vslice_dummy_var_57 := loopback_hw_params($p67, $p1);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 429} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb21:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i22, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i22, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i30 == 1);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i57 := $M.119;
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 1);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i61 := $M.119;
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 2);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb64:
    assume $i62 == 1;
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p63 := $M.114;
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} vslice_dummy_var_56 := snd_pcm_lib_get_vmalloc_page($p63, $i5);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $M.119 := 2;
    call {:si_unique_call 427} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb61:
    assume $i58 == 1;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p59 := $M.114;
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} vslice_dummy_var_55 := snd_pcm_lib_get_vmalloc_page($p59, $i5);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 425} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb36:
    assume $i30 == 1;
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i49 := $M.119;
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 1);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i53 := $M.119;
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 2);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb58:
    assume $i54 == 1;
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p55 := $M.114;
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} vslice_dummy_var_54 := loopback_hw_free($p55);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $M.119 := 2;
    call {:si_unique_call 423} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb55:
    assume $i50 == 1;
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p51 := $M.114;
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} vslice_dummy_var_53 := loopback_hw_free($p51);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 421} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb34:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i22, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i31 == 1);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i41 := $M.119;
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i45 := $M.119;
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 2);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb52:
    assume $i46 == 1;
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p47 := $M.114;
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} vslice_dummy_var_52 := snd_pcm_lib_ioctl($p47, $i2, $p3);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $M.119 := 2;
    call {:si_unique_call 419} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume $i42 == 1;
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p43 := $M.114;
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} vslice_dummy_var_51 := snd_pcm_lib_ioctl($p43, $i2, $p3);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 417} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb38:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i22, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb31;

  $bb40:
    assume $i32 == 1;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i33 := $M.119;
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 1);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i37 := $M.119;
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 2);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb45:
    assume $i38 == 1;
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p39 := $M.114;
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} vslice_dummy_var_50 := loopback_prepare($p39);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $M.119 := 2;
    call {:si_unique_call 415} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i34 == 1;
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p35 := $M.114;
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} vslice_dummy_var_49 := loopback_prepare($p35);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 413} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb100_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 406} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 407} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 408} {:cexpr "tmp___9"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 246740);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    return;
}



const alsa_card_loopback_exit: ref;

axiom alsa_card_loopback_exit == $sub.ref(0, 247772);

procedure alsa_card_loopback_exit();
  free requires assertsPassed;
  modifies $M.124;



implementation alsa_card_loopback_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} loopback_unregister_all();
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    return;
}



const alsa_card_loopback_init: ref;

axiom alsa_card_loopback_init == $sub.ref(0, 248804);

procedure alsa_card_loopback_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.152, $M.124, $M.115, $M.0, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $CurrAddr;



implementation alsa_card_loopback_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i9: i32;
  var $i21: i32;
  var $i22: i1;
  var $i3: i32;
  var $i4: i32;
  var $i23: i32;
  var $i24: i1;
  var $i2: i32;
  var vslice_dummy_var_79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $i0 := ldv___platform_driver_register_21(loopback_driver, __this_module);
    call {:si_unique_call 586} {:cexpr "err"} boogie_si_record_i32($i0);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 0);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3, $i4 := 0, 0;
    goto $bb5;

  $bb5:
    call $i5, $p6, $i7, $i8, $p10, $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $p19, $i20, $i9, $i21, $i22, $i3, $i4, $i23 := alsa_card_loopback_init_loop_$bb5($i5, $p6, $i7, $i8, $p10, $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $p19, $i20, $i9, $i21, $i22, $i3, $i4, $i23);
    goto $bb5_last;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i3);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref($i5, 1));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.151, $p6);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i9 := $i4;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i3, 1);
    call {:si_unique_call 587} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i22 := $sle.i32($i21, 31);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i23 := $i9;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} vslice_dummy_var_79 := printk.ref(.str.2);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} loopback_unregister_all();
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 19);
    goto $bb3;

  $bb17:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i3, $i4 := $i21, $i9;
    goto $bb17_dummy;

  $bb7:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $p10 := platform_device_register_simple(.str.1, $i3, $0.ref, 0);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i12 := IS_ERR($p11);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 590} {:cexpr "tmp"} boogie_si_record_i8($i13);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $p15 := platform_get_drvdata($p10);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i3);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref($i18, 8));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $M.152 := $store.ref($M.152, $p19, $p10);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i4, 1);
    call {:si_unique_call 593} {:cexpr "cards"} boogie_si_record_i32($i20);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i9 := $i20;
    goto $bb9;

  $bb14:
    assume $i17 == 1;
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} platform_device_unregister($p10);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i9 := $i4;
    goto $bb9;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i9 := $i4;
    goto $bb9;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2639;
}



const ldv_suspend_late_3: ref;

axiom ldv_suspend_late_3 == $sub.ref(0, 249836);

procedure ldv_suspend_late_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_late_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 1} true;
    call {:si_unique_call 596} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 597} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_early_3: ref;

axiom ldv_restore_early_3 == $sub.ref(0, 250868);

procedure ldv_restore_early_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_early_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 1} true;
    call {:si_unique_call 598} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 599} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_early_3: ref;

axiom ldv_resume_early_3 == $sub.ref(0, 251900);

procedure ldv_resume_early_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_early_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 1} true;
    call {:si_unique_call 600} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 601} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_early_3: ref;

axiom ldv_thaw_early_3 == $sub.ref(0, 252932);

procedure ldv_thaw_early_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_early_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 1} true;
    call {:si_unique_call 602} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 603} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_noirq_3: ref;

axiom ldv_resume_noirq_3 == $sub.ref(0, 253964);

procedure ldv_resume_noirq_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_noirq_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 1} true;
    call {:si_unique_call 604} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 605} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_noirq_3: ref;

axiom ldv_freeze_noirq_3 == $sub.ref(0, 254996);

procedure ldv_freeze_noirq_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_noirq_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 1} true;
    call {:si_unique_call 606} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 607} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_prepare_3: ref;

axiom ldv_prepare_3 == $sub.ref(0, 256028);

procedure ldv_prepare_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_prepare_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 1} true;
    call {:si_unique_call 608} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 609} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_late_3: ref;

axiom ldv_freeze_late_3 == $sub.ref(0, 257060);

procedure ldv_freeze_late_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_late_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 1} true;
    call {:si_unique_call 610} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 611} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_noirq_3: ref;

axiom ldv_thaw_noirq_3 == $sub.ref(0, 258092);

procedure ldv_thaw_noirq_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_noirq_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 1} true;
    call {:si_unique_call 612} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 613} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_noirq_3: ref;

axiom ldv_poweroff_noirq_3 == $sub.ref(0, 259124);

procedure ldv_poweroff_noirq_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_noirq_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 1} true;
    call {:si_unique_call 614} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 615} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_late_3: ref;

axiom ldv_poweroff_late_3 == $sub.ref(0, 260156);

procedure ldv_poweroff_late_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_late_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 1} true;
    call {:si_unique_call 616} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 617} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_noirq_3: ref;

axiom ldv_restore_noirq_3 == $sub.ref(0, 261188);

procedure ldv_restore_noirq_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_noirq_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 1} true;
    call {:si_unique_call 618} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 619} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_suspend_noirq_3: ref;

axiom ldv_suspend_noirq_3 == $sub.ref(0, 262220);

procedure ldv_suspend_noirq_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_noirq_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 1} true;
    call {:si_unique_call 620} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 621} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_complete_3: ref;

axiom ldv_complete_3 == $sub.ref(0, 263252);

procedure ldv_complete_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_complete_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 1} true;
    call {:si_unique_call 622} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 623} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 264284);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    return;
}



const ldv___platform_driver_register_21: ref;

axiom ldv___platform_driver_register_21 == $sub.ref(0, 265316);

procedure ldv___platform_driver_register_21($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.124, $M.115, $M.0, $CurrAddr;



implementation ldv___platform_driver_register_21($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $i2 := __platform_driver_register($p0, $p1);
    call {:si_unique_call 625} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $M.124 := 1;
    call {:si_unique_call 626} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} ldv_initialize_platform_driver_2();
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const platform_device_register_simple: ref;

axiom platform_device_register_simple == $sub.ref(0, 266348);

procedure platform_device_register_simple($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $CurrAddr;



implementation platform_device_register_simple($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} {:cexpr "platform_device_register_simple:arg:id___0"} boogie_si_record_i32($i1);
    call {:si_unique_call 629} {:cexpr "platform_device_register_simple:arg:num"} boogie_si_record_i32($i3);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $p4 := platform_device_register_resndata($0.ref, $p0, $i1, $p2, $i3, $0.ref, 0);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 267380);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 632} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const platform_device_unregister: ref;

axiom platform_device_unregister == $sub.ref(0, 268412);

procedure platform_device_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 269444);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 1} true;
    call {:si_unique_call 633} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 634} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const loopback_unregister_all: ref;

axiom loopback_unregister_all == $sub.ref(0, 270476);

procedure loopback_unregister_all();
  free requires assertsPassed;
  modifies $M.124;



implementation loopback_unregister_all()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.152, devices);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} platform_device_unregister($p0);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(1, 8)));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} platform_device_unregister($p1);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(2, 8)));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} platform_device_unregister($p2);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(3, 8)));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} platform_device_unregister($p3);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(4, 8)));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} platform_device_unregister($p4);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(5, 8)));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} platform_device_unregister($p5);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(6, 8)));
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} platform_device_unregister($p6);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(7, 8)));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} platform_device_unregister($p7);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(8, 8)));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} platform_device_unregister($p8);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(9, 8)));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} platform_device_unregister($p9);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(10, 8)));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} platform_device_unregister($p10);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(11, 8)));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} platform_device_unregister($p11);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(12, 8)));
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} platform_device_unregister($p12);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(13, 8)));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} platform_device_unregister($p13);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(14, 8)));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} platform_device_unregister($p14);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(15, 8)));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} platform_device_unregister($p15);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(16, 8)));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} platform_device_unregister($p16);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(17, 8)));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} platform_device_unregister($p17);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(18, 8)));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} platform_device_unregister($p18);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(19, 8)));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} platform_device_unregister($p19);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(20, 8)));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} platform_device_unregister($p20);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(21, 8)));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} platform_device_unregister($p21);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(22, 8)));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} platform_device_unregister($p22);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(23, 8)));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} platform_device_unregister($p23);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(24, 8)));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} platform_device_unregister($p24);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(25, 8)));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} platform_device_unregister($p25);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(26, 8)));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} platform_device_unregister($p26);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(27, 8)));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} platform_device_unregister($p27);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(28, 8)));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} platform_device_unregister($p28);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(29, 8)));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} platform_device_unregister($p29);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(30, 8)));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} platform_device_unregister($p30);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(31, 8)));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} platform_device_unregister($p31);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} ldv_platform_driver_unregister_20(loopback_driver);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_driver_unregister_20: ref;

axiom ldv_platform_driver_unregister_20 == $sub.ref(0, 271508);

procedure ldv_platform_driver_unregister_20($p0: ref);
  free requires assertsPassed;
  modifies $M.124;



implementation ldv_platform_driver_unregister_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} platform_driver_unregister($p0);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $M.124 := 0;
    call {:si_unique_call 669} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    return;
}



const platform_driver_unregister: ref;

axiom platform_driver_unregister == $sub.ref(0, 272540);

procedure platform_driver_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    return;
}



const platform_device_register_resndata: ref;

axiom platform_device_register_resndata == $sub.ref(0, 273572);

procedure platform_device_register_resndata($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $i6: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $CurrAddr;



implementation platform_device_register_resndata($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $i6: i64) returns ($r: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $p7 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    call {:si_unique_call 671} {:cexpr "platform_device_register_resndata:arg:id___0"} boogie_si_record_i32($i2);
    call {:si_unique_call 672} {:cexpr "platform_device_register_resndata:arg:num"} boogie_si_record_i32($i4);
    call {:si_unique_call 673} {:cexpr "platform_device_register_resndata:arg:size"} boogie_si_record_i64($i6);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $M.153 := $store.ref($M.153, $p8, $p0);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $M.154 := $store.ref($M.154, $p10, $0.ref);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $M.155 := $store.ref($M.155, $p11, $p1);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $M.156 := $store.i32($M.156, $p12, $i2);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $M.157 := $store.ref($M.157, $p13, $p3);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $M.158 := $store.i32($M.158, $p14, $i4);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $M.159 := $store.ref($M.159, $p15, $p5);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $M.160 := $store.i64($M.160, $p16, $i6);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $M.161 := $store.i64($M.161, $p17, 0);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $p18 := platform_device_register_full($p7);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;
}



const platform_device_register_full: ref;

axiom platform_device_register_full == $sub.ref(0, 274604);

procedure platform_device_register_full($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation platform_device_register_full($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $p1 := external_alloc();
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __platform_driver_register: ref;

axiom __platform_driver_register == $sub.ref(0, 275636);

procedure __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 1} true;
    call {:si_unique_call 676} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 677} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 276668);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 678} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 1} true;
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 277700);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 278732);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 279764);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 280796);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 281828);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 282860);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 283892);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 284924);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 285956);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 286988);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 288020);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 289052);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 290084);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 1} true;
    call {:si_unique_call 679} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 680} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 681} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 1} true;
    call {:si_unique_call 682} __VERIFIER_assume($i4);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 291116);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 292148);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 293180);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 294212);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 1} true;
    call {:si_unique_call 683} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 684} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 685} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 1} true;
    call {:si_unique_call 686} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 687} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 688} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 1} true;
    call {:si_unique_call 689} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 690} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 691} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 1} true;
    call {:si_unique_call 692} __VERIFIER_assume($i7);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 1} true;
    call {:si_unique_call 693} __VERIFIER_assume($i11);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 295244);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 296276);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 297308);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 298340);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 299372);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 300404);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 1} true;
    call {:si_unique_call 694} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 695} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 696} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 1} true;
    call {:si_unique_call 697} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 698} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 699} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 1} true;
    call {:si_unique_call 700} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 701} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 702} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 1} true;
    call {:si_unique_call 703} __VERIFIER_assume($i7);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 1} true;
    call {:si_unique_call 704} __VERIFIER_assume($i11);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 301436);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 302468);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 303500);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 304532);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 305564);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 306596);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 307628);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 308660);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 309692);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 1} true;
    call {:si_unique_call 705} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 706} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 707} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 310724);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 1} true;
    call {:si_unique_call 708} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 709} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 710} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 311756);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 1} true;
    call {:si_unique_call 711} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 712} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 312788);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 313820);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 713} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 714} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 314852);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 315884);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 316916);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 715} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 716} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 1} true;
    call {:si_unique_call 717} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 718} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $p6 := malloc($i5);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 720} cmdloc_dummy_var_28 := $memset.i8(cmdloc_dummy_var_27, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_28;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 317948);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 318980);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.29, $M.31, $M.33, $M.35, $M.114, $M.115, $M.30, $M.32, $M.34, $M.36, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.27, $M.5, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.4, $M.2, $M.1, $M.151, $M.152, $M.0, $M.233, $M.234;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 721} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.29 := 0;
    call {:si_unique_call 722} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 723} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 724} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(0);
    $M.35 := 0;
    call {:si_unique_call 725} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(0);
    $M.114 := $0.ref;
    $M.115 := $0.ref;
    $M.30 := $0.ref;
    $M.32 := $0.ref;
    $M.34 := $0.ref;
    $M.36 := $0.ref;
    $M.117 := $0.ref;
    $M.118 := $0.ref;
    $M.119 := 0;
    call {:si_unique_call 726} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.120 := 0;
    call {:si_unique_call 727} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.121 := 0;
    call {:si_unique_call 728} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.122 := 0;
    call {:si_unique_call 729} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.123 := 0;
    call {:si_unique_call 730} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.124 := 0;
    call {:si_unique_call 731} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.125 := 0;
    call {:si_unique_call 732} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.126 := 0;
    call {:si_unique_call 733} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.127 := 0;
    call {:si_unique_call 734} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.128 := 0;
    call {:si_unique_call 735} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.129 := 0;
    call {:si_unique_call 736} {:cexpr "ldv_retval_21"} boogie_si_record_i32(0);
    $M.130 := 0;
    call {:si_unique_call 737} {:cexpr "ldv_retval_20"} boogie_si_record_i32(0);
    $M.131 := 0;
    call {:si_unique_call 738} {:cexpr "ldv_retval_19"} boogie_si_record_i32(0);
    $M.132 := 0;
    call {:si_unique_call 739} {:cexpr "ldv_retval_18"} boogie_si_record_i32(0);
    $M.133 := 0;
    call {:si_unique_call 740} {:cexpr "ldv_retval_17"} boogie_si_record_i32(0);
    $M.134 := 0;
    call {:si_unique_call 741} {:cexpr "ldv_retval_16"} boogie_si_record_i32(0);
    $M.135 := 0;
    call {:si_unique_call 742} {:cexpr "ldv_retval_15"} boogie_si_record_i32(0);
    $M.136 := 0;
    call {:si_unique_call 743} {:cexpr "ldv_retval_14"} boogie_si_record_i32(0);
    $M.137 := 0;
    call {:si_unique_call 744} {:cexpr "ldv_retval_13"} boogie_si_record_i32(0);
    $M.138 := 0;
    call {:si_unique_call 745} {:cexpr "ldv_retval_12"} boogie_si_record_i32(0);
    $M.139 := 0;
    call {:si_unique_call 746} {:cexpr "ldv_retval_11"} boogie_si_record_i32(0);
    $M.140 := 0;
    call {:si_unique_call 747} {:cexpr "ldv_retval_10"} boogie_si_record_i32(0);
    $M.141 := 0;
    call {:si_unique_call 748} {:cexpr "ldv_retval_9"} boogie_si_record_i32(0);
    $M.142 := 0;
    call {:si_unique_call 749} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.143 := 0;
    call {:si_unique_call 750} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.144 := 0;
    call {:si_unique_call 751} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.145 := 0;
    call {:si_unique_call 752} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.146 := 0;
    call {:si_unique_call 753} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.147 := 0;
    call {:si_unique_call 754} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.148 := 0;
    call {:si_unique_call 755} {:cexpr "ldv_retval_22"} boogie_si_record_i32(0);
    $M.149 := 0;
    call {:si_unique_call 756} {:cexpr "ldv_retval_24"} boogie_si_record_i32(0);
    $M.150 := 0;
    call {:si_unique_call 757} {:cexpr "ldv_retval_23"} boogie_si_record_i32(0);
    $M.27 := 0;
    call {:si_unique_call 758} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.5 := $store.i32($M.5, pcm_notify, 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(1, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(2, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(3, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(4, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(5, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(6, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(7, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(8, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(9, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(10, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(11, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(12, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(13, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(14, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(15, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(16, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(17, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(18, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(19, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(20, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(21, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(22, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(23, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(24, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(25, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(26, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(27, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(28, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(29, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(30, 4)), 0);
    $M.5 := $store.i32($M.5, $add.ref($add.ref(pcm_notify, $mul.ref(0, 128)), $mul.ref(31, 4)), 0);
    $M.162 := $store.i32($M.162, loopback_controls, 3);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(0, 80)), $mul.ref(4, 1)), 0);
    $M.164 := $store.i32($M.164, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(0, 80)), $mul.ref(8, 1)), 0);
    $M.165 := $store.ref($M.165, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(0, 80)), $mul.ref(16, 1)), .str.8);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(0, 80)), $mul.ref(24, 1)), 0);
    $M.167 := $store.i32($M.167, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(0, 80)), $mul.ref(28, 1)), 0);
    $M.168 := $store.i32($M.168, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(0, 80)), $mul.ref(32, 1)), 0);
    $M.169 := $store.ref($M.169, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(0, 80)), $mul.ref(40, 1)), loopback_rate_shift_info);
    $M.170 := $store.ref($M.170, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(0, 80)), $mul.ref(48, 1)), loopback_rate_shift_get);
    $M.171 := $store.ref($M.171, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(0, 80)), $mul.ref(56, 1)), loopback_rate_shift_put);
    $M.172 := $store.ref($M.172, $add.ref($add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(0, 80)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.173 := $store.i64($M.173, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(0, 80)), $mul.ref(72, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(1, 80)), $mul.ref(0, 1)), 3);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(1, 80)), $mul.ref(4, 1)), 0);
    $M.164 := $store.i32($M.164, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(1, 80)), $mul.ref(8, 1)), 0);
    $M.165 := $store.ref($M.165, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(1, 80)), $mul.ref(16, 1)), .str.9);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(1, 80)), $mul.ref(24, 1)), 0);
    $M.167 := $store.i32($M.167, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(1, 80)), $mul.ref(28, 1)), 0);
    $M.168 := $store.i32($M.168, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(1, 80)), $mul.ref(32, 1)), 0);
    $M.169 := $store.ref($M.169, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(1, 80)), $mul.ref(40, 1)), snd_ctl_boolean_mono_info);
    $M.170 := $store.ref($M.170, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(1, 80)), $mul.ref(48, 1)), loopback_notify_get);
    $M.171 := $store.ref($M.171, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(1, 80)), $mul.ref(56, 1)), loopback_notify_put);
    $M.172 := $store.ref($M.172, $add.ref($add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(1, 80)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.173 := $store.i64($M.173, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(1, 80)), $mul.ref(72, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(2, 80)), $mul.ref(0, 1)), 3);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(2, 80)), $mul.ref(4, 1)), 0);
    $M.164 := $store.i32($M.164, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(2, 80)), $mul.ref(8, 1)), 0);
    $M.165 := $store.ref($M.165, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(2, 80)), $mul.ref(16, 1)), .str.10);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(2, 80)), $mul.ref(24, 1)), 0);
    $M.167 := $store.i32($M.167, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(2, 80)), $mul.ref(28, 1)), 1);
    $M.168 := $store.i32($M.168, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(2, 80)), $mul.ref(32, 1)), 0);
    $M.169 := $store.ref($M.169, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(2, 80)), $mul.ref(40, 1)), snd_ctl_boolean_mono_info);
    $M.170 := $store.ref($M.170, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(2, 80)), $mul.ref(48, 1)), loopback_active_get);
    $M.171 := $store.ref($M.171, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(2, 80)), $mul.ref(56, 1)), $0.ref);
    $M.172 := $store.ref($M.172, $add.ref($add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(2, 80)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.173 := $store.i64($M.173, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(2, 80)), $mul.ref(72, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(3, 80)), $mul.ref(0, 1)), 3);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(3, 80)), $mul.ref(4, 1)), 0);
    $M.164 := $store.i32($M.164, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(3, 80)), $mul.ref(8, 1)), 0);
    $M.165 := $store.ref($M.165, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(3, 80)), $mul.ref(16, 1)), .str.11);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(3, 80)), $mul.ref(24, 1)), 0);
    $M.167 := $store.i32($M.167, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(3, 80)), $mul.ref(28, 1)), 1);
    $M.168 := $store.i32($M.168, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(3, 80)), $mul.ref(32, 1)), 0);
    $M.169 := $store.ref($M.169, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(3, 80)), $mul.ref(40, 1)), loopback_format_info);
    $M.170 := $store.ref($M.170, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(3, 80)), $mul.ref(48, 1)), loopback_format_get);
    $M.171 := $store.ref($M.171, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(3, 80)), $mul.ref(56, 1)), $0.ref);
    $M.172 := $store.ref($M.172, $add.ref($add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(3, 80)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.173 := $store.i64($M.173, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(3, 80)), $mul.ref(72, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(4, 80)), $mul.ref(0, 1)), 3);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(4, 80)), $mul.ref(4, 1)), 0);
    $M.164 := $store.i32($M.164, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(4, 80)), $mul.ref(8, 1)), 0);
    $M.165 := $store.ref($M.165, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(4, 80)), $mul.ref(16, 1)), .str.12);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(4, 80)), $mul.ref(24, 1)), 0);
    $M.167 := $store.i32($M.167, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(4, 80)), $mul.ref(28, 1)), 1);
    $M.168 := $store.i32($M.168, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(4, 80)), $mul.ref(32, 1)), 0);
    $M.169 := $store.ref($M.169, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(4, 80)), $mul.ref(40, 1)), loopback_rate_info);
    $M.170 := $store.ref($M.170, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(4, 80)), $mul.ref(48, 1)), loopback_rate_get);
    $M.171 := $store.ref($M.171, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(4, 80)), $mul.ref(56, 1)), $0.ref);
    $M.172 := $store.ref($M.172, $add.ref($add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(4, 80)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.173 := $store.i64($M.173, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(4, 80)), $mul.ref(72, 1)), 0);
    $M.162 := $store.i32($M.162, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(5, 80)), $mul.ref(0, 1)), 3);
    $M.163 := $store.i32($M.163, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(5, 80)), $mul.ref(4, 1)), 0);
    $M.164 := $store.i32($M.164, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(5, 80)), $mul.ref(8, 1)), 0);
    $M.165 := $store.ref($M.165, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(5, 80)), $mul.ref(16, 1)), .str.13);
    $M.166 := $store.i32($M.166, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(5, 80)), $mul.ref(24, 1)), 0);
    $M.167 := $store.i32($M.167, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(5, 80)), $mul.ref(28, 1)), 1);
    $M.168 := $store.i32($M.168, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(5, 80)), $mul.ref(32, 1)), 0);
    $M.169 := $store.ref($M.169, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(5, 80)), $mul.ref(40, 1)), loopback_channels_info);
    $M.170 := $store.ref($M.170, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(5, 80)), $mul.ref(48, 1)), loopback_channels_get);
    $M.171 := $store.ref($M.171, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(5, 80)), $mul.ref(56, 1)), $0.ref);
    $M.172 := $store.ref($M.172, $add.ref($add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(5, 80)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.173 := $store.i64($M.173, $add.ref($add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(5, 80)), $mul.ref(72, 1)), 0);
    $M.174 := $store.ref($M.174, loopback_capture_ops, loopback_open);
    $M.175 := $store.ref($M.175, $add.ref($add.ref(loopback_capture_ops, $mul.ref(0, 112)), $mul.ref(8, 1)), loopback_close);
    $M.176 := $store.ref($M.176, $add.ref($add.ref(loopback_capture_ops, $mul.ref(0, 112)), $mul.ref(16, 1)), snd_pcm_lib_ioctl);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(loopback_capture_ops, $mul.ref(0, 112)), $mul.ref(24, 1)), loopback_hw_params);
    $M.178 := $store.ref($M.178, $add.ref($add.ref(loopback_capture_ops, $mul.ref(0, 112)), $mul.ref(32, 1)), loopback_hw_free);
    $M.179 := $store.ref($M.179, $add.ref($add.ref(loopback_capture_ops, $mul.ref(0, 112)), $mul.ref(40, 1)), loopback_prepare);
    $M.180 := $store.ref($M.180, $add.ref($add.ref(loopback_capture_ops, $mul.ref(0, 112)), $mul.ref(48, 1)), loopback_trigger);
    $M.181 := $store.ref($M.181, $add.ref($add.ref(loopback_capture_ops, $mul.ref(0, 112)), $mul.ref(56, 1)), loopback_pointer);
    $M.182 := $store.ref($M.182, $add.ref($add.ref(loopback_capture_ops, $mul.ref(0, 112)), $mul.ref(64, 1)), $0.ref);
    $M.183 := $store.ref($M.183, $add.ref($add.ref(loopback_capture_ops, $mul.ref(0, 112)), $mul.ref(72, 1)), $0.ref);
    $M.184 := $store.ref($M.184, $add.ref($add.ref(loopback_capture_ops, $mul.ref(0, 112)), $mul.ref(80, 1)), $0.ref);
    $M.185 := $store.ref($M.185, $add.ref($add.ref(loopback_capture_ops, $mul.ref(0, 112)), $mul.ref(88, 1)), snd_pcm_lib_get_vmalloc_page);
    $M.186 := $store.ref($M.186, $add.ref($add.ref(loopback_capture_ops, $mul.ref(0, 112)), $mul.ref(96, 1)), $0.ref);
    $M.187 := $store.ref($M.187, $add.ref($add.ref(loopback_capture_ops, $mul.ref(0, 112)), $mul.ref(104, 1)), $0.ref);
    $M.174 := $store.ref($M.174, loopback_playback_ops, loopback_open);
    $M.175 := $store.ref($M.175, $add.ref($add.ref(loopback_playback_ops, $mul.ref(0, 112)), $mul.ref(8, 1)), loopback_close);
    $M.176 := $store.ref($M.176, $add.ref($add.ref(loopback_playback_ops, $mul.ref(0, 112)), $mul.ref(16, 1)), snd_pcm_lib_ioctl);
    $M.177 := $store.ref($M.177, $add.ref($add.ref(loopback_playback_ops, $mul.ref(0, 112)), $mul.ref(24, 1)), loopback_hw_params);
    $M.178 := $store.ref($M.178, $add.ref($add.ref(loopback_playback_ops, $mul.ref(0, 112)), $mul.ref(32, 1)), loopback_hw_free);
    $M.179 := $store.ref($M.179, $add.ref($add.ref(loopback_playback_ops, $mul.ref(0, 112)), $mul.ref(40, 1)), loopback_prepare);
    $M.180 := $store.ref($M.180, $add.ref($add.ref(loopback_playback_ops, $mul.ref(0, 112)), $mul.ref(48, 1)), loopback_trigger);
    $M.181 := $store.ref($M.181, $add.ref($add.ref(loopback_playback_ops, $mul.ref(0, 112)), $mul.ref(56, 1)), loopback_pointer);
    $M.182 := $store.ref($M.182, $add.ref($add.ref(loopback_playback_ops, $mul.ref(0, 112)), $mul.ref(64, 1)), $0.ref);
    $M.183 := $store.ref($M.183, $add.ref($add.ref(loopback_playback_ops, $mul.ref(0, 112)), $mul.ref(72, 1)), $0.ref);
    $M.184 := $store.ref($M.184, $add.ref($add.ref(loopback_playback_ops, $mul.ref(0, 112)), $mul.ref(80, 1)), $0.ref);
    $M.185 := $store.ref($M.185, $add.ref($add.ref(loopback_playback_ops, $mul.ref(0, 112)), $mul.ref(88, 1)), snd_pcm_lib_get_vmalloc_page);
    $M.186 := $store.ref($M.186, $add.ref($add.ref(loopback_playback_ops, $mul.ref(0, 112)), $mul.ref(96, 1)), $0.ref);
    $M.187 := $store.ref($M.187, $add.ref($add.ref(loopback_playback_ops, $mul.ref(0, 112)), $mul.ref(104, 1)), $0.ref);
    $M.4 := $store.i32($M.4, pcm_substreams, 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(1, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(2, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(3, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(4, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(5, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(6, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(7, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(8, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(9, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(10, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(11, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(12, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(13, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(14, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(15, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(16, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(17, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(18, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(19, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(20, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(21, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(22, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(23, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(24, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(25, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(26, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(27, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(28, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(29, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(30, 4)), 8);
    $M.4 := $store.i32($M.4, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(31, 4)), 8);
    $M.2 := $store.ref($M.2, id, $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(1, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(2, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(3, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(4, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(5, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(6, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(7, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(8, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(9, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(10, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(11, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(12, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(13, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(14, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(15, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(16, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(17, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(18, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(19, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(20, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(21, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(22, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(23, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(24, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(25, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(26, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(27, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(28, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(29, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(30, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(31, 8)), $0.ref);
    $M.1 := $store.i32($M.1, index, $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(1, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(2, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(3, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(4, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(5, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(6, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(7, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(8, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(9, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(10, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(11, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(12, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(13, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(14, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(15, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(16, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(17, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(18, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(19, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(20, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(21, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(22, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(23, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(24, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(25, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(26, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(27, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(28, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(29, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(30, 4)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(31, 4)), $sub.i32(0, 1));
    $M.151 := $store.i8($M.151, enable, 1);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(1, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(3, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(5, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(7, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(9, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(17, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(18, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(19, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(21, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(22, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(23, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(25, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(26, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(27, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(28, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(29, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(30, 1)), 0);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.152 := $store.ref($M.152, devices, $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(1, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(2, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(3, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(4, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(5, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(6, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(7, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(8, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(9, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(10, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(11, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(12, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(13, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(14, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(15, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(16, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(17, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(18, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(19, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(20, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(21, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(22, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(23, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(24, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(25, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(26, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(27, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(28, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(29, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(30, 8)), $0.ref);
    $M.152 := $store.ref($M.152, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(31, 8)), $0.ref);
    $M.0 := $store.i32($M.0, loopback_pcm_hardware, 786691);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(loopback_pcm_hardware, $mul.ref(0, 80)), $mul.ref(8, 1)), 52236);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(loopback_pcm_hardware, $mul.ref(0, 80)), $mul.ref(16, 1)), 1073750014);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(loopback_pcm_hardware, $mul.ref(0, 80)), $mul.ref(20, 1)), 8000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(loopback_pcm_hardware, $mul.ref(0, 80)), $mul.ref(24, 1)), 192000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(loopback_pcm_hardware, $mul.ref(0, 80)), $mul.ref(28, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(loopback_pcm_hardware, $mul.ref(0, 80)), $mul.ref(32, 1)), 32);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(loopback_pcm_hardware, $mul.ref(0, 80)), $mul.ref(40, 1)), 2097152);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(loopback_pcm_hardware, $mul.ref(0, 80)), $mul.ref(48, 1)), 64);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(loopback_pcm_hardware, $mul.ref(0, 80)), $mul.ref(56, 1)), 1048576);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(loopback_pcm_hardware, $mul.ref(0, 80)), $mul.ref(64, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(loopback_pcm_hardware, $mul.ref(0, 80)), $mul.ref(68, 1)), 1024);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(loopback_pcm_hardware, $mul.ref(0, 80)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i8($M.0, .str.4, 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(4, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(7, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.233 := $store.i8($M.233, .str.5, 76);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(1, 1)), 111);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(2, 1)), 111);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(3, 1)), 112);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(4, 1)), 98);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(5, 1)), 97);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(6, 1)), 99);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(7, 1)), 107);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(8, 1)), 32);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(9, 1)), 37);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(10, 1)), 105);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(.str.5, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.234 := $store.i8($M.234, .str.14, 99);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.14, $mul.ref(0, 9)), $mul.ref(1, 1)), 97);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.14, $mul.ref(0, 9)), $mul.ref(2, 1)), 98);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.14, $mul.ref(0, 9)), $mul.ref(3, 1)), 108);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.14, $mul.ref(0, 9)), $mul.ref(4, 1)), 101);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.14, $mul.ref(0, 9)), $mul.ref(5, 1)), 35);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.14, $mul.ref(0, 9)), $mul.ref(6, 1)), 37);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.14, $mul.ref(0, 9)), $mul.ref(7, 1)), 100);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(.str.14, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.7, 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(4, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(7, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(9, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(11, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.6, 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 13)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 13)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 13)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 13)), $mul.ref(4, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 13)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 13)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 13)), $mul.ref(7, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 13)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 13)), $mul.ref(9, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 13)), $mul.ref(10, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 13)), $mul.ref(11, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    call {:si_unique_call 759} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.29, $M.31, $M.33, $M.35, $M.114, $M.115, $M.30, $M.32, $M.34, $M.36, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.27, $M.5, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.4, $M.2, $M.1, $M.151, $M.152, $M.0, $M.233, $M.234, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 760} __SMACK_static_init();
    call {:si_unique_call 761} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.119, $M.29, $M.31, $M.33, $M.35, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.0, $M.126, $M.127, $M.128, $M.118, $M.117, $M.114, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.4, $M.148, $M.149, $M.150, $M.115, $M.30, $M.32, $M.34, $M.36, $M.27, $M.5, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.2, $M.1, $M.151, $M.152, $M.233, $M.234, $CurrAddr, $M.11, $M.12, $M.28, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation loopback_mixer_new_loop_$bb8(in_$p0: ref, in_$p3: ref, in_$p19: ref, in_$i22: i64, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p43: ref, in_$p45: ref, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i34: i32, in_$i17: i32, in_$i7: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8) returns (out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p43: ref, out_$p45: ref, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i34: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8)
{

  entry:
    out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i34, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11 := in_$i35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p43, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i34, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2, in_cmdloc_dummy_var_3, in_cmdloc_dummy_var_4, in_cmdloc_dummy_var_5, in_cmdloc_dummy_var_6, in_cmdloc_dummy_var_7, in_cmdloc_dummy_var_8, in_cmdloc_dummy_var_9, in_cmdloc_dummy_var_10, in_cmdloc_dummy_var_11;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_194;

  $bb31:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := out_$i70;
    goto $bb31_dummy;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    out_$i71 := $ule.i32(out_$i70, 5);
    goto corral_source_split_244;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i34, 1);
    call {:si_unique_call 49} {:cexpr "idx"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_243;

  $bb29:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    out_$i69 := out_$i67;
    assume true;
    goto $bb29;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i67, 0);
    goto corral_source_split_239;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} out_$i67 := snd_ctl_add(in_$p3, out_$p38);
    call {:si_unique_call 48} {:cexpr "err"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_238;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_9 := $M.0;
    out_cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 46} out_cmdloc_dummy_var_11 := $memcpy.i8(out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_$p53, out_$p54, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_11;
    goto corral_source_split_236;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_235;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p51);
    goto corral_source_split_234;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p38, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_233;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p19, $mul.ref(in_$i22, 276)), $mul.ref(20, 1));
    goto corral_source_split_232;

  $bb24:
    assume out_$i50 == 1;
    goto corral_source_split_231;

  $bb22:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i34, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb15:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i34, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i34, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p45, in_$i17);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(out_$p38, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_208;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p43, in_$i7);
    goto corral_source_split_207;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(out_$p38, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_206;

  $bb11:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i64(out_$i39, 0);
    goto corral_source_split_200;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_199;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} out_$p38 := snd_ctl_new1(out_$p36, out_$p37);
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_197;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i34);
    out_$p36 := $add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(out_$i35, 80));
    goto corral_source_split_196;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_6 := $M.0;
    out_cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 45} out_cmdloc_dummy_var_8 := $memcpy.i8(out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_$p57, out_$p58, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_8;
    goto corral_source_split_229;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(out_$p56);
    goto corral_source_split_228;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(out_$p55);
    goto corral_source_split_227;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p38, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_226;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p19, $mul.ref(in_$i22, 276)), $mul.ref(84, 1));
    goto corral_source_split_225;

  $bb23:
    assume !(out_$i49 == 1);
    goto corral_source_split_224;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.0;
    out_cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 43} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p61, out_$p62, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_2;
    goto corral_source_split_215;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_214;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_213;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p38, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_212;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p19, $mul.ref(in_$i22, 276)), $mul.ref(148, 1));
    goto corral_source_split_211;

  $bb17:
    assume out_$i47 == 1;
    goto corral_source_split_210;

  $bb16:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i34, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_3 := $M.0;
    out_cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 44} out_cmdloc_dummy_var_5 := $memcpy.i8(out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_$p65, out_$p66, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_5;
    goto corral_source_split_222;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p64);
    goto corral_source_split_221;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p63);
    goto corral_source_split_220;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p38, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_219;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p19, $mul.ref(in_$i22, 276)), $mul.ref(212, 1));
    goto corral_source_split_218;

  $bb19:
    assume out_$i48 == 1;
    goto corral_source_split_217;

  $bb18:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i34, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i48 == 1);
    goto $bb21;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i50 == 1);
    goto $bb21;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i34, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11 := loopback_mixer_new_loop_$bb8(in_$p0, in_$p3, in_$p19, in_$i22, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i34, in_$i17, in_$i7, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11);
    return;

  exit:
    return;
}



procedure loopback_mixer_new_loop_$bb8(in_$p0: ref, in_$p3: ref, in_$p19: ref, in_$i22: i64, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p43: ref, in_$p45: ref, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i34: i32, in_$i17: i32, in_$i7: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8) returns (out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p43: ref, out_$p45: ref, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i34: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8);
  modifies $M.0;



implementation loopback_mixer_new_loop_$bb6(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$i15: i32, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$i24: i8, in_$p25: ref, in_$i26: i8, in_$i27: i8, in_$i28: i8, in_$i29: i8, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p43: ref, in_$p45: ref, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i34: i32, in_$i72: i32, in_$i73: i1, in_$i17: i32, in_$i7: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8) returns (out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$i24: i8, out_$p25: ref, out_$i26: i8, out_$i27: i8, out_$i28: i8, out_$i29: i8, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p43: ref, out_$p45: ref, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i34: i32, out_$i72: i32, out_$i73: i1, out_$i17: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8)
{

  entry:
    out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i34, out_$i72, out_$i73, out_$i17, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11 := in_$p18, in_$p19, in_$i20, in_$i21, in_$i22, in_$p23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p43, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i34, in_$i72, in_$i73, in_$i17, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2, in_cmdloc_dummy_var_3, in_cmdloc_dummy_var_4, in_cmdloc_dummy_var_5, in_cmdloc_dummy_var_6, in_cmdloc_dummy_var_7, in_cmdloc_dummy_var_8, in_cmdloc_dummy_var_9, in_cmdloc_dummy_var_10, in_cmdloc_dummy_var_11;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_170;

  $bb34:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i72;
    goto $bb34_dummy;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i72, in_$i15);
    goto corral_source_split_247;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i32(out_$i17, 1);
    call {:si_unique_call 50} {:cexpr "substr"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_246;

  $bb32:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    out_$i71 := $ule.i32(out_$i70, 5);
    goto corral_source_split_244;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i34, 1);
    call {:si_unique_call 49} {:cexpr "idx"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_243;

  $bb29:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    out_$i69 := out_$i67;
    assume true;
    goto $bb29;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i67, 0);
    goto corral_source_split_239;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} out_$i67 := snd_ctl_add(in_$p3, out_$p38);
    call {:si_unique_call 48} {:cexpr "err"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_238;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_9 := $M.0;
    out_cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 46} out_cmdloc_dummy_var_11 := $memcpy.i8(out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_$p53, out_$p54, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_11;
    goto corral_source_split_236;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_235;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p51);
    goto corral_source_split_234;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p38, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_233;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i22, 276)), $mul.ref(20, 1));
    goto corral_source_split_232;

  $bb24:
    assume out_$i50 == 1;
    goto corral_source_split_231;

  $bb22:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i34, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb15:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i34, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i34, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p45, out_$i17);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(out_$p38, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_208;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p43, in_$i7);
    goto corral_source_split_207;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(out_$p38, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_206;

  $bb11:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i64(out_$i39, 0);
    goto corral_source_split_200;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_199;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} out_$p38 := snd_ctl_new1(out_$p36, out_$p37);
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_197;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i34);
    out_$p36 := $add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(out_$i35, 80));
    goto corral_source_split_196;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb8:
    call out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i34, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11 := loopback_mixer_new_loop_$bb8(in_$p0, in_$p3, out_$p19, out_$i22, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i34, out_$i17, in_$i7, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11);
    goto $bb8_last;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_194;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    out_$i34 := 0;
    goto $bb8;

  $bb31:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := out_$i70;
    assume false;
    return;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p33, 2);
    goto corral_source_split_192;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i22, 276)), $mul.ref(16, 1));
    goto corral_source_split_191;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p32, 48000);
    goto corral_source_split_190;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i22, 276)), $mul.ref(12, 1));
    goto corral_source_split_189;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p31, 2);
    goto corral_source_split_188;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i22, 276)), $mul.ref(8, 1));
    goto corral_source_split_187;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p30, 100000);
    goto corral_source_split_186;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i22, 276)), $mul.ref(4, 1));
    goto corral_source_split_185;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p25, out_$i29);
    goto corral_source_split_184;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    out_$i29 := $or.i8(out_$i28, out_$i27);
    goto corral_source_split_183;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    out_$i28 := $and.i8(out_$i26, $sub.i8(0, 2));
    goto corral_source_split_182;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    out_$i27 := $and.i8(out_$i24, 1);
    goto corral_source_split_181;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.0, out_$p25);
    goto corral_source_split_180;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_179;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i32.i8(in_$i1);
    goto corral_source_split_178;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p19, $mul.ref(out_$i22, 276));
    goto corral_source_split_177;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i64(out_$i20, out_$i21);
    goto corral_source_split_176;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(in_$i7);
    goto corral_source_split_175;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i17);
    goto corral_source_split_174;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_173;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4736)), $mul.ref(320, 1));
    goto corral_source_split_172;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_6 := $M.0;
    out_cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 45} out_cmdloc_dummy_var_8 := $memcpy.i8(out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_$p57, out_$p58, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_8;
    goto corral_source_split_229;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(out_$p56);
    goto corral_source_split_228;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(out_$p55);
    goto corral_source_split_227;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p38, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_226;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i22, 276)), $mul.ref(84, 1));
    goto corral_source_split_225;

  $bb23:
    assume !(out_$i49 == 1);
    goto corral_source_split_224;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.0;
    out_cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 43} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p61, out_$p62, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_2;
    goto corral_source_split_215;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_214;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_213;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p38, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_212;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i22, 276)), $mul.ref(148, 1));
    goto corral_source_split_211;

  $bb17:
    assume out_$i47 == 1;
    goto corral_source_split_210;

  $bb16:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i34, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_3 := $M.0;
    out_cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 44} out_cmdloc_dummy_var_5 := $memcpy.i8(out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_$p65, out_$p66, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_5;
    goto corral_source_split_222;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p64);
    goto corral_source_split_221;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p63);
    goto corral_source_split_220;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p38, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_219;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i22, 276)), $mul.ref(212, 1));
    goto corral_source_split_218;

  $bb19:
    assume out_$i48 == 1;
    goto corral_source_split_217;

  $bb18:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i34, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i48 == 1);
    goto $bb21;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i50 == 1);
    goto $bb21;

  $bb34_dummy:
    call {:si_unique_call 1} out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i34, out_$i72, out_$i73, out_$i17, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11 := loopback_mixer_new_loop_$bb6(in_$p0, in_$i1, in_$p3, in_$i15, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i34, out_$i72, out_$i73, out_$i17, in_$i7, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11);
    return;

  exit:
    return;
}



procedure loopback_mixer_new_loop_$bb6(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$i15: i32, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$i24: i8, in_$p25: ref, in_$i26: i8, in_$i27: i8, in_$i28: i8, in_$i29: i8, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p43: ref, in_$p45: ref, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i34: i32, in_$i72: i32, in_$i73: i1, in_$i17: i32, in_$i7: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8) returns (out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$i24: i8, out_$p25: ref, out_$i26: i8, out_$i27: i8, out_$i28: i8, out_$i29: i8, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p43: ref, out_$p45: ref, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i34: i32, out_$i72: i32, out_$i73: i1, out_$i17: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8);
  modifies $M.0;



implementation loopback_mixer_new_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$i24: i8, in_$p25: ref, in_$i26: i8, in_$i27: i8, in_$i28: i8, in_$i29: i8, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p43: ref, in_$p45: ref, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i34: i32, in_$i72: i32, in_$i73: i1, in_$i17: i32, in_$i74: i32, in_$i75: i1, in_$i7: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$i24: i8, out_$p25: ref, out_$i26: i8, out_$i27: i8, out_$i28: i8, out_$i29: i8, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p43: ref, out_$p45: ref, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i34: i32, out_$i72: i32, out_$i73: i1, out_$i17: i32, out_$i74: i32, out_$i75: i1, out_$i7: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8)
{

  entry:
    out_$i8, out_$p10, out_$p11, out_$p14, out_$i15, out_$i16, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i34, out_$i72, out_$i73, out_$i17, out_$i74, out_$i75, out_$i7, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11 := in_$i8, in_$p10, in_$p11, in_$p14, in_$i15, in_$i16, in_$p18, in_$p19, in_$i20, in_$i21, in_$i22, in_$p23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p43, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i34, in_$i72, in_$i73, in_$i17, in_$i74, in_$i75, in_$i7, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2, in_cmdloc_dummy_var_3, in_cmdloc_dummy_var_4, in_cmdloc_dummy_var_5, in_cmdloc_dummy_var_6, in_cmdloc_dummy_var_7, in_cmdloc_dummy_var_8, in_cmdloc_dummy_var_9, in_cmdloc_dummy_var_10, in_cmdloc_dummy_var_11;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_159;

  $bb37:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i74;
    goto $bb37_dummy;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    out_$i75 := $sle.i32(out_$i74, 1);
    goto corral_source_split_252;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(out_$i7, 1);
    call {:si_unique_call 51} {:cexpr "dev"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_251;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb4:
    assume {:verifier.code 0} true;
    assume !(out_$i16 == 1);
    goto $bb5;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb35:
    assume !(out_$i73 == 1);
    goto corral_source_split_249;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i72, out_$i15);
    goto corral_source_split_247;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i32(out_$i17, 1);
    call {:si_unique_call 50} {:cexpr "substr"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_246;

  $bb32:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    out_$i71 := $ule.i32(out_$i70, 5);
    goto corral_source_split_244;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i34, 1);
    call {:si_unique_call 49} {:cexpr "idx"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_243;

  $bb29:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    out_$i69 := out_$i67;
    assume true;
    goto $bb29;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i67, 0);
    goto corral_source_split_239;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} out_$i67 := snd_ctl_add(in_$p3, out_$p38);
    call {:si_unique_call 48} {:cexpr "err"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_238;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_9 := $M.0;
    out_cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 46} out_cmdloc_dummy_var_11 := $memcpy.i8(out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_$p53, out_$p54, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_11;
    goto corral_source_split_236;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_235;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p51);
    goto corral_source_split_234;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p38, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_233;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i22, 276)), $mul.ref(20, 1));
    goto corral_source_split_232;

  $bb24:
    assume out_$i50 == 1;
    goto corral_source_split_231;

  $bb22:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i34, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb15:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i34, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i34, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p45, out_$i17);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(out_$p38, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_208;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p43, out_$i7);
    goto corral_source_split_207;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($add.ref(out_$p38, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_206;

  $bb11:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i64(out_$i39, 0);
    goto corral_source_split_200;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_199;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} out_$p38 := snd_ctl_new1(out_$p36, out_$p37);
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_197;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i34);
    out_$p36 := $add.ref($add.ref(loopback_controls, $mul.ref(0, 480)), $mul.ref(out_$i35, 80));
    goto corral_source_split_196;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb8:
    call out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i34, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11 := loopback_mixer_new_loop_$bb8(in_$p0, in_$p3, out_$p19, out_$i22, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i34, out_$i17, out_$i7, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11);
    goto $bb8_last;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_194;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    out_$i34 := 0;
    goto $bb8;

  $bb31:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := out_$i70;
    assume false;
    return;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p33, 2);
    goto corral_source_split_192;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i22, 276)), $mul.ref(16, 1));
    goto corral_source_split_191;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p32, 48000);
    goto corral_source_split_190;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i22, 276)), $mul.ref(12, 1));
    goto corral_source_split_189;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p31, 2);
    goto corral_source_split_188;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i22, 276)), $mul.ref(8, 1));
    goto corral_source_split_187;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p30, 100000);
    goto corral_source_split_186;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i22, 276)), $mul.ref(4, 1));
    goto corral_source_split_185;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p25, out_$i29);
    goto corral_source_split_184;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    out_$i29 := $or.i8(out_$i28, out_$i27);
    goto corral_source_split_183;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    out_$i28 := $and.i8(out_$i26, $sub.i8(0, 2));
    goto corral_source_split_182;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    out_$i27 := $and.i8(out_$i24, 1);
    goto corral_source_split_181;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.0, out_$p25);
    goto corral_source_split_180;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_179;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i32.i8(in_$i1);
    goto corral_source_split_178;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p19, $mul.ref(out_$i22, 276));
    goto corral_source_split_177;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i64(out_$i20, out_$i21);
    goto corral_source_split_176;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i7);
    goto corral_source_split_175;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i17);
    goto corral_source_split_174;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_173;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4736)), $mul.ref(320, 1));
    goto corral_source_split_172;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb6:
    call out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i34, out_$i72, out_$i73, out_$i17, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11 := loopback_mixer_new_loop_$bb6(in_$p0, in_$i1, in_$p3, out_$i15, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i34, out_$i72, out_$i73, out_$i17, out_$i7, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11);
    goto $bb6_last;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_170;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    out_$i17 := 0;
    goto $bb6;

  $bb34:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i72;
    assume false;
    return;

  $bb3:
    assume out_$i16 == 1;
    goto corral_source_split_168;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(0, out_$i15);
    goto corral_source_split_166;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.0, out_$p14);
    call {:si_unique_call 41} {:cexpr "substr_count"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_165;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 992)), $mul.ref(184, 1)), $mul.ref(1, 256)), $mul.ref(16, 1));
    goto corral_source_split_164;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_163;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 4736)), $mul.ref(304, 1)), $mul.ref(out_$i8, 8));
    goto corral_source_split_162;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i7);
    goto corral_source_split_161;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_6 := $M.0;
    out_cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 45} out_cmdloc_dummy_var_8 := $memcpy.i8(out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_$p57, out_$p58, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_8;
    goto corral_source_split_229;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(out_$p56);
    goto corral_source_split_228;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(out_$p55);
    goto corral_source_split_227;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p38, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_226;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i22, 276)), $mul.ref(84, 1));
    goto corral_source_split_225;

  $bb23:
    assume !(out_$i49 == 1);
    goto corral_source_split_224;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.0;
    out_cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 43} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p61, out_$p62, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_2;
    goto corral_source_split_215;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_214;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_213;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p38, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_212;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i22, 276)), $mul.ref(148, 1));
    goto corral_source_split_211;

  $bb17:
    assume out_$i47 == 1;
    goto corral_source_split_210;

  $bb16:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i34, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_3 := $M.0;
    out_cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 44} out_cmdloc_dummy_var_5 := $memcpy.i8(out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_$p65, out_$p66, 64, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_5;
    goto corral_source_split_222;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(out_$p64);
    goto corral_source_split_221;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p63);
    goto corral_source_split_220;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p38, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_219;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p19, $mul.ref(out_$i22, 276)), $mul.ref(212, 1));
    goto corral_source_split_218;

  $bb19:
    assume out_$i48 == 1;
    goto corral_source_split_217;

  $bb18:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i34, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i48 == 1);
    goto $bb21;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i50 == 1);
    goto $bb21;

  $bb37_dummy:
    call {:si_unique_call 1} out_$i8, out_$p10, out_$p11, out_$p14, out_$i15, out_$i16, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i34, out_$i72, out_$i73, out_$i17, out_$i74, out_$i75, out_$i7, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11 := loopback_mixer_new_loop_$bb1(in_$p0, in_$i1, in_$p3, out_$i8, out_$p10, out_$p11, out_$p14, out_$i15, out_$i16, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i34, out_$i72, out_$i73, out_$i17, out_$i74, out_$i75, out_$i7, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2, out_cmdloc_dummy_var_3, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_cmdloc_dummy_var_11);
    return;

  exit:
    return;
}



procedure loopback_mixer_new_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$i24: i8, in_$p25: ref, in_$i26: i8, in_$i27: i8, in_$i28: i8, in_$i29: i8, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p43: ref, in_$p45: ref, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$i34: i32, in_$i72: i32, in_$i73: i1, in_$i17: i32, in_$i74: i32, in_$i75: i1, in_$i7: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8, in_cmdloc_dummy_var_3: [ref]i8, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_cmdloc_dummy_var_11: [ref]i8) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$i24: i8, out_$p25: ref, out_$i26: i8, out_$i27: i8, out_$i28: i8, out_$i29: i8, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p43: ref, out_$p45: ref, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$i34: i32, out_$i72: i32, out_$i73: i1, out_$i17: i32, out_$i74: i32, out_$i75: i1, out_$i7: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8, out_cmdloc_dummy_var_3: [ref]i8, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_cmdloc_dummy_var_11: [ref]i8);
  modifies $M.0;



implementation clear_capture_buf_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p7: ref, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i64, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$i41: i64, in_$p42: ref, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_vslice_dummy_var_46: i32) returns (out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i64, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$i41: i64, out_$p42: ref, out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_vslice_dummy_var_46: i32)
{

  entry:
    out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_vslice_dummy_var_46 := in_$i27, in_$i28, in_$i29, in_$p30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$p42, in_$i43, in_$p44, in_$i45, in_$i46, in_$p48, in_$i49, in_$i50, in_$p51, in_$i52, in_$i53, in_vslice_dummy_var_46;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1005;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i27, out_$i28 := 0, out_$i52;
    goto $bb15_dummy;

  $bb13:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 0);
    goto corral_source_split_1034;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    out_$i52 := $sub.i32(out_$i28, out_$i36);
    call {:si_unique_call 207} {:cexpr "bytes"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_1033;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p51, out_$i50);
    goto corral_source_split_1032;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_1031;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i49, out_$i36);
    goto corral_source_split_1030;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i32($M.0, out_$p48);
    goto corral_source_split_1029;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p0, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_1028;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} out_vslice_dummy_var_46 := snd_pcm_format_set_silence(out_$i40, out_$p42, out_$i46);
    goto corral_source_split_1027;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    out_$i46 := $mul.i32(out_$i43, out_$i45);
    goto corral_source_split_1026;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_1025;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1176)), $mul.ref(104, 1));
    goto corral_source_split_1024;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    out_$i43 := $trunc.i64.i32(out_$i38);
    goto corral_source_split_1023;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref(in_$p7, $mul.ref(out_$i41, 1));
    goto corral_source_split_1022;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i32.i64(out_$i27);
    goto corral_source_split_1021;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.0, out_$p39);
    goto corral_source_split_1020;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1176)), $mul.ref(92, 1));
    goto corral_source_split_1019;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} out_$i38 := bytes_to_frames(in_$p5, out_$i37);
    call {:si_unique_call 205} {:cexpr "tmp"} boogie_si_record_i64(out_$i38);
    goto corral_source_split_1018;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i32.i64(out_$i36);
    goto corral_source_split_1017;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1016;

  $bb10:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := out_$i28;
    goto $bb11;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i35;
    goto $bb11;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    out_$i35 := $sub.i32(out_$i34, out_$i27);
    call {:si_unique_call 203} {:cexpr "size"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_1014;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_1013;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_1012;

  $bb9:
    assume out_$i32 == 1;
    goto corral_source_split_1011;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    out_$i32 := $ugt.i32(out_$i29, out_$i31);
    goto corral_source_split_1009;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, out_$p30);
    goto corral_source_split_1008;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_1007;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i27, out_$i28);
    goto corral_source_split_1006;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_vslice_dummy_var_46 := clear_capture_buf_loop_$bb8(in_$p0, in_$p5, in_$p7, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_vslice_dummy_var_46);
    return;

  exit:
    return;
}



procedure clear_capture_buf_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p7: ref, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i32, in_$i37: i64, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$i41: i64, in_$p42: ref, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_vslice_dummy_var_46: i32) returns (out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i32, out_$i37: i64, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$i41: i64, out_$p42: ref, out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_vslice_dummy_var_46: i32);
  modifies $M.0;



implementation copy_play_buf_loop_$bb13(in_$p0: ref, in_$p1: ref, in_$p8: ref, in_$p14: ref, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$i72: i32, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$p76: ref, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$i82: i32, in_$i83: i64, in_$i84: i64, in_$p85: ref, in_$i86: i64, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_cmdloc_dummy_var_23: [ref]i8) returns (out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$i72: i32, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$p76: ref, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$i82: i32, out_$i83: i64, out_$i84: i64, out_$p85: ref, out_$i86: i64, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_cmdloc_dummy_var_23: [ref]i8)
{

  entry:
    out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23 := in_$i64, in_$i65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$p71, in_$i72, in_$i73, in_$i74, in_$i75, in_$p76, in_$i77, in_$i78, in_$p79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$p85, in_$i86, in_$p87, in_$p88, in_$i89, in_$i90, in_$i91, in_$p92, in_$i93, in_$i94, in_$i95, in_$p96, in_$i97, in_$i98, in_cmdloc_dummy_var_21, in_cmdloc_dummy_var_22, in_cmdloc_dummy_var_23;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1110;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    out_$i64, out_$i65, out_$i66 := out_$i94, out_$i98, out_$i89;
    goto corral_source_split_1155_dummy;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    out_$i98 := $urem.i32(out_$i95, out_$i97);
    call {:si_unique_call 226} {:cexpr "dst_off"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_1155;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i32($M.0, out_$p96);
    goto corral_source_split_1154;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p1, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_1153;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    out_$i95 := $add.i32(out_$i65, out_$i82);
    goto corral_source_split_1152;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    out_$i94 := $urem.i32(out_$i91, out_$i93);
    call {:si_unique_call 225} {:cexpr "src_off"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_1151;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.0, out_$p92);
    goto corral_source_split_1150;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_1149;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i32(out_$i64, out_$i82);
    goto corral_source_split_1148;

  $bb21:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i89, 0);
    goto corral_source_split_1142;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    out_$i89 := $sub.i32(out_$i66, out_$i82);
    call {:si_unique_call 224} {:cexpr "bytes"} boogie_si_record_i32(out_$i89);
    goto corral_source_split_1141;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p88, 0);
    goto corral_source_split_1140;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p1, $mul.ref(0, 208)), $mul.ref(32, 1));
    goto corral_source_split_1139;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_21 := $M.0;
    out_cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 223} out_cmdloc_dummy_var_23 := $memcpy.i8(out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_$p85, out_$p87, out_$i83, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_23;
    goto corral_source_split_1138;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref(in_$p8, $mul.ref(out_$i86, 1));
    goto corral_source_split_1137;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i32.i64(out_$i64);
    goto corral_source_split_1136;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref(in_$p14, $mul.ref(out_$i84, 1));
    goto corral_source_split_1135;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i32.i64(out_$i65);
    goto corral_source_split_1134;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i32.i64(out_$i82);
    call {:si_unique_call 222} {:cexpr "__len"} boogie_si_record_i64(out_$i83);
    goto corral_source_split_1133;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1132;

  $bb18:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    out_$i82 := out_$i74;
    goto $bb19;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    out_$i82 := out_$i81;
    goto $bb19;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    out_$i81 := $sub.i32(out_$i80, out_$i65);
    call {:si_unique_call 221} {:cexpr "size"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_1130;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.0, out_$p79);
    goto corral_source_split_1129;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p1, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_1128;

  $bb17:
    assume out_$i78 == 1;
    goto corral_source_split_1127;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    out_$i78 := $ugt.i32(out_$i75, out_$i77);
    goto corral_source_split_1125;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.0, out_$p76);
    goto corral_source_split_1124;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p1, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_1123;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i65, out_$i74);
    goto corral_source_split_1122;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1121;

  $bb15:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i74 := out_$i66;
    goto $bb16;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    out_$i74 := out_$i73;
    goto $bb16;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    out_$i73 := $sub.i32(out_$i72, out_$i64);
    call {:si_unique_call 220} {:cexpr "size"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_1119;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i32($M.0, out_$p71);
    goto corral_source_split_1118;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_1117;

  $bb14:
    assume out_$i70 == 1;
    goto corral_source_split_1116;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    out_$i70 := $ugt.i32(out_$i67, out_$i69);
    goto corral_source_split_1114;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i32($M.0, out_$p68);
    goto corral_source_split_1113;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_1112;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i64, out_$i66);
    goto corral_source_split_1111;

  corral_source_split_1155_dummy:
    call {:si_unique_call 1} out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23 := copy_play_buf_loop_$bb13(in_$p0, in_$p1, in_$p8, in_$p14, out_$i64, out_$i65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23);
    return;

  exit:
    return;
}



procedure copy_play_buf_loop_$bb13(in_$p0: ref, in_$p1: ref, in_$p8: ref, in_$p14: ref, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$i72: i32, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$p76: ref, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$i82: i32, in_$i83: i64, in_$i84: i64, in_$p85: ref, in_$i86: i64, in_$p87: ref, in_$p88: ref, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$p96: ref, in_$i97: i32, in_$i98: i32, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_cmdloc_dummy_var_23: [ref]i8) returns (out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$i72: i32, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$p76: ref, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$i82: i32, out_$i83: i64, out_$i84: i64, out_$p85: ref, out_$i86: i64, out_$p87: ref, out_$p88: ref, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$p96: ref, out_$i97: i32, out_$i98: i32, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_cmdloc_dummy_var_23: [ref]i8);
  modifies $M.0;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p1: ref, in_$i2: i32, in_$p3: ref, in_$i4: i32, in_$i5: i64, in_$p6: ref, in_$i7: i64, in_$i8: i32, in_$i9: i32, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$i85: i32, in_$i86: i1, in_$p87: ref, in_$i89: i32, in_$i90: i1, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$i106: i1, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i32, in_$i114: i1, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i32, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$i124: i32, in_$i125: i1, in_$i126: i32, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$i141: i1, in_$i142: i1, in_$i143: i1, in_$i144: i1, in_$i145: i1, in_$i146: i1, in_$i147: i1, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i32, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i32, in_$i165: i1, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i169: i32, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$i175: i32, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i1, in_$p180: ref, in_$i181: i32, in_$i182: i32, in_$i183: i1, in_$i184: i32, in_$i185: i1, in_$i186: i32, in_$i187: i32, in_$i188: i1, in_$i189: i32, in_$i190: i1, in_$i191: i32, in_$i192: i32, in_$i193: i1, in_$i194: i32, in_$i195: i1, in_$i196: i32, in_$i197: i32, in_$i198: i1, in_$i199: i32, in_$i200: i1, in_$i201: i32, in_$i202: i32, in_$i203: i1, in_$i204: i32, in_$i205: i1, in_$i206: i32, in_$i207: i32, in_$i208: i1, in_$i209: i32, in_$i210: i1, in_$i211: i32, in_$i212: i32, in_$i213: i1, in_$i214: i32, in_$i215: i1, in_$i216: i32, in_$i217: i32, in_$i218: i1, in_$i219: i32, in_$i220: i32, in_$i221: i32, in_$i222: i1, in_$i223: i32, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$i228: i32, in_$i229: i32, in_$i230: i1, in_$i231: i32, in_$i232: i1, in_$i233: i32, in_$i234: i32, in_$i235: i1, in_$i236: i32, in_$i237: i1, in_$i238: i32, in_$i239: i32, in_$i240: i1, in_$i241: i32, in_$i242: i1, in_$i243: i32, in_$i244: i32, in_$i245: i1, in_$i246: i32, in_$i247: i1, in_$i248: i32, in_$i249: i32, in_$i250: i1, in_$i251: i32, in_$i252: i1, in_$i254: i32, in_$i255: i32, in_$i256: i32, in_$i257: i1, in_$i258: i32, in_$i259: i1, in_$i260: i1, in_$i261: i1, in_$i262: i32, in_$i263: i1, in_$p264: ref, in_$i265: i32, in_$i266: i32, in_$i267: i1, in_$i268: i32, in_$i269: i32, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$i274: i32, in_$i275: i32, in_$i276: i32, in_$i277: i1, in_$i278: i32, in_$i279: i1, in_$i280: i1, in_$i281: i1, in_$i282: i1, in_$i283: i1, in_$i284: i1, in_$i285: i1, in_$i286: i1, in_$i287: i1, in_$i288: i1, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$i293: i32, in_$i294: i1, in_$p295: ref, in_$i297: i32, in_$i298: i1, in_$p299: ref, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$i309: i32, in_$i310: i1, in_$p311: ref, in_$i313: i32, in_$i314: i1, in_$p315: ref, in_$i317: i32, in_$i318: i1, in_$p319: ref, in_$i321: i32, in_$i322: i1, in_$p323: ref, in_$i325: i32, in_$i326: i1, in_$p327: ref, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$i333: i32, in_$i334: i1, in_$p335: ref, in_$i337: i32, in_$i338: i1, in_$p339: ref, in_$i341: i32, in_$i342: i1, in_$p343: ref, in_$i345: i32, in_$i346: i1, in_$p347: ref, in_$i348: i32, in_$i349: i32, in_$i350: i1, in_$i351: i32, in_$i352: i32, in_$i353: i32, in_$i354: i1, in_$p355: ref, in_$i356: i32, in_$i357: i32, in_$i358: i1, in_$i359: i32, in_$i360: i32, in_vslice_dummy_var_49: i32, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32, in_vslice_dummy_var_52: i32, in_vslice_dummy_var_53: i32, in_vslice_dummy_var_54: i32, in_vslice_dummy_var_55: ref, in_vslice_dummy_var_56: ref, in_vslice_dummy_var_57: i32, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i64, in_vslice_dummy_var_60: i64, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: ref, in_vslice_dummy_var_72: ref, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i64, in_vslice_dummy_var_76: i64, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32) returns (out_$i12: i32, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$i85: i32, out_$i86: i1, out_$p87: ref, out_$i89: i32, out_$i90: i1, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$i106: i1, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i32, out_$i114: i1, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i32, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$i124: i32, out_$i125: i1, out_$i126: i32, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$i141: i1, out_$i142: i1, out_$i143: i1, out_$i144: i1, out_$i145: i1, out_$i146: i1, out_$i147: i1, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i32, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i32, out_$i165: i1, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i169: i32, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$i175: i32, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i1, out_$p180: ref, out_$i181: i32, out_$i182: i32, out_$i183: i1, out_$i184: i32, out_$i185: i1, out_$i186: i32, out_$i187: i32, out_$i188: i1, out_$i189: i32, out_$i190: i1, out_$i191: i32, out_$i192: i32, out_$i193: i1, out_$i194: i32, out_$i195: i1, out_$i196: i32, out_$i197: i32, out_$i198: i1, out_$i199: i32, out_$i200: i1, out_$i201: i32, out_$i202: i32, out_$i203: i1, out_$i204: i32, out_$i205: i1, out_$i206: i32, out_$i207: i32, out_$i208: i1, out_$i209: i32, out_$i210: i1, out_$i211: i32, out_$i212: i32, out_$i213: i1, out_$i214: i32, out_$i215: i1, out_$i216: i32, out_$i217: i32, out_$i218: i1, out_$i219: i32, out_$i220: i32, out_$i221: i32, out_$i222: i1, out_$i223: i32, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$i228: i32, out_$i229: i32, out_$i230: i1, out_$i231: i32, out_$i232: i1, out_$i233: i32, out_$i234: i32, out_$i235: i1, out_$i236: i32, out_$i237: i1, out_$i238: i32, out_$i239: i32, out_$i240: i1, out_$i241: i32, out_$i242: i1, out_$i243: i32, out_$i244: i32, out_$i245: i1, out_$i246: i32, out_$i247: i1, out_$i248: i32, out_$i249: i32, out_$i250: i1, out_$i251: i32, out_$i252: i1, out_$i254: i32, out_$i255: i32, out_$i256: i32, out_$i257: i1, out_$i258: i32, out_$i259: i1, out_$i260: i1, out_$i261: i1, out_$i262: i32, out_$i263: i1, out_$p264: ref, out_$i265: i32, out_$i266: i32, out_$i267: i1, out_$i268: i32, out_$i269: i32, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$i274: i32, out_$i275: i32, out_$i276: i32, out_$i277: i1, out_$i278: i32, out_$i279: i1, out_$i280: i1, out_$i281: i1, out_$i282: i1, out_$i283: i1, out_$i284: i1, out_$i285: i1, out_$i286: i1, out_$i287: i1, out_$i288: i1, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$i293: i32, out_$i294: i1, out_$p295: ref, out_$i297: i32, out_$i298: i1, out_$p299: ref, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$i309: i32, out_$i310: i1, out_$p311: ref, out_$i313: i32, out_$i314: i1, out_$p315: ref, out_$i317: i32, out_$i318: i1, out_$p319: ref, out_$i321: i32, out_$i322: i1, out_$p323: ref, out_$i325: i32, out_$i326: i1, out_$p327: ref, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$i333: i32, out_$i334: i1, out_$p335: ref, out_$i337: i32, out_$i338: i1, out_$p339: ref, out_$i341: i32, out_$i342: i1, out_$p343: ref, out_$i345: i32, out_$i346: i1, out_$p347: ref, out_$i348: i32, out_$i349: i32, out_$i350: i1, out_$i351: i32, out_$i352: i32, out_$i353: i32, out_$i354: i1, out_$p355: ref, out_$i356: i32, out_$i357: i32, out_$i358: i1, out_$i359: i32, out_$i360: i32, out_vslice_dummy_var_49: i32, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32, out_vslice_dummy_var_52: i32, out_vslice_dummy_var_53: i32, out_vslice_dummy_var_54: i32, out_vslice_dummy_var_55: ref, out_vslice_dummy_var_56: ref, out_vslice_dummy_var_57: i32, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i64, out_vslice_dummy_var_60: i64, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: ref, out_vslice_dummy_var_72: ref, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i64, out_vslice_dummy_var_76: i64, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32)
{

  entry:
    out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i37, out_$i38, out_$p39, out_$i41, out_$i42, out_$p43, out_$i45, out_$i46, out_$p47, out_$i49, out_$i50, out_$p51, out_$i53, out_$i54, out_$p55, out_$i57, out_$i58, out_$p59, out_$i61, out_$i62, out_$p63, out_$i65, out_$i66, out_$p67, out_$i69, out_$i70, out_$p71, out_$i73, out_$i74, out_$p75, out_$i77, out_$i78, out_$p79, out_$i81, out_$i82, out_$p83, out_$i85, out_$i86, out_$p87, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$p291, out_$i293, out_$i294, out_$p295, out_$i297, out_$i298, out_$p299, out_$i301, out_$i302, out_$p303, out_$i305, out_$i306, out_$p307, out_$i309, out_$i310, out_$p311, out_$i313, out_$i314, out_$p315, out_$i317, out_$i318, out_$p319, out_$i321, out_$i322, out_$p323, out_$i325, out_$i326, out_$p327, out_$i329, out_$i330, out_$p331, out_$i333, out_$i334, out_$p335, out_$i337, out_$i338, out_$p339, out_$i341, out_$i342, out_$p343, out_$i345, out_$i346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$p355, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78 := in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$i37, in_$i38, in_$p39, in_$i41, in_$i42, in_$p43, in_$i45, in_$i46, in_$p47, in_$i49, in_$i50, in_$p51, in_$i53, in_$i54, in_$p55, in_$i57, in_$i58, in_$p59, in_$i61, in_$i62, in_$p63, in_$i65, in_$i66, in_$p67, in_$i69, in_$i70, in_$p71, in_$i73, in_$i74, in_$p75, in_$i77, in_$i78, in_$p79, in_$i81, in_$i82, in_$p83, in_$i85, in_$i86, in_$p87, in_$i89, in_$i90, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$p150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$p156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$p162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$p168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$p174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$p180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$i241, in_$i242, in_$i243, in_$i244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$p264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$p272, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$i279, in_$i280, in_$i281, in_$i282, in_$i283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290, in_$p291, in_$i293, in_$i294, in_$p295, in_$i297, in_$i298, in_$p299, in_$i301, in_$i302, in_$p303, in_$i305, in_$i306, in_$p307, in_$i309, in_$i310, in_$p311, in_$i313, in_$i314, in_$p315, in_$i317, in_$i318, in_$p319, in_$i321, in_$i322, in_$p323, in_$i325, in_$i326, in_$p327, in_$i329, in_$i330, in_$p331, in_$i333, in_$i334, in_$p335, in_$i337, in_$i338, in_$p339, in_$i341, in_$i342, in_$p343, in_$i345, in_$i346, in_$p347, in_$i348, in_$i349, in_$i350, in_$i351, in_$i352, in_$i353, in_$i354, in_$p355, in_$i356, in_$i357, in_$i358, in_$i359, in_$i360, in_vslice_dummy_var_49, in_vslice_dummy_var_50, in_vslice_dummy_var_51, in_vslice_dummy_var_52, in_vslice_dummy_var_53, in_vslice_dummy_var_54, in_vslice_dummy_var_55, in_vslice_dummy_var_56, in_vslice_dummy_var_57, in_vslice_dummy_var_58, in_vslice_dummy_var_59, in_vslice_dummy_var_60, in_vslice_dummy_var_61, in_vslice_dummy_var_62, in_vslice_dummy_var_63, in_vslice_dummy_var_64, in_vslice_dummy_var_65, in_vslice_dummy_var_66, in_vslice_dummy_var_67, in_vslice_dummy_var_68, in_vslice_dummy_var_69, in_vslice_dummy_var_70, in_vslice_dummy_var_71, in_vslice_dummy_var_72, in_vslice_dummy_var_73, in_vslice_dummy_var_74, in_vslice_dummy_var_75, in_vslice_dummy_var_76, in_vslice_dummy_var_77, in_vslice_dummy_var_78;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 406} out_$i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 407} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i12);
    call {:si_unique_call 408} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i12);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb100_dummy;

  $bb407:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb19:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb46:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $M.119 := 2;
    call {:si_unique_call 415} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2009;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} out_vslice_dummy_var_50 := loopback_prepare(out_$p39);
    goto corral_source_split_2008;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    out_$p39 := $M.114;
    goto corral_source_split_2007;

  $bb45:
    assume out_$i38 == 1;
    goto corral_source_split_2006;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 2);
    goto corral_source_split_2004;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i37 := $M.119;
    goto corral_source_split_2003;

  $bb43:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 413} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2001;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} out_vslice_dummy_var_49 := loopback_prepare(out_$p35);
    goto corral_source_split_2000;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    out_$p35 := $M.114;
    goto corral_source_split_1999;

  $bb42:
    assume out_$i34 == 1;
    goto corral_source_split_1998;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i33, 1);
    goto corral_source_split_1996;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    out_$i33 := $M.119;
    goto corral_source_split_1995;

  $bb40:
    assume out_$i32 == 1;
    goto corral_source_split_1994;

  $bb38:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i22, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb34:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i22, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb21:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i22, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i22, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_1960:
    assume {:verifier.code 1} true;
    call {:si_unique_call 409} out_$i22 := __VERIFIER_nondet_int();
    call {:si_unique_call 410} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i22);
    call {:si_unique_call 411} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i22);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i21 == 1;
    goto corral_source_split_1960;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i20, 0);
    goto corral_source_split_1958;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    out_$i20 := $M.119;
    goto corral_source_split_1957;

  $bb16:
    assume out_$i19 == 1;
    goto corral_source_split_1956;

  $bb12:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb3:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i12, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i12, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb53:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $M.119 := 2;
    call {:si_unique_call 419} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2022;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} out_vslice_dummy_var_52 := snd_pcm_lib_ioctl(out_$p47, in_$i2, in_$p3);
    goto corral_source_split_2021;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    out_$p47 := $M.114;
    goto corral_source_split_2020;

  $bb52:
    assume out_$i46 == 1;
    goto corral_source_split_2019;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 2);
    goto corral_source_split_2017;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i45 := $M.119;
    goto corral_source_split_2016;

  $bb50:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 417} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2014;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} out_vslice_dummy_var_51 := snd_pcm_lib_ioctl(out_$p43, in_$i2, in_$p3);
    goto corral_source_split_2013;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    out_$p43 := $M.114;
    goto corral_source_split_2012;

  $bb49:
    assume out_$i42 == 1;
    goto corral_source_split_2011;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i41, 1);
    goto corral_source_split_1992;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    out_$i41 := $M.119;
    goto corral_source_split_1991;

  $bb39:
    assume !(out_$i31 == 1);
    goto corral_source_split_1990;

  $bb59:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $M.119 := 2;
    call {:si_unique_call 423} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2035;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} out_vslice_dummy_var_54 := loopback_hw_free(out_$p55);
    goto corral_source_split_2034;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    out_$p55 := $M.114;
    goto corral_source_split_2033;

  $bb58:
    assume out_$i54 == 1;
    goto corral_source_split_2032;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i53, 2);
    goto corral_source_split_2030;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i53 := $M.119;
    goto corral_source_split_2029;

  $bb56:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 421} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2027;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} out_vslice_dummy_var_53 := loopback_hw_free(out_$p51);
    goto corral_source_split_2026;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    out_$p51 := $M.114;
    goto corral_source_split_2025;

  $bb55:
    assume out_$i50 == 1;
    goto corral_source_split_2024;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, 1);
    goto corral_source_split_1984;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    out_$i49 := $M.119;
    goto corral_source_split_1983;

  $bb36:
    assume out_$i30 == 1;
    goto corral_source_split_1982;

  $bb35:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i30 := $slt.i32(out_$i22, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb65:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $M.119 := 2;
    call {:si_unique_call 427} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2048;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} out_vslice_dummy_var_56 := snd_pcm_lib_get_vmalloc_page(out_$p63, in_$i5);
    goto corral_source_split_2047;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    out_$p63 := $M.114;
    goto corral_source_split_2046;

  $bb64:
    assume out_$i62 == 1;
    goto corral_source_split_2045;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i61, 2);
    goto corral_source_split_2043;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i61 := $M.119;
    goto corral_source_split_2042;

  $bb62:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 425} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2040;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} out_vslice_dummy_var_55 := snd_pcm_lib_get_vmalloc_page(out_$p59, in_$i5);
    goto corral_source_split_2039;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    out_$p59 := $M.114;
    goto corral_source_split_2038;

  $bb61:
    assume out_$i58 == 1;
    goto corral_source_split_2037;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 1);
    goto corral_source_split_1988;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    out_$i57 := $M.119;
    goto corral_source_split_1987;

  $bb37:
    assume !(out_$i30 == 1);
    goto corral_source_split_1986;

  $bb71:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $M.119 := 2;
    call {:si_unique_call 431} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2061;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} out_vslice_dummy_var_58 := loopback_hw_params(out_$p71, in_$p1);
    goto corral_source_split_2060;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    out_$p71 := $M.114;
    goto corral_source_split_2059;

  $bb70:
    assume out_$i70 == 1;
    goto corral_source_split_2058;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i69, 2);
    goto corral_source_split_2056;

  $bb69:
    assume {:verifier.code 0} true;
    out_$i69 := $M.119;
    goto corral_source_split_2055;

  $bb68:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 429} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} out_vslice_dummy_var_57 := loopback_hw_params(out_$p67, in_$p1);
    goto corral_source_split_2052;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    out_$p67 := $M.114;
    goto corral_source_split_2051;

  $bb67:
    assume out_$i66 == 1;
    goto corral_source_split_2050;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i32(out_$i65, 1);
    goto corral_source_split_1976;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    out_$i65 := $M.119;
    goto corral_source_split_1975;

  $bb32:
    assume out_$i28 == 1;
    goto corral_source_split_1974;

  $bb23:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i22, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb22:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i32(out_$i22, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb77:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $M.119 := 2;
    call {:si_unique_call 435} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2074;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} out_vslice_dummy_var_60 := loopback_pointer(out_$p79);
    goto corral_source_split_2073;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    out_$p79 := $M.114;
    goto corral_source_split_2072;

  $bb76:
    assume out_$i78 == 1;
    goto corral_source_split_2071;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i77, 2);
    goto corral_source_split_2069;

  $bb75:
    assume {:verifier.code 0} true;
    out_$i77 := $M.119;
    goto corral_source_split_2068;

  $bb74:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 433} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2066;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} out_vslice_dummy_var_59 := loopback_pointer(out_$p75);
    goto corral_source_split_2065;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    out_$p75 := $M.114;
    goto corral_source_split_2064;

  $bb73:
    assume out_$i74 == 1;
    goto corral_source_split_2063;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i73, 1);
    goto corral_source_split_1980;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    out_$i73 := $M.119;
    goto corral_source_split_1979;

  $bb33:
    assume !(out_$i28 == 1);
    goto corral_source_split_1978;

  $bb83:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $M.119 := 2;
    call {:si_unique_call 439} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2087;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} out_vslice_dummy_var_62 := loopback_trigger(out_$p87, in_$i4);
    goto corral_source_split_2086;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    out_$p87 := $M.114;
    goto corral_source_split_2085;

  $bb82:
    assume out_$i86 == 1;
    goto corral_source_split_2084;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i85, 2);
    goto corral_source_split_2082;

  $bb81:
    assume {:verifier.code 0} true;
    out_$i85 := $M.119;
    goto corral_source_split_2081;

  $bb80:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 437} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2079;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} out_vslice_dummy_var_61 := loopback_trigger(out_$p83, in_$i4);
    goto corral_source_split_2078;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    out_$p83 := $M.114;
    goto corral_source_split_2077;

  $bb79:
    assume out_$i82 == 1;
    goto corral_source_split_2076;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 1);
    goto corral_source_split_1964;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    out_$i81 := $M.119;
    goto corral_source_split_1963;

  $bb25:
    assume out_$i25 == 1;
    goto corral_source_split_1962;

  $bb24:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i22, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb86:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb88:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $M.121 := out_$i96;
    call {:si_unique_call 443} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_2100;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    out_$i96 := $sub.i32(out_$i95, 1);
    goto corral_source_split_2099;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    out_$i95 := $M.121;
    goto corral_source_split_2098;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 442} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2097;

  $bb87:
    assume out_$i94 == 1;
    goto corral_source_split_2096;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i93, 0);
    goto corral_source_split_2094;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    out_$i93 := $M.126;
    goto corral_source_split_2093;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $M.126 := out_$i92;
    call {:si_unique_call 441} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_2092;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} out_$i92 := loopback_close(out_$p91);
    goto corral_source_split_2091;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    out_$p91 := $M.114;
    goto corral_source_split_2090;

  $bb85:
    assume out_$i90 == 1;
    goto corral_source_split_2089;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i89, 2);
    goto corral_source_split_1968;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    out_$i89 := $M.119;
    goto corral_source_split_1967;

  $bb27:
    assume out_$i26 == 1;
    goto corral_source_split_1966;

  $bb26:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i22, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb92:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb94:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $M.121 := out_$i104;
    call {:si_unique_call 447} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_2113;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    out_$i104 := $add.i32(out_$i103, 1);
    goto corral_source_split_2112;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    out_$i103 := $M.121;
    goto corral_source_split_2111;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $M.119 := 2;
    call {:si_unique_call 446} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2110;

  $bb93:
    assume out_$i102 == 1;
    goto corral_source_split_2109;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i101, 0);
    goto corral_source_split_2107;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    out_$i101 := $M.127;
    goto corral_source_split_2106;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $M.127 := out_$i100;
    call {:si_unique_call 445} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_2105;

  SeqInstr_18:
    goto corral_source_split_2104;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} out_$i100 := loopback_open(out_$p99);
    goto SeqInstr_17;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    out_$p99 := $M.114;
    goto corral_source_split_2103;

  $bb91:
    assume out_$i98 == 1;
    goto corral_source_split_2102;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 1);
    goto corral_source_split_1972;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    out_$i97 := $M.119;
    goto corral_source_split_1971;

  $bb29:
    assume out_$i27 == 1;
    goto corral_source_split_1970;

  $bb28:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i22, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} ldv_stop();
    goto corral_source_split_2115;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb31;

  $bb41:
    assume {:verifier.code 0} true;
    assume !(out_$i32 == 1);
    goto $bb31;

  $bb102:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} choose_timer_1();
    goto corral_source_split_2118;

  $bb101:
    assume out_$i106 == 1;
    goto corral_source_split_2117;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    out_$i106 := $ne.i32(out_$i105, 0);
    goto corral_source_split_1950;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    out_$i105 := $M.120;
    goto corral_source_split_1949;

  $bb14:
    assume out_$i18 == 1;
    goto corral_source_split_1948;

  $bb13:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i12, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb105:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb115:
    assume {:verifier.code 0} true;
    assume !(out_$i114 == 1);
    goto $bb116;

  $bb118:
    assume {:verifier.code 0} true;
    assume !(out_$i116 == 1);
    goto $bb116;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    out_$i116 := $eq.i32(out_$i115, 0);
    goto corral_source_split_2132;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    out_$i115 := $M.121;
    goto corral_source_split_2131;

  $bb114:
    assume out_$i114 == 1;
    goto corral_source_split_2130;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 2);
    goto corral_source_split_2128;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    out_$i113 := $M.122;
    goto corral_source_split_2127;

  $bb112:
    assume out_$i112 == 1;
    goto corral_source_split_2126;

  $bb107:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$i112 := $eq.i32(out_$i109, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb106:
    assume {:verifier.code 0} true;
    out_$i110 := $slt.i32(out_$i109, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_2120:
    assume {:verifier.code 1} true;
    call {:si_unique_call 450} out_$i109 := __VERIFIER_nondet_int();
    call {:si_unique_call 451} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i109);
    call {:si_unique_call 452} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i109);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb104:
    assume out_$i108 == 1;
    goto corral_source_split_2120;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i32(out_$i107, 0);
    goto corral_source_split_1954;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    out_$i107 := $M.122;
    goto corral_source_split_1953;

  $bb15:
    assume !(out_$i18 == 1);
    goto corral_source_split_1952;

  $bb123:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb128:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} ldv_initialize_snd_pcm_ops_4();
    goto corral_source_split_2159;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $M.119 := 1;
    call {:si_unique_call 464} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2158;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} ldv_dev_pm_ops_3();
    goto corral_source_split_2157;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $M.123 := 1;
    call {:si_unique_call 462} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_2156;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} ldv_initialize_snd_pcm_ops_5();
    goto corral_source_split_2155;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 460} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2154;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $M.122 := 2;
    call {:si_unique_call 459} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_2153;

  $bb127:
    assume out_$i123 == 1;
    goto corral_source_split_2152;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i32(out_$i122, 0);
    goto corral_source_split_2150;

  $bb126:
    assume {:verifier.code 0} true;
    out_$i122 := $M.128;
    goto corral_source_split_2149;

  $bb125:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    out_$i121 := $ne.i32(out_$i120, 0);
    goto corral_source_split_2144;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    out_$i120 := $M.128;
    goto corral_source_split_2143;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $M.128 := out_$i119;
    call {:si_unique_call 457} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_2142;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} out_$i119 := alsa_card_loopback_init();
    goto corral_source_split_2141;

  $bb122:
    assume out_$i118 == 1;
    goto corral_source_split_2140;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 1);
    goto corral_source_split_2124;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    out_$i117 := $M.122;
    goto corral_source_split_2123;

  $bb109:
    assume out_$i111 == 1;
    goto corral_source_split_2122;

  $bb108:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i109, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} ldv_stop();
    goto corral_source_split_2161;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb110:
    assume {:verifier.code 0} true;
    assume !(out_$i111 == 1);
    goto $bb111;

  $bb113:
    assume {:verifier.code 0} true;
    assume !(out_$i112 == 1);
    goto $bb111;

  $bb135:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb181:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb183:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $M.123 := 15;
    call {:si_unique_call 472} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(15);
    goto corral_source_split_2253;

  $bb182:
    assume out_$i153 == 1;
    goto corral_source_split_2252;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    out_$i153 := $eq.i32(out_$i152, 0);
    goto corral_source_split_2250;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    out_$i152 := $M.129;
    goto corral_source_split_2249;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $M.129 := out_$i151;
    call {:si_unique_call 471} {:cexpr "ldv_retval_21"} boogie_si_record_i32(out_$i151);
    goto corral_source_split_2248;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} out_$i151 := loopback_resume(out_$p150);
    goto corral_source_split_2247;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    out_$p150 := $M.117;
    goto corral_source_split_2246;

  $bb180:
    assume out_$i149 == 1;
    goto corral_source_split_2245;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    out_$i149 := $eq.i32(out_$i148, 12);
    goto corral_source_split_2243;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    out_$i148 := $M.123;
    goto corral_source_split_2242;

  $bb178:
    assume out_$i147 == 1;
    goto corral_source_split_2241;

  $bb176:
    assume out_$i146 == 1;
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i126, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb170:
    assume out_$i143 == 1;
    assume {:verifier.code 0} true;
    out_$i146 := $slt.i32(out_$i126, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb160:
    assume out_$i138 == 1;
    assume {:verifier.code 0} true;
    out_$i143 := $slt.i32(out_$i126, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb137:
    assume out_$i127 == 1;
    assume {:verifier.code 0} true;
    out_$i138 := $slt.i32(out_$i126, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb136:
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(out_$i126, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_2163:
    assume {:verifier.code 1} true;
    call {:si_unique_call 467} out_$i126 := __VERIFIER_nondet_int();
    call {:si_unique_call 468} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i126);
    call {:si_unique_call 469} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i126);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb134:
    assume out_$i125 == 1;
    goto corral_source_split_2163;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i32(out_$i124, 0);
    goto corral_source_split_1938;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    out_$i124 := $M.123;
    goto corral_source_split_1937;

  $bb5:
    assume out_$i14 == 1;
    goto corral_source_split_1936;

  $bb4:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i12, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb188:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb190:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $M.123 := 15;
    call {:si_unique_call 475} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(15);
    goto corral_source_split_2263;

  $bb189:
    assume out_$i159 == 1;
    goto corral_source_split_2262;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 0);
    goto corral_source_split_2260;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    out_$i158 := $M.130;
    goto corral_source_split_2259;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $M.130 := out_$i157;
    call {:si_unique_call 474} {:cexpr "ldv_retval_20"} boogie_si_record_i32(out_$i157);
    goto corral_source_split_2258;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} out_$i157 := loopback_resume(out_$p156);
    goto corral_source_split_2257;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    out_$p156 := $M.117;
    goto corral_source_split_2256;

  $bb187:
    assume out_$i155 == 1;
    goto corral_source_split_2255;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    out_$i155 := $eq.i32(out_$i154, 13);
    goto corral_source_split_2239;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    out_$i154 := $M.123;
    goto corral_source_split_2238;

  $bb177:
    assume !(out_$i146 == 1);
    goto corral_source_split_2237;

  $bb194:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb196:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $M.123 := 3;
    call {:si_unique_call 478} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_2273;

  $bb195:
    assume out_$i165 == 1;
    goto corral_source_split_2272;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i164, 0);
    goto corral_source_split_2270;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    out_$i164 := $M.131;
    goto corral_source_split_2269;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $M.131 := out_$i163;
    call {:si_unique_call 477} {:cexpr "ldv_retval_19"} boogie_si_record_i32(out_$i163);
    goto corral_source_split_2268;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} out_$i163 := loopback_suspend(out_$p162);
    goto corral_source_split_2267;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    out_$p162 := $M.117;
    goto corral_source_split_2266;

  $bb193:
    assume out_$i161 == 1;
    goto corral_source_split_2265;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 2);
    goto corral_source_split_2227;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    out_$i160 := $M.123;
    goto corral_source_split_2226;

  $bb172:
    assume out_$i144 == 1;
    goto corral_source_split_2225;

  $bb171:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    out_$i144 := $slt.i32(out_$i126, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb200:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb202:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $M.123 := 4;
    call {:si_unique_call 481} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_2283;

  $bb201:
    assume out_$i171 == 1;
    goto corral_source_split_2282;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i170, 0);
    goto corral_source_split_2280;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    out_$i170 := $M.132;
    goto corral_source_split_2279;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $M.132 := out_$i169;
    call {:si_unique_call 480} {:cexpr "ldv_retval_18"} boogie_si_record_i32(out_$i169);
    goto corral_source_split_2278;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} out_$i169 := loopback_suspend(out_$p168);
    goto corral_source_split_2277;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    out_$p168 := $M.117;
    goto corral_source_split_2276;

  $bb199:
    assume out_$i167 == 1;
    goto corral_source_split_2275;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i166, 2);
    goto corral_source_split_2231;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    out_$i166 := $M.123;
    goto corral_source_split_2230;

  $bb174:
    assume out_$i145 == 1;
    goto corral_source_split_2229;

  $bb173:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    out_$i145 := $slt.i32(out_$i126, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb206:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb208:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $M.123 := 5;
    call {:si_unique_call 484} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_2293;

  $bb207:
    assume out_$i177 == 1;
    goto corral_source_split_2292;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 0);
    goto corral_source_split_2290;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    out_$i176 := $M.133;
    goto corral_source_split_2289;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $M.133 := out_$i175;
    call {:si_unique_call 483} {:cexpr "ldv_retval_17"} boogie_si_record_i32(out_$i175);
    goto corral_source_split_2288;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} out_$i175 := loopback_suspend(out_$p174);
    goto corral_source_split_2287;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    out_$p174 := $M.117;
    goto corral_source_split_2286;

  $bb205:
    assume out_$i173 == 1;
    goto corral_source_split_2285;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i32(out_$i172, 2);
    goto corral_source_split_2235;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    out_$i172 := $M.123;
    goto corral_source_split_2234;

  $bb175:
    assume !(out_$i145 == 1);
    goto corral_source_split_2233;

  $bb212:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb214:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $M.123 := 15;
    call {:si_unique_call 487} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(15);
    goto corral_source_split_2303;

  $bb213:
    assume out_$i183 == 1;
    goto corral_source_split_2302;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i182, 0);
    goto corral_source_split_2300;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    out_$i182 := $M.134;
    goto corral_source_split_2299;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $M.134 := out_$i181;
    call {:si_unique_call 486} {:cexpr "ldv_retval_16"} boogie_si_record_i32(out_$i181);
    goto corral_source_split_2298;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} out_$i181 := loopback_resume(out_$p180);
    goto corral_source_split_2297;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    out_$p180 := $M.117;
    goto corral_source_split_2296;

  $bb211:
    assume out_$i179 == 1;
    goto corral_source_split_2295;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    out_$i179 := $eq.i32(out_$i178, 14);
    goto corral_source_split_2219;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    out_$i178 := $M.123;
    goto corral_source_split_2218;

  $bb168:
    assume out_$i142 == 1;
    goto corral_source_split_2217;

  $bb162:
    assume out_$i139 == 1;
    assume {:verifier.code 0} true;
    out_$i142 := $slt.i32(out_$i126, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb161:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    out_$i139 := $slt.i32(out_$i126, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb218:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb220:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $M.123 := 10;
    call {:si_unique_call 490} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(10);
    goto corral_source_split_2312;

  $bb219:
    assume out_$i188 == 1;
    goto corral_source_split_2311;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i187, 0);
    goto corral_source_split_2309;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    out_$i187 := $M.135;
    goto corral_source_split_2308;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $M.135 := out_$i186;
    call {:si_unique_call 489} {:cexpr "ldv_retval_15"} boogie_si_record_i32(out_$i186);
    goto corral_source_split_2307;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} out_$i186 := ldv_suspend_late_3();
    goto corral_source_split_2306;

  $bb217:
    assume out_$i185 == 1;
    goto corral_source_split_2305;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    out_$i185 := $eq.i32(out_$i184, 5);
    goto corral_source_split_2223;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    out_$i184 := $M.123;
    goto corral_source_split_2222;

  $bb169:
    assume !(out_$i142 == 1);
    goto corral_source_split_2221;

  $bb224:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb226:
    assume !(out_$i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $M.123 := 12;
    call {:si_unique_call 493} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(12);
    goto corral_source_split_2321;

  $bb225:
    assume out_$i193 == 1;
    goto corral_source_split_2320;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    out_$i193 := $eq.i32(out_$i192, 0);
    goto corral_source_split_2318;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    out_$i192 := $M.136;
    goto corral_source_split_2317;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $M.136 := out_$i191;
    call {:si_unique_call 492} {:cexpr "ldv_retval_14"} boogie_si_record_i32(out_$i191);
    goto corral_source_split_2316;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} out_$i191 := ldv_restore_early_3();
    goto corral_source_split_2315;

  $bb223:
    assume out_$i190 == 1;
    goto corral_source_split_2314;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    out_$i190 := $eq.i32(out_$i189, 7);
    goto corral_source_split_2207;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    out_$i189 := $M.123;
    goto corral_source_split_2206;

  $bb164:
    assume out_$i140 == 1;
    goto corral_source_split_2205;

  $bb163:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    out_$i140 := $slt.i32(out_$i126, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb230:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb232:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $M.123 := 14;
    call {:si_unique_call 496} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(14);
    goto corral_source_split_2330;

  $bb231:
    assume out_$i198 == 1;
    goto corral_source_split_2329;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    out_$i198 := $eq.i32(out_$i197, 0);
    goto corral_source_split_2327;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    out_$i197 := $M.137;
    goto corral_source_split_2326;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $M.137 := out_$i196;
    call {:si_unique_call 495} {:cexpr "ldv_retval_13"} boogie_si_record_i32(out_$i196);
    goto corral_source_split_2325;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} out_$i196 := ldv_resume_early_3();
    goto corral_source_split_2324;

  $bb229:
    assume out_$i195 == 1;
    goto corral_source_split_2323;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i194, 10);
    goto corral_source_split_2211;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    out_$i194 := $M.123;
    goto corral_source_split_2210;

  $bb166:
    assume out_$i141 == 1;
    goto corral_source_split_2209;

  $bb165:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    out_$i141 := $slt.i32(out_$i126, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb236:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb238:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $M.123 := 13;
    call {:si_unique_call 499} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(13);
    goto corral_source_split_2339;

  $bb237:
    assume out_$i203 == 1;
    goto corral_source_split_2338;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    out_$i203 := $eq.i32(out_$i202, 0);
    goto corral_source_split_2336;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    out_$i202 := $M.138;
    goto corral_source_split_2335;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $M.138 := out_$i201;
    call {:si_unique_call 498} {:cexpr "ldv_retval_12"} boogie_si_record_i32(out_$i201);
    goto corral_source_split_2334;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} out_$i201 := ldv_thaw_early_3();
    goto corral_source_split_2333;

  $bb235:
    assume out_$i200 == 1;
    goto corral_source_split_2332;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    out_$i200 := $eq.i32(out_$i199, 9);
    goto corral_source_split_2215;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    out_$i199 := $M.123;
    goto corral_source_split_2214;

  $bb167:
    assume !(out_$i141 == 1);
    goto corral_source_split_2213;

  $bb242:
    assume !(out_$i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb244:
    assume !(out_$i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $M.123 := 14;
    call {:si_unique_call 502} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(14);
    goto corral_source_split_2348;

  $bb243:
    assume out_$i208 == 1;
    goto corral_source_split_2347;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    out_$i208 := $eq.i32(out_$i207, 0);
    goto corral_source_split_2345;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    out_$i207 := $M.139;
    goto corral_source_split_2344;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $M.139 := out_$i206;
    call {:si_unique_call 501} {:cexpr "ldv_retval_11"} boogie_si_record_i32(out_$i206);
    goto corral_source_split_2343;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} out_$i206 := ldv_resume_noirq_3();
    goto corral_source_split_2342;

  $bb241:
    assume out_$i205 == 1;
    goto corral_source_split_2341;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    out_$i205 := $eq.i32(out_$i204, 11);
    goto corral_source_split_2199;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    out_$i204 := $M.123;
    goto corral_source_split_2198;

  $bb158:
    assume out_$i137 == 1;
    goto corral_source_split_2197;

  $bb152:
    assume out_$i134 == 1;
    assume {:verifier.code 0} true;
    out_$i137 := $slt.i32(out_$i126, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb139:
    assume out_$i128 == 1;
    assume {:verifier.code 0} true;
    out_$i134 := $slt.i32(out_$i126, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb138:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    out_$i128 := $slt.i32(out_$i126, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb248:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb250:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    goto $bb251;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $M.123 := 8;
    call {:si_unique_call 505} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(8);
    goto corral_source_split_2357;

  $bb249:
    assume out_$i213 == 1;
    goto corral_source_split_2356;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 0);
    goto corral_source_split_2354;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    out_$i212 := $M.140;
    goto corral_source_split_2353;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $M.140 := out_$i211;
    call {:si_unique_call 504} {:cexpr "ldv_retval_10"} boogie_si_record_i32(out_$i211);
    goto corral_source_split_2352;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} out_$i211 := ldv_freeze_noirq_3();
    goto corral_source_split_2351;

  $bb247:
    assume out_$i210 == 1;
    goto corral_source_split_2350;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    out_$i210 := $eq.i32(out_$i209, 4);
    goto corral_source_split_2203;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    out_$i209 := $M.123;
    goto corral_source_split_2202;

  $bb159:
    assume !(out_$i137 == 1);
    goto corral_source_split_2201;

  $bb254:
    assume !(out_$i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb256:
    assume !(out_$i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    goto $bb257;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $M.121 := out_$i220;
    call {:si_unique_call 509} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i220);
    goto corral_source_split_2369;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    out_$i220 := $add.i32(out_$i219, 1);
    goto corral_source_split_2368;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    out_$i219 := $M.121;
    goto corral_source_split_2367;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $M.123 := 2;
    call {:si_unique_call 508} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_2366;

  $bb255:
    assume out_$i218 == 1;
    goto corral_source_split_2365;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i217, 0);
    goto corral_source_split_2363;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    out_$i217 := $M.141;
    goto corral_source_split_2362;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $M.141 := out_$i216;
    call {:si_unique_call 507} {:cexpr "ldv_retval_9"} boogie_si_record_i32(out_$i216);
    goto corral_source_split_2361;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} out_$i216 := ldv_prepare_3();
    goto corral_source_split_2360;

  $bb253:
    assume out_$i215 == 1;
    goto corral_source_split_2359;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i32(out_$i214, 1);
    goto corral_source_split_2187;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    out_$i214 := $M.123;
    goto corral_source_split_2186;

  $bb154:
    assume out_$i135 == 1;
    goto corral_source_split_2185;

  $bb153:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    out_$i135 := $slt.i32(out_$i126, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb260:
    assume !(out_$i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb262:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    goto $bb263;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $M.123 := 9;
    call {:si_unique_call 512} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(9);
    goto corral_source_split_2378;

  $bb261:
    assume out_$i225 == 1;
    goto corral_source_split_2377;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    out_$i225 := $eq.i32(out_$i224, 0);
    goto corral_source_split_2375;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    out_$i224 := $M.142;
    goto corral_source_split_2374;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $M.142 := out_$i223;
    call {:si_unique_call 511} {:cexpr "ldv_retval_8"} boogie_si_record_i32(out_$i223);
    goto corral_source_split_2373;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} out_$i223 := ldv_freeze_late_3();
    goto corral_source_split_2372;

  $bb259:
    assume out_$i222 == 1;
    goto corral_source_split_2371;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb259, $bb260;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    out_$i222 := $eq.i32(out_$i221, 4);
    goto corral_source_split_2191;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    out_$i221 := $M.123;
    goto corral_source_split_2190;

  $bb156:
    assume out_$i136 == 1;
    goto corral_source_split_2189;

  $bb155:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    out_$i136 := $slt.i32(out_$i126, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb266:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb268:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    goto $bb269;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $M.123 := 13;
    call {:si_unique_call 515} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(13);
    goto corral_source_split_2387;

  $bb267:
    assume out_$i230 == 1;
    goto corral_source_split_2386;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i229, 0);
    goto corral_source_split_2384;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    out_$i229 := $M.143;
    goto corral_source_split_2383;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $M.143 := out_$i228;
    call {:si_unique_call 514} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i228);
    goto corral_source_split_2382;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} out_$i228 := ldv_thaw_noirq_3();
    goto corral_source_split_2381;

  $bb265:
    assume out_$i227 == 1;
    goto corral_source_split_2380;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    out_$i227 := $eq.i32(out_$i226, 8);
    goto corral_source_split_2195;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    out_$i226 := $M.123;
    goto corral_source_split_2194;

  $bb157:
    assume !(out_$i136 == 1);
    goto corral_source_split_2193;

  $bb272:
    assume !(out_$i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb274:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb275;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    goto $bb275;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $M.123 := 6;
    call {:si_unique_call 518} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(6);
    goto corral_source_split_2396;

  $bb273:
    assume out_$i235 == 1;
    goto corral_source_split_2395;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    out_$i235 := $eq.i32(out_$i234, 0);
    goto corral_source_split_2393;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    out_$i234 := $M.144;
    goto corral_source_split_2392;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $M.144 := out_$i233;
    call {:si_unique_call 517} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i233);
    goto corral_source_split_2391;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} out_$i233 := ldv_poweroff_noirq_3();
    goto corral_source_split_2390;

  $bb271:
    assume out_$i232 == 1;
    goto corral_source_split_2389;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    out_$i232 := $eq.i32(out_$i231, 3);
    goto corral_source_split_2179;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    out_$i231 := $M.123;
    goto corral_source_split_2178;

  $bb150:
    assume out_$i133 == 1;
    goto corral_source_split_2177;

  $bb141:
    assume out_$i129 == 1;
    assume {:verifier.code 0} true;
    out_$i133 := $slt.i32(out_$i126, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb140:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i126, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb278:
    assume !(out_$i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb280:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    goto $bb281;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $M.123 := 7;
    call {:si_unique_call 521} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(7);
    goto corral_source_split_2405;

  $bb279:
    assume out_$i240 == 1;
    goto corral_source_split_2404;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    out_$i240 := $eq.i32(out_$i239, 0);
    goto corral_source_split_2402;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    out_$i239 := $M.145;
    goto corral_source_split_2401;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $M.145 := out_$i238;
    call {:si_unique_call 520} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i238);
    goto corral_source_split_2400;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} out_$i238 := ldv_poweroff_late_3();
    goto corral_source_split_2399;

  $bb277:
    assume out_$i237 == 1;
    goto corral_source_split_2398;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    out_$i237 := $eq.i32(out_$i236, 3);
    goto corral_source_split_2183;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    out_$i236 := $M.123;
    goto corral_source_split_2182;

  $bb151:
    assume !(out_$i133 == 1);
    goto corral_source_split_2181;

  $bb284:
    assume !(out_$i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb286:
    assume !(out_$i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    goto $bb287;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $M.123 := 12;
    call {:si_unique_call 524} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(12);
    goto corral_source_split_2414;

  $bb285:
    assume out_$i245 == 1;
    goto corral_source_split_2413;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    out_$i245 := $eq.i32(out_$i244, 0);
    goto corral_source_split_2411;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    out_$i244 := $M.146;
    goto corral_source_split_2410;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $M.146 := out_$i243;
    call {:si_unique_call 523} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i243);
    goto corral_source_split_2409;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} out_$i243 := ldv_restore_noirq_3();
    goto corral_source_split_2408;

  $bb283:
    assume out_$i242 == 1;
    goto corral_source_split_2407;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb283, $bb284;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i32(out_$i241, 6);
    goto corral_source_split_2167;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    out_$i241 := $M.123;
    goto corral_source_split_2166;

  $bb143:
    assume out_$i130 == 1;
    goto corral_source_split_2165;

  $bb142:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    out_$i130 := $slt.i32(out_$i126, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb290:
    assume !(out_$i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb292:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    goto $bb293;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $M.123 := 11;
    call {:si_unique_call 527} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(11);
    goto corral_source_split_2423;

  $bb291:
    assume out_$i250 == 1;
    goto corral_source_split_2422;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    out_$i250 := $eq.i32(out_$i249, 0);
    goto corral_source_split_2420;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    out_$i249 := $M.147;
    goto corral_source_split_2419;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $M.147 := out_$i248;
    call {:si_unique_call 526} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i248);
    goto corral_source_split_2418;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} out_$i248 := ldv_suspend_noirq_3();
    goto corral_source_split_2417;

  $bb289:
    assume out_$i247 == 1;
    goto corral_source_split_2416;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    out_$i247 := $eq.i32(out_$i246, 5);
    goto corral_source_split_2171;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    out_$i246 := $M.123;
    goto corral_source_split_2170;

  $bb145:
    assume out_$i131 == 1;
    goto corral_source_split_2169;

  $bb144:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    out_$i131 := $slt.i32(out_$i126, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb296:
    assume !(out_$i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    goto $bb297;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $M.121 := out_$i255;
    call {:si_unique_call 530} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i255);
    goto corral_source_split_2430;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    out_$i255 := $sub.i32(out_$i254, 1);
    goto corral_source_split_2429;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    out_$i254 := $M.121;
    goto corral_source_split_2428;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $M.123 := 1;
    call {:si_unique_call 529} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_2427;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} out_vslice_dummy_var_63 := ldv_complete_3();
    goto corral_source_split_2426;

  $bb295:
    assume out_$i252 == 1;
    goto corral_source_split_2425;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    out_$i252 := $eq.i32(out_$i251, 15);
    goto corral_source_split_2175;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    out_$i251 := $M.123;
    goto corral_source_split_2174;

  $bb147:
    assume out_$i132 == 1;
    goto corral_source_split_2173;

  $bb146:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i126, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} ldv_stop();
    goto corral_source_split_2432;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb148:
    assume {:verifier.code 0} true;
    assume !(out_$i132 == 1);
    goto $bb149;

  $bb179:
    assume {:verifier.code 0} true;
    assume !(out_$i147 == 1);
    goto $bb149;

  $bb302:
    assume !(out_$i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb317:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb320:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb316:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb312:
    assume !(out_$i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb314:
    assume !(out_$i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb315;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    goto $bb315;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $M.121 := out_$i269;
    call {:si_unique_call 538} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i269);
    goto corral_source_split_2455;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    out_$i269 := $add.i32(out_$i268, 1);
    goto corral_source_split_2454;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    out_$i268 := $M.121;
    goto corral_source_split_2453;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $M.124 := 2;
    call {:si_unique_call 537} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_2452;

  $bb313:
    assume out_$i267 == 1;
    goto corral_source_split_2451;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    out_$i267 := $eq.i32(out_$i266, 0);
    goto corral_source_split_2449;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    out_$i266 := $M.148;
    goto corral_source_split_2448;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $M.148 := out_$i265;
    call {:si_unique_call 536} {:cexpr "ldv_retval_22"} boogie_si_record_i32(out_$i265);
    goto corral_source_split_2447;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} out_$i265 := loopback_probe(out_$p264);
    goto corral_source_split_2446;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    out_$p264 := $M.115;
    goto corral_source_split_2445;

  $bb311:
    assume out_$i263 == 1;
    goto corral_source_split_2444;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    out_$i263 := $eq.i32(out_$i262, 1);
    goto corral_source_split_2442;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    out_$i262 := $M.124;
    goto corral_source_split_2441;

  $bb309:
    assume out_$i261 == 1;
    goto corral_source_split_2440;

  $bb304:
    assume out_$i259 == 1;
    assume {:verifier.code 0} true;
    out_$i261 := $eq.i32(out_$i258, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb309, $bb310;

  $bb303:
    assume {:verifier.code 0} true;
    out_$i259 := $slt.i32(out_$i258, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  corral_source_split_2434:
    assume {:verifier.code 1} true;
    call {:si_unique_call 532} out_$i258 := __VERIFIER_nondet_int();
    call {:si_unique_call 533} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i258);
    call {:si_unique_call 534} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i258);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb301:
    assume out_$i257 == 1;
    goto corral_source_split_2434;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    out_$i257 := $ne.i32(out_$i256, 0);
    goto corral_source_split_1942;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    out_$i256 := $M.124;
    goto corral_source_split_1941;

  $bb7:
    assume out_$i15 == 1;
    goto corral_source_split_1940;

  $bb6:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i12, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb319:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb320;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    goto $bb320;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $M.121 := out_$i275;
    call {:si_unique_call 541} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i275);
    goto corral_source_split_2463;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    out_$i275 := $sub.i32(out_$i274, 1);
    goto corral_source_split_2462;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    out_$i274 := $M.121;
    goto corral_source_split_2461;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $M.124 := 1;
    call {:si_unique_call 540} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_2460;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} out_vslice_dummy_var_64 := loopback_remove(out_$p272);
    goto corral_source_split_2459;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    out_$p272 := $M.115;
    goto corral_source_split_2458;

  $bb318:
    assume out_$i271 == 1;
    goto corral_source_split_2457;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb318, $bb319;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    out_$i271 := $eq.i32(out_$i270, 2);
    goto corral_source_split_2438;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    out_$i270 := $M.124;
    goto corral_source_split_2437;

  $bb306:
    assume out_$i260 == 1;
    goto corral_source_split_2436;

  $bb305:
    assume !(out_$i259 == 1);
    assume {:verifier.code 0} true;
    out_$i260 := $eq.i32(out_$i258, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} ldv_stop();
    goto corral_source_split_2465;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb307:
    assume {:verifier.code 0} true;
    assume !(out_$i260 == 1);
    goto $bb308;

  $bb310:
    assume {:verifier.code 0} true;
    assume !(out_$i261 == 1);
    goto $bb308;

  $bb325:
    assume !(out_$i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb354:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb372:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb360:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb352:
    assume !(out_$i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    goto $bb353;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 549} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2516;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} out_vslice_dummy_var_66 := loopback_prepare(out_$p295);
    goto corral_source_split_2515;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    out_$p295 := $M.118;
    goto corral_source_split_2514;

  $bb351:
    assume out_$i294 == 1;
    goto corral_source_split_2513;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb351, $bb352;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    out_$i294 := $eq.i32(out_$i293, 1);
    goto corral_source_split_2511;

  $bb350:
    assume {:verifier.code 0} true;
    out_$i293 := $M.125;
    goto corral_source_split_2510;

  $bb349:
    assume !(out_$i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    goto $bb350;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $M.125 := 2;
    call {:si_unique_call 547} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2508;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} out_vslice_dummy_var_65 := loopback_prepare(out_$p291);
    goto corral_source_split_2507;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    out_$p291 := $M.118;
    goto corral_source_split_2506;

  $bb348:
    assume out_$i290 == 1;
    goto corral_source_split_2505;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    out_$i290 := $eq.i32(out_$i289, 2);
    goto corral_source_split_2503;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    out_$i289 := $M.125;
    goto corral_source_split_2502;

  $bb346:
    assume out_$i288 == 1;
    goto corral_source_split_2501;

  $bb344:
    assume out_$i287 == 1;
    assume {:verifier.code 0} true;
    out_$i288 := $eq.i32(out_$i278, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  $bb340:
    assume out_$i285 == 1;
    assume {:verifier.code 0} true;
    out_$i287 := $slt.i32(out_$i278, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  $bb327:
    assume out_$i279 == 1;
    assume {:verifier.code 0} true;
    out_$i285 := $slt.i32(out_$i278, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  $bb326:
    assume {:verifier.code 0} true;
    out_$i279 := $slt.i32(out_$i278, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb327, $bb328;

  corral_source_split_2467:
    assume {:verifier.code 1} true;
    call {:si_unique_call 543} out_$i278 := __VERIFIER_nondet_int();
    call {:si_unique_call 544} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i278);
    call {:si_unique_call 545} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i278);
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb324:
    assume out_$i277 == 1;
    goto corral_source_split_2467;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    out_$i277 := $ne.i32(out_$i276, 0);
    goto corral_source_split_1946;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    out_$i276 := $M.125;
    goto corral_source_split_1945;

  $bb9:
    assume out_$i16 == 1;
    goto corral_source_split_1944;

  $bb8:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i12, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb359:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb360;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    goto $bb360;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 553} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2529;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} out_vslice_dummy_var_68 := snd_pcm_lib_ioctl(out_$p303, in_$i8, in_$p6);
    goto corral_source_split_2528;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    out_$p303 := $M.118;
    goto corral_source_split_2527;

  $bb358:
    assume out_$i302 == 1;
    goto corral_source_split_2526;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    out_$i302 := $eq.i32(out_$i301, 1);
    goto corral_source_split_2524;

  $bb357:
    assume {:verifier.code 0} true;
    out_$i301 := $M.125;
    goto corral_source_split_2523;

  $bb356:
    assume !(out_$i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    goto $bb357;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $M.125 := 2;
    call {:si_unique_call 551} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2521;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} out_vslice_dummy_var_67 := snd_pcm_lib_ioctl(out_$p299, in_$i8, in_$p6);
    goto corral_source_split_2520;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    out_$p299 := $M.118;
    goto corral_source_split_2519;

  $bb355:
    assume out_$i298 == 1;
    goto corral_source_split_2518;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb355, $bb356;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    out_$i298 := $eq.i32(out_$i297, 2);
    goto corral_source_split_2499;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    out_$i297 := $M.125;
    goto corral_source_split_2498;

  $bb345:
    assume !(out_$i287 == 1);
    goto corral_source_split_2497;

  $bb365:
    assume !(out_$i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb366;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    goto $bb366;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 557} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2542;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} out_vslice_dummy_var_70 := loopback_hw_free(out_$p311);
    goto corral_source_split_2541;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    out_$p311 := $M.118;
    goto corral_source_split_2540;

  $bb364:
    assume out_$i310 == 1;
    goto corral_source_split_2539;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    out_$i310 := $eq.i32(out_$i309, 1);
    goto corral_source_split_2537;

  $bb363:
    assume {:verifier.code 0} true;
    out_$i309 := $M.125;
    goto corral_source_split_2536;

  $bb362:
    assume !(out_$i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    goto $bb363;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $M.125 := 2;
    call {:si_unique_call 555} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2534;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} out_vslice_dummy_var_69 := loopback_hw_free(out_$p307);
    goto corral_source_split_2533;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    out_$p307 := $M.118;
    goto corral_source_split_2532;

  $bb361:
    assume out_$i306 == 1;
    goto corral_source_split_2531;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    out_$i306 := $eq.i32(out_$i305, 2);
    goto corral_source_split_2491;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    out_$i305 := $M.125;
    goto corral_source_split_2490;

  $bb342:
    assume out_$i286 == 1;
    goto corral_source_split_2489;

  $bb341:
    assume !(out_$i285 == 1);
    assume {:verifier.code 0} true;
    out_$i286 := $slt.i32(out_$i278, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  $bb371:
    assume !(out_$i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    goto $bb372;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 561} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2555;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} out_vslice_dummy_var_72 := snd_pcm_lib_get_vmalloc_page(out_$p319, in_$i7);
    goto corral_source_split_2554;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    out_$p319 := $M.118;
    goto corral_source_split_2553;

  $bb370:
    assume out_$i318 == 1;
    goto corral_source_split_2552;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    out_$i318 := $eq.i32(out_$i317, 1);
    goto corral_source_split_2550;

  $bb369:
    assume {:verifier.code 0} true;
    out_$i317 := $M.125;
    goto corral_source_split_2549;

  $bb368:
    assume !(out_$i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    goto $bb369;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $M.125 := 2;
    call {:si_unique_call 559} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2547;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} out_vslice_dummy_var_71 := snd_pcm_lib_get_vmalloc_page(out_$p315, in_$i7);
    goto corral_source_split_2546;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    out_$p315 := $M.118;
    goto corral_source_split_2545;

  $bb367:
    assume out_$i314 == 1;
    goto corral_source_split_2544;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    out_$i314 := $eq.i32(out_$i313, 2);
    goto corral_source_split_2495;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    out_$i313 := $M.125;
    goto corral_source_split_2494;

  $bb343:
    assume !(out_$i286 == 1);
    goto corral_source_split_2493;

  $bb377:
    assume !(out_$i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    goto $bb378;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 565} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2568;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} out_vslice_dummy_var_74 := loopback_hw_params(out_$p327, in_$p11);
    goto corral_source_split_2567;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    out_$p327 := $M.118;
    goto corral_source_split_2566;

  $bb376:
    assume out_$i326 == 1;
    goto corral_source_split_2565;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    out_$i326 := $eq.i32(out_$i325, 1);
    goto corral_source_split_2563;

  $bb375:
    assume {:verifier.code 0} true;
    out_$i325 := $M.125;
    goto corral_source_split_2562;

  $bb374:
    assume !(out_$i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    goto $bb375;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $M.125 := 2;
    call {:si_unique_call 563} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2560;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} out_vslice_dummy_var_73 := loopback_hw_params(out_$p323, in_$p11);
    goto corral_source_split_2559;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    out_$p323 := $M.118;
    goto corral_source_split_2558;

  $bb373:
    assume out_$i322 == 1;
    goto corral_source_split_2557;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    out_$i322 := $eq.i32(out_$i321, 2);
    goto corral_source_split_2483;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    out_$i321 := $M.125;
    goto corral_source_split_2482;

  $bb338:
    assume out_$i284 == 1;
    goto corral_source_split_2481;

  $bb329:
    assume out_$i280 == 1;
    assume {:verifier.code 0} true;
    out_$i284 := $slt.i32(out_$i278, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  $bb328:
    assume !(out_$i279 == 1);
    assume {:verifier.code 0} true;
    out_$i280 := $slt.i32(out_$i278, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  $bb383:
    assume !(out_$i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb384;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    goto $bb384;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 569} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2581;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} out_vslice_dummy_var_76 := loopback_pointer(out_$p335);
    goto corral_source_split_2580;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    out_$p335 := $M.118;
    goto corral_source_split_2579;

  $bb382:
    assume out_$i334 == 1;
    goto corral_source_split_2578;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    out_$i334 := $eq.i32(out_$i333, 1);
    goto corral_source_split_2576;

  $bb381:
    assume {:verifier.code 0} true;
    out_$i333 := $M.125;
    goto corral_source_split_2575;

  $bb380:
    assume !(out_$i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    goto $bb381;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $M.125 := 2;
    call {:si_unique_call 567} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2573;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} out_vslice_dummy_var_75 := loopback_pointer(out_$p331);
    goto corral_source_split_2572;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    out_$p331 := $M.118;
    goto corral_source_split_2571;

  $bb379:
    assume out_$i330 == 1;
    goto corral_source_split_2570;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb379, $bb380;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    out_$i330 := $eq.i32(out_$i329, 2);
    goto corral_source_split_2487;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    out_$i329 := $M.125;
    goto corral_source_split_2486;

  $bb339:
    assume !(out_$i284 == 1);
    goto corral_source_split_2485;

  $bb389:
    assume !(out_$i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    goto $bb390;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 573} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2594;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} out_vslice_dummy_var_78 := loopback_trigger(out_$p343, in_$i9);
    goto corral_source_split_2593;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    out_$p343 := $M.118;
    goto corral_source_split_2592;

  $bb388:
    assume out_$i342 == 1;
    goto corral_source_split_2591;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb388, $bb389;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    out_$i342 := $eq.i32(out_$i341, 1);
    goto corral_source_split_2589;

  $bb387:
    assume {:verifier.code 0} true;
    out_$i341 := $M.125;
    goto corral_source_split_2588;

  $bb386:
    assume !(out_$i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    goto $bb387;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $M.125 := 2;
    call {:si_unique_call 571} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2586;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} out_vslice_dummy_var_77 := loopback_trigger(out_$p339, in_$i9);
    goto corral_source_split_2585;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    out_$p339 := $M.118;
    goto corral_source_split_2584;

  $bb385:
    assume out_$i338 == 1;
    goto corral_source_split_2583;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb385, $bb386;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    out_$i338 := $eq.i32(out_$i337, 2);
    goto corral_source_split_2471;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    out_$i337 := $M.125;
    goto corral_source_split_2470;

  $bb331:
    assume out_$i281 == 1;
    goto corral_source_split_2469;

  $bb330:
    assume !(out_$i280 == 1);
    assume {:verifier.code 0} true;
    out_$i281 := $slt.i32(out_$i278, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  $bb392:
    assume !(out_$i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb394:
    assume !(out_$i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    goto $bb395;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $M.121 := out_$i352;
    call {:si_unique_call 577} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i352);
    goto corral_source_split_2607;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    out_$i352 := $sub.i32(out_$i351, 1);
    goto corral_source_split_2606;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    out_$i351 := $M.121;
    goto corral_source_split_2605;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $M.125 := 1;
    call {:si_unique_call 576} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2604;

  $bb393:
    assume out_$i350 == 1;
    goto corral_source_split_2603;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb393, $bb394;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    out_$i350 := $eq.i32(out_$i349, 0);
    goto corral_source_split_2601;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    out_$i349 := $M.149;
    goto corral_source_split_2600;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $M.149 := out_$i348;
    call {:si_unique_call 575} {:cexpr "ldv_retval_24"} boogie_si_record_i32(out_$i348);
    goto corral_source_split_2599;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} out_$i348 := loopback_close(out_$p347);
    goto corral_source_split_2598;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    out_$p347 := $M.118;
    goto corral_source_split_2597;

  $bb391:
    assume out_$i346 == 1;
    goto corral_source_split_2596;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb391, $bb392;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    out_$i346 := $eq.i32(out_$i345, 2);
    goto corral_source_split_2475;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    out_$i345 := $M.125;
    goto corral_source_split_2474;

  $bb333:
    assume out_$i282 == 1;
    goto corral_source_split_2473;

  $bb332:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    out_$i282 := $slt.i32(out_$i278, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb333, $bb334;

  $bb398:
    assume !(out_$i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb401:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb400:
    assume !(out_$i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb401;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    goto $bb401;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $M.121 := out_$i360;
    call {:si_unique_call 581} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i360);
    goto corral_source_split_2620;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    out_$i360 := $add.i32(out_$i359, 1);
    goto corral_source_split_2619;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    out_$i359 := $M.121;
    goto corral_source_split_2618;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $M.125 := 2;
    call {:si_unique_call 580} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2617;

  $bb399:
    assume out_$i358 == 1;
    goto corral_source_split_2616;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb399, $bb400;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    out_$i358 := $eq.i32(out_$i357, 0);
    goto corral_source_split_2614;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    out_$i357 := $M.150;
    goto corral_source_split_2613;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $M.150 := out_$i356;
    call {:si_unique_call 579} {:cexpr "ldv_retval_23"} boogie_si_record_i32(out_$i356);
    goto corral_source_split_2612;

  SeqInstr_21:
    goto corral_source_split_2611;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} out_$i356 := loopback_open(out_$p355);
    goto SeqInstr_20;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    out_$p355 := $M.118;
    goto corral_source_split_2610;

  $bb397:
    assume out_$i354 == 1;
    goto corral_source_split_2609;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb397, $bb398;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    out_$i354 := $eq.i32(out_$i353, 1);
    goto corral_source_split_2479;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    out_$i353 := $M.125;
    goto corral_source_split_2478;

  $bb335:
    assume out_$i283 == 1;
    goto corral_source_split_2477;

  $bb334:
    assume !(out_$i282 == 1);
    assume {:verifier.code 0} true;
    out_$i283 := $eq.i32(out_$i278, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} ldv_stop();
    goto corral_source_split_2622;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb336:
    assume {:verifier.code 0} true;
    assume !(out_$i283 == 1);
    goto $bb337;

  $bb347:
    assume {:verifier.code 0} true;
    assume !(out_$i288 == 1);
    goto $bb337;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} ldv_stop();
    goto corral_source_split_2624;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i16 == 1);
    goto $bb11;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i19 == 1);
    goto $bb11;

  $bb100_dummy:
    call {:si_unique_call 1} out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i37, out_$i38, out_$p39, out_$i41, out_$i42, out_$p43, out_$i45, out_$i46, out_$p47, out_$i49, out_$i50, out_$p51, out_$i53, out_$i54, out_$p55, out_$i57, out_$i58, out_$p59, out_$i61, out_$i62, out_$p63, out_$i65, out_$i66, out_$p67, out_$i69, out_$i70, out_$p71, out_$i73, out_$i74, out_$p75, out_$i77, out_$i78, out_$p79, out_$i81, out_$i82, out_$p83, out_$i85, out_$i86, out_$p87, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$p291, out_$i293, out_$i294, out_$p295, out_$i297, out_$i298, out_$p299, out_$i301, out_$i302, out_$p303, out_$i305, out_$i306, out_$p307, out_$i309, out_$i310, out_$p311, out_$i313, out_$i314, out_$p315, out_$i317, out_$i318, out_$p319, out_$i321, out_$i322, out_$p323, out_$i325, out_$i326, out_$p327, out_$i329, out_$i330, out_$p331, out_$i333, out_$i334, out_$p335, out_$i337, out_$i338, out_$p339, out_$i341, out_$i342, out_$p343, out_$i345, out_$i346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$p355, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78 := main_loop_$bb1(in_$p1, in_$i2, in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$p11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i37, out_$i38, out_$p39, out_$i41, out_$i42, out_$p43, out_$i45, out_$i46, out_$p47, out_$i49, out_$i50, out_$p51, out_$i53, out_$i54, out_$p55, out_$i57, out_$i58, out_$p59, out_$i61, out_$i62, out_$p63, out_$i65, out_$i66, out_$p67, out_$i69, out_$i70, out_$p71, out_$i73, out_$i74, out_$p75, out_$i77, out_$i78, out_$p79, out_$i81, out_$i82, out_$p83, out_$i85, out_$i86, out_$p87, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$p180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$p272, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$p291, out_$i293, out_$i294, out_$p295, out_$i297, out_$i298, out_$p299, out_$i301, out_$i302, out_$p303, out_$i305, out_$i306, out_$p307, out_$i309, out_$i310, out_$p311, out_$i313, out_$i314, out_$p315, out_$i317, out_$i318, out_$p319, out_$i321, out_$i322, out_$p323, out_$i325, out_$i326, out_$p327, out_$i329, out_$i330, out_$p331, out_$i333, out_$i334, out_$p335, out_$i337, out_$i338, out_$p339, out_$i341, out_$i342, out_$p343, out_$i345, out_$i346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$p355, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_vslice_dummy_var_49, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52, out_vslice_dummy_var_53, out_vslice_dummy_var_54, out_vslice_dummy_var_55, out_vslice_dummy_var_56, out_vslice_dummy_var_57, out_vslice_dummy_var_58, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p1: ref, in_$i2: i32, in_$p3: ref, in_$i4: i32, in_$i5: i64, in_$p6: ref, in_$i7: i64, in_$i8: i32, in_$i9: i32, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$p35: ref, in_$i37: i32, in_$i38: i1, in_$p39: ref, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$i77: i32, in_$i78: i1, in_$p79: ref, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$i85: i32, in_$i86: i1, in_$p87: ref, in_$i89: i32, in_$i90: i1, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$i106: i1, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i32, in_$i114: i1, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i32, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$i124: i32, in_$i125: i1, in_$i126: i32, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$i141: i1, in_$i142: i1, in_$i143: i1, in_$i144: i1, in_$i145: i1, in_$i146: i1, in_$i147: i1, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i151: i32, in_$i152: i32, in_$i153: i1, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i32, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i32, in_$i165: i1, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i169: i32, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$i175: i32, in_$i176: i32, in_$i177: i1, in_$i178: i32, in_$i179: i1, in_$p180: ref, in_$i181: i32, in_$i182: i32, in_$i183: i1, in_$i184: i32, in_$i185: i1, in_$i186: i32, in_$i187: i32, in_$i188: i1, in_$i189: i32, in_$i190: i1, in_$i191: i32, in_$i192: i32, in_$i193: i1, in_$i194: i32, in_$i195: i1, in_$i196: i32, in_$i197: i32, in_$i198: i1, in_$i199: i32, in_$i200: i1, in_$i201: i32, in_$i202: i32, in_$i203: i1, in_$i204: i32, in_$i205: i1, in_$i206: i32, in_$i207: i32, in_$i208: i1, in_$i209: i32, in_$i210: i1, in_$i211: i32, in_$i212: i32, in_$i213: i1, in_$i214: i32, in_$i215: i1, in_$i216: i32, in_$i217: i32, in_$i218: i1, in_$i219: i32, in_$i220: i32, in_$i221: i32, in_$i222: i1, in_$i223: i32, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$i228: i32, in_$i229: i32, in_$i230: i1, in_$i231: i32, in_$i232: i1, in_$i233: i32, in_$i234: i32, in_$i235: i1, in_$i236: i32, in_$i237: i1, in_$i238: i32, in_$i239: i32, in_$i240: i1, in_$i241: i32, in_$i242: i1, in_$i243: i32, in_$i244: i32, in_$i245: i1, in_$i246: i32, in_$i247: i1, in_$i248: i32, in_$i249: i32, in_$i250: i1, in_$i251: i32, in_$i252: i1, in_$i254: i32, in_$i255: i32, in_$i256: i32, in_$i257: i1, in_$i258: i32, in_$i259: i1, in_$i260: i1, in_$i261: i1, in_$i262: i32, in_$i263: i1, in_$p264: ref, in_$i265: i32, in_$i266: i32, in_$i267: i1, in_$i268: i32, in_$i269: i32, in_$i270: i32, in_$i271: i1, in_$p272: ref, in_$i274: i32, in_$i275: i32, in_$i276: i32, in_$i277: i1, in_$i278: i32, in_$i279: i1, in_$i280: i1, in_$i281: i1, in_$i282: i1, in_$i283: i1, in_$i284: i1, in_$i285: i1, in_$i286: i1, in_$i287: i1, in_$i288: i1, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$i293: i32, in_$i294: i1, in_$p295: ref, in_$i297: i32, in_$i298: i1, in_$p299: ref, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$i309: i32, in_$i310: i1, in_$p311: ref, in_$i313: i32, in_$i314: i1, in_$p315: ref, in_$i317: i32, in_$i318: i1, in_$p319: ref, in_$i321: i32, in_$i322: i1, in_$p323: ref, in_$i325: i32, in_$i326: i1, in_$p327: ref, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$i333: i32, in_$i334: i1, in_$p335: ref, in_$i337: i32, in_$i338: i1, in_$p339: ref, in_$i341: i32, in_$i342: i1, in_$p343: ref, in_$i345: i32, in_$i346: i1, in_$p347: ref, in_$i348: i32, in_$i349: i32, in_$i350: i1, in_$i351: i32, in_$i352: i32, in_$i353: i32, in_$i354: i1, in_$p355: ref, in_$i356: i32, in_$i357: i32, in_$i358: i1, in_$i359: i32, in_$i360: i32, in_vslice_dummy_var_49: i32, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32, in_vslice_dummy_var_52: i32, in_vslice_dummy_var_53: i32, in_vslice_dummy_var_54: i32, in_vslice_dummy_var_55: ref, in_vslice_dummy_var_56: ref, in_vslice_dummy_var_57: i32, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_59: i64, in_vslice_dummy_var_60: i64, in_vslice_dummy_var_61: i32, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: ref, in_vslice_dummy_var_72: ref, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i64, in_vslice_dummy_var_76: i64, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32) returns (out_$i12: i32, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$p35: ref, out_$i37: i32, out_$i38: i1, out_$p39: ref, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$i77: i32, out_$i78: i1, out_$p79: ref, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$i85: i32, out_$i86: i1, out_$p87: ref, out_$i89: i32, out_$i90: i1, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$i106: i1, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i32, out_$i114: i1, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i32, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$i124: i32, out_$i125: i1, out_$i126: i32, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$i141: i1, out_$i142: i1, out_$i143: i1, out_$i144: i1, out_$i145: i1, out_$i146: i1, out_$i147: i1, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i151: i32, out_$i152: i32, out_$i153: i1, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i32, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i32, out_$i165: i1, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i169: i32, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$i175: i32, out_$i176: i32, out_$i177: i1, out_$i178: i32, out_$i179: i1, out_$p180: ref, out_$i181: i32, out_$i182: i32, out_$i183: i1, out_$i184: i32, out_$i185: i1, out_$i186: i32, out_$i187: i32, out_$i188: i1, out_$i189: i32, out_$i190: i1, out_$i191: i32, out_$i192: i32, out_$i193: i1, out_$i194: i32, out_$i195: i1, out_$i196: i32, out_$i197: i32, out_$i198: i1, out_$i199: i32, out_$i200: i1, out_$i201: i32, out_$i202: i32, out_$i203: i1, out_$i204: i32, out_$i205: i1, out_$i206: i32, out_$i207: i32, out_$i208: i1, out_$i209: i32, out_$i210: i1, out_$i211: i32, out_$i212: i32, out_$i213: i1, out_$i214: i32, out_$i215: i1, out_$i216: i32, out_$i217: i32, out_$i218: i1, out_$i219: i32, out_$i220: i32, out_$i221: i32, out_$i222: i1, out_$i223: i32, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$i228: i32, out_$i229: i32, out_$i230: i1, out_$i231: i32, out_$i232: i1, out_$i233: i32, out_$i234: i32, out_$i235: i1, out_$i236: i32, out_$i237: i1, out_$i238: i32, out_$i239: i32, out_$i240: i1, out_$i241: i32, out_$i242: i1, out_$i243: i32, out_$i244: i32, out_$i245: i1, out_$i246: i32, out_$i247: i1, out_$i248: i32, out_$i249: i32, out_$i250: i1, out_$i251: i32, out_$i252: i1, out_$i254: i32, out_$i255: i32, out_$i256: i32, out_$i257: i1, out_$i258: i32, out_$i259: i1, out_$i260: i1, out_$i261: i1, out_$i262: i32, out_$i263: i1, out_$p264: ref, out_$i265: i32, out_$i266: i32, out_$i267: i1, out_$i268: i32, out_$i269: i32, out_$i270: i32, out_$i271: i1, out_$p272: ref, out_$i274: i32, out_$i275: i32, out_$i276: i32, out_$i277: i1, out_$i278: i32, out_$i279: i1, out_$i280: i1, out_$i281: i1, out_$i282: i1, out_$i283: i1, out_$i284: i1, out_$i285: i1, out_$i286: i1, out_$i287: i1, out_$i288: i1, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$i293: i32, out_$i294: i1, out_$p295: ref, out_$i297: i32, out_$i298: i1, out_$p299: ref, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$i309: i32, out_$i310: i1, out_$p311: ref, out_$i313: i32, out_$i314: i1, out_$p315: ref, out_$i317: i32, out_$i318: i1, out_$p319: ref, out_$i321: i32, out_$i322: i1, out_$p323: ref, out_$i325: i32, out_$i326: i1, out_$p327: ref, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$i333: i32, out_$i334: i1, out_$p335: ref, out_$i337: i32, out_$i338: i1, out_$p339: ref, out_$i341: i32, out_$i342: i1, out_$p343: ref, out_$i345: i32, out_$i346: i1, out_$p347: ref, out_$i348: i32, out_$i349: i32, out_$i350: i1, out_$i351: i32, out_$i352: i32, out_$i353: i32, out_$i354: i1, out_$p355: ref, out_$i356: i32, out_$i357: i32, out_$i358: i1, out_$i359: i32, out_$i360: i32, out_vslice_dummy_var_49: i32, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32, out_vslice_dummy_var_52: i32, out_vslice_dummy_var_53: i32, out_vslice_dummy_var_54: i32, out_vslice_dummy_var_55: ref, out_vslice_dummy_var_56: ref, out_vslice_dummy_var_57: i32, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_59: i64, out_vslice_dummy_var_60: i64, out_vslice_dummy_var_61: i32, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: ref, out_vslice_dummy_var_72: ref, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i64, out_vslice_dummy_var_76: i64, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32);
  modifies $M.119, $M.0, $M.27, $M.28, $CurrAddr, $M.29, $M.31, $M.33, $M.35, $M.121, $M.126, $M.127, $M.30, $M.32, $M.34, $M.36, assertsPassed, $M.114, $M.117, $M.123, $M.118, $M.125, $M.122, $M.128, $M.152, $M.124, $M.115, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.4, $M.11, $M.12, $M.149, $M.150;



implementation {:SIextraRecBound 32} alsa_card_loopback_init_loop_$bb5(in_$i5: i64, in_$p6: ref, in_$i7: i8, in_$i8: i1, in_$p10: ref, in_$p11: ref, in_$i12: i1, in_$i13: i8, in_$i14: i1, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i9: i32, in_$i21: i32, in_$i22: i1, in_$i3: i32, in_$i4: i32, in_$i23: i32) returns (out_$i5: i64, out_$p6: ref, out_$i7: i8, out_$i8: i1, out_$p10: ref, out_$p11: ref, out_$i12: i1, out_$i13: i8, out_$i14: i1, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i9: i32, out_$i21: i32, out_$i22: i1, out_$i3: i32, out_$i4: i32, out_$i23: i32)
{

  entry:
    out_$i5, out_$p6, out_$i7, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i9, out_$i21, out_$i22, out_$i3, out_$i4, out_$i23 := in_$i5, in_$p6, in_$i7, in_$i8, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i9, in_$i21, in_$i22, in_$i3, in_$i4, in_$i23;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2639;

  $bb17:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i3, out_$i4 := out_$i21, out_$i9;
    goto $bb17_dummy;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    out_$i23 := out_$i9;
    assume true;
    goto $bb17;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    out_$i22 := $sle.i32(out_$i21, 31);
    goto corral_source_split_2650;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i3, 1);
    call {:si_unique_call 587} {:cexpr "i"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_2649;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2648;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i4;
    goto $bb9;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i20;
    goto $bb9;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i4;
    goto $bb9;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i4;
    goto $bb9;

  $bb11:
    assume out_$i14 == 1;
    goto corral_source_split_2658;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    out_$i14 := $trunc.i8.i1(out_$i13);
    goto corral_source_split_2656;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i1.i8(out_$i12);
    call {:si_unique_call 590} {:cexpr "tmp"} boogie_si_record_i8(out_$i13);
    goto corral_source_split_2655;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} out_$i12 := IS_ERR(out_$p11);
    goto corral_source_split_2654;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_2653;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} out_$p10 := platform_device_register_simple(.str.1, out_$i3, $0.ref, 0);
    goto corral_source_split_2652;

  $bb7:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    out_$i8 := $trunc.i8.i1(out_$i7);
    goto corral_source_split_2644;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i8($M.151, out_$p6);
    goto corral_source_split_2643;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(out_$i5, 1));
    goto corral_source_split_2642;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i3);
    goto corral_source_split_2641;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} platform_device_unregister(out_$p10);
    goto corral_source_split_2665;

  $bb14:
    assume out_$i17 == 1;
    goto corral_source_split_2664;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i64(out_$i16, 0);
    goto corral_source_split_2662;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_2661;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} out_$p15 := platform_get_drvdata(out_$p10);
    goto corral_source_split_2660;

  $bb12:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i4, 1);
    call {:si_unique_call 593} {:cexpr "cards"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_2670;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $M.152 := $store.ref($M.152, out_$p19, out_$p10);
    goto corral_source_split_2669;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(out_$i18, 8));
    goto corral_source_split_2668;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i3);
    goto corral_source_split_2667;

  $bb15:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume !(out_$i8 == 1);
    goto corral_source_split_2646;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i5, out_$p6, out_$i7, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i9, out_$i21, out_$i22, out_$i3, out_$i4, out_$i23 := alsa_card_loopback_init_loop_$bb5(out_$i5, out_$p6, out_$i7, out_$i8, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i9, out_$i21, out_$i22, out_$i3, out_$i4, out_$i23);
    return;

  exit:
    return;
}



procedure alsa_card_loopback_init_loop_$bb5(in_$i5: i64, in_$p6: ref, in_$i7: i8, in_$i8: i1, in_$p10: ref, in_$p11: ref, in_$i12: i1, in_$i13: i8, in_$i14: i1, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i9: i32, in_$i21: i32, in_$i22: i1, in_$i3: i32, in_$i4: i32, in_$i23: i32) returns (out_$i5: i64, out_$p6: ref, out_$i7: i8, out_$i8: i1, out_$p10: ref, out_$p11: ref, out_$i12: i1, out_$i13: i8, out_$i14: i1, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i9: i32, out_$i21: i32, out_$i22: i1, out_$i3: i32, out_$i4: i32, out_$i23: i32);
  modifies $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $CurrAddr, $M.152;


