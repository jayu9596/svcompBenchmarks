var $M.0: [ref]i8;

var $M.2: [ref]i8;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]ref;

var $M.7: [ref]i24;

var $M.8: [ref]i8;

var $M.9: [ref]i8;

var $M.10: [ref]ref;

var $M.11: [ref]i8;

var $M.12: [ref]i32;

var $M.13: [ref]i32;

var $M.14: [ref]i32;

var $M.15: [ref]i32;

var $M.16: [ref]i16;

var $M.17: [ref]i16;

var $M.18: [ref]i16;

var $M.19: [ref]i16;

var $M.20: [ref]i16;

var $M.21: [ref]i16;

var $M.22: [ref]i16;

var $M.23: [ref]i16;

var $M.24: [ref]i32;

var $M.25: [ref]i32;

var $M.26: [ref]i8;

var $M.27: [ref]i8;

var $M.28: [ref]i64;

var $M.29: [ref]i8;

var $M.30: i8;

var $M.31: ref;

var $M.32: i32;

var $M.33: [ref]ref;

var $M.34: [ref]ref;

var $M.35: [ref]ref;

var $M.36: [ref]ref;

var $M.37: [ref]ref;

var $M.38: [ref]i24;

var $M.39: [ref]i8;

var $M.40: [ref]i64;

var $M.41: [ref]i32;

var $M.42: [ref]i8;

var $M.43: [ref]i32;

var $M.44: ref;

var $M.45: ref;

var $M.46: ref;

var $M.47: ref;

var $M.48: ref;

var $M.49: ref;

var $M.50: ref;

var $M.51: ref;

var $M.52: ref;

var $M.53: ref;

var $M.54: ref;

var $M.55: ref;

var $M.56: ref;

var $M.57: ref;

var $M.58: ref;

var $M.59: ref;

var $M.60: ref;

var $M.61: ref;

var $M.62: ref;

var $M.63: ref;

var $M.64: [ref]i8;

var $M.65: [ref]i8;

var $M.66: [ref]i8;

var $M.67: [ref]i8;

var $M.68: i32;

var $M.69: i32;

var $M.70: i32;

var $M.71: i32;

var $M.72: i32;

var $M.73: i32;

var $M.74: i32;

var $M.75: i32;

var $M.76: i32;

var $M.77: i32;

var $M.78: i32;

var $M.79: i32;

var $M.80: i32;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: i32;

var $M.87: i32;

var $M.88: i32;

var $M.89: i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: i32;

var $M.93: i32;

var $M.94: i32;

var $M.95: i32;

var $M.96: i32;

var $M.97: i32;

var $M.101: [ref]i8;

var $M.153: [ref]i8;

var $M.154: [ref]i8;

var $M.155: [ref]i8;

var $M.156: [ref]i8;

var $M.157: [ref]i8;

var $M.158: [ref]i8;

var $M.159: [ref]i8;

var $M.160: [ref]i8;

var $M.188: [ref]i8;

var $M.189: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 417827);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const __ksymtab_cdc_ncm_bind_common: ref;

axiom __ksymtab_cdc_ncm_bind_common == $sub.ref(0, 2068);

const {:count 20} __kstrtab_cdc_ncm_bind_common: ref;

axiom __kstrtab_cdc_ncm_bind_common == $sub.ref(0, 3112);

const {:count 8} cdc_ncm_gstrings_stats: ref;

axiom cdc_ncm_gstrings_stats == $sub.ref(0, 4456);

const cdc_ncm_info: ref;

axiom cdc_ncm_info == $sub.ref(0, 5608);

const wwan_noarp_info: ref;

axiom wwan_noarp_info == $sub.ref(0, 6760);

const wwan_info: ref;

axiom wwan_info == $sub.ref(0, 7912);

const {:count 7} cdc_devs: ref;

axiom cdc_devs == $sub.ref(0, 9160);

const cdc_ncm_driver: ref;

axiom cdc_ncm_driver == $sub.ref(0, 10488);

const {:count 17} __kstrtab_cdc_ncm_rx_fixup: ref;

axiom __kstrtab_cdc_ncm_rx_fixup == $sub.ref(0, 11529);

const {:count 24} __kstrtab_cdc_ncm_rx_verify_ndp16: ref;

axiom __kstrtab_cdc_ncm_rx_verify_ndp16 == $sub.ref(0, 12577);

const {:count 24} __kstrtab_cdc_ncm_rx_verify_nth16: ref;

axiom __kstrtab_cdc_ncm_rx_verify_nth16 == $sub.ref(0, 13625);

const {:count 17} __kstrtab_cdc_ncm_tx_fixup: ref;

axiom __kstrtab_cdc_ncm_tx_fixup == $sub.ref(0, 14666);

const {:count 22} __kstrtab_cdc_ncm_fill_tx_frame: ref;

axiom __kstrtab_cdc_ncm_fill_tx_frame == $sub.ref(0, 15712);

const {:count 26} __kstrtab_cdc_ncm_select_altsetting: ref;

axiom __kstrtab_cdc_ncm_select_altsetting == $sub.ref(0, 16762);

const prefer_mbim: ref;

axiom prefer_mbim == $sub.ref(0, 17787);

const {:count 15} __kstrtab_cdc_ncm_unbind: ref;

axiom __kstrtab_cdc_ncm_unbind == $sub.ref(0, 18826);

const dev_attr_wNtbOutMaxDatagrams: ref;

axiom dev_attr_wNtbOutMaxDatagrams == $sub.ref(0, 19898);

const dev_attr_wNdpOutAlignment: ref;

axiom dev_attr_wNdpOutAlignment == $sub.ref(0, 20970);

const dev_attr_wNdpOutPayloadRemainder: ref;

axiom dev_attr_wNdpOutPayloadRemainder == $sub.ref(0, 22042);

const dev_attr_wNdpOutDivisor: ref;

axiom dev_attr_wNdpOutDivisor == $sub.ref(0, 23114);

const dev_attr_dwNtbOutMaxSize: ref;

axiom dev_attr_dwNtbOutMaxSize == $sub.ref(0, 24186);

const dev_attr_wNdpInAlignment: ref;

axiom dev_attr_wNdpInAlignment == $sub.ref(0, 25258);

const dev_attr_wNdpInPayloadRemainder: ref;

axiom dev_attr_wNdpInPayloadRemainder == $sub.ref(0, 26330);

const dev_attr_wNdpInDivisor: ref;

axiom dev_attr_wNdpInDivisor == $sub.ref(0, 27402);

const dev_attr_dwNtbInMaxSize: ref;

axiom dev_attr_dwNtbInMaxSize == $sub.ref(0, 28474);

const dev_attr_bmNtbFormatsSupported: ref;

axiom dev_attr_bmNtbFormatsSupported == $sub.ref(0, 29546);

const dev_attr_tx_timer_usecs: ref;

axiom dev_attr_tx_timer_usecs == $sub.ref(0, 30618);

const dev_attr_tx_max: ref;

axiom dev_attr_tx_max == $sub.ref(0, 31690);

const dev_attr_rx_max: ref;

axiom dev_attr_rx_max == $sub.ref(0, 32762);

const dev_attr_min_tx_pkt: ref;

axiom dev_attr_min_tx_pkt == $sub.ref(0, 33834);

const {:count 15} cdc_ncm_sysfs_attrs: ref;

axiom cdc_ncm_sysfs_attrs == $sub.ref(0, 34978);

const cdc_ncm_sysfs_attr_group: ref;

axiom cdc_ncm_sysfs_attr_group == $sub.ref(0, 36034);

const cdc_ncm_ethtool_ops: ref;

axiom cdc_ncm_ethtool_ops == $sub.ref(0, 37434);

const LDV_SKBS: ref;

axiom LDV_SKBS == $sub.ref(0, 38466);

const {:count 15} set_impl: ref;

axiom set_impl == $sub.ref(0, 39610);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 40638);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 41666);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 42694);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 43722);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 44750);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 45778);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 46806);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 47834);

const __mod_usb__cdc_devs_device_table: ref;

axiom __mod_usb__cdc_devs_device_table == $sub.ref(0, 48890);

const dev_attr_rx_max_group1: ref;

axiom dev_attr_rx_max_group1 == $sub.ref(0, 49922);

const dev_attr_rx_max_group0: ref;

axiom dev_attr_rx_max_group0 == $sub.ref(0, 50954);

const dev_attr_tx_max_group1: ref;

axiom dev_attr_tx_max_group1 == $sub.ref(0, 51986);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 53014);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 54042);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 55070);

const dev_attr_tx_max_group0: ref;

axiom dev_attr_tx_max_group0 == $sub.ref(0, 56102);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 57130);

const dev_attr_min_tx_pkt_group0: ref;

axiom dev_attr_min_tx_pkt_group0 == $sub.ref(0, 58162);

const cdc_ncm_info_group0: ref;

axiom cdc_ncm_info_group0 == $sub.ref(0, 59194);

const cdc_ncm_ethtool_ops_group0: ref;

axiom cdc_ncm_ethtool_ops_group0 == $sub.ref(0, 60226);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 61254);

const dev_attr_tx_timer_usecs_group1: ref;

axiom dev_attr_tx_timer_usecs_group1 == $sub.ref(0, 62286);

const cdc_ncm_info_group1: ref;

axiom cdc_ncm_info_group1 == $sub.ref(0, 63318);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 64346);

const ldv_state_variable_19: ref;

axiom ldv_state_variable_19 == $sub.ref(0, 65374);

const cdc_ncm_info_group2: ref;

axiom cdc_ncm_info_group2 == $sub.ref(0, 66406);

const wwan_noarp_info_group0: ref;

axiom wwan_noarp_info_group0 == $sub.ref(0, 67438);

const ldv_state_variable_18: ref;

axiom ldv_state_variable_18 == $sub.ref(0, 68466);

const ldv_state_variable_17: ref;

axiom ldv_state_variable_17 == $sub.ref(0, 69494);

const dev_attr_min_tx_pkt_group1: ref;

axiom dev_attr_min_tx_pkt_group1 == $sub.ref(0, 70526);

const dev_attr_tx_timer_usecs_group0: ref;

axiom dev_attr_tx_timer_usecs_group0 == $sub.ref(0, 71558);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 72586);

const ldv_state_variable_14: ref;

axiom ldv_state_variable_14 == $sub.ref(0, 73614);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 74642);

const wwan_noarp_info_group1: ref;

axiom wwan_noarp_info_group1 == $sub.ref(0, 75674);

const ldv_state_variable_12: ref;

axiom ldv_state_variable_12 == $sub.ref(0, 76702);

const wwan_info_group0: ref;

axiom wwan_info_group0 == $sub.ref(0, 77734);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 78762);

const ldv_state_variable_13: ref;

axiom ldv_state_variable_13 == $sub.ref(0, 79790);

const cdc_ncm_ethtool_ops_group1: ref;

axiom cdc_ncm_ethtool_ops_group1 == $sub.ref(0, 80822);

const ldv_state_variable_16: ref;

axiom ldv_state_variable_16 == $sub.ref(0, 81850);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 82878);

const wwan_info_group1: ref;

axiom wwan_info_group1 == $sub.ref(0, 83910);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 84938);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 85966);

const wwan_info_group2: ref;

axiom wwan_info_group2 == $sub.ref(0, 86998);

const cdc_ncm_driver_group1: ref;

axiom cdc_ncm_driver_group1 == $sub.ref(0, 88030);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 89058);

const ldv_state_variable_15: ref;

axiom ldv_state_variable_15 == $sub.ref(0, 90086);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 91114);

const wwan_noarp_info_group2: ref;

axiom wwan_noarp_info_group2 == $sub.ref(0, 92146);

const last_index: ref;

axiom last_index == $sub.ref(0, 93174);

const __ksymtab_cdc_ncm_rx_fixup: ref;

axiom __ksymtab_cdc_ncm_rx_fixup == $sub.ref(0, 94214);

const __ksymtab_cdc_ncm_rx_verify_ndp16: ref;

axiom __ksymtab_cdc_ncm_rx_verify_ndp16 == $sub.ref(0, 95254);

const __ksymtab_cdc_ncm_rx_verify_nth16: ref;

axiom __ksymtab_cdc_ncm_rx_verify_nth16 == $sub.ref(0, 96294);

const __ksymtab_cdc_ncm_tx_fixup: ref;

axiom __ksymtab_cdc_ncm_tx_fixup == $sub.ref(0, 97334);

const __ksymtab_cdc_ncm_fill_tx_frame: ref;

axiom __ksymtab_cdc_ncm_fill_tx_frame == $sub.ref(0, 98374);

const __ksymtab_cdc_ncm_select_altsetting: ref;

axiom __ksymtab_cdc_ncm_select_altsetting == $sub.ref(0, 99414);

const __ksymtab_cdc_ncm_unbind: ref;

axiom __ksymtab_cdc_ncm_unbind == $sub.ref(0, 100454);

const .str: ref;

axiom .str == $sub.ref(0, 101498);

const {:count 8} .str.1: ref;

axiom .str.1 == $sub.ref(0, 102530);

const {:count 20} .str.2: ref;

axiom .str.2 == $sub.ref(0, 103574);

const {:count 222} .str.3: ref;

axiom .str.3 == $sub.ref(0, 104820);

const {:count 17} .str.4: ref;

axiom .str.4 == $sub.ref(0, 105861);

const {:count 40} .str.5: ref;

axiom .str.5 == $sub.ref(0, 106925);

const {:count 36} .str.6: ref;

axiom .str.6 == $sub.ref(0, 107985);

const {:count 36} .str.7: ref;

axiom .str.7 == $sub.ref(0, 109045);

const {:count 43} .str.8: ref;

axiom .str.8 == $sub.ref(0, 110112);

const {:count 27} .str.9: ref;

axiom .str.9 == $sub.ref(0, 111163);

const {:count 22} .str.10: ref;

axiom .str.10 == $sub.ref(0, 112209);

const {:count 29} .str.11: ref;

axiom .str.11 == $sub.ref(0, 113262);

const {:count 27} .str.12: ref;

axiom .str.12 == $sub.ref(0, 114313);

const {:count 18} .str.13: ref;

axiom .str.13 == $sub.ref(0, 115355);

const {:count 16} .str.14: ref;

axiom .str.14 == $sub.ref(0, 116395);

const {:count 23} .str.48: ref;

axiom .str.48 == $sub.ref(0, 117442);

const {:count 30} .str.49: ref;

axiom .str.49 == $sub.ref(0, 118496);

const {:count 30} .str.50: ref;

axiom .str.50 == $sub.ref(0, 119550);

const {:count 20} .str.44: ref;

axiom .str.44 == $sub.ref(0, 120594);

const {:count 34} .str.45: ref;

axiom .str.45 == $sub.ref(0, 121652);

const {:count 41} .str.46: ref;

axiom .str.46 == $sub.ref(0, 122717);

const {:count 43} .str.47: ref;

axiom .str.47 == $sub.ref(0, 123784);

const {:count 21} .str.34: ref;

axiom .str.34 == $sub.ref(0, 124829);

const {:count 24} .str.35: ref;

axiom .str.35 == $sub.ref(0, 125877);

const {:count 31} .str.36: ref;

axiom .str.36 == $sub.ref(0, 126932);

const {:count 21} .str.37: ref;

axiom .str.37 == $sub.ref(0, 127977);

const cpu_number: ref;

axiom cpu_number == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 20} .str.43: ref;

axiom .str.43 == $sub.ref(0, 129021);

const {:count 21} .str.41: ref;

axiom .str.41 == $sub.ref(0, 130066);

const {:count 38} .str.42: ref;

axiom .str.42 == $sub.ref(0, 131128);

const {:count 42} .str.38: ref;

axiom .str.38 == $sub.ref(0, 132194);

const {:count 21} .str.39: ref;

axiom .str.39 == $sub.ref(0, 133239);

const {:count 38} .str.40: ref;

axiom .str.40 == $sub.ref(0, 134301);

const {:count 27} .str.27: ref;

axiom .str.27 == $sub.ref(0, 135352);

const {:count 13} .str.28: ref;

axiom .str.28 == $sub.ref(0, 136389);

const {:count 22} .str.29: ref;

axiom .str.29 == $sub.ref(0, 137435);

const {:count 21} .str.30: ref;

axiom .str.30 == $sub.ref(0, 138480);

const {:count 30} .str.31: ref;

axiom .str.31 == $sub.ref(0, 139534);

const {:count 23} .str.32: ref;

axiom .str.32 == $sub.ref(0, 140581);

const {:count 137} .str.33: ref;

axiom .str.33 == $sub.ref(0, 141742);

const {:count 24} .str.15: ref;

axiom .str.15 == $sub.ref(0, 142790);

const {:count 17} .str.16: ref;

axiom .str.16 == $sub.ref(0, 143831);

const {:count 34} .str.17: ref;

axiom .str.17 == $sub.ref(0, 144889);

const {:count 36} .str.18: ref;

axiom .str.18 == $sub.ref(0, 145949);

const {:count 40} .str.19: ref;

axiom .str.19 == $sub.ref(0, 147013);

const {:count 24} .str.20: ref;

axiom .str.20 == $sub.ref(0, 148061);

const {:count 26} .str.21: ref;

axiom .str.21 == $sub.ref(0, 149111);

const {:count 27} .str.22: ref;

axiom .str.22 == $sub.ref(0, 150162);

const {:count 22} .str.23: ref;

axiom .str.23 == $sub.ref(0, 151208);

const {:count 17} .str.24: ref;

axiom .str.24 == $sub.ref(0, 152249);

const {:count 34} .str.25: ref;

axiom .str.25 == $sub.ref(0, 153307);

const {:count 67} .str.26: ref;

axiom .str.26 == $sub.ref(0, 154398);

const {:count 11} .str.51: ref;

axiom .str.51 == $sub.ref(0, 155433);

const {:count 4} .str.65: ref;

axiom .str.65 == $sub.ref(0, 156461);

const {:count 7} .str.52: ref;

axiom .str.52 == $sub.ref(0, 157492);

const {:count 7} .str.53: ref;

axiom .str.53 == $sub.ref(0, 158523);

const {:count 15} .str.54: ref;

axiom .str.54 == $sub.ref(0, 159562);

const {:count 22} .str.55: ref;

axiom .str.55 == $sub.ref(0, 160608);

const {:count 8} .str.76: ref;

axiom .str.76 == $sub.ref(0, 161640);

const {:count 15} .str.56: ref;

axiom .str.56 == $sub.ref(0, 162679);

const {:count 14} .str.57: ref;

axiom .str.57 == $sub.ref(0, 163717);

const {:count 23} .str.58: ref;

axiom .str.58 == $sub.ref(0, 164764);

const {:count 16} .str.59: ref;

axiom .str.59 == $sub.ref(0, 165804);

const {:count 16} .str.60: ref;

axiom .str.60 == $sub.ref(0, 166844);

const {:count 15} .str.61: ref;

axiom .str.61 == $sub.ref(0, 167883);

const {:count 24} .str.62: ref;

axiom .str.62 == $sub.ref(0, 168931);

const {:count 17} .str.63: ref;

axiom .str.63 == $sub.ref(0, 169972);

const {:count 20} .str.64: ref;

axiom .str.64 == $sub.ref(0, 171016);

const {:count 32} .str.73: ref;

axiom .str.73 == $sub.ref(0, 172072);

const .str.67: ref;

axiom .str.67 == $sub.ref(0, 173097);

const {:count 4} .str.68: ref;

axiom .str.68 == $sub.ref(0, 174125);

const {:count 33} .str.66: ref;

axiom .str.66 == $sub.ref(0, 175182);

const {:count 15} .str.69: ref;

axiom .str.69 == $sub.ref(0, 176221);

const {:count 38} .str.70: ref;

axiom .str.70 == $sub.ref(0, 177283);

const {:count 37} .str.71: ref;

axiom .str.71 == $sub.ref(0, 178344);

const {:count 37} .str.72: ref;

axiom .str.72 == $sub.ref(0, 179405);

const {:count 41} .str.74: ref;

axiom .str.74 == $sub.ref(0, 180470);

const {:count 8} .str.75: ref;

axiom .str.75 == $sub.ref(0, 181502);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 182534);

const {:count 3} .str.1.164: ref;

axiom .str.1.164 == $sub.ref(0, 183561);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 184599);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 185627);

const cdc_ncm_bind_common: ref;

axiom cdc_ncm_bind_common == $sub.ref(0, 186659);

procedure cdc_ncm_bind_common($p0: ref, $p1: ref, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.13, $M.15, $M.17, $M.19, $M.21, $M.23, $M.24, $M.25, $CurrAddr, $M.11;



implementation cdc_ncm_bind_common($p0: ref, $p1: ref, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p21: ref;
  var $i22: i64;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i24;
  var $i88: i24;
  var $i89: i24;
  var $p90: ref;
  var $p91: ref;
  var $i92: i8;
  var $i93: i64;
  var $i94: i64;
  var $i95: i64;
  var $i96: i1;
  var $p97: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i8;
  var $i103: i32;
  var $p104: ref;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i1;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i1;
  var $p115: ref;
  var $i116: i8;
  var $i117: i32;
  var $i118: i1;
  var $p120: ref;
  var $i121: i8;
  var $i122: i32;
  var $i123: i1;
  var $p125: ref;
  var $p69: ref;
  var $p55: ref;
  var $i126: i8;
  var $i127: i32;
  var $i128: i64;
  var $p129: ref;
  var $i130: i32;
  var $i131: i1;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i133: i8;
  var $i134: i32;
  var $i135: i1;
  var $i137: i8;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $p136: ref;
  var $p132: ref;
  var $p47: ref;
  var $i141: i64;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $i145: i64;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i8;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p158: ref;
  var $i159: i8;
  var $i160: i32;
  var $i161: i32;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i24;
  var $i171: i24;
  var $i172: i24;
  var $p173: ref;
  var $p174: ref;
  var $i175: i8;
  var $i176: i64;
  var $i177: i64;
  var $i178: i64;
  var $i179: i1;
  var $p180: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i64;
  var $i185: i1;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $i192: i24;
  var $i193: i24;
  var $i194: i24;
  var $p195: ref;
  var $p196: ref;
  var $i197: i8;
  var $i198: i64;
  var $i199: i64;
  var $i200: i64;
  var $i201: i1;
  var $p202: ref;
  var $p204: ref;
  var $p205: ref;
  var $p207: ref;
  var $i208: i8;
  var $i209: i32;
  var $i210: i1;
  var $p211: ref;
  var $p212: ref;
  var $p214: ref;
  var $i215: i8;
  var $i216: i32;
  var $i217: i1;
  var $p218: ref;
  var $p219: ref;
  var $i220: i64;
  var $i221: i1;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $i228: i24;
  var $i229: i24;
  var $i230: i24;
  var $p231: ref;
  var $p232: ref;
  var $i233: i8;
  var $i234: i64;
  var $i235: i64;
  var $i236: i64;
  var $i237: i1;
  var $p238: ref;
  var $p240: ref;
  var $p241: ref;
  var $i242: i64;
  var $i243: i1;
  var $p244: ref;
  var $p245: ref;
  var $i246: i64;
  var $i247: i1;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $i254: i24;
  var $i255: i24;
  var $i256: i24;
  var $p257: ref;
  var $p258: ref;
  var $i259: i8;
  var $i260: i64;
  var $i261: i64;
  var $i262: i64;
  var $i263: i1;
  var $p264: ref;
  var $p266: ref;
  var $p267: ref;
  var $i268: i64;
  var $p269: ref;
  var $p270: ref;
  var $i271: i64;
  var $i272: i1;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $i276: i32;
  var $i277: i1;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $i284: i24;
  var $i285: i24;
  var $i286: i24;
  var $p287: ref;
  var $p288: ref;
  var $i289: i8;
  var $i290: i64;
  var $i291: i64;
  var $i292: i64;
  var $i293: i1;
  var $p294: ref;
  var $p296: ref;
  var $p297: ref;
  var $p298: ref;
  var $p299: ref;
  var $p301: ref;
  var $i302: i8;
  var $p303: ref;
  var $p304: ref;
  var $i305: i32;
  var $i306: i32;
  var $i307: i1;
  var $p308: ref;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $i314: i24;
  var $i315: i24;
  var $i316: i24;
  var $p317: ref;
  var $p318: ref;
  var $i319: i8;
  var $i320: i64;
  var $i321: i64;
  var $i322: i64;
  var $i323: i1;
  var $p324: ref;
  var $i326: i32;
  var $i327: i1;
  var $p328: ref;
  var $p329: ref;
  var $i330: i32;
  var $i331: i32;
  var $i332: i32;
  var $i333: i1;
  var $p334: ref;
  var $p335: ref;
  var $p336: ref;
  var $p337: ref;
  var $p338: ref;
  var $p339: ref;
  var $i340: i24;
  var $i341: i24;
  var $i342: i24;
  var $p343: ref;
  var $p344: ref;
  var $i345: i8;
  var $i346: i64;
  var $i347: i64;
  var $i348: i64;
  var $i349: i1;
  var $p350: ref;
  var $p352: ref;
  var $p353: ref;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $i357: i32;
  var $i358: i1;
  var $p359: ref;
  var $i360: i32;
  var $i361: i1;
  var $p362: ref;
  var $p363: ref;
  var $i364: i64;
  var $i365: i1;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $p370: ref;
  var $p371: ref;
  var $i372: i24;
  var $i373: i24;
  var $i374: i24;
  var $p375: ref;
  var $p376: ref;
  var $i377: i8;
  var $i378: i64;
  var $i379: i64;
  var $i380: i64;
  var $i381: i1;
  var $p382: ref;
  var $p384: ref;
  var $p385: ref;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $p391: ref;
  var $i392: i64;
  var $i393: i1;
  var $p394: ref;
  var $p395: ref;
  var $p396: ref;
  var $i397: i8;
  var $i398: i32;
  var $i399: i32;
  var $i400: i1;
  var $p401: ref;
  var $p402: ref;
  var $p403: ref;
  var $p404: ref;
  var $p405: ref;
  var $p406: ref;
  var $i407: i24;
  var $i408: i24;
  var $i409: i24;
  var $p410: ref;
  var $p411: ref;
  var $i412: i8;
  var $i413: i64;
  var $i414: i64;
  var $i415: i64;
  var $i416: i1;
  var $p417: ref;
  var $p419: ref;
  var $p420: ref;
  var $p421: ref;
  var $p422: ref;
  var $p423: ref;
  var $p426: ref;
  var $p427: ref;
  var $p428: ref;
  var $p429: ref;
  var $p430: ref;
  var $p432: ref;
  var $p433: ref;
  var $p434: ref;
  var $p435: ref;
  var $p436: ref;
  var $p437: ref;
  var $p438: ref;
  var $i439: i64;
  var $p440: ref;
  var $p441: ref;
  var $i442: i64;
  var $i443: i1;
  var $p444: ref;
  var $p445: ref;
  var $p447: ref;
  var $i448: i64;
  var $p449: ref;
  var $p451: ref;
  var $p452: ref;
  var $i18: i32;
  var vslice_dummy_var_81: ref;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 11} {:cexpr "cdc_ncm_bind_common:arg:data_altsetting"} boogie_si_record_i8($i2);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $p14 := kzalloc(416, 208);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(32, 1));
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} hrtimer_init($p19, 1, 1);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(32, 1)), $mul.ref(40, 1));
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, cdc_ncm_tx_timer_cb);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p0);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(32, 1));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i22);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(128, 1)), $mul.ref(24, 1));
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, cdc_ncm_txpath_bh);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(312, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} atomic_set($p27, 0);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(240, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} vslice_dummy_var_81 := spinlock_check($p28);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(240, 1)), $mul.ref(0, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} __raw_spin_lock_init($p32, .str, $p3);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p15);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p35, $i33);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(200, 1));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p1);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p37 := driver_of($p1);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    call {:si_unique_call 18} {:cexpr "len"} boogie_si_record_i32($i45);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i46 := $sgt.i32($i45, 0);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p47 := $0.ref;
    assume {:branchcond $i46} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p47);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i142 := $eq.i64($i141, 0);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i142 == 1);
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i184 := $p2i.ref.i64($p183);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i185 := $eq.i64($i184, 0);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.0, $p204);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p205, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i208 := $load.i8($M.0, $p207);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i209 := $zext.i8.i32($i208);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 14);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i210 == 1);
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(192, 1));
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p241 := $load.ref($M.0, $p240);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i242 := $p2i.ref.i64($p241);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i243 := $eq.i64($i242, 0);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i243} true;
    goto $bb90, $bb92;

  $bb92:
    assume !($i243 == 1);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(168, 1));
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p245 := $load.ref($M.0, $p244);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i246 := $p2i.ref.i64($p245);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i247 := $eq.i64($i246, 0);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p267 := $load.ref($M.0, $p266);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i268 := $p2i.ref.i64($p267);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(200, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p270 := $load.ref($M.0, $p269);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i271 := $p2i.ref.i64($p270);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i272 := $ne.i64($i268, $i271);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i272} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p297 := $load.ref($M.0, $p296);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p297, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p299 := $load.ref($M.0, $p298);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($add.ref($p299, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i302 := $load.i8($M.0, $p301);
    call {:si_unique_call 45} {:cexpr "iface_no"} boogie_si_record_i8($i302);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(0, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p304 := $load.ref($M.0, $p303);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i305 := $zext.i8.i32($i302);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i306 := usb_set_interface($p304, $i305, 0);
    call {:si_unique_call 47} {:cexpr "temp"} boogie_si_record_i32($i306);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i307 := $ne.i32($i306, 0);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $i326 := cdc_ncm_init($p0);
    call {:si_unique_call 54} {:cexpr "tmp___7"} boogie_si_record_i32($i326);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i327 := $ne.i32($i326, 0);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(0, 1));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p329 := $load.ref($M.0, $p328);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i330 := $zext.i8.i32($i302);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i331 := $zext.i8.i32($i2);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i332 := usb_set_interface($p329, $i330, $i331);
    call {:si_unique_call 56} {:cexpr "temp"} boogie_si_record_i32($i332);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i333 := $ne.i32($i332, 0);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i333} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i333 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p353 := $load.ref($M.0, $p352);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} cdc_ncm_find_endpoints($p0, $p353);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(200, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p355 := $load.ref($M.0, $p354);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} cdc_ncm_find_endpoints($p0, $p355);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(308, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i357 := $load.i32($M.0, $p356);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i358 := $eq.i32($i357, 0);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i358} true;
    goto $bb124, $bb126;

  $bb126:
    assume !($i358 == 1);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(312, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i360 := $load.i32($M.0, $p359);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i361 := $eq.i32($i360, 0);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i361 == 1);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(320, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p363 := $load.ref($M.0, $p362);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i364 := $p2i.ref.i64($p363);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i365 := $eq.i64($i364, 0);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    assume {:branchcond $i365} true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p385 := $load.ref($M.0, $p384);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p386 := $bitcast.ref.ref($p0);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} usb_set_intfdata($p385, $p386);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(200, 1));
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p388 := $load.ref($M.0, $p387);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p389 := $bitcast.ref.ref($p0);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} usb_set_intfdata($p388, $p389);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(192, 1));
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p391 := $load.ref($M.0, $p390);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i392 := $p2i.ref.i64($p391);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i393 := $ne.i64($i392, 0);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} vslice_dummy_var_94 := cdc_ncm_setup($p0);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p427 := $load.ref($M.0, $p426);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($p427, $mul.ref(0, 3176)), $mul.ref(496, 1));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p428, cdc_ncm_ethtool_ops);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p430 := $load.ref($M.0, $p429);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($add.ref($p430, $mul.ref(0, 3176)), $mul.ref(2720, 1)), $mul.ref(0, 8));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p432, cdc_ncm_sysfs_attr_group);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb135:
    assume $i393 == 1;
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(192, 1));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p395 := $load.ref($M.0, $p394);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p395, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i397 := $load.i8($M.2, $p396);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i398 := $zext.i8.i32($i397);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $i399 := usbnet_get_ethernet_addr($p0, $i398);
    call {:si_unique_call 68} {:cexpr "temp"} boogie_si_record_i32($i399);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i400 := $ne.i32($i399, 0);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p421 := $load.ref($M.0, $p420);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p421, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p423 := $load.ref($M.0, $p422);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} vslice_dummy_var_93 := _dev_info.ref.ref.ref($p419, .str.13, $p423);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb137:
    assume $i400 == 1;
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p401, .str.1);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p402, .str.2);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p403, .str.3);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p404, .str.12);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p406 := $bitcast.ref.ref($p405);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $i407 := $load.i24($M.7, $p406);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i408 := $and.i24($i407, $sub.i24(0, 262144));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i409 := $or.i24($i408, 924);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p406, $i409);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p410, 0);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i412 := $load.i8($M.8, $p411);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i413 := $zext.i8.i64($i412);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i414 := $and.i64($i413, 1);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i415 := ldv__builtin_expect($i414, 0);
    call {:si_unique_call 70} {:cexpr "tmp___10"} boogie_si_record_i64($i415);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i416 := $ne.i64($i415, 0);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i416} true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i416 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(200, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p434 := $load.ref($M.0, $p433);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} usb_set_intfdata($p434, $0.ref);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p436 := $load.ref($M.0, $p435);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} usb_set_intfdata($p436, $0.ref);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p438 := $load.ref($M.0, $p437);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i439 := $p2i.ref.i64($p438);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(200, 1));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p441 := $load.ref($M.0, $p440);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i442 := $p2i.ref.i64($p441);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i443 := $ne.i64($i439, $i442);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i443} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i443 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i448 := $load.i64($M.0, $p447);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p449 := $i2p.i64.ref($i448);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} cdc_ncm_free($p449);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p451, 0);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} vslice_dummy_var_83 := _dev_info.ref.ref($p452, .str.14);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 19);
    goto $bb3;

  $bb144:
    assume $i443 == 1;
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p445 := $load.ref($M.0, $p444);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} usb_driver_release_interface($p37, $p445);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb139:
    assume $i416 == 1;
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} vslice_dummy_var_92 := __dynamic_dev_dbg.ref.ref.ref($p13, $p417, .str.12);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb129:
    assume {:verifier.code 0} true;
    assume $i365 == 1;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p366, .str.1);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p367, .str.2);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p368, .str.3);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p369, .str.11);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $p371 := $bitcast.ref.ref($p370);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i372 := $load.i24($M.7, $p371);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i373 := $and.i24($i372, $sub.i24(0, 262144));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i374 := $or.i24($i373, 914);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p371, $i374);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p375, 0);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i377 := $load.i8($M.8, $p376);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i378 := $zext.i8.i64($i377);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i379 := $and.i64($i378, 1);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $i380 := ldv__builtin_expect($i379, 0);
    call {:si_unique_call 63} {:cexpr "tmp___9"} boogie_si_record_i64($i380);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i381 := $ne.i64($i380, 0);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i381} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb131:
    assume $i381 == 1;
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} vslice_dummy_var_91 := __dynamic_dev_dbg.ref.ref.ref($p12, $p382, .str.11);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb127:
    assume {:verifier.code 0} true;
    assume $i361 == 1;
    goto $bb125;

  $bb124:
    assume {:verifier.code 0} true;
    assume $i358 == 1;
    goto $bb125;

  $bb118:
    assume $i333 == 1;
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p334, .str.1);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p335, .str.2);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p336, .str.3);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p337, .str.10);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p339 := $bitcast.ref.ref($p338);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i340 := $load.i24($M.7, $p339);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i341 := $and.i24($i340, $sub.i24(0, 262144));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i342 := $or.i24($i341, 907);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p339, $i342);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p343, 0);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i345 := $load.i8($M.8, $p344);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i346 := $zext.i8.i64($i345);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i347 := $and.i64($i346, 1);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $i348 := ldv__builtin_expect($i347, 0);
    call {:si_unique_call 58} {:cexpr "tmp___8"} boogie_si_record_i64($i348);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i349 := $ne.i64($i348, 0);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i349} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i349 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb120:
    assume $i349 == 1;
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} vslice_dummy_var_90 := __dynamic_dev_dbg.ref.ref.ref($p11, $p350, .str.10);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb115:
    assume $i327 == 1;
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb108:
    assume $i307 == 1;
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p308, .str.1);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p309, .str.2);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p310, .str.3);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p311, .str.10);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p313 := $bitcast.ref.ref($p312);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i314 := $load.i24($M.7, $p313);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i315 := $and.i24($i314, $sub.i24(0, 262144));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i316 := $or.i24($i315, 896);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p313, $i316);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p317, 0);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i319 := $load.i8($M.8, $p318);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i320 := $zext.i8.i64($i319);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i321 := $and.i64($i320, 1);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $i322 := ldv__builtin_expect($i321, 0);
    call {:si_unique_call 49} {:cexpr "tmp___6"} boogie_si_record_i64($i322);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i323 := $ne.i64($i322, 0);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb110:
    assume $i323 == 1;
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} vslice_dummy_var_89 := __dynamic_dev_dbg.ref.ref.ref($p10, $p324, .str.10);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb99:
    assume $i272 == 1;
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.0, $p273);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p275 := $bitcast.ref.ref($p0);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $i276 := usb_driver_claim_interface($p37, $p274, $p275);
    call {:si_unique_call 41} {:cexpr "temp"} boogie_si_record_i32($i276);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i277 := $ne.i32($i276, 0);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb101:
    assume $i277 == 1;
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p278, .str.1);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p279, .str.2);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p280, .str.3);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p281, .str.9);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p283 := $bitcast.ref.ref($p282);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i284 := $load.i24($M.7, $p283);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i285 := $and.i24($i284, $sub.i24(0, 262144));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i286 := $or.i24($i285, 886);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p283, $i286);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p287, 0);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i289 := $load.i8($M.8, $p288);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i290 := $zext.i8.i64($i289);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i291 := $and.i64($i290, 1);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $i292 := ldv__builtin_expect($i291, 0);
    call {:si_unique_call 43} {:cexpr "tmp___5"} boogie_si_record_i64($i292);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i293 := $ne.i64($i292, 0);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb103:
    assume $i293 == 1;
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} vslice_dummy_var_88 := __dynamic_dev_dbg.ref.ref.ref($p9, $p294, .str.9);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb93:
    assume {:verifier.code 0} true;
    assume $i247 == 1;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p248, .str.1);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p249, .str.2);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p250, .str.3);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p251, .str.8);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p253 := $bitcast.ref.ref($p252);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i254 := $load.i24($M.7, $p253);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i255 := $and.i24($i254, $sub.i24(0, 262144));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i256 := $or.i24($i255, 877);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p253, $i256);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p257, 0);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i259 := $load.i8($M.8, $p258);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i260 := $zext.i8.i64($i259);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i261 := $and.i64($i260, 1);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $i262 := ldv__builtin_expect($i261, 0);
    call {:si_unique_call 38} {:cexpr "tmp___4"} boogie_si_record_i64($i262);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i263 := $ne.i64($i262, 0);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i263} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb95:
    assume $i263 == 1;
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} vslice_dummy_var_87 := __dynamic_dev_dbg.ref.ref.ref($p8, $p264, .str.8);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb90:
    assume {:verifier.code 0} true;
    assume $i243 == 1;
    goto $bb91;

  $bb78:
    assume $i210 == 1;
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($p212, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i215 := $load.i8($M.0, $p214);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i216 := $zext.i8.i32($i215);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i216, 0);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i217} true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i217 == 1);
    goto $bb80;

  $bb81:
    assume $i217 == 1;
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(176, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p219 := $load.ref($M.0, $p218);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i220 := $p2i.ref.i64($p219);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i221 := $eq.i64($i220, 0);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i221} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb83:
    assume $i221 == 1;
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p222, .str.1);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p223, .str.2);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p224, .str.3);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p225, .str.7);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p227 := $bitcast.ref.ref($p226);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i228 := $load.i24($M.7, $p227);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i229 := $and.i24($i228, $sub.i24(0, 262144));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i230 := $or.i24($i229, 872);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p227, $i230);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p231, 0);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i233 := $load.i8($M.8, $p232);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i234 := $zext.i8.i64($i233);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i235 := $and.i64($i234, 1);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $i236 := ldv__builtin_expect($i235, 0);
    call {:si_unique_call 35} {:cexpr "tmp___3"} boogie_si_record_i64($i236);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i237 := $ne.i64($i236, 0);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i237} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb85:
    assume $i237 == 1;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} vslice_dummy_var_86 := __dynamic_dev_dbg.ref.ref.ref($p7, $p238, .str.7);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb72:
    assume $i185 == 1;
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p186, .str.1);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p187, .str.2);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p188, .str.3);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p189, .str.6);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p191 := $bitcast.ref.ref($p190);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i192 := $load.i24($M.7, $p191);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i193 := $and.i24($i192, $sub.i24(0, 262144));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i194 := $or.i24($i193, 867);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p191, $i194);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p195, 0);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i197 := $load.i8($M.8, $p196);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i198 := $zext.i8.i64($i197);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i199 := $and.i64($i198, 1);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i200 := ldv__builtin_expect($i199, 0);
    call {:si_unique_call 32} {:cexpr "tmp___2"} boogie_si_record_i64($i200);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i201 := $ne.i64($i200, 0);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb74:
    assume $i201 == 1;
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} vslice_dummy_var_85 := __dynamic_dev_dbg.ref.ref.ref($p6, $p202, .str.6);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb61:
    assume $i142 == 1;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(24, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p144);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i146 := $ne.i64($i145, 0);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb63;

  $bb64:
    assume $i146 == 1;
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(24, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p147);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p148, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.9, $p149);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i150);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 2);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i152 == 1);
    goto $bb63;

  $bb66:
    assume $i152 == 1;
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(0, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.0, $p153);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($p156, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i159 := $load.i8($M.0, $p158);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i160 := $zext.i8.i32($i159);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i161 := $add.i32($i160, 1);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $p162 := usb_ifnum_to_if($p154, $i161);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p163, $p162);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p164, .str.1);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p165, .str.2);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p166, .str.3);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p167, .str.5);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p168);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i170 := $load.i24($M.7, $p169);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i171 := $and.i24($i170, $sub.i24(0, 262144));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i172 := $or.i24($i171, 862);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p169, $i172);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p173, 0);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.8, $p174);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i176 := $zext.i8.i64($i175);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i177 := $and.i64($i176, 1);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $i178 := ldv__builtin_expect($i177, 0);
    call {:si_unique_call 29} {:cexpr "tmp___1"} boogie_si_record_i64($i178);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i179 := $ne.i64($i178, 0);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb68:
    assume $i179 == 1;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} vslice_dummy_var_84 := __dynamic_dev_dbg.ref.ref.ref($p5, $p180, .str.5);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb5:
    assume $i46 == 1;
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i48, $p49, $p50 := $i45, $p41, $0.ref;
    goto $bb8;

  $bb8:
    call $p51, $i52, $i53, $i54, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $p70, $p71, $p72, $p74, $i75, $i76, $p77, $i78, $i79, $i80, $p99, $p100, $p101, $i102, $i103, $p104, $p105, $i106, $i107, $i108, $p110, $i111, $i112, $i113, $p115, $i116, $i117, $i118, $p120, $i121, $i122, $i123, $p125, $p69, $p55, $i126, $i127, $i128, $p129, $i130, $i131, $i48, $p49, $p50, $i133, $i134, $i135, $i137, $i138, $i139, $p140, $p136, $p132 := cdc_ncm_bind_common_loop_$bb8($p0, $p1, $p15, $p51, $i52, $i53, $i54, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $p70, $p71, $p72, $p74, $i75, $i76, $p77, $i78, $i79, $i80, $p99, $p100, $p101, $i102, $i103, $p104, $p105, $i106, $i107, $i108, $p110, $i111, $i112, $i113, $p115, $i116, $i117, $i118, $p120, $i121, $i122, $i123, $p125, $p69, $p55, $i126, $i127, $i128, $p129, $i130, $i131, $i48, $p49, $p50, $i133, $i134, $i135, $i137, $i138, $i139, $p140, $p136, $p132);
    goto $bb8_last;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.2, $p49);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i135 := $ugt.i32($i134, 2);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p136 := $p50;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p47 := $p136;
    goto $bb7;

  $bb56:
    assume $i135 == 1;
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.2, $p49);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $i139 := $sle.i32($i138, $i48);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p140 := $p50;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p47 := $p140;
    goto $bb7;

  $bb58:
    assume $i139 == 1;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p49, $mul.ref(1, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.2, $p51);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 36);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p49, $mul.ref(2, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.2, $p56);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i58, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i58, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i58, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i58, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p69 := $p50;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p55 := $p69;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.2, $p49);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i126);
    call {:si_unique_call 19} {:cexpr "temp"} boogie_si_record_i32($i127);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i128 := $sext.i32.i64($i127);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p49, $mul.ref($i128, 1));
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i130 := $sub.i32($i48, $i127);
    call {:si_unique_call 20} {:cexpr "len"} boogie_si_record_i32($i130);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i131 := $sgt.i32($i130, 0);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p132 := $p55;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p47 := $p132;
    goto $bb7;

  $bb54:
    assume $i131 == 1;
    assume {:verifier.code 0} true;
    $i48, $p49, $p50 := $i130, $p129, $p55;
    goto $bb54_dummy;

  $bb21:
    assume $i62 == 1;
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.2, $p49);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i121);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i123 := $ule.i32($i122, 7);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(184, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p125, $p49);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p69 := $p50;
    goto $bb32;

  $bb50:
    assume $i123 == 1;
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p69 := $p50;
    goto $bb32;

  $bb19:
    assume $i61 == 1;
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.2, $p49);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i118 := $ule.i32($i117, 11);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(176, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p120, $p49);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p69 := $p50;
    goto $bb32;

  $bb47:
    assume $i118 == 1;
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p69 := $p50;
    goto $bb32;

  $bb17:
    assume $i60 == 1;
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.2, $p49);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i113 := $ule.i32($i112, 5);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(168, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p115, $p49);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p69 := $p50;
    goto $bb32;

  $bb44:
    assume $i113 == 1;
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p69 := $p50;
    goto $bb32;

  $bb15:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i58, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i58, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb23;

  $bb26:
    assume $i64 == 1;
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.2, $p49);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i108 := $ule.i32($i107, 12);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(192, 1));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p110, $p49);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p69 := $p50;
    goto $bb32;

  $bb41:
    assume $i108 == 1;
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p69 := $p50;
    goto $bb32;

  $bb24:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i58, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb23;

  $bb28:
    assume $i65 == 1;
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.2, $p49);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i68 := $ule.i32($i67, 4);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p49);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p72, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p70, $mul.ref(0, 5)), $mul.ref(3, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.2, $p77);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i76, $i79);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(0, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p70, $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.2, $p101);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $p104 := usb_ifnum_to_if($p100, $i103);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p15, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p105, $p104);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p69 := $p49;
    goto $bb32;

  $bb34:
    assume $i80 == 1;
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p81, .str.1);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p82, .str.2);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p83, .str.3);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p84, .str.4);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i87 := $load.i24($M.7, $p86);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i88 := $and.i24($i87, $sub.i24(0, 262144));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i89 := $or.i24($i88, 812);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p86, $i89);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p90, 0);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.8, $p91);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i64($i92);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i94 := $and.i64($i93, 1);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i95 := ldv__builtin_expect($i94, 0);
    call {:si_unique_call 22} {:cexpr "tmp___0"} boogie_si_record_i64($i95);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i96 := $ne.i64($i95, 0);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i96 == 1;
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} vslice_dummy_var_82 := __dynamic_dev_dbg.ref.ref.ref($p4, $p97, .str.4);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb30:
    assume $i68 == 1;
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p69 := $p50;
    goto $bb32;

  $bb10:
    assume $i54 == 1;
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p55 := $p50;
    goto $bb12;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 12);
    goto $bb3;

  $bb54_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_45;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 187691);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 188723);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 76} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const hrtimer_init: ref;

axiom hrtimer_init == $sub.ref(0, 189755);

procedure hrtimer_init($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation hrtimer_init($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} {:cexpr "hrtimer_init:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 79} {:cexpr "hrtimer_init:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    return;
}



const cdc_ncm_tx_timer_cb: ref;

axiom cdc_ncm_tx_timer_cb == $sub.ref(0, 190787);

procedure cdc_ncm_tx_timer_cb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation cdc_ncm_tx_timer_cb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 32), 416)), $mul.ref(312, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i4 := atomic_read($p3);
    call {:si_unique_call 81} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 32), 416)), $mul.ref(128, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} tasklet_schedule($p6);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const cdc_ncm_txpath_bh: ref;

axiom cdc_ncm_txpath_bh == $sub.ref(0, 191819);

procedure cdc_ncm_txpath_bh($i0: i64);



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 192851);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 193883);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 194915);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    return;
}



const driver_of: ref;

axiom driver_of == $sub.ref(0, 195947);

procedure driver_of($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation driver_of($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1)), $mul.ref(504, 1));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 168), 304));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 196979);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 85} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 198011);

procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 1} true;
    call {:si_unique_call 86} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 87} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32, p.9: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 1} true;
    call {:si_unique_call 88} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 89} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 1} true;
    call {:si_unique_call 90} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 91} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 1} true;
    call {:si_unique_call 92} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 93} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_ifnum_to_if: ref;

axiom usb_ifnum_to_if == $sub.ref(0, 199043);

procedure usb_ifnum_to_if($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_ifnum_to_if($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} {:cexpr "usb_ifnum_to_if:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $p2 := external_alloc();
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const usb_driver_claim_interface: ref;

axiom usb_driver_claim_interface == $sub.ref(0, 200075);

procedure usb_driver_claim_interface($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_driver_claim_interface($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 1} true;
    call {:si_unique_call 96} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 97} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_set_interface: ref;

axiom usb_set_interface == $sub.ref(0, 201107);

procedure usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 98} {:cexpr "usb_set_interface:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 99} {:cexpr "usb_set_interface:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 1} true;
    call {:si_unique_call 100} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 101} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const cdc_ncm_init: ref;

axiom cdc_ncm_init == $sub.ref(0, 202139);

procedure cdc_ncm_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.13, $M.15, $M.17, $M.19, $M.21, $M.23, $M.24, $M.25, $CurrAddr;



implementation cdc_ncm_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i16;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i24;
  var $i37: i24;
  var $i38: i24;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i50: i32;
  var $i51: i16;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i24;
  var $i71: i24;
  var $i72: i24;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i84: i32;
  var $i85: i16;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p93: ref;
  var $i94: i32;
  var $p95: ref;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $p101: ref;
  var $i102: i16;
  var $p103: ref;
  var $p105: ref;
  var $i106: i16;
  var $p107: ref;
  var $p109: ref;
  var $i110: i16;
  var $p111: ref;
  var $p113: ref;
  var $i114: i16;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i24;
  var $i123: i24;
  var $i124: i24;
  var $p125: ref;
  var $p126: ref;
  var $i127: i8;
  var $i128: i64;
  var $i129: i64;
  var $i130: i64;
  var $i131: i1;
  var $i132: i8;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i32;
  var $p138: ref;
  var $i139: i32;
  var $p140: ref;
  var $i141: i16;
  var $i142: i32;
  var $p143: ref;
  var $i144: i16;
  var $i145: i32;
  var $p146: ref;
  var $i147: i16;
  var $i148: i32;
  var $p149: ref;
  var $i150: i16;
  var $i151: i32;
  var $i152: i32;
  var $p154: ref;
  var $i155: i16;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $i159: i16;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $i164: i16;
  var $i165: i32;
  var $i166: i32;
  var $i167: i64;
  var $i168: i64;
  var $i169: i32;
  var $i170: i32;
  var $p171: ref;
  var $p172: ref;
  var $i25: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(200, 1));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.10, $p8);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    call {:si_unique_call 105} {:cexpr "iface_no"} boogie_si_record_i8($i14);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $i19 := usbnet_read_cmd($p0, $sub.i8(0, 128), $sub.i8(0, 95), 0, $i16, $p18, 28);
    call {:si_unique_call 107} {:cexpr "err"} boogie_si_record_i32($i19);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $i26 := cdc_ncm_flags($p0);
    call {:si_unique_call 110} {:cexpr "tmp___0"} boogie_si_record_i8($i26);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 16);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.11, $p59);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 2);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.12, $p93);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $M.13 := $store.i32($M.13, $p95, $i94);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.14, $p97);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p99, $i98);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(22, 1));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $i102 := $load.i16($M.16, $p101);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(346, 1));
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $M.17 := $store.i16($M.17, $p103, $i102);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(20, 1));
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i106 := $load.i16($M.18, $p105);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(348, 1));
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $M.19 := $store.i16($M.19, $p107, $i106);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i110 := $load.i16($M.20, $p109);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(350, 1));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $M.21 := $store.i16($M.21, $p111, $i110);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(26, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i114 := $load.i16($M.22, $p113);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(344, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $M.23 := $store.i16($M.23, $p115, $i114);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p116, .str.1);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p117, .str.28);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p118, .str.3);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p119, .str.33);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i122 := $load.i24($M.7, $p121);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i123 := $and.i24($i122, $sub.i24(0, 262144));
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i124 := $or.i24($i123, 573);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p121, $i124);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p125, 0);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.8, $p126);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i64($i127);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i129 := $and.i64($i128, 1);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $i130 := ldv__builtin_expect($i129, 0);
    call {:si_unique_call 124} {:cexpr "tmp___3"} boogie_si_record_i64($i130);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i131 := $ne.i64($i130, 0);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(344, 1));
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i155 := $load.i16($M.23, $p154);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i156 := $zext.i16.i32($i155);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 0);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i157 == 1);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(344, 1));
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i159 := $load.i16($M.23, $p158);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i160 := $zext.i16.i32($i159);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i161 := $ugt.i32($i160, 40);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(344, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i164 := $load.i16($M.23, $p163);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i165 := $zext.i16.i32($i164);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i166 := $add.i32($i165, 1);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i167 := $sext.i32.i64($i166);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i168 := $add.i64($i167, 2);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i64.i32($i168);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i170 := $mul.i32($i169, 4);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $M.24 := $store.i32($M.24, $p171, $i170);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(316, 1));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p172, 400000);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i161 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(344, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $M.23 := $store.i16($M.23, $p162, 40);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i157 == 1;
    goto $bb27;

  $bb23:
    assume $i131 == 1;
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i132 := cdc_ncm_flags($p0);
    call {:si_unique_call 126} {:cexpr "tmp___2"} boogie_si_record_i8($i132);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p134, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.13, $p136);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.15, $p138);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(346, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i141 := $load.i16($M.17, $p140);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i142 := $zext.i16.i32($i141);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(348, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i144 := $load.i16($M.19, $p143);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i145 := $zext.i16.i32($i144);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(350, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i147 := $load.i16($M.21, $p146);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i148 := $zext.i16.i32($i147);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(344, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i150 := $load.i16($M.23, $p149);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i151 := $zext.i16.i32($i150);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i32($i132);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} vslice_dummy_var_100 := __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32.i32.i32.i32($p3, $p135, .str.33, $i137, $i139, $i142, $i145, $i148, $i151, $i152);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb14:
    assume $i63 == 1;
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p64, .str.1);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p65, .str.28);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p66, .str.3);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p67, .str.31);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i70 := $load.i24($M.7, $p69);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i71 := $and.i24($i70, $sub.i24(0, 262144));
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i72 := $or.i24($i71, 551);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p69, $i72);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p73, 0);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.8, $p74);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i64($i75);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i77 := $and.i64($i76, 1);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i78 := ldv__builtin_expect($i77, 0);
    call {:si_unique_call 118} {:cexpr "tmp___1"} boogie_si_record_i64($i78);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i14);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i84);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $i86 := usbnet_write_cmd($p0, $sub.i8(0, 124), 33, 0, $i85, $0.ref, 0);
    call {:si_unique_call 121} {:cexpr "err"} boogie_si_record_i32($i86);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i86, 0);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i87 == 1;
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} vslice_dummy_var_99 := dev_err.ref.ref($p90, .str.32);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i79 == 1;
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} vslice_dummy_var_98 := __dynamic_dev_dbg.ref.ref.ref($p2, $p82, .str.31);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb5:
    assume $i29 == 1;
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p30, .str.1);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p31, .str.28);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p32, .str.3);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p33, .str.29);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i36 := $load.i24($M.7, $p35);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i37 := $and.i24($i36, $sub.i24(0, 262144));
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i38 := $or.i24($i37, 534);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p35, $i38);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p39, 0);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.8, $p40);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i64($i41);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i43 := $and.i64($i42, 1);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 112} {:cexpr "tmp"} boogie_si_record_i64($i44);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i14);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $i52 := usbnet_write_cmd($p0, $sub.i8(0, 118), 33, 0, $i51, $0.ref, 0);
    call {:si_unique_call 115} {:cexpr "err"} boogie_si_record_i32($i52);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i52, 0);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i53 == 1;
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} vslice_dummy_var_97 := dev_err.ref.ref($p56, .str.30);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i45 == 1;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} vslice_dummy_var_96 := __dynamic_dev_dbg.ref.ref.ref($p1, $p48, .str.29);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} vslice_dummy_var_95 := dev_err.ref.ref($p23, .str.27);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i25 := $i19;
    goto $bb3;
}



const cdc_ncm_find_endpoints: ref;

axiom cdc_ncm_find_endpoints == $sub.ref(0, 203171);

procedure cdc_ncm_find_endpoints($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cdc_ncm_find_endpoints($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p44: ref;
  var $p45: ref;
  var $p36: ref;
  var $p37: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i8;
  var $p52: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $p59: ref;
  var $p60: ref;
  var $p9: ref;
  var $p10: ref;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $p90: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p9, $p10 := $0.ref, $0.ref;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p9);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p10);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    return;

  $bb40:
    assume $i77 == 1;
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(312, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 0);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb42;

  $bb43:
    assume $i80 == 1;
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(0, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p84);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 15);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i88 := __create_pipe($p82, $i87);
    call {:si_unique_call 136} {:cexpr "tmp___2"} boogie_si_record_i32($i88);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i89 := $or.i32($i88, $sub.i32(0, 1073741824));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(312, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, $i89);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb34:
    assume $i62 == 1;
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(308, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb36;

  $bb37:
    assume $i65 == 1;
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(0, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, 15);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $i73 := __create_pipe($p67, $i72);
    call {:si_unique_call 134} {:cexpr "tmp___1"} boogie_si_record_i32($i73);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i73, $sub.i32(0, 1073741696));
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(308, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i11, $p12, $p13 := 0, $0.ref, $0.ref;
    goto $bb4;

  $bb4:
    call $p14, $p15, $p16, $p17, $i18, $p19, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $p28, $i29, $i30, $p31, $p32, $i33, $i34, $p35, $p38, $i39, $i40, $i41, $i42, $p43, $i46, $i47, $p48, $p44, $p45, $p36, $p37, $i49, $i50, $i51, $p52, $p54, $i55, $i56, $i57, $i58, $i11, $p12, $p13, $p59, $p60 := cdc_ncm_find_endpoints_loop_$bb4($p0, $p1, $p2, $p14, $p15, $p16, $p17, $i18, $p19, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $p28, $i29, $i30, $p31, $p32, $i33, $i34, $p35, $p38, $i39, $i40, $i41, $i42, $p43, $i46, $i47, $p48, $p44, $p45, $p36, $p37, $i49, $i50, $i51, $p52, $p54, $i55, $i56, $i57, $i58, $i11, $p12, $p13, $p59, $p60);
    goto $bb4_last;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i11);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p17, $mul.ref($i18, 72));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p17, $mul.ref($i18, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 3);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i24, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p36, $p37 := $p13, $p12;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i11);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, 1);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    call {:si_unique_call 132} {:cexpr "ep"} boogie_si_record_i8($i51);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p2);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p52, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i51);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i58 := $sgt.i32($i56, $i57);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $p59, $p60 := $p36, $p37;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p9, $p10 := $p59, $p60;
    goto $bb3;

  $bb31:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i11, $p12, $p13 := $i51, $p37, $p36;
    goto $bb31_dummy;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p17, $mul.ref($i18, 72)), $mul.ref(0, 1));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $i29 := usb_endpoint_dir_in($p28);
    call {:si_unique_call 129} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p36, $p37 := $p13, $p12;
    goto $bb20;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(320, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(320, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p19);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb7:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i24, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb11;

  $bb12:
    assume $i27 == 1;
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p17, $mul.ref($i18, 72)), $mul.ref(0, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $i39 := usb_endpoint_dir_in($p38);
    call {:si_unique_call 131} {:cexpr "tmp___0"} boogie_si_record_i32($i39);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i40 == 1);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p12);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $p48 := $p12;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p44, $p45 := $p13, $p48;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p36, $p37 := $p44, $p45;
    goto $bb20;

  $bb27:
    assume $i47 == 1;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p48 := $p19;
    goto $bb29;

  $bb21:
    assume $i40 == 1;
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p13);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $p43 := $p13;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p44, $p45 := $p43, $p12;
    goto $bb26;

  $bb23:
    assume $i42 == 1;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p43 := $p19;
    goto $bb25;

  $bb31_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_907;
}



const usb_set_intfdata: ref;

axiom usb_set_intfdata == $sub.ref(0, 204203);

procedure usb_set_intfdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_set_intfdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} dev_set_drvdata($p2, $p1);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    return;
}



const usbnet_get_ethernet_addr: ref;

axiom usbnet_get_ethernet_addr == $sub.ref(0, 205235);

procedure usbnet_get_ethernet_addr($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usbnet_get_ethernet_addr($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 138} {:cexpr "usbnet_get_ethernet_addr:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 1} true;
    call {:si_unique_call 139} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 140} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 206267);

procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 1} true;
    call {:si_unique_call 141} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 142} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 1} true;
    call {:si_unique_call 143} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 144} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 1} true;
    call {:si_unique_call 145} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 146} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const cdc_ncm_setup: ref;

axiom cdc_ncm_setup == $sub.ref(0, 207299);

procedure cdc_ncm_setup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.11, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr;



implementation cdc_ncm_setup($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 147} {:cexpr "__min2"} boogie_si_record_i32($i7);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i8 := $ult.i32(16384, $i7);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 148} {:cexpr "__min2___0"} boogie_si_record_i32($i12);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i13 := $ult.i32(16384, $i12);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} cdc_ncm_update_rxtx_max($p0, $i9, $i14);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} cdc_ncm_fix_modulus($p0);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $i15 := cdc_ncm_max_dgram_size($p0);
    call {:si_unique_call 152} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} cdc_ncm_set_dgram_size($p0, $i15);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i14 := 16384;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i9 := 16384;
    goto $bb3;
}



const usb_driver_release_interface: ref;

axiom usb_driver_release_interface == $sub.ref(0, 208331);

procedure usb_driver_release_interface($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_driver_release_interface($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    return;
}



const cdc_ncm_free: ref;

axiom cdc_ncm_free == $sub.ref(0, 209363);

procedure cdc_ncm_free($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cdc_ncm_free($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(224, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} kfree($p17);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} dev_kfree_skb_any($p15);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $0.ref);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(224, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} dev_kfree_skb_any($p8);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(224, 1));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $0.ref);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_kfree_skb_any: ref;

axiom dev_kfree_skb_any == $sub.ref(0, 210395);

procedure dev_kfree_skb_any($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_any($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} __dev_kfree_skb_any($p0, 1);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 211427);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} free_($p0);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 212459);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 159} $free($p0);
    return;
}



const __dev_kfree_skb_any: ref;

axiom __dev_kfree_skb_any == $sub.ref(0, 213491);

procedure __dev_kfree_skb_any($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __dev_kfree_skb_any($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} {:cexpr "__dev_kfree_skb_any:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    return;
}



const cdc_ncm_update_rxtx_max: ref;

axiom cdc_ncm_update_rxtx_max == $sub.ref(0, 214523);

procedure cdc_ncm_update_rxtx_max($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.11, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr;



implementation cdc_ncm_update_rxtx_max($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i24: i32;
  var $i25: i16;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i24;
  var $i36: i24;
  var $i37: i24;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $i53: i32;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i1;
  var $i63: i8;
  var $i64: i1;
  var $i65: i32;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i16;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $i90: i1;
  var $i91: i8;
  var $i92: i1;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i64;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i16;
  var $p120: ref;
  var $i121: i32;
  var $i122: i16;
  var $i123: i32;
  var $i124: i32;
  var $i125: i32;
  var $i126: i32;
  var $i127: i16;
  var $p128: ref;
  var $i129: i32;
  var $i130: i16;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i136: i32;
  var $i135: i32;
  var $i137: i16;
  var $i138: i32;
  var $i139: i32;
  var $i140: i1;
  var $i141: i32;
  var $i143: i32;
  var $i142: i32;
  var $i144: i16;
  var $p145: ref;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 163} {:cexpr "cdc_ncm_update_rxtx_max:arg:new_rx"} boogie_si_record_i32($i1);
    call {:si_unique_call 164} {:cexpr "cdc_ncm_update_rxtx_max:arg:new_tx"} boogie_si_record_i32($i2);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(200, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    call {:si_unique_call 165} {:cexpr "iface_no"} boogie_si_record_i8($i15);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $i16 := cdc_ncm_check_rx_max($p0, $i1);
    call {:si_unique_call 167} {:cexpr "val"} boogie_si_record_i32($i16);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, $i16);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(536, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i54 := $zext.i32.i64($i53);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i51, $i54);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $i65 := cdc_ncm_check_tx_max($p0, $i2);
    call {:si_unique_call 178} {:cexpr "val"} boogie_si_record_i32($i65);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, $i65);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, $i65);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i87 := $i65;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $i90 := netif_running($p89);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i91 := $zext.i1.i8($i90);
    call {:si_unique_call 184} {:cexpr "tmp___3"} boogie_si_record_i8($i91);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i8.i1($i91);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i87);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(532, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p114, $i113);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} usbnet_update_max_qlen($p0);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(0, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(312, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i119 := usb_maxpacket($p116, $i118, 1);
    call {:si_unique_call 191} {:cexpr "tmp___4"} boogie_si_record_i16($i119);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i32.i16($i121);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i123 := $zext.i16.i32($i122);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i124 := $zext.i16.i32($i119);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i125 := $mul.i32($i124, 65533);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i126 := $add.i32($i123, $i125);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i32.i16($i126);
    call {:si_unique_call 192} {:cexpr "__val"} boogie_si_record_i16($i127);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i32.i16($i129);
    call {:si_unique_call 193} {:cexpr "__max"} boogie_si_record_i16($i130);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i131 := $zext.i16.i32(512);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i132 := $zext.i16.i32($i127);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i133 := $sgt.i32($i131, $i132);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i133 == 1);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i136 := $zext.i16.i32($i127);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i135 := $i136;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i32.i16($i135);
    call {:si_unique_call 194} {:cexpr "__val"} boogie_si_record_i16($i137);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i138 := $zext.i16.i32($i130);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i139 := $zext.i16.i32($i137);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i140 := $slt.i32($i138, $i139);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i140 == 1);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i143 := $zext.i16.i32($i137);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i142 := $i143;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i144 := $trunc.i32.i16($i142);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(356, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p145, $i144);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    return;

  $bb37:
    assume $i140 == 1;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i141 := $zext.i16.i32($i130);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i142 := $i141;
    goto $bb39;

  $bb34:
    assume $i133 == 1;
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i134 := $zext.i16.i32(512);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i135 := $i134;
    goto $bb36;

  $bb25:
    assume $i92 == 1;
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i95 := $ult.i32($i94, $i87);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb27;

  $bb28:
    assume $i95 == 1;
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} netif_tx_lock_bh($p97);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} vslice_dummy_var_104 := usbnet_start_xmit($0.ref, $p99);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p102);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i104 := $ne.i64($i103, 0);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p108, $i87);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} netif_tx_unlock_bh($p110);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i104 == 1;
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} dev_kfree_skb_any($p106);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p107, $0.ref);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb19:
    assume $i76 == 1;
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(0, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(312, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $i81 := usb_maxpacket($p78, $i80, 1);
    call {:si_unique_call 181} {:cexpr "tmp___2"} boogie_si_record_i16($i81);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i83 := $urem.i32($i65, $i82);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 0);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i86 := $i65;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i87 := $i86;
    goto $bb24;

  $bb21:
    assume $i84 == 1;
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i65, 1);
    call {:si_unique_call 182} {:cexpr "val"} boogie_si_record_i32($i85);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i86 := $i85;
    goto $bb23;

  $bb16:
    assume $i68 == 1;
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} vslice_dummy_var_103 := _dev_info.ref.ref.i32($p71, .str.37, $i65);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i55 == 1;
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i58 := $zext.i32.i64($i57);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(536, 1));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p59, $i58);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i62 := netif_running($p61);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i8($i62);
    call {:si_unique_call 175} {:cexpr "tmp___1"} boogie_si_record_i8($i63);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i8.i1($i63);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i64 == 1;
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} usbnet_unlink_rx_urbs($p0);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $M.11 := $store.i32($M.11, $p3, $i16);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} vslice_dummy_var_101 := _dev_info.ref.ref.i32($p22, .str.34, $i16);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i15);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p3);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i27 := usbnet_write_cmd($p0, $sub.i8(0, 122), 33, 0, $i25, $p26, 4);
    call {:si_unique_call 170} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i28 == 1);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i16);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i28 == 1;
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p29, .str.1);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p30, .str.35);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p31, .str.3);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p32, .str.36);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i35 := $load.i24($M.7, $p34);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i36 := $and.i24($i35, $sub.i24(0, 262144));
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i37 := $or.i24($i36, 424);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p34, $i37);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p38, 0);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.8, $p39);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i64($i40);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i41, 1);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 172} {:cexpr "tmp"} boogie_si_record_i64($i43);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume $i44 == 1;
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} vslice_dummy_var_102 := __dynamic_dev_dbg.ref.ref.ref($p4, $p47, .str.36);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const cdc_ncm_fix_modulus: ref;

axiom cdc_ncm_fix_modulus == $sub.ref(0, 215555);

procedure cdc_ncm_fix_modulus($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.0, $CurrAddr;



implementation cdc_ncm_fix_modulus($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i24;
  var $i25: i24;
  var $i26: i24;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i24;
  var $i56: i24;
  var $i57: i24;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i16;
  var $i72: i32;
  var $p73: ref;
  var $i74: i16;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i24;
  var $i84: i24;
  var $i85: i24;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $i100: i16;
  var $i101: i32;
  var $i102: i16;
  var $i103: i32;
  var $i104: i32;
  var $i105: i16;
  var $i106: i32;
  var $p107: ref;
  var $i108: i16;
  var $i109: i32;
  var $i110: i32;
  var $i111: i16;
  var $i112: i32;
  var $i113: i32;
  var $i114: i16;
  var $p115: ref;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(350, 1));
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    call {:si_unique_call 198} {:cexpr "val"} boogie_si_record_i32($i10);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i11 := $ule.i32($i10, 3);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i11 == 1);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, $i10);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, $i10);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, $i10);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i17 := $ule.i32($i16, $i10);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(348, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    call {:si_unique_call 202} {:cexpr "val"} boogie_si_record_i32($i41);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i42 := $ule.i32($i41, 3);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i42 == 1);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, $i41);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, $i41);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, $i41);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i45 == 1);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i48 := $ule.i32($i47, $i41);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(346, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.0, $p70);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(348, 1));
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i74 := $load.i16($M.0, $p73);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i74);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i76 := $sge.i32($i72, $i75);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i98 := cdc_ncm_eth_hlen($p0);
    call {:si_unique_call 210} {:cexpr "tmp___2"} boogie_si_record_i32($i98);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(346, 1));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i100 := $load.i16($M.0, $p99);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i100);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i16($i98);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i32($i102);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i104 := $sub.i32($i101, $i103);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i32.i16($i104);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i106 := $sext.i16.i32($i105);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(348, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i108 := $load.i16($M.0, $p107);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i108);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i109, 65535);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i16($i110);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i112 := $sext.i16.i32($i111);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i113 := $and.i32($i106, $i112);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i16($i113);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(346, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p115, $i114);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i76 == 1;
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p77, .str.1);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p78, .str.44);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p79, .str.3);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p80, .str.47);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i83 := $load.i24($M.7, $p82);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i84 := $and.i24($i83, $sub.i24(0, 262144));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i85 := $or.i24($i84, 673);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p82, $i85);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p86, 0);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.8, $p87);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i64($i88);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i90 := $and.i64($i89, 1);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i91 := ldv__builtin_expect($i90, 0);
    call {:si_unique_call 207} {:cexpr "tmp___1"} boogie_si_record_i64($i91);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(346, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p97, 0);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i92 == 1;
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} vslice_dummy_var_107 := __dynamic_dev_dbg.ref.ref.ref($p3, $p95, .str.47);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p49, .str.1);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p50, .str.44);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p51, .str.3);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p52, .str.46);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i55 := $load.i24($M.7, $p54);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i56 := $and.i24($i55, $sub.i24(0, 262144));
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i57 := $or.i24($i56, 667);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p54, $i57);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p58, 0);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.8, $p59);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i64($i60);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i62 := $and.i64($i61, 1);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i63 := ldv__builtin_expect($i62, 0);
    call {:si_unique_call 204} {:cexpr "tmp___0"} boogie_si_record_i64($i63);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(348, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p69, 4);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i64 == 1;
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} vslice_dummy_var_106 := __dynamic_dev_dbg.ref.ref.ref($p2, $p67, .str.46);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb13;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p18, .str.1);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p19, .str.44);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p20, .str.3);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p21, .str.45);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i24 := $load.i24($M.7, $p23);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i25 := $and.i24($i24, $sub.i24(0, 262144));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i26 := $or.i24($i25, 653);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p23, $i26);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p27, 0);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.8, $p28);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 1);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 200} {:cexpr "tmp"} boogie_si_record_i64($i32);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(350, 1));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p38, 4);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} vslice_dummy_var_105 := __dynamic_dev_dbg.ref.ref.ref($p1, $p36, .str.45);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;
}



const cdc_ncm_max_dgram_size: ref;

axiom cdc_ncm_max_dgram_size == $sub.ref(0, 216587);

procedure cdc_ncm_max_dgram_size($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cdc_ncm_max_dgram_size($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 14);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 416)), $mul.ref(192, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i32 := 8192;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb10:
    assume $i36 == 1;
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 416)), $mul.ref(192, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i32 := $i41;
    goto $bb8;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb3;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 416)), $mul.ref(176, 1));
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb3;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 416)), $mul.ref(176, 1));
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 14)), $mul.ref(10, 1));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb8;
}



const cdc_ncm_set_dgram_size: ref;

axiom cdc_ncm_set_dgram_size == $sub.ref(0, 217619);

procedure cdc_ncm_set_dgram_size($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.11, $CurrAddr;



implementation cdc_ncm_set_dgram_size($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i16;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i24;
  var $i38: i24;
  var $i39: i24;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i51: i16;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i16;
  var $i59: i32;
  var $i60: i16;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i24;
  var $i71: i24;
  var $i72: i24;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i16;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i1;
  var $i113: i32;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 214} {:cexpr "cdc_ncm_set_dgram_size:arg:new_size"} boogie_si_record_i32($i1);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(200, 1));
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    call {:si_unique_call 215} {:cexpr "iface_no"} boogie_si_record_i8($i15);
    call {:si_unique_call 216} {:cexpr "cdc_ncm_set_dgram_size:arg:__val"} boogie_si_record_i32($i1);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $i16 := cdc_ncm_min_dgram_size($p0);
    call {:si_unique_call 218} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i32($i16, $i1);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i18 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i19 := $ult.i32(8192, $i18);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(340, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i22 := cdc_ncm_flags($p0);
    call {:si_unique_call 220} {:cexpr "tmp___0"} boogie_si_record_i8($i22);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 8);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i15);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p2);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $i29 := usbnet_read_cmd($p0, $sub.i8(0, 121), $sub.i8(0, 95), 0, $i27, $p28, 2);
    call {:si_unique_call 226} {:cexpr "err"} boogie_si_record_i32($i29);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 0);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.11, $p2);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(340, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i52, $i54);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(340, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i16($i57);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $M.11 := $store.i16($M.11, $p2, $i58);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i15);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i59);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p2);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i62 := usbnet_write_cmd($p0, $sub.i8(0, 120), 33, 0, $i60, $p61, 2);
    call {:si_unique_call 231} {:cexpr "err"} boogie_si_record_i32($i62);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i62, 0);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    call {:si_unique_call 221} {:cexpr "__min1"} boogie_si_record_i32($i87);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i88 := cdc_ncm_eth_hlen($p0);
    call {:si_unique_call 223} {:cexpr "tmp___3"} boogie_si_record_i32($i88);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(340, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i91 := $sub.i32($i90, $i88);
    call {:si_unique_call 224} {:cexpr "__min2"} boogie_si_record_i32($i91);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i87, $i91);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i92 == 1);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i93 := $i91;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $i93);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(184, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, 0);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i100 == 1;
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(184, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 10)), $mul.ref(8, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i104 := $load.i16($M.0, $p103);
    call {:si_unique_call 235} {:cexpr "mbim_mtu"} boogie_si_record_i16($i104);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i105 := $zext.i16.i32($i104);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb31:
    assume $i106 == 1;
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i104);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i112 := $ult.i32($i107, $i111);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb33;

  $bb34:
    assume $i112 == 1;
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i113 := $zext.i16.i32($i104);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, $i113);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb26:
    assume $i92 == 1;
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i93 := $i87;
    goto $bb28;

  $bb20:
    assume $i63 == 1;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p64, .str.1);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p65, .str.48);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p66, .str.3);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p67, .str.50);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i70 := $load.i24($M.7, $p69);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i71 := $and.i24($i70, $sub.i24(0, 262144));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i72 := $or.i24($i71, 624);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p69, $i72);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p73, 0);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.8, $p74);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i64($i75);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i77 := $and.i64($i76, 1);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $i78 := ldv__builtin_expect($i77, 0);
    call {:si_unique_call 233} {:cexpr "tmp___2"} boogie_si_record_i64($i78);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i79 == 1;
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} vslice_dummy_var_109 := __dynamic_dev_dbg.ref.ref.ref($p4, $p82, .str.50);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb17:
    assume $i55 == 1;
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p31, .str.1);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p32, .str.48);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p33, .str.3);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p34, .str.49);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i37 := $load.i24($M.7, $p36);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i38 := $and.i24($i37, $sub.i24(0, 262144));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i39 := $or.i24($i38, 612);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p36, $i39);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p40, 0);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.8, $p41);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i64($i42);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i44 := $and.i64($i43, 1);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 228} {:cexpr "tmp___1"} boogie_si_record_i64($i45);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13:
    assume $i46 == 1;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} vslice_dummy_var_108 := __dynamic_dev_dbg.ref.ref.ref($p3, $p49, .str.49);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i20 := 8192;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    goto $bb3;
}



const cdc_ncm_min_dgram_size: ref;

axiom cdc_ncm_min_dgram_size == $sub.ref(0, 218651);

procedure cdc_ncm_min_dgram_size($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cdc_ncm_min_dgram_size($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 14);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i19 := 1514;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i19 := 2048;
    goto $bb6;
}



const cdc_ncm_flags: ref;

axiom cdc_ncm_flags == $sub.ref(0, 219683);

procedure cdc_ncm_flags($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation cdc_ncm_flags($p0: ref) returns ($r: i8)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i31: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i3);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 14);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 416)), $mul.ref(168, 1));
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 416)), $mul.ref(168, 1));
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i31 := $i39;
    goto $bb8;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb3;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 416)), $mul.ref(176, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb3;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 416)), $mul.ref(176, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 14)), $mul.ref(12, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb8;
}



const usbnet_read_cmd: ref;

axiom usbnet_read_cmd == $sub.ref(0, 220715);

procedure usbnet_read_cmd($p0: ref, $i1: i8, $i2: i8, $i3: i16, $i4: i16, $p5: ref, $i6: i16) returns ($r: i32);
  free requires assertsPassed;



implementation usbnet_read_cmd($p0: ref, $i1: i8, $i2: i8, $i3: i16, $i4: i16, $p5: ref, $i6: i16) returns ($r: i32)
{
  var $i7: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 236} {:cexpr "usbnet_read_cmd:arg:arg1"} boogie_si_record_i8($i1);
    call {:si_unique_call 237} {:cexpr "usbnet_read_cmd:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 238} {:cexpr "usbnet_read_cmd:arg:arg3"} boogie_si_record_i16($i3);
    call {:si_unique_call 239} {:cexpr "usbnet_read_cmd:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 240} {:cexpr "usbnet_read_cmd:arg:arg6"} boogie_si_record_i16($i6);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 1} true;
    call {:si_unique_call 241} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 242} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const usbnet_write_cmd: ref;

axiom usbnet_write_cmd == $sub.ref(0, 221747);

procedure usbnet_write_cmd($p0: ref, $i1: i8, $i2: i8, $i3: i16, $i4: i16, $p5: ref, $i6: i16) returns ($r: i32);
  free requires assertsPassed;



implementation usbnet_write_cmd($p0: ref, $i1: i8, $i2: i8, $i3: i16, $i4: i16, $p5: ref, $i6: i16) returns ($r: i32)
{
  var $i7: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 243} {:cexpr "usbnet_write_cmd:arg:arg1"} boogie_si_record_i8($i1);
    call {:si_unique_call 244} {:cexpr "usbnet_write_cmd:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 245} {:cexpr "usbnet_write_cmd:arg:arg3"} boogie_si_record_i16($i3);
    call {:si_unique_call 246} {:cexpr "usbnet_write_cmd:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 247} {:cexpr "usbnet_write_cmd:arg:arg6"} boogie_si_record_i16($i6);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 1} true;
    call {:si_unique_call 248} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 249} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const cdc_ncm_eth_hlen: ref;

axiom cdc_ncm_eth_hlen == $sub.ref(0, 222779);

procedure cdc_ncm_eth_hlen($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cdc_ncm_eth_hlen($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 14);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i19 := 14;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb6;
}



const cdc_ncm_check_rx_max: ref;

axiom cdc_ncm_check_rx_max == $sub.ref(0, 223811);

procedure cdc_ncm_check_rx_max($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation cdc_ncm_check_rx_max($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i24;
  var $i33: i24;
  var $i34: i24;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 251} {:cexpr "cdc_ncm_check_rx_max:arg:new_rx"} boogie_si_record_i32($i1);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 252} {:cexpr "__min2"} boogie_si_record_i32($i9);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i10 := $ult.i32(32768, $i9);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i12 := $ult.i32($i11, 2048);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i20 := $i11;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} {:cexpr "cdc_ncm_check_rx_max:arg:__val"} boogie_si_record_i32($i1);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i32(2048, $i1);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i22 := $i1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i23 := $ult.i32($i20, $i22);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, $i1);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p26, .str.1);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p27, .str.39);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p28, .str.3);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p29, .str.40);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i32 := $load.i24($M.7, $p31);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i33 := $and.i24($i32, $sub.i24(0, 262144));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i34 := $or.i24($i33, 239);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p31, $i34);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p35, 0);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.8, $p36);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i64($i37);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 1);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 256} {:cexpr "tmp"} boogie_si_record_i64($i40);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i41 == 1;
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} vslice_dummy_var_111 := __dynamic_dev_dbg.ref.ref.ref.i32.i32($p2, $p44, .str.40, 2048, $i20);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i24 := $i20;
    goto $bb12;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i22 := 2048;
    goto $bb9;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} vslice_dummy_var_110 := dev_warn.ref.ref.i32.i32($p15, .str.38, $i18, 2048);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i20 := 2048;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i11 := 32768;
    goto $bb3;
}



const netif_running: ref;

axiom netif_running == $sub.ref(0, 224843);

procedure netif_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_running($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(72, 1));
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 259} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usbnet_unlink_rx_urbs: ref;

axiom usbnet_unlink_rx_urbs == $sub.ref(0, 225875);

procedure usbnet_unlink_rx_urbs($p0: ref);
  free requires assertsPassed;



implementation usbnet_unlink_rx_urbs($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    return;
}



const cdc_ncm_check_tx_max: ref;

axiom cdc_ncm_check_tx_max == $sub.ref(0, 226907);

procedure cdc_ncm_check_tx_max($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation cdc_ncm_check_tx_max($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i24;
  var $i32: i24;
  var $i33: i24;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var vslice_dummy_var_112: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 261} {:cexpr "cdc_ncm_check_tx_max:arg:new_tx"} boogie_si_record_i32($i1);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(340, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i8, $i10);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 12);
    call {:si_unique_call 262} {:cexpr "min"} boogie_si_record_i32($i12);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 263} {:cexpr "__min2"} boogie_si_record_i32($i15);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i16 := $ult.i32(32768, $i15);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i18 := $ult.i32($i12, $i17);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} {:cexpr "cdc_ncm_check_tx_max:arg:__val"} boogie_si_record_i32($i1);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i32($i19, $i1);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i21 := $i1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i22 := $ult.i32($i17, $i21);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, $i1);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p25, .str.1);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p26, .str.41);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p27, .str.3);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p28, .str.42);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i31 := $load.i24($M.7, $p30);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i32 := $and.i24($i31, $sub.i24(0, 262144));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i33 := $or.i24($i32, 258);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p30, $i33);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p34, 0);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.8, $p35);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i64($i36);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i38 := $and.i64($i37, 1);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 266} {:cexpr "tmp"} boogie_si_record_i64($i39);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i40 == 1;
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} vslice_dummy_var_112 := __dynamic_dev_dbg.ref.ref.ref.i32.i32($p2, $p43, .str.42, $i19, $i17);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i23 := $i17;
    goto $bb12;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    goto $bb9;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i19 := $i12;
    goto $bb6;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i17 := 32768;
    goto $bb3;
}



const usb_maxpacket: ref;

axiom usb_maxpacket == $sub.ref(0, 227939);

procedure usb_maxpacket($p0: ref, $i1: i32, $i2: i32) returns ($r: i16);
  free requires assertsPassed;



implementation usb_maxpacket($p0: ref, $i1: i32, $i2: i32) returns ($r: i16)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i18: i64;
  var $p20: ref;
  var $p21: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i35: i64;
  var $p37: ref;
  var $p38: ref;
  var $p22: ref;
  var $i39: i64;
  var $i40: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i16;
  var $i41: i16;
  var vslice_dummy_var_113: i64;
  var vslice_dummy_var_114: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} {:cexpr "usb_maxpacket:arg:pipe"} boogie_si_record_i32($i1);
    call {:si_unique_call 269} {:cexpr "usb_maxpacket:arg:is_out"} boogie_si_record_i32($i2);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i3 := $ashr.i32($i1, 15);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 15);
    call {:si_unique_call 270} {:cexpr "epnum"} boogie_si_record_i32($i4);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i1, 128);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    call {:si_unique_call 274} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i25);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 276} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i25, 0);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} vslice_dummy_var_114 := ldv__builtin_expect($i33, 0);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i4);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1616, 1)), $mul.ref($i35, 8));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    assume {:verifier.code 0} true;
    $p22 := $p38;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p22);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p22, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $i43 := usb_endpoint_maxp($p42);
    call {:si_unique_call 282} {:cexpr "tmp___1"} boogie_si_record_i32($i43);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i41 := $i44;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb10:
    assume $i40 == 1;
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb12;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} warn_slowpath_null(.str.43, 1828);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i1, 128);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 271} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i8);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 273} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} vslice_dummy_var_113 := ldv__builtin_expect($i16, 0);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i4);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1744, 1)), $mul.ref($i18, 8));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p22 := $p21;
    goto $bb6;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} warn_slowpath_null(.str.43, 1825);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const netif_tx_lock_bh: ref;

axiom netif_tx_lock_bh == $sub.ref(0, 228971);

procedure netif_tx_lock_bh($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation netif_tx_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} local_bh_disable();
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} netif_tx_lock($p0);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    return;
}



const usbnet_start_xmit: ref;

axiom usbnet_start_xmit == $sub.ref(0, 230003);

procedure usbnet_start_xmit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usbnet_start_xmit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 1} true;
    call {:si_unique_call 285} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 286} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const netif_tx_unlock_bh: ref;

axiom netif_tx_unlock_bh == $sub.ref(0, 231035);

procedure netif_tx_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation netif_tx_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} netif_tx_unlock($p0);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} local_bh_enable();
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    return;
}



const usbnet_update_max_qlen: ref;

axiom usbnet_update_max_qlen == $sub.ref(0, 232067);

procedure usbnet_update_max_qlen($p0: ref);
  free requires assertsPassed;



implementation usbnet_update_max_qlen($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_unlock: ref;

axiom netif_tx_unlock == $sub.ref(0, 233099);

procedure netif_tx_unlock($p0: ref);
  free requires assertsPassed;



implementation netif_tx_unlock($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i4: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(928, 1));
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i2, 0);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(952, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} spin_unlock($p10);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $p5, $p6, $i7, $i8, $i9, $i4 := netif_tx_unlock_loop_$bb4($p0, $p1, $p5, $p6, $i7, $i8, $i9, $i4);
    goto $bb4_last;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $p5 := netdev_get_tx_queue($p0, $i4);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} clear_bit(2, $p6);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} netif_schedule_queue($p5);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i4, 1);
    call {:si_unique_call 292} {:cexpr "i"} boogie_si_record_i32($i7);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p1);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i32($i8, $i7);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i7;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1996;
}



const local_bh_enable: ref;

axiom local_bh_enable == $sub.ref(0, 234131);

procedure local_bh_enable();
  free requires assertsPassed;



implementation local_bh_enable()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} __local_bh_enable_ip(0, 512);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    return;
}



const __local_bh_enable_ip: ref;

axiom __local_bh_enable_ip == $sub.ref(0, 235163);

procedure __local_bh_enable_ip($i0: i64, $i1: i32);
  free requires assertsPassed;



implementation __local_bh_enable_ip($i0: i64, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} {:cexpr "__local_bh_enable_ip:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 296} {:cexpr "__local_bh_enable_ip:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    return;
}



const netdev_get_tx_queue: ref;

axiom netdev_get_tx_queue == $sub.ref(0, 236195);

procedure netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} {:cexpr "netdev_get_tx_queue:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(920, 1));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 496));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 237227);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 299} devirtbounce(0, $p1, $i0, $p1);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    return;
}



const netif_schedule_queue: ref;

axiom netif_schedule_queue == $sub.ref(0, 238259);

procedure netif_schedule_queue($p0: ref);
  free requires assertsPassed;



implementation netif_schedule_queue($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 3);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(8, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} __netif_schedule($p6);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 239291);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} _raw_spin_unlock($p2);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 240323);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    return;
}



const __netif_schedule: ref;

axiom __netif_schedule == $sub.ref(0, 241355);

procedure __netif_schedule($p0: ref);
  free requires assertsPassed;



implementation __netif_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    return;
}



const local_bh_disable: ref;

axiom local_bh_disable == $sub.ref(0, 242387);

procedure local_bh_disable();
  free requires assertsPassed;



implementation local_bh_disable()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} __local_bh_disable_ip(0, 512);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_lock: ref;

axiom netif_tx_lock == $sub.ref(0, 243419);

procedure netif_tx_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation netif_tx_lock($p0: ref)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i10: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(952, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} spin_lock($p1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} __bad_size_call_parameter();
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i10 := $u0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(928, 1));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i32($i15, 0);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i16 == 1;
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb26;

  $bb26:
    call $p18, $p19, $i20, $i21, $i22, $i17 := netif_tx_lock_loop_$bb26($p0, $i10, $p14, $p18, $p19, $i20, $i21, $i22, $i17);
    goto $bb26_last;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $p18 := netdev_get_tx_queue($p0, $i17);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} __netif_tx_lock($p18, $i10);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} set_bit(2, $p19);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} __netif_tx_unlock($p18);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i17, 1);
    call {:si_unique_call 317} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p14);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32($i21, $i20);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i22 == 1);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb28:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i17 := $i20;
    goto $bb28_dummy;

  $bb6:
    assume $i4 == 1;
    call {:si_unique_call 304} $i13 := devirtbounce.1(0, cpu_number);
    call {:si_unique_call 305} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i13);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i10 := $i13;
    goto $bb18;

  $bb4:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb9:
    assume $i5 == 1;
    call {:si_unique_call 306} $i12 := devirtbounce.1(0, cpu_number);
    call {:si_unique_call 307} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i12);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb18;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i6 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb13:
    assume $i7 == 1;
    call {:si_unique_call 308} $i11 := devirtbounce.1(0, cpu_number);
    call {:si_unique_call 309} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i11);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i10 := $i11;
    goto $bb18;

  $bb11:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb15:
    assume $i8 == 1;
    call {:si_unique_call 310} $i9 := devirtbounce.1(0, cpu_number);
    call {:si_unique_call 311} {:cexpr "pfo_ret__"} boogie_si_record_i32($i9);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb18;

  $bb28_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2067;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 244451);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} _raw_spin_lock($p2);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    return;
}



const __bad_size_call_parameter: ref;

axiom __bad_size_call_parameter == $sub.ref(0, 245483);

procedure __bad_size_call_parameter();



const __netif_tx_lock: ref;

axiom __netif_tx_lock == $sub.ref(0, 246515);

procedure __netif_tx_lock($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __netif_tx_lock($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} {:cexpr "__netif_tx_lock:arg:cpu"} boogie_si_record_i32($i1);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(328, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} spin_lock($p2);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(400, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i1);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 247547);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 322} devirtbounce(0, $p1, $i0, $p1);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    return;
}



const __netif_tx_unlock: ref;

axiom __netif_tx_unlock == $sub.ref(0, 248579);

procedure __netif_tx_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __netif_tx_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(400, 1));
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $sub.i32(0, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(328, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} spin_unlock($p2);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 249611);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    return;
}



const __local_bh_disable_ip: ref;

axiom __local_bh_disable_ip == $sub.ref(0, 250643);

procedure __local_bh_disable_ip($i0: i64, $i1: i32);
  free requires assertsPassed;



implementation __local_bh_disable_ip($i0: i64, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} {:cexpr "__local_bh_disable_ip:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 325} {:cexpr "__local_bh_disable_ip:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 251675);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    return;
}



const usb_endpoint_maxp: ref;

axiom usb_endpoint_maxp == $sub.ref(0, 252707);

procedure usb_endpoint_maxp($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_maxp($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 253739);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 254771);

procedure dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 1} true;
    call {:si_unique_call 328} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 329} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 255803);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    return;
}



const usb_endpoint_dir_in: ref;

axiom usb_endpoint_dir_in == $sub.ref(0, 256835);

procedure usb_endpoint_dir_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 257867);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 258899);

procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 1} true;
    call {:si_unique_call 331} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 332} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 259931);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 1} true;
    call {:si_unique_call 333} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 334} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const spin_lock_bh: ref;

axiom spin_lock_bh == $sub.ref(0, 260963);

procedure spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation spin_lock_bh($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} _raw_spin_lock_bh($p2);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    return;
}



const cdc_ncm_tx_timeout_start: ref;

axiom cdc_ncm_tx_timeout_start == $sub.ref(0, 261995);

procedure cdc_ncm_tx_timeout_start($p0: ref);
  free requires assertsPassed;
  modifies $M.26, $M.27, $M.28, $CurrAddr;



implementation cdc_ncm_tx_timeout_start($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_115: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(32, 1));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $i4 := hrtimer_active($p3);
    call {:si_unique_call 339} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(312, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i7 := atomic_read($p6);
    call {:si_unique_call 341} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(316, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $i12 := ktime_set(0, $i11);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $M.26 := $store.i64($M.26, $p13, $i12);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.26;
    cmdloc_dummy_var_1 := $M.26;
    call {:si_unique_call 343} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p14, $p15, 8, $zext.i32.i64(8), 0 == 1);
    $M.26 := cmdloc_dummy_var_2;
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(32, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.26, $p17);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} vslice_dummy_var_115 := hrtimer_start($p16, $i18, 1);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const spin_unlock_bh: ref;

axiom spin_unlock_bh == $sub.ref(0, 263027);

procedure spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_bh($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} _raw_spin_unlock_bh($p2);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_bh: ref;

axiom _raw_spin_unlock_bh == $sub.ref(0, 264059);

procedure _raw_spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    return;
}



const hrtimer_active: ref;

axiom hrtimer_active == $sub.ref(0, 265091);

procedure hrtimer_active($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation hrtimer_active($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 266123);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ktime_set: ref;

axiom ktime_set == $sub.ref(0, 267155);

procedure ktime_set($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.27, $CurrAddr;



implementation ktime_set($i0: i64, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 349} {:cexpr "ktime_set:arg:secs"} boogie_si_record_i64($i0);
    call {:si_unique_call 350} {:cexpr "ktime_set:arg:nsecs"} boogie_si_record_i64($i1);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i64($i0, 9223372035);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 352} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $mul.i64($i0, 1000000000);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, $i1);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $M.27 := $store.i64($M.27, $p15, $i14);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p4);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.27;
    cmdloc_dummy_var_7 := $M.27;
    call {:si_unique_call 354} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p16, $p17, 8, $zext.i32.i64(8), 0 == 1);
    $M.27 := cmdloc_dummy_var_8;
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.27, $p18);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p3);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $M.27 := $store.i64($M.27, $p10, 9223372036854775807);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.27;
    cmdloc_dummy_var_4 := $M.27;
    call {:si_unique_call 353} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p11, $p12, 8, $zext.i32.i64(8), 0 == 1);
    $M.27 := cmdloc_dummy_var_5;
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 268187);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const hrtimer_start: ref;

axiom hrtimer_start == $sub.ref(0, 269219);

procedure hrtimer_start($p0: ref, $i1: i64, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $CurrAddr;



implementation hrtimer_start($p0: ref, $i1: i64, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.28 := $store.i64($M.28, $p4, $i1);
    call {:si_unique_call 356} {:cexpr "hrtimer_start:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 1} true;
    call {:si_unique_call 357} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 358} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const _raw_spin_lock_bh: ref;

axiom _raw_spin_lock_bh == $sub.ref(0, 270251);

procedure _raw_spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    return;
}



const tasklet_schedule: ref;

axiom tasklet_schedule == $sub.ref(0, 271283);

procedure tasklet_schedule($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation tasklet_schedule($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $i2 := test_and_set_bit(0, $p1);
    call {:si_unique_call 360} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} __tasklet_schedule($p0);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 272315);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 363} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 364} devirtbounce.2(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.29, $p2);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __tasklet_schedule: ref;

axiom __tasklet_schedule == $sub.ref(0, 273347);

procedure __tasklet_schedule($p0: ref);
  free requires assertsPassed;



implementation __tasklet_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 274379);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 366} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 275411);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 369} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $p2 := ldv_malloc($i0);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 276443);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 371} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 1} true;
    call {:si_unique_call 372} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 373} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 374} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $p4 := malloc($i0);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 1} true;
    call {:si_unique_call 376} __VERIFIER_assume($i7);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 277475);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 377} $r := $malloc($i0);
    return;
}



const cdc_ncm_unbind: ref;

axiom cdc_ncm_unbind == $sub.ref(0, 278507);

procedure cdc_ncm_unbind($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cdc_ncm_unbind($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var vslice_dummy_var_116: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $p6 := driver_of($p1);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p5);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(312, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} atomic_set($p9, 1);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(32, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $i11 := hrtimer_active($p10);
    call {:si_unique_call 381} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(128, 1));
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} tasklet_kill($p15);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(200, 1));
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i18, $i21);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(200, 1));
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p1);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i26, $i27);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p1);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i40, $i41);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} usb_set_intfdata($p1, $0.ref);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} cdc_ncm_free($p5);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(200, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb19;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(200, 1));
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} usb_set_intfdata($p48, $0.ref);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(200, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} usb_driver_release_interface($p6, $p50);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(200, 1));
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $0.ref);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb13;

  $bb14:
    assume $i32 == 1;
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} usb_set_intfdata($p34, $0.ref);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} usb_driver_release_interface($p6, $p36);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $0.ref);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $0.ref);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(32, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} vslice_dummy_var_116 := hrtimer_cancel($p13);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hrtimer_cancel: ref;

axiom hrtimer_cancel == $sub.ref(0, 279539);

procedure hrtimer_cancel($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation hrtimer_cancel($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 1} true;
    call {:si_unique_call 390} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 391} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const tasklet_kill: ref;

axiom tasklet_kill == $sub.ref(0, 280571);

procedure tasklet_kill($p0: ref);
  free requires assertsPassed;



implementation tasklet_kill($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    return;
}



const cdc_ncm_select_altsetting: ref;

axiom cdc_ncm_select_altsetting == $sub.ref(0, 281603);

procedure cdc_ncm_select_altsetting($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation cdc_ncm_select_altsetting($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i8;
  var $i10: i8;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i9: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(16, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i3 := $ule.i32($i2, 1);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $M.30;
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $p12 := usb_altnum_to_altsetting($p0, 1);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 14);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb9;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(7, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb9;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const usb_altnum_to_altsetting: ref;

axiom usb_altnum_to_altsetting == $sub.ref(0, 282635);

procedure usb_altnum_to_altsetting($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_altnum_to_altsetting($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} {:cexpr "usb_altnum_to_altsetting:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $p2 := external_alloc();
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const cdc_ncm_fill_tx_frame: ref;

axiom cdc_ncm_fill_tx_frame == $sub.ref(0, 283667);

procedure cdc_ncm_fill_tx_frame($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.26, $M.27, $M.28, $CurrAddr, $M.33, $M.32;



implementation cdc_ncm_fill_tx_frame($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i16;
  var $p46: ref;
  var $i47: i16;
  var $i48: i32;
  var $i49: i32;
  var $i50: i16;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i16;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $i78: i16;
  var $p79: ref;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $i88: i16;
  var $i89: i32;
  var $i90: i32;
  var $p91: ref;
  var $i92: i16;
  var $i93: i32;
  var $i94: i32;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $i98: i16;
  var $i99: i64;
  var $p100: ref;
  var $i101: i16;
  var $i102: i64;
  var $p103: ref;
  var $i104: i32;
  var $i105: i64;
  var $i106: i64;
  var $i107: i1;
  var $p111: ref;
  var $i112: i32;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $i108: i16;
  var $i109: i32;
  var $p110: ref;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $p124: ref;
  var $i125: i64;
  var $i126: i64;
  var $p127: ref;
  var $p128: ref;
  var $p130: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i64;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p141: ref;
  var $i142: i64;
  var $i143: i64;
  var $p144: ref;
  var $p145: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $i152: i32;
  var $p153: ref;
  var $i131: i8;
  var $p154: ref;
  var $i155: i16;
  var $i156: i64;
  var $i157: i64;
  var $i158: i64;
  var $i159: i16;
  var $i160: i32;
  var $i161: i32;
  var $i162: i16;
  var $p163: ref;
  var $i164: i32;
  var $i165: i16;
  var $i166: i32;
  var $i167: i64;
  var $p170: ref;
  var $p171: ref;
  var $i172: i32;
  var $i173: i16;
  var $i174: i32;
  var $i175: i64;
  var $p178: ref;
  var $i179: i32;
  var $i180: i32;
  var $i181: i16;
  var $p182: ref;
  var $p183: ref;
  var $i184: i32;
  var $i185: i64;
  var $p186: ref;
  var $i187: i32;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $i192: i32;
  var $p193: ref;
  var $i194: i32;
  var $i195: i32;
  var $p196: ref;
  var $i197: i32;
  var $i198: i1;
  var $i199: i16;
  var $p200: ref;
  var $i201: i32;
  var $i202: i32;
  var $p203: ref;
  var $i204: i32;
  var $i205: i32;
  var $i206: i16;
  var $i207: i16;
  var $i208: i32;
  var $i209: i32;
  var $i210: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i16;
  var $i211: i16;
  var $p212: ref;
  var $i64: i16;
  var $p65: ref;
  var $i80: i16;
  var $p81: ref;
  var $i82: i8;
  var $i213: i64;
  var $i214: i1;
  var $p215: ref;
  var $p216: ref;
  var $p218: ref;
  var $i219: i64;
  var $i220: i64;
  var $p221: ref;
  var $p222: ref;
  var $p224: ref;
  var $i225: i32;
  var $p226: ref;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $p230: ref;
  var $i231: i16;
  var $i232: i32;
  var $i233: i32;
  var $i234: i1;
  var $i235: i32;
  var $i236: i1;
  var $p237: ref;
  var $i238: i32;
  var $i239: i1;
  var $p240: ref;
  var $i241: i32;
  var $i242: i1;
  var $p243: ref;
  var $p244: ref;
  var $i245: i16;
  var $i246: i32;
  var $i247: i32;
  var $i248: i1;
  var $p249: ref;
  var $i250: i32;
  var $i251: i32;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $i256: i32;
  var $i257: i32;
  var $i258: i1;
  var $p259: ref;
  var $i260: i32;
  var $p261: ref;
  var $i262: i16;
  var $i263: i32;
  var $i264: i1;
  var $p265: ref;
  var $i266: i32;
  var $p267: ref;
  var $i268: i32;
  var $i269: i32;
  var $p270: ref;
  var $p271: ref;
  var $i272: i32;
  var $p273: ref;
  var $i274: i32;
  var $i275: i32;
  var $i276: i64;
  var $p277: ref;
  var $i278: i32;
  var $p279: ref;
  var $i280: i32;
  var $i281: i1;
  var $p282: ref;
  var $i283: i32;
  var $p284: ref;
  var $i285: i32;
  var $i286: i32;
  var $i287: i1;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $i293: i32;
  var $i294: i16;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var $p298: ref;
  var $p300: ref;
  var $i301: i64;
  var $p302: ref;
  var $i303: i32;
  var $i304: i64;
  var $i305: i64;
  var $p306: ref;
  var $p307: ref;
  var $p309: ref;
  var $p310: ref;
  var $i311: i64;
  var $p312: ref;
  var $i313: i32;
  var $p314: ref;
  var $i315: i32;
  var $i316: i32;
  var $i317: i64;
  var $i318: i64;
  var $p319: ref;
  var $p320: ref;
  var $i321: i64;
  var $i322: i64;
  var $p323: ref;
  var $p324: ref;
  var $p325: ref;
  var $p327: ref;
  var $i328: i64;
  var $p329: ref;
  var $i330: i32;
  var $p331: ref;
  var $i332: i32;
  var $i333: i32;
  var $i334: i64;
  var $i335: i64;
  var $p336: ref;
  var $p337: ref;
  var $p339: ref;
  var $i39: i16;
  var $p341: ref;
  var $p342: ref;
  var $i343: i64;
  var $i344: i1;
  var $i345: i32;
  var $i346: i1;
  var $p340: ref;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} {:cexpr "cdc_ncm_fill_tx_frame:arg:sign"} boogie_si_record_i32($i2);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p1);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i15, $p16, $i17 := $i2, $p1, 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $p55 := $p19;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(328, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i16($i57);
    call {:si_unique_call 403} {:cexpr "n"} boogie_si_record_i16($i58);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(344, 1));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p59);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i58);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i63 := $sgt.i32($i61, $i62);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i64, $p65 := $i58, $p16;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i80, $p81, $i82 := $i64, $p65, $i17;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i213 := $p2i.ref.i64($p81);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i214 := $ne.i64($i213, 0);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i225 := $zext.i16.i32($i80);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(328, 1));
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p226, $i225);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i227 := $zext.i16.i32($i80);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 0);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i228} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i228 == 1);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(344, 1));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i231 := $load.i16($M.0, $p230);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i232 := $zext.i16.i32($i231);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i233 := $zext.i16.i32($i80);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i234 := $sgt.i32($i232, $i233);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i234} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i234 == 1);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(344, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i245 := $load.i16($M.0, $p244);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i246 := $zext.i16.i32($i245);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i247 := $zext.i16.i32($i80);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i246, $i247);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i248} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.0, $p253);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p254, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i256 := $load.i32($M.0, $p255);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i257 := $and.i32($i256, 512);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i258 := $eq.i32($i257, 0);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i258 == 1);
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p55, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i278 := $load.i32($M.0, $p277);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i280 := $load.i32($M.0, $p279);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i281 := $ult.i32($i278, $i280);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i281} true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i281 == 1);
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p55, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p290 := $load.ref($M.0, $p289);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p291 := $bitcast.ref.ref($p290);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p55, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i293 := $load.i32($M.0, $p292);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i294 := $trunc.i32.i16($i293);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p291, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p295, $i294);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p296, $0.ref);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p298 := $load.ref($M.0, $p297);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($add.ref($p298, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(8, 1));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i301 := $load.i64($M.0, $p300);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(328, 1));
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i303 := $load.i32($M.0, $p302);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i304 := $zext.i32.i64($i303);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i305 := $add.i64($i301, $i304);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p307 := $load.ref($M.0, $p306);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($add.ref($p307, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(8, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p309, $i305);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(384, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i311 := $load.i64($M.0, $p310);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p55, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i313 := $load.i32($M.0, $p312);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(360, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i315 := $load.i32($M.0, $p314);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i316 := $sub.i32($i313, $i315);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i317 := $zext.i32.i64($i316);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i318 := $add.i64($i311, $i317);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(384, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p319, $i318);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(392, 1));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i321 := $load.i64($M.0, $p320);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i322 := $add.i64($i321, 1);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(392, 1));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p323, $i322);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p325 := $load.ref($M.0, $p324);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($p325, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(24, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i328 := $load.i64($M.0, $p327);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p55, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i330 := $load.i32($M.0, $p329);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(360, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i332 := $load.i32($M.0, $p331);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i333 := $sub.i32($i330, $i332);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i334 := $zext.i32.i64($i333);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i335 := $sub.i64($i328, $i334);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p337 := $load.ref($M.0, $p336);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($add.ref($p337, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(24, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p339, $i335);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p340 := $p55;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $r := $p340;
    return;

  $bb70:
    assume $i281 == 1;
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p55, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i283 := $load.i32($M.0, $p282);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(328, 1));
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i285 := $load.i32($M.0, $p284);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i286 := $urem.i32($i283, $i285);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i286, 0);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i287 == 1);
    goto $bb72;

  $bb73:
    assume $i287 == 1;
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $p288 := skb_put($p55, 1);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p288, 0);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb64:
    assume $i258 == 1;
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p55, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i260 := $load.i32($M.0, $p259);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(356, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i262 := $load.i16($M.0, $p261);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i263 := $zext.i16.i32($i262);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i264 := $ugt.i32($i260, $i263);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i264 == 1);
    goto $bb66;

  $bb67:
    assume $i264 == 1;
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i266 := $load.i32($M.0, $p265);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p55, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i268 := $load.i32($M.0, $p267);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i269 := $sub.i32($i266, $i268);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $p270 := skb_put($p55, $i269);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i272 := $load.i32($M.0, $p271);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p55, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i274 := $load.i32($M.0, $p273);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i275 := $sub.i32($i272, $i274);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i276 := $zext.i32.i64($i275);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 418} cmdloc_dummy_var_15 := $memset.i8(cmdloc_dummy_var_14, $p270, 0, $i276, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb59:
    assume $i248 == 1;
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(376, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i250 := $load.i32($M.0, $p249);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i251 := $add.i32($i250, 1);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(376, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p252, $i251);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb49:
    assume $i234 == 1;
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i235 := $zext.i8.i32($i82);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i235, 0);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i236 == 1);
    goto $bb51;

  $bb52:
    assume $i236 == 1;
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(316, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i238 := $load.i32($M.0, $p237);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i239 := $ne.i32($i238, 0);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i239} true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i239 == 1);
    goto $bb51;

  $bb54:
    assume $i239 == 1;
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p240, $p55);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i241 := $zext.i16.i32($i80);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i242 := $ule.i32($i241, 2);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i242} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i39 := $i80;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p342 := $load.ref($M.0, $p341);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i343 := $p2i.ref.i64($p342);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i344 := $ne.i64($i343, 0);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i344} true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i344 == 1);
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p340 := $0.ref;
    goto $bb76;

  $bb77:
    assume $i344 == 1;
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i345 := $zext.i16.i32($i39);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i346 := $ne.i32($i345, 0);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    assume {:branchcond $i346} true;
    goto $bb80, $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    assume !($i346 == 1);
    goto $bb79;

  $bb80:
    assume $i346 == 1;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} cdc_ncm_tx_timeout_start($p6);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb56:
    assume $i242 == 1;
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(324, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p243, 2);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb47:
    assume $i228 == 1;
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(216, 1));
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p229, $p55);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i39 := $i80;
    goto $bb11;

  $bb44:
    assume $i214 == 1;
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} dev_kfree_skb_any($p81);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p216 := $load.ref($M.0, $p215);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p216, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(56, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i219 := $load.i64($M.0, $p218);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i220 := $add.i64($i219, 1);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($p222, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(56, 1));
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p224, $i220);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb14:
    assume $i63 == 1;
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $p66, $i67, $i68 := $p16, $i15, $i58;
    goto $bb17;

  $bb17:
    call $i69, $i70, $p71, $p72, $p73, $i74, $p75, $i76, $i77, $i78, $p79, $i83, $p84, $p85, $i86, $p87, $i88, $i89, $i90, $p91, $i92, $i93, $i94, $i95, $p96, $p97, $i98, $i99, $p100, $i101, $i102, $p103, $i104, $i105, $i106, $i107, $p111, $i112, $p113, $i114, $i115, $p116, $i117, $i118, $i108, $i109, $p110, $p154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $p163, $i164, $i165, $i166, $i167, $p170, $p171, $i172, $i173, $i174, $i175, $p178, $i179, $i180, $i181, $p182, $p183, $i184, $i185, $p186, $i187, $p188, $p189, $p190, $p191, $i192, $p193, $i194, $i195, $p196, $i197, $i198, $i199, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $p66, $i67, $i68, $i211, $p212, cmdloc_dummy_var_11, cmdloc_dummy_var_12, cmdloc_dummy_var_13 := cdc_ncm_fill_tx_frame_loop_$bb17($p6, $p55, $p59, $i69, $i70, $p71, $p72, $p73, $i74, $p75, $i76, $i77, $i78, $p79, $i83, $p84, $p85, $i86, $p87, $i88, $i89, $i90, $p91, $i92, $i93, $i94, $i95, $p96, $p97, $i98, $i99, $p100, $i101, $i102, $p103, $i104, $i105, $i106, $i107, $p111, $i112, $p113, $i114, $i115, $p116, $i117, $i118, $i108, $i109, $p110, $p154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $p163, $i164, $i165, $i166, $i167, $p170, $p171, $i172, $i173, $i174, $i175, $p178, $i179, $i180, $i181, $p182, $p183, $i184, $i185, $p186, $i187, $p188, $p189, $p190, $p191, $i192, $p193, $i194, $i195, $p196, $i197, $i198, $i199, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $p66, $i67, $i68, $i211, $p212, cmdloc_dummy_var_11, cmdloc_dummy_var_12, cmdloc_dummy_var_13);
    goto $bb17_last;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p66);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, 0);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i83, $p84 := $i67, $p66;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(348, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i88 := $load.i16($M.0, $p87);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i88);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i86, $i89);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(346, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i92 := $load.i16($M.0, $p91);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i92);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i90, $i93);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i95 := $zext.i32.i64($i94);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $p96 := cdc_ncm_ndp($p6, $p55, $i83, $i95);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(348, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i98 := $load.i16($M.0, $p97);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i99 := $zext.i16.i64($i98);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(346, 1));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i101 := $load.i16($M.0, $p100);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i64($i101);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i105 := $zext.i32.i64($i104);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} cdc_ncm_align_tail($p55, $i99, $i102, $i105);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p96);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i107 := $eq.i64($i106, 0);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i108, $i109, $p110 := $i68, $i83, $p84;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i107 == 1);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p55, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.0, $p111);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p84, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i115 := $add.i32($i112, $i114);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p116);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i118 := $ugt.i32($i115, $i117);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i108, $i109, $p110 := $i68, $i83, $p84;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p96, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i155 := $load.i16($M.0, $p154);
    call {:si_unique_call 409} {:cexpr "ndplen"} boogie_si_record_i16($i155);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i156 := $zext.i16.i64($i155);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i157 := $sub.i64($i156, 8);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i158 := $udiv.i64($i157, 4);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i64.i16($i158);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i160 := $zext.i16.i32($i159);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i161 := $sub.i32($i160, 1);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i162 := $trunc.i32.i16($i161);
    call {:si_unique_call 410} {:cexpr "index"} boogie_si_record_i16($i162);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p84, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i32.i16($i164);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i166 := $zext.i16.i32($i162);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i167 := $sext.i32.i64($i166);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($add.ref($p96, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref($i167, 4)), $mul.ref(2, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p170, $i165);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p55, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.0, $p171);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i173 := $trunc.i32.i16($i172);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i174 := $zext.i16.i32($i162);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i175 := $sext.i32.i64($i174);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($add.ref($p96, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref($i175, 4)), $mul.ref(0, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p178, $i173);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i179 := $zext.i16.i32($i155);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i180 := $add.i32($i179, 4);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i32.i16($i180);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p96, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p182, $i181);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p84, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i184 := $load.i32($M.0, $p183);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i185 := $zext.i32.i64($i184);
    call {:si_unique_call 411} {:cexpr "__len"} boogie_si_record_i64($i185);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p84, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.0, $p186);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $p188 := skb_put($p55, $i187);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p84, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 413} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p188, $p190, $i185, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(360, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i192 := $load.i32($M.0, $p191);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p84, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i194 := $load.i32($M.0, $p193);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i195 := $add.i32($i192, $i194);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(360, 1));
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p196, $i195);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} dev_kfree_skb_any($p84);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i197 := $zext.i16.i32($i162);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i198 := $ugt.i32($i197, 39);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i199 := $i68;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i204 := $zext.i16.i32($i68);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i205 := $add.i32($i204, 1);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i206 := $trunc.i32.i16($i205);
    call {:si_unique_call 415} {:cexpr "n"} boogie_si_record_i16($i206);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i207 := $load.i16($M.0, $p59);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i208 := $zext.i16.i32($i207);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i209 := $zext.i16.i32($i206);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i210 := $sgt.i32($i208, $i209);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i211, $p212 := $i206, $0.ref;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i64, $p65 := $i211, $p212;
    goto $bb16;

  $bb41:
    assume $i210 == 1;
    assume {:verifier.code 0} true;
    $p66, $i67, $i68 := $0.ref, $i83, $i206;
    goto $bb41_dummy;

  $bb38:
    assume $i198 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(368, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.0, $p200);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i202 := $add.i32($i201, 1);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(368, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p203, $i202);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i80, $p81, $i82 := $i199, $0.ref, 1;
    goto $bb23;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i119 := $zext.i16.i32($i108);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 0);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i120 == 1);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(224, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p133);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i135 := $ne.i64($i134, 0);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(224, 1));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p148, $p110);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p149, $i109);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(364, 1));
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, $p150);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i152 := $add.i32($i151, 1);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(364, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p153, $i152);
    assume {:verifier.code 0} true;
    $i131 := 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i80, $p81, $i82 := $i108, $0.ref, $i131;
    goto $bb23;

  $bb34:
    assume $i135 == 1;
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(224, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} dev_kfree_skb_any($p137);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p139, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(56, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i142 := $load.i64($M.0, $p141);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i143 := $add.i64($i142, 1);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p145, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(56, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p147, $i143);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i120 == 1;
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} dev_kfree_skb_any($p110);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p122, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(56, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i125 := $load.i64($M.0, $p124);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i126 := $add.i64($i125, 1);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p128, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(56, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p130, $i126);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i131 := $i17;
    goto $bb33;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i107 == 1;
    goto $bb27;

  $bb19:
    assume $i70 == 1;
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(224, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    call {:si_unique_call 404} {:cexpr "sign"} boogie_si_record_i32($i74);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(224, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p75, $0.ref);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p72);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i77 := $eq.i64($i76, 0);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i78, $p79 := $i68, $p72;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i83, $p84 := $i74, $p72;
    goto $bb25;

  $bb21:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i80, $p81, $i82 := $i78, $p79, $i17;
    goto $bb23;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $p24 := ldv_alloc_skb_12($i23, 32);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $p40 := skb_put($p24, 12);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 401} cmdloc_dummy_var_10 := $memset.i8(cmdloc_dummy_var_9, $p40, 0, 12, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 1213023054);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p41, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, 12);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(352, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    call {:si_unique_call 402} {:cexpr "tmp___1"} boogie_si_record_i16($i45);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(352, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.0, $p46);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, 1);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i49);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(352, 1));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p51, $i50);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p41, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p52, $i45);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(328, 1));
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 0);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(360, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p55 := $p24;
    goto $bb13;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p16);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb11;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} dev_kfree_skb_any($p16);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(56, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 1);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 3176)), $mul.ref(264, 1)), $mul.ref(56, 1));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, $i34);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(224, 1));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(224, 1));
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p1);
    call {:si_unique_call 396} {:cexpr "cdc_ncm_fill_tx_frame:arg:__tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 397} {:cexpr "sign"} boogie_si_record_i32($i13);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i2);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i15, $p16, $i17 := $i13, $p10, 0;
    goto $bb3;

  $bb41_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2474;
}



const ldv_alloc_skb_12: ref;

axiom ldv_alloc_skb_12 == $sub.ref(0, 284699);

procedure ldv_alloc_skb_12($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.33, $M.32, $M.0, $CurrAddr;



implementation ldv_alloc_skb_12($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} {:cexpr "ldv_alloc_skb_12:arg:size"} boogie_si_record_i32($i0);
    call {:si_unique_call 422} {:cexpr "ldv_alloc_skb_12:arg:priority"} boogie_si_record_i32($i1);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $p2 := ldv_skb_alloc();
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 285731);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $p2 := external_alloc();
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 286763);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const cdc_ncm_ndp: ref;

axiom cdc_ncm_ndp == $sub.ref(0, 287795);

procedure cdc_ncm_ndp($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cdc_ncm_ndp($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p22: ref;
  var $i23: i16;
  var $i24: i64;
  var $i25: i1;
  var $i12: i64;
  var $p26: ref;
  var $p11: ref;
  var $p27: ref;
  var $i28: i16;
  var $i29: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i64;
  var $i43: i1;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i16;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i16;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p21: ref;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} {:cexpr "cdc_ncm_ndp:arg:sign"} boogie_si_record_i32($i2);
    call {:si_unique_call 427} {:cexpr "cdc_ncm_ndp:arg:reserve"} boogie_si_record_i64($i3);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i64($i8);
    call {:si_unique_call 428} {:cexpr "ndpoffset"} boogie_si_record_i64($i9);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(350, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i64($i28);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} cdc_ncm_align_tail($p1, $i29, 0, $i32);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32($i34, $i36);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i37);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i39 := $sub.i64($i38, $i3);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i42 := $zext.i32.i64($i41);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i43 := $ult.i64($i39, $i42);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p11);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p53, $i52);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $p56 := skb_put($p1, $i55);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i58);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 432} cmdloc_dummy_var_17 := $memset.i8(cmdloc_dummy_var_16, $p56, 0, $i59, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p56);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i2);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p60, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p62, 12);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p21 := $p56;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $r := $p21;
    return;

  $bb16:
    assume $i45 == 1;
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p49, $i48);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i43 == 1;
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p21 := $0.ref;
    goto $bb8;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb4;

  $bb4:
    call $p13, $p14, $p15, $p16, $p17, $i18, $i19, $p20, $p22, $i23, $i24, $i25, $i12, $p26 := cdc_ncm_ndp_loop_$bb4($p1, $i2, $p13, $p14, $p15, $p16, $p17, $i18, $i19, $p20, $p22, $i23, $i24, $i25, $i12, $p26);
    goto $bb4_last;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref($i12, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, $i2);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p20 := $p15;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p16, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i64($i23);
    call {:si_unique_call 429} {:cexpr "ndpoffset"} boogie_si_record_i64($i24);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p26 := $p15;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p11 := $p26;
    goto $bb3;

  $bb10:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i24;
    goto $bb10_dummy;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p21 := $p20;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2833;
}



const cdc_ncm_align_tail: ref;

axiom cdc_ncm_align_tail == $sub.ref(0, 288827);

procedure cdc_ncm_align_tail($p0: ref, $i1: i64, $i2: i64, $i3: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation cdc_ncm_align_tail($p0: ref, $i1: i64, $i2: i64, $i3: i64)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} {:cexpr "cdc_ncm_align_tail:arg:modulus"} boogie_si_record_i64($i1);
    call {:si_unique_call 434} {:cexpr "cdc_ncm_align_tail:arg:remainder"} boogie_si_record_i64($i2);
    call {:si_unique_call 435} {:cexpr "cdc_ncm_align_tail:arg:max"} boogie_si_record_i64($i3);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i1);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i5, $i6);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i7, 1);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i1);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, $i9);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i8, $i10);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i11, $i13);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, $i2);
    call {:si_unique_call 436} {:cexpr "align"} boogie_si_record_i64($i16);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, $i16);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i64($i20, $i3);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $i28 := skb_tailroom($p0);
    call {:si_unique_call 439} {:cexpr "tmp___0"} boogie_si_record_i32($i28);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i30 := $uge.i64($i29, $i26);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32($i26);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $p32 := skb_put($p0, $i31);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 441} cmdloc_dummy_var_19 := $memset.i8(cmdloc_dummy_var_18, $p32, 0, $i26, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64($i3, $i24);
    call {:si_unique_call 437} {:cexpr "align"} boogie_si_record_i64($i25);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb3;
}



const skb_tailroom: ref;

axiom skb_tailroom == $sub.ref(0, 289859);

procedure skb_tailroom($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_tailroom($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $i1 := skb_is_nonlinear($p0);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 443} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(204, 1));
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i6, $i8);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i4 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const skb_is_nonlinear: ref;

axiom skb_is_nonlinear == $sub.ref(0, 290891);

procedure skb_is_nonlinear($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_is_nonlinear($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(108, 1));
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_skb_alloc: ref;

axiom ldv_skb_alloc == $sub.ref(0, 291923);

procedure ldv_skb_alloc() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.33, $M.32, $M.0, $CurrAddr;



implementation ldv_skb_alloc() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $p5: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $p0 := ldv_zalloc(232);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i3 := $ne.ref($p2, $0.ref);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p5 := $M.31;
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} ldv_set_add($p5, $p2);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p4 := $p0;
    goto $bb3;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 292955);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 446} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 1} true;
    call {:si_unique_call 447} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 448} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 449} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $p4 := calloc(1, $i0);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 1} true;
    call {:si_unique_call 451} __VERIFIER_assume($i7);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const ldv_set_add: ref;

axiom ldv_set_add == $sub.ref(0, 293987);

procedure ldv_set_add($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.33, $M.32;



implementation ldv_set_add($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i2 := $M.32;
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $M.32;
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 15);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i16 := $M.32;
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i17, 8));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $M.33 := $store.ref($M.33, $p18, $p1);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i19 := $M.32;
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $M.32 := $i20;
    call {:si_unique_call 453} {:cexpr "last_index"} boogie_si_record_i32($i20);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13 := ldv_set_add_loop_$bb4($p1, $i4, $i5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13);
    goto $bb4_last;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i5, 8));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.33, $p6);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i8, $i9);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i4, 1);
    call {:si_unique_call 452} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i12 := $M.32;
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, $i12);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i11;
    goto $bb12_dummy;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3000;
}



const cdc_ncm_tx_fixup: ref;

axiom cdc_ncm_tx_fixup == $sub.ref(0, 295019);

procedure cdc_ncm_tx_fixup($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.26, $M.27, $M.28, $CurrAddr, $M.33, $M.32;



implementation cdc_ncm_tx_fixup($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i13: i64;
  var $i14: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} {:cexpr "cdc_ncm_tx_fixup:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(240, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} spin_lock_bh($p9);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $p10 := cdc_ncm_fill_tx_frame($p0, $p1, 810369870);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 416)), $mul.ref(240, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} spin_unlock_bh($p11);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p12 := $p10;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb5;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} dev_kfree_skb_any($p1);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const cdc_ncm_rx_verify_nth16: ref;

axiom cdc_ncm_rx_verify_nth16 == $sub.ref(0, 296051);

procedure cdc_ncm_rx_verify_nth16($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.0, $CurrAddr;



implementation cdc_ncm_rx_verify_nth16($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i24;
  var $i27: i24;
  var $i28: i24;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i24;
  var $i56: i24;
  var $i57: i24;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p70: ref;
  var $i71: i16;
  var $i72: i32;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i24;
  var $i87: i24;
  var $i88: i24;
  var $p89: ref;
  var $p90: ref;
  var $i91: i8;
  var $i92: i64;
  var $i93: i64;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $p101: ref;
  var $i102: i16;
  var $i103: i32;
  var $i104: i32;
  var $p105: ref;
  var $i106: i16;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i110: i16;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i114: i16;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i118: i16;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i122: i16;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $i126: i32;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i24;
  var $i136: i24;
  var $i137: i24;
  var $p138: ref;
  var $p139: ref;
  var $i140: i8;
  var $i141: i64;
  var $i142: i64;
  var $i143: i64;
  var $i144: i1;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $i148: i16;
  var $i149: i32;
  var $p150: ref;
  var $i151: i16;
  var $i152: i32;
  var $p154: ref;
  var $i155: i16;
  var $p156: ref;
  var $p157: ref;
  var $i158: i16;
  var $i159: i32;
  var $i12: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $p8 := netdev_priv($p7);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i15 := $ule.i32($i14, 19);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 1213023054);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p41, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.0, $p70);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    call {:si_unique_call 470} {:cexpr "len"} boogie_si_record_i32($i72);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i75 := $ugt.i32($i72, $i74);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(354, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i102 := $load.i16($M.0, $p101);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i32($i102);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i103, 1);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p41, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i106 := $load.i16($M.0, $p105);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i106);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i104, $i107);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p41, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i155 := $load.i16($M.0, $p154);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(354, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p156, $i155);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p41, $mul.ref(0, 12)), $mul.ref(10, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i158 := $load.i16($M.0, $p157);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i159 := $zext.i16.i32($i158);
    call {:si_unique_call 477} {:cexpr "ret"} boogie_si_record_i32($i159);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i12 := $i159;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb32:
    assume $i108 == 1;
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(354, 1));
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i110 := $load.i16($M.0, $p109);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i111 := $zext.i16.i32($i110);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb37;

  $bb37:
    assume !($i112 == 1);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p41, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i114 := $load.i16($M.0, $p113);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i32($i114);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb34;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(354, 1));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i118 := $load.i16($M.0, $p117);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i119 := $zext.i16.i32($i118);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 65535);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb42;

  $bb42:
    assume !($i120 == 1);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p41, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i122 := $load.i16($M.0, $p121);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i123 := $zext.i16.i32($i122);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i124 := $ne.i32($i123, 0);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb34;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i124 == 1;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p9, $mul.ref(0, 1472)), $mul.ref(480, 1));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.0, $p125);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i127 := $and.i32($i126, 64);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i127, 0);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb45:
    assume $i128 == 1;
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p129, .str.1);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p130, .str.15);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p131, .str.3);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p132, .str.19);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i135 := $load.i24($M.38, $p134);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i136 := $and.i24($i135, $sub.i24(0, 262144));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i137 := $or.i24($i136, 1380);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $M.38 := $store.i24($M.38, $p134, $i137);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p138, 0);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i140 := $load.i8($M.39, $p139);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i64($i140);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i142 := $and.i64($i141, 1);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $i143 := ldv__builtin_expect($i142, 0);
    call {:si_unique_call 475} {:cexpr "tmp___3"} boogie_si_record_i64($i143);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i144 := $ne.i64($i143, 0);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb47:
    assume $i144 == 1;
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p9, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(354, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i148 := $load.i16($M.0, $p147);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i149 := $zext.i16.i32($i148);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p41, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i151 := $load.i16($M.0, $p150);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i152 := $zext.i16.i32($i151);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} vslice_dummy_var_120 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p5, $p146, .str.19, $i149, $i152);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i120 == 1;
    goto $bb41;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i112 == 1;
    goto $bb36;

  $bb23:
    assume $i75 == 1;
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p9, $mul.ref(0, 1472)), $mul.ref(480, 1));
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i78 := $and.i32($i77, 64);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;

  $bb25:
    assume $i79 == 1;
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p80, .str.1);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p81, .str.15);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p82, .str.3);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p83, .str.18);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i86 := $load.i24($M.38, $p85);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i87 := $and.i24($i86, $sub.i24(0, 262144));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i88 := $or.i24($i87, 1371);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $M.38 := $store.i24($M.38, $p85, $i88);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p89, 0);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.39, $p90);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i64($i91);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i93 := $and.i64($i92, 1);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $i94 := ldv__builtin_expect($i93, 0);
    call {:si_unique_call 472} {:cexpr "tmp___2"} boogie_si_record_i64($i94);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i94, 0);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i95 == 1;
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p9, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} vslice_dummy_var_119 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p4, $p97, .str.18, $i72, $i99);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p9, $mul.ref(0, 1472)), $mul.ref(480, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 64);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;

  $bb16:
    assume $i48 == 1;
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p49, .str.1);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p50, .str.15);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p51, .str.3);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p52, .str.17);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i55 := $load.i24($M.38, $p54);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i56 := $and.i24($i55, $sub.i24(0, 262144));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i57 := $or.i24($i56, 1363);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $M.38 := $store.i24($M.38, $p54, $i57);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p58, 0);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.39, $p59);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i64($i60);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i62 := $and.i64($i61, 1);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $i63 := ldv__builtin_expect($i62, 0);
    call {:si_unique_call 468} {:cexpr "tmp___1"} boogie_si_record_i64($i63);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i64 == 1;
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p9, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p41, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} vslice_dummy_var_118 := __dynamic_netdev_dbg.ref.ref.ref.i32($p3, $p66, .str.17, $i68);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 1472)), $mul.ref(480, 1));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 64);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p20, .str.1);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p21, .str.15);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p22, .str.3);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p23, .str.16);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i26 := $load.i24($M.38, $p25);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i27 := $and.i24($i26, $sub.i24(0, 262144));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i28 := $or.i24($i27, 1354);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $M.38 := $store.i24($M.38, $p25, $i28);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p29, 0);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.39, $p30);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i64($i31);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i33 := $and.i64($i32, 1);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 465} {:cexpr "tmp___0"} boogie_si_record_i64($i34);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p9, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} vslice_dummy_var_117 := __dynamic_netdev_dbg.ref.ref.ref($p2, $p37, .str.16);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;
}



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 297083);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(3264, 1));
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __dynamic_netdev_dbg: ref;

axiom __dynamic_netdev_dbg == $sub.ref(0, 298115);

procedure __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 1} true;
    call {:si_unique_call 478} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 479} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 1} true;
    call {:si_unique_call 480} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 481} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 1} true;
    call {:si_unique_call 482} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 483} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure __dynamic_netdev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_netdev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 1} true;
    call {:si_unique_call 484} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 485} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const cdc_ncm_rx_verify_ndp16: ref;

axiom cdc_ncm_rx_verify_ndp16 == $sub.ref(0, 299147);

procedure cdc_ncm_rx_verify_ndp16($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $CurrAddr;



implementation cdc_ncm_rx_verify_ndp16($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i24;
  var $i26: i24;
  var $i27: i24;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i24;
  var $i59: i24;
  var $i60: i24;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i64;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i16;
  var $i72: i32;
  var $p74: ref;
  var $i75: i16;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $i79: i32;
  var $i80: i32;
  var $i81: i64;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $i85: i32;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i24;
  var $i99: i24;
  var $i100: i24;
  var $p101: ref;
  var $p102: ref;
  var $i103: i8;
  var $i104: i64;
  var $i105: i64;
  var $i106: i64;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $i111: i32;
  var $i38: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 489} {:cexpr "cdc_ncm_rx_verify_ndp16:arg:ndpoffset"} boogie_si_record_i32($i1);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $p7 := netdev_priv($p6);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i1);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 8);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i64($i10, $i13);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i1);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p41, $mul.ref($i42, 8)), $mul.ref(4, 1));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i47 := $ule.i32($i46, 15);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p41, $mul.ref($i42, 8)), $mul.ref(4, 1));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i75 := $load.i16($M.0, $p74);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i64($i75);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i77 := $sub.i64($i76, 8);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i78 := $udiv.i64($i77, 4);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i64.i32($i78);
    call {:si_unique_call 497} {:cexpr "ret"} boogie_si_record_i32($i79);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i80 := $sub.i32($i79, 1);
    call {:si_unique_call 498} {:cexpr "ret"} boogie_si_record_i32($i80);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i80);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i81, 2);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i83 := $mul.i64($i82, 4);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i86 := $zext.i32.i64($i85);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i87 := $ugt.i64($i83, $i86);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i111 := $i80;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i38 := $i111;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb20:
    assume $i87 == 1;
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p8, $mul.ref(0, 1472)), $mul.ref(480, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 64);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i111 := $sub.i32(0, 22);
    goto $bb28;

  $bb22:
    assume $i91 == 1;
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p92, .str.1);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p93, .str.20);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p94, .str.3);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p95, .str.23);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i98 := $load.i24($M.38, $p97);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i99 := $and.i24($i98, $sub.i24(0, 262144));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i100 := $or.i24($i99, 1417);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $M.38 := $store.i24($M.38, $p97, $i100);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p101, 0);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.39, $p102);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i64($i103);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i105 := $and.i64($i104, 1);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i106 := ldv__builtin_expect($i105, 0);
    call {:si_unique_call 500} {:cexpr "tmp___2"} boogie_si_record_i64($i106);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i107 := $ne.i64($i106, 0);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i107 == 1;
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p8, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} vslice_dummy_var_123 := __dynamic_netdev_dbg.ref.ref.ref.i32($p4, $p109, .str.23, $i80);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb11:
    assume $i47 == 1;
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p8, $mul.ref(0, 1472)), $mul.ref(480, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 64);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 22);
    goto $bb9;

  $bb13:
    assume $i51 == 1;
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p52, .str.1);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p53, .str.20);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p54, .str.3);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p55, .str.22);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i58 := $load.i24($M.38, $p57);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i59 := $and.i24($i58, $sub.i24(0, 262144));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i60 := $or.i24($i59, 1406);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $M.38 := $store.i24($M.38, $p57, $i60);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p61, 0);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.39, $p62);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i64($i63);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i65 := $and.i64($i64, 1);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $i66 := ldv__builtin_expect($i65, 0);
    call {:si_unique_call 495} {:cexpr "tmp___1"} boogie_si_record_i64($i66);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i67 == 1;
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p8, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p41, $mul.ref($i42, 8)), $mul.ref(4, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.0, $p70);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} vslice_dummy_var_122 := __dynamic_netdev_dbg.ref.ref.ref.i32($p3, $p69, .str.22, $i72);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 1472)), $mul.ref(480, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 64);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 22);
    goto $bb9;

  $bb3:
    assume $i18 == 1;
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p19, .str.1);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p20, .str.20);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p21, .str.3);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p22, .str.21);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i25 := $load.i24($M.38, $p24);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i26 := $and.i24($i25, $sub.i24(0, 262144));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i27 := $or.i24($i26, 1399);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $M.38 := $store.i24($M.38, $p24, $i27);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p28, 0);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.39, $p29);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 492} {:cexpr "tmp___0"} boogie_si_record_i64($i33);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume $i34 == 1;
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p8, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} vslice_dummy_var_121 := __dynamic_netdev_dbg.ref.ref.ref.i32($p2, $p36, .str.21, $i1);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const cdc_ncm_rx_fixup: ref;

axiom cdc_ncm_rx_fixup == $sub.ref(0, 300179);

procedure cdc_ncm_rx_fixup($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.0, $CurrAddr;



implementation cdc_ncm_rx_fixup($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i24;
  var $i40: i24;
  var $i41: i24;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p55: ref;
  var $i57: i1;
  var $p62: ref;
  var $i63: i16;
  var $i64: i32;
  var $p65: ref;
  var $i66: i16;
  var $i67: i32;
  var $i68: i1;
  var $i71: i1;
  var $i69: i32;
  var $i70: i32;
  var $i72: i1;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $i85: i1;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i24;
  var $i97: i24;
  var $i98: i24;
  var $p99: ref;
  var $p100: ref;
  var $i101: i8;
  var $i102: i64;
  var $i103: i64;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $i109: i1;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $i114: i1;
  var $i115: i64;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $p120: ref;
  var $i121: i32;
  var $i122: i32;
  var $p123: ref;
  var $i124: i1;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $i125: i32;
  var $i58: i32;
  var $i73: i32;
  var $i54: i32;
  var $p126: ref;
  var $i127: i16;
  var $i128: i32;
  var $i129: i1;
  var $i131: i32;
  var $i132: i1;
  var $i133: i32;
  var $i130: i32;
  var $i134: i32;
  var $p135: ref;
  var $i136: i64;
  var $p137: ref;
  var $i138: i32;
  var $i139: i32;
  var $i140: i64;
  var $i141: i64;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $i145: i64;
  var $p146: ref;
  var $i147: i32;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i6);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $i8 := cdc_ncm_rx_verify_nth16($p7, $p1);
    call {:si_unique_call 505} {:cexpr "ndpoffset"} boogie_si_record_i32($i8);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $i10 := cdc_ncm_rx_verify_ndp16($p1, $i8);
    call {:si_unique_call 507} {:cexpr "nframes"} boogie_si_record_i32($i10);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i11 == 1);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i12, $i13, $i14, $i15 := $i10, 0, 50, $i8;
    goto $bb8;

  $bb8:
    call $i16, $i17, $i18, $i19, $i20, $i12, $i13, $i14, $i15, $p21, $p22, $p23, $i24, $p26, $i27, $i28, $p29, $i30, $i31, $i32, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $i41, $p42, $p43, $i44, $i45, $i46, $i47, $i48, $p49, $p50, $p51, $i52, $p55, $i57, $p62, $i63, $i64, $p65, $i66, $i67, $i68, $i71, $i69, $i70, $i72, $i74, $p75, $i76, $i77, $p82, $i83, $i84, $i85, $i78, $i79, $i80, $i81, $p86, $i87, $i88, $i89, $p90, $p91, $p92, $p93, $p94, $p95, $i96, $i97, $i98, $p99, $p100, $i101, $i102, $i103, $i104, $i105, $p106, $p107, $i109, $p110, $p111, $p112, $i113, $i114, $i115, $p116, $p117, $p118, $i119, $p120, $i121, $i122, $p123, $i124, $i59, $p60, $i61, $i125, $i58, $i73, $i54, $p126, $i127, $i128, $i129, $i131, $i132, $i133, $i130, cmdloc_dummy_var_20, cmdloc_dummy_var_21, cmdloc_dummy_var_22, vslice_dummy_var_124, vslice_dummy_var_125 := cdc_ncm_rx_fixup_loop_$bb8($p0, $p1, $p2, $p3, $p7, $i16, $i17, $i18, $i19, $i20, $i12, $i13, $i14, $i15, $p21, $p22, $p23, $i24, $p26, $i27, $i28, $p29, $i30, $i31, $i32, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $i41, $p42, $p43, $i44, $i45, $i46, $i47, $i48, $p49, $p50, $p51, $i52, $p55, $i57, $p62, $i63, $i64, $p65, $i66, $i67, $i68, $i71, $i69, $i70, $i72, $i74, $p75, $i76, $i77, $p82, $i83, $i84, $i85, $i78, $i79, $i80, $i81, $p86, $i87, $i88, $i89, $p90, $p91, $p92, $p93, $p94, $p95, $i96, $i97, $i98, $p99, $p100, $i101, $i102, $i103, $i104, $i105, $p106, $p107, $i109, $p110, $p111, $p112, $i113, $i114, $i115, $p116, $p117, $p118, $i119, $p120, $i121, $i122, $p123, $i124, $i59, $p60, $i61, $i125, $i58, $i73, $i54, $p126, $i127, $i128, $i129, $i131, $i132, $i133, $i130, cmdloc_dummy_var_20, cmdloc_dummy_var_21, cmdloc_dummy_var_22, vslice_dummy_var_124, vslice_dummy_var_125);
    goto $bb8_last;

  $bb12:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i15);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p23, $mul.ref($i24, 8)), $mul.ref(0, 1));
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 810369870);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p23, $mul.ref($i24, 8)), $mul.ref(8, 1));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32(0, $i12);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i58 := $i13;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i73 := $i58;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $i54 := $i73;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p23, $mul.ref($i24, 8)), $mul.ref(6, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i127 := $load.i16($M.0, $p126);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i128 := $zext.i16.i32($i127);
    call {:si_unique_call 513} {:cexpr "ndpoffset"} boogie_si_record_i32($i128);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i130 := $i54;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i134 := $i130;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(400, 1));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i136 := $load.i64($M.0, $p135);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, $p137);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i139 := $sub.i32($i138, $i134);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i140 := $zext.i32.i64($i139);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i141 := $add.i64($i136, $i140);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(400, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p142, $i141);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i144 := $load.i64($M.0, $p143);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i145 := $add.i64($i144, 1);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p146, $i145);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i147 := 1;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $r := $i147;
    return;

  $bb61:
    assume $i129 == 1;
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i131 := $sub.i32($i14, 1);
    call {:si_unique_call 526} {:cexpr "loopcount"} boogie_si_record_i32($i131);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i14, 0);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i16, $i17, $i18, $i133 := $i128, $i131, $i54, $i54;
    assume true;
    goto $bb9, $bb63;

  $bb63:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i134 := $i133;
    goto $bb65;

  $bb9:
    assume $i132 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i19 := cdc_ncm_rx_verify_ndp16($p1, $i16);
    call {:si_unique_call 509} {:cexpr "nframes"} boogie_si_record_i32($i19);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i12, $i13, $i14, $i15 := $i19, $i18, $i17, $i16;
    goto $bb11_dummy;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i147 := 0;
    goto $bb66;

  $bb23:
    assume $i57 == 1;
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i59, $p60, $i61 := $i13, $p55, 0;
    goto $bb26;

  $bb26:
    call $p62, $i63, $i64, $p65, $i66, $i67, $i68, $i71, $i69, $i70, $i74, $p75, $i76, $i77, $p82, $i83, $i84, $i85, $i78, $i79, $i80, $i81, $p110, $p111, $p112, $i113, $i114, $i115, $p116, $p117, $p118, $i119, $p120, $i121, $i122, $p123, $i124, $i59, $p60, $i61, $i125, cmdloc_dummy_var_20, cmdloc_dummy_var_21, cmdloc_dummy_var_22 := cdc_ncm_rx_fixup_loop_$bb26($p0, $p1, $p7, $i12, $p62, $i63, $i64, $p65, $i66, $i67, $i68, $i71, $i69, $i70, $i74, $p75, $i76, $i77, $p82, $i83, $i84, $i85, $i78, $i79, $i80, $i81, $p110, $p111, $p112, $i113, $i114, $i115, $p116, $p117, $p118, $i119, $p120, $i121, $i122, $p123, $i124, $i59, $p60, $i61, $i125, cmdloc_dummy_var_20, cmdloc_dummy_var_21, cmdloc_dummy_var_22);
    goto $bb26_last;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p60, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.0, $p62);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    call {:si_unique_call 514} {:cexpr "offset"} boogie_si_record_i32($i64);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p60, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.0, $p65);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    call {:si_unique_call 515} {:cexpr "len"} boogie_si_record_i32($i67);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i64, 0);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i69, $i70 := $i61, $i59;
    assume true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i68 == 1);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i67, 0);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i69, $i70 := $i61, $i59;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i64, $i67);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i77 := $ugt.i32($i74, $i76);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i78, $i79, $i80, $i81 := $i61, $i59, $i64, $i67;
    assume true;
    goto $bb38, $bb40;

  $bb40:
    assume !($i77 == 1);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i84 := $ugt.i32($i67, $i83);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i78, $i79, $i80, $i81 := $i61, $i59, $i64, $i67;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i84 == 1);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i85 := $sle.i32($i67, 13);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i78, $i79, $i80, $i81 := $i61, $i59, $i64, $i67;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i85 == 1);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $p112 := netdev_alloc_skb_ip_align($p111, $i67);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i114 := $eq.i64($i113, 0);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i115 := $sext.i32.i64($i67);
    call {:si_unique_call 520} {:cexpr "__len"} boogie_si_record_i64($i115);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $p116 := skb_put($p112, $i67);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i119 := $sext.i32.i64($i64);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($p118, $mul.ref($i119, 1));
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 522} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p116, $p120, $i115, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} usbnet_skb_return($p0, $p112);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i121 := $add.i32($i59, $i67);
    call {:si_unique_call 524} {:cexpr "payload"} boogie_si_record_i32($i121);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i122 := $add.i32($i61, 1);
    call {:si_unique_call 525} {:cexpr "x"} boogie_si_record_i32($i122);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p60, $mul.ref(1, 4));
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i122, $i12);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i125 := $i121;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i58 := $i125;
    goto $bb25;

  $bb58:
    assume $i124 == 1;
    assume {:verifier.code 0} true;
    $i59, $p60, $i61 := $i121, $p123, $i122;
    goto $bb58_dummy;

  $bb54:
    assume $i114 == 1;
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(480, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i88 := $and.i32($i87, 64);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i78, 0);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i73 := $i79;
    goto $bb36;

  $bb51:
    assume $i109 == 1;
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i54 := $i79;
    goto $bb21;

  $bb45:
    assume $i89 == 1;
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p90, .str.1);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p91, .str.24);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p92, .str.3);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p93, .str.26);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i96 := $load.i24($M.38, $p95);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i97 := $and.i24($i96, $sub.i24(0, 262144));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i98 := $or.i24($i97, 1478);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $M.38 := $store.i24($M.38, $p95, $i98);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p99, 0);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.39, $p100);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i64($i101);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i103 := $and.i64($i102, 1);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i104 := ldv__builtin_expect($i103, 0);
    call {:si_unique_call 518} {:cexpr "tmp___0"} boogie_si_record_i64($i104);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb47:
    assume $i105 == 1;
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} vslice_dummy_var_125 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.ref($p3, $p107, .str.26, $i78, $i80, $i81, $p1);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i77 == 1;
    goto $bb39;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i69, 0);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i73 := $i70;
    goto $bb36;

  $bb33:
    assume $i72 == 1;
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i54 := $i70;
    goto $bb21;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb29;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(480, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 64);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i54 := $i13;
    goto $bb21;

  $bb15:
    assume $i32 == 1;
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p33, .str.1);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p34, .str.24);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p35, .str.3);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p36, .str.25);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i39 := $load.i24($M.38, $p38);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i40 := $and.i24($i39, $sub.i24(0, 262144));
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i41 := $or.i24($i40, 1454);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $M.38 := $store.i24($M.38, $p38, $i41);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p42, 0);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.39, $p43);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i64($i44);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i45, 1);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $i47 := ldv__builtin_expect($i46, 0);
    call {:si_unique_call 511} {:cexpr "tmp"} boogie_si_record_i64($i47);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume $i48 == 1;
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p23, $mul.ref($i24, 8)), $mul.ref(0, 1));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} vslice_dummy_var_124 := __dynamic_netdev_dbg.ref.ref.ref.i32($p2, $p50, .str.25, $i52);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb58_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3514;

  $bb11_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;
}



const netdev_alloc_skb_ip_align: ref;

axiom netdev_alloc_skb_ip_align == $sub.ref(0, 301211);

procedure netdev_alloc_skb_ip_align($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_alloc_skb_ip_align($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} {:cexpr "netdev_alloc_skb_ip_align:arg:length"} boogie_si_record_i32($i1);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p2 := __netdev_alloc_skb_ip_align($p0, $i1, 32);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usbnet_skb_return: ref;

axiom usbnet_skb_return == $sub.ref(0, 302243);

procedure usbnet_skb_return($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usbnet_skb_return($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    return;
}



const __netdev_alloc_skb_ip_align: ref;

axiom __netdev_alloc_skb_ip_align == $sub.ref(0, 303275);

procedure __netdev_alloc_skb_ip_align($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __netdev_alloc_skb_ip_align($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} {:cexpr "__netdev_alloc_skb_ip_align:arg:length"} boogie_si_record_i32($i1);
    call {:si_unique_call 530} {:cexpr "__netdev_alloc_skb_ip_align:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $p3 := __netdev_alloc_skb($p0, $i1, $i2);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __netdev_alloc_skb: ref;

axiom __netdev_alloc_skb == $sub.ref(0, 304307);

procedure __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} {:cexpr "__netdev_alloc_skb:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 533} {:cexpr "__netdev_alloc_skb:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $p3 := external_alloc();
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const usbnet_get_settings: ref;

axiom usbnet_get_settings == $sub.ref(0, 305339);

procedure usbnet_get_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usbnet_get_settings($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 1} true;
    call {:si_unique_call 535} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 536} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usbnet_set_settings: ref;

axiom usbnet_set_settings == $sub.ref(0, 306371);

procedure usbnet_set_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usbnet_set_settings($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 1} true;
    call {:si_unique_call 537} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 538} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usbnet_get_drvinfo: ref;

axiom usbnet_get_drvinfo == $sub.ref(0, 307403);

procedure usbnet_get_drvinfo($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usbnet_get_drvinfo($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    return;
}



const usbnet_get_msglevel: ref;

axiom usbnet_get_msglevel == $sub.ref(0, 308435);

procedure usbnet_get_msglevel($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usbnet_get_msglevel($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 1} true;
    call {:si_unique_call 539} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 540} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usbnet_set_msglevel: ref;

axiom usbnet_set_msglevel == $sub.ref(0, 309467);

procedure usbnet_set_msglevel($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation usbnet_set_msglevel($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} {:cexpr "usbnet_set_msglevel:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    return;
}



const usbnet_nway_reset: ref;

axiom usbnet_nway_reset == $sub.ref(0, 310499);

procedure usbnet_nway_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usbnet_nway_reset($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 1} true;
    call {:si_unique_call 542} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 543} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usbnet_get_link: ref;

axiom usbnet_get_link == $sub.ref(0, 311531);

procedure usbnet_get_link($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usbnet_get_link($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 1} true;
    call {:si_unique_call 544} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 545} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const cdc_ncm_get_strings: ref;

axiom cdc_ncm_get_strings == $sub.ref(0, 312563);

procedure cdc_ncm_get_strings($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cdc_ncm_get_strings($p0: ref, $i1: i32, $p2: ref)
{
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;

  $bb0:
    call {:si_unique_call 546} {:cexpr "cdc_ncm_get_strings:arg:stringset"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i3 == 1;
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb6, $bb7;

  $bb7:
    assume !(0 == 1);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.0;
    cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 548} cmdloc_dummy_var_28 := $memcpy.i8(cmdloc_dummy_var_26, cmdloc_dummy_var_27, $p2, cdc_ncm_gstrings_stats, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_28;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p2, $mul.ref(32, 1));
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb12, $bb13;

  $bb13:
    assume !(0 == 1);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.0;
    cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 550} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p4, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_34;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    $i5 := $add.i64(32, 32);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb16, $bb17;

  $bb17:
    assume !(0 == 1);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.0;
    cmdloc_dummy_var_39 := $M.0;
    call {:si_unique_call 552} cmdloc_dummy_var_40 := $memcpy.i8(cmdloc_dummy_var_38, cmdloc_dummy_var_39, $p6, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_40;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    $i7 := $add.i64($i5, 32);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p2, $mul.ref($i7, 1));
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb20, $bb21;

  $bb21:
    assume !(0 == 1);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_44 := $M.0;
    cmdloc_dummy_var_45 := $M.0;
    call {:si_unique_call 554} cmdloc_dummy_var_46 := $memcpy.i8(cmdloc_dummy_var_44, cmdloc_dummy_var_45, $p8, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_46;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    $i9 := $add.i64($i7, 32);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p2, $mul.ref($i9, 1));
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb24, $bb25;

  $bb25:
    assume !(0 == 1);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_50 := $M.0;
    cmdloc_dummy_var_51 := $M.0;
    call {:si_unique_call 556} cmdloc_dummy_var_52 := $memcpy.i8(cmdloc_dummy_var_50, cmdloc_dummy_var_51, $p10, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_52;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    $i11 := $add.i64($i9, 32);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p2, $mul.ref($i11, 1));
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb28, $bb29;

  $bb29:
    assume !(0 == 1);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_56 := $M.0;
    cmdloc_dummy_var_57 := $M.0;
    call {:si_unique_call 558} cmdloc_dummy_var_58 := $memcpy.i8(cmdloc_dummy_var_56, cmdloc_dummy_var_57, $p12, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_58;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    $i13 := $add.i64($i11, 32);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p2, $mul.ref($i13, 1));
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb32, $bb33;

  $bb33:
    assume !(0 == 1);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_62 := $M.0;
    cmdloc_dummy_var_63 := $M.0;
    call {:si_unique_call 560} cmdloc_dummy_var_64 := $memcpy.i8(cmdloc_dummy_var_62, cmdloc_dummy_var_63, $p14, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_64;
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    $i15 := $add.i64($i13, 32);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p2, $mul.ref($i15, 1));
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb36, $bb37;

  $bb37:
    assume !(0 == 1);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_68 := $M.0;
    cmdloc_dummy_var_69 := $M.0;
    call {:si_unique_call 562} cmdloc_dummy_var_70 := $memcpy.i8(cmdloc_dummy_var_68, cmdloc_dummy_var_69, $p16, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_70;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb36:
    assume 0 == 1;
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_65 := $M.0;
    cmdloc_dummy_var_66 := $M.0;
    call {:si_unique_call 561} cmdloc_dummy_var_67 := $memcpy.i8(cmdloc_dummy_var_65, cmdloc_dummy_var_66, $p16, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_67;
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb32:
    assume 0 == 1;
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_59 := $M.0;
    cmdloc_dummy_var_60 := $M.0;
    call {:si_unique_call 559} cmdloc_dummy_var_61 := $memcpy.i8(cmdloc_dummy_var_59, cmdloc_dummy_var_60, $p14, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_61;
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb28:
    assume 0 == 1;
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.0;
    cmdloc_dummy_var_54 := $M.0;
    call {:si_unique_call 557} cmdloc_dummy_var_55 := $memcpy.i8(cmdloc_dummy_var_53, cmdloc_dummy_var_54, $p12, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_55;
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24:
    assume 0 == 1;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_47 := $M.0;
    cmdloc_dummy_var_48 := $M.0;
    call {:si_unique_call 555} cmdloc_dummy_var_49 := $memcpy.i8(cmdloc_dummy_var_47, cmdloc_dummy_var_48, $p10, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_49;
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume 0 == 1;
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_41 := $M.0;
    cmdloc_dummy_var_42 := $M.0;
    call {:si_unique_call 553} cmdloc_dummy_var_43 := $memcpy.i8(cmdloc_dummy_var_41, cmdloc_dummy_var_42, $p8, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_43;
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume 0 == 1;
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 551} cmdloc_dummy_var_37 := $memcpy.i8(cmdloc_dummy_var_35, cmdloc_dummy_var_36, $p6, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_37;
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume 0 == 1;
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.0;
    cmdloc_dummy_var_30 := $M.0;
    call {:si_unique_call 549} cmdloc_dummy_var_31 := $memcpy.i8(cmdloc_dummy_var_29, cmdloc_dummy_var_30, $p4, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_31;
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb6:
    assume 0 == 1;
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.0;
    cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 547} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p2, cdc_ncm_gstrings_stats, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_25;
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const cdc_ncm_get_ethtool_stats: ref;

axiom cdc_ncm_get_ethtool_stats == $sub.ref(0, 313595);

procedure cdc_ncm_get_ethtool_stats($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation cdc_ncm_get_ethtool_stats($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $i13: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p23: ref;
  var $i24: i64;
  var $i22: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $p32: ref;
  var $i33: i64;
  var $i31: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i64;
  var $p41: ref;
  var $i42: i64;
  var $i40: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i64;
  var $p50: ref;
  var $i51: i64;
  var $i49: i64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i64;
  var $p59: ref;
  var $i60: i64;
  var $i58: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i64;
  var $p68: ref;
  var $i69: i64;
  var $i67: i64;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i64;
  var $p77: ref;
  var $i78: i64;
  var $i76: i64;
  var $p79: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $p3 := netdev_priv($p0);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p8 := $i2p.i64.ref($i7);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(364, 1));
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb3, $bb4;

  $bb4:
    assume !(0 == 1);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p10);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i13 := $i16;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i13);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p8);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref(368, 1));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb8, $bb9;

  $bb9:
    assume !(0 == 1);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p2, $mul.ref(1, 8));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i22);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p8);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(372, 1));
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb12, $bb13;

  $bb13:
    assume !(0 == 1);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p2, $mul.ref(2, 8));
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p34, $i31);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p8);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref(376, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb16, $bb17;

  $bb17:
    assume !(0 == 1);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p2, $mul.ref(3, 8));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p43, $i40);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p8);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p44, $mul.ref(384, 1));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb20, $bb21;

  $bb21:
    assume !(1 == 1);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i48 := $zext.i32.i64($i47);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i49 := $i48;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p2, $mul.ref(4, 8));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p52, $i49);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p8);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p53, $mul.ref(392, 1));
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb24, $bb25;

  $bb25:
    assume !(1 == 1);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i57 := $zext.i32.i64($i56);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p2, $mul.ref(5, 8));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p61, $i58);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p8);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p62, $mul.ref(400, 1));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb28, $bb29;

  $bb29:
    assume !(1 == 1);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i66 := $zext.i32.i64($i65);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i67 := $i66;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p2, $mul.ref(6, 8));
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p70, $i67);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p8);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p71, $mul.ref(408, 1));
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb32, $bb33;

  $bb33:
    assume !(1 == 1);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i75 := $zext.i32.i64($i74);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i76 := $i75;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p2, $mul.ref(7, 8));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p79, $i76);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume 1 == 1;
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p72);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.0, $p77);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i76 := $i78;
    goto $bb34;

  $bb28:
    assume 1 == 1;
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p63);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, $p68);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i67 := $i69;
    goto $bb30;

  $bb24:
    assume 1 == 1;
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p54);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.0, $p59);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i58 := $i60;
    goto $bb26;

  $bb20:
    assume 1 == 1;
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p45);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i49 := $i51;
    goto $bb22;

  $bb16:
    assume 0 == 1;
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p36);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i40 := $i42;
    goto $bb18;

  $bb12:
    assume 0 == 1;
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p27);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i31 := $i33;
    goto $bb14;

  $bb8:
    assume 0 == 1;
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p18);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i22 := $i24;
    goto $bb10;

  $bb3:
    assume 0 == 1;
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb5;
}



const cdc_ncm_get_sset_count: ref;

axiom cdc_ncm_get_sset_count == $sub.ref(0, 314627);

procedure cdc_ncm_get_sset_count($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cdc_ncm_get_sset_count($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i32;

  $bb0:
    call {:si_unique_call 564} {:cexpr "cdc_ncm_get_sset_count:arg:sset"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 95);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i3 := 8;
    goto $bb4;
}



const ethtool_op_get_ts_info: ref;

axiom ethtool_op_get_ts_info == $sub.ref(0, 315659);

procedure ethtool_op_get_ts_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ethtool_op_get_ts_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 1} true;
    call {:si_unique_call 565} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 566} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const cdc_ncm_show_min_tx_pkt: ref;

axiom cdc_ncm_show_min_tx_pkt == $sub.ref(0, 316691);

procedure cdc_ncm_show_min_tx_pkt($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation cdc_ncm_show_min_tx_pkt($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 1336), 3176));
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $p5 := netdev_priv($p4);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(356, 1));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $i14 := sprintf.ref.ref.i32($p2, .str.65, $i13);
    call {:si_unique_call 569} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const cdc_ncm_store_min_tx_pkt: ref;

axiom cdc_ncm_store_min_tx_pkt == $sub.ref(0, 317723);

procedure cdc_ncm_store_min_tx_pkt($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation cdc_ncm_store_min_tx_pkt($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i16: i64;
  var $i17: i16;
  var $p18: ref;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 571} {:cexpr "cdc_ncm_store_min_tx_pkt:arg:len"} boogie_si_record_i64($i3);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 1336), 3176));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $p7 := netdev_priv($p6);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $i13 := kstrtoul($p2, 0, $p4);
    call {:si_unique_call 574} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.40, $p4);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i16($i16);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref(0, 416)), $mul.ref(356, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p18, $i17);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i15 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i15 := $sub.i64(0, 22);
    goto $bb3;
}



const kstrtoul: ref;

axiom kstrtoul == $sub.ref(0, 318755);

procedure kstrtoul($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoul($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} {:cexpr "kstrtoul:arg:base"} boogie_si_record_i32($i1);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $i3 := kstrtoull($p0, $i1, $p2);
    call {:si_unique_call 577} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const kstrtoull: ref;

axiom kstrtoull == $sub.ref(0, 319787);

procedure kstrtoull($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoull($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 578} {:cexpr "kstrtoull:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 1} true;
    call {:si_unique_call 579} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 580} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 320819);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const cdc_ncm_show_rx_max: ref;

axiom cdc_ncm_show_rx_max == $sub.ref(0, 321851);

procedure cdc_ncm_show_rx_max($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation cdc_ncm_show_rx_max($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 1336), 3176));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $p5 := netdev_priv($p4);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $i13 := sprintf.ref.ref.i32($p2, .str.65, $i12);
    call {:si_unique_call 583} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;
}



const cdc_ncm_store_rx_max: ref;

axiom cdc_ncm_store_rx_max == $sub.ref(0, 322883);

procedure cdc_ncm_store_rx_max($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.11, $M.0, $CurrAddr;



implementation cdc_ncm_store_rx_max($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i16: i64;
  var $i17: i32;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i64;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 585} {:cexpr "cdc_ncm_store_rx_max:arg:len"} boogie_si_record_i64($i3);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 1336), 3176));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $p7 := netdev_priv($p6);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i13 := kstrtoul($p2, 0, $p4);
    call {:si_unique_call 588} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.40, $p4);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i18 := cdc_ncm_check_rx_max($p8, $i17);
    call {:si_unique_call 590} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.40, $p4);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i19, $i20);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.40, $p4);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i22);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p12, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} cdc_ncm_update_rxtx_max($p8, $i23, $i25);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i15 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i15 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i15 := $sub.i64(0, 22);
    goto $bb3;
}



const cdc_ncm_show_tx_max: ref;

axiom cdc_ncm_show_tx_max == $sub.ref(0, 323915);

procedure cdc_ncm_show_tx_max($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation cdc_ncm_show_tx_max($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 1336), 3176));
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $p5 := netdev_priv($p4);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $i13 := sprintf.ref.ref.i32($p2, .str.65, $i12);
    call {:si_unique_call 594} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;
}



const cdc_ncm_store_tx_max: ref;

axiom cdc_ncm_store_tx_max == $sub.ref(0, 324947);

procedure cdc_ncm_store_tx_max($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.11, $M.0, $CurrAddr;



implementation cdc_ncm_store_tx_max($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i16: i64;
  var $i17: i32;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $i25: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 596} {:cexpr "cdc_ncm_store_tx_max:arg:len"} boogie_si_record_i64($i3);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 1336), 3176));
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $p7 := netdev_priv($p6);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $i13 := kstrtoul($p2, 0, $p4);
    call {:si_unique_call 599} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.40, $p4);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $i18 := cdc_ncm_check_tx_max($p8, $i17);
    call {:si_unique_call 601} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.40, $p4);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i19, $i20);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p12, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.40, $p4);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i32($i24);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} cdc_ncm_update_rxtx_max($p8, $i23, $i25);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i15 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i15 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i15 := $sub.i64(0, 22);
    goto $bb3;
}



const cdc_ncm_show_tx_timer_usecs: ref;

axiom cdc_ncm_show_tx_timer_usecs == $sub.ref(0, 325979);

procedure cdc_ncm_show_tx_timer_usecs($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation cdc_ncm_show_tx_timer_usecs($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 1336), 3176));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $p5 := netdev_priv($p4);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(316, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i13 := $udiv.i32($i12, 1000);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $i14 := sprintf.ref.ref.i32($p2, .str.65, $i13);
    call {:si_unique_call 605} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const cdc_ncm_store_tx_timer_usecs: ref;

axiom cdc_ncm_store_tx_timer_usecs == $sub.ref(0, 327011);

procedure cdc_ncm_store_tx_timer_usecs($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation cdc_ncm_store_tx_timer_usecs($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $i15: i1;
  var $i17: i64;
  var $i18: i1;
  var $i19: i64;
  var $i20: i1;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i64;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 607} {:cexpr "cdc_ncm_store_tx_timer_usecs:arg:len"} boogie_si_record_i64($i3);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 1336), 3176));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $p7 := netdev_priv($p6);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i11);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $i13 := kstrtoul($p2, 0, $p4);
    call {:si_unique_call 610} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    call {:si_unique_call 611} {:cexpr "ret"} boogie_si_record_i64($i14);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.40, $p4);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p12, $mul.ref(0, 416)), $mul.ref(240, 1));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} spin_lock_bh($p23);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.40, $p4);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i32($i24);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i26 := $mul.i32($i25, 1000);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p12, $mul.ref(0, 416)), $mul.ref(316, 1));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p12, $mul.ref(0, 416)), $mul.ref(316, 1));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p12, $mul.ref(0, 416)), $mul.ref(240, 1));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} spin_unlock_bh($p32);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i16 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p12, $mul.ref(0, 416)), $mul.ref(324, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, 0);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.40, $p4);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i20 := $ule.i64($i19, 4);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i20 == 1);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.40, $p4);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i64($i21, 4294967);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb7;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $sub.i64(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb9;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb3;
}



const cdc_ncm_show_bmNtbFormatsSupported: ref;

axiom cdc_ncm_show_bmNtbFormatsSupported == $sub.ref(0, 328043);

procedure cdc_ncm_show_bmNtbFormatsSupported($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation cdc_ncm_show_bmNtbFormatsSupported($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 1336), 3176));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $p5 := netdev_priv($p4);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i15 := sprintf.ref.ref.i32($p2, .str.76, $i14);
    call {:si_unique_call 616} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;
}



const cdc_ncm_show_dwNtbInMaxSize: ref;

axiom cdc_ncm_show_dwNtbInMaxSize == $sub.ref(0, 329075);

procedure cdc_ncm_show_dwNtbInMaxSize($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation cdc_ncm_show_dwNtbInMaxSize($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 1336), 3176));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $p5 := netdev_priv($p4);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $i14 := sprintf.ref.ref.i32($p2, .str.65, $i13);
    call {:si_unique_call 619} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const cdc_ncm_show_wNdpInDivisor: ref;

axiom cdc_ncm_show_wNdpInDivisor == $sub.ref(0, 330107);

procedure cdc_ncm_show_wNdpInDivisor($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation cdc_ncm_show_wNdpInDivisor($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 1336), 3176));
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $p5 := netdev_priv($p4);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $i15 := sprintf.ref.ref.i32($p2, .str.65, $i14);
    call {:si_unique_call 622} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;
}



const cdc_ncm_show_wNdpInPayloadRemainder: ref;

axiom cdc_ncm_show_wNdpInPayloadRemainder == $sub.ref(0, 331139);

procedure cdc_ncm_show_wNdpInPayloadRemainder($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation cdc_ncm_show_wNdpInPayloadRemainder($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 1336), 3176));
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $p5 := netdev_priv($p4);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $i15 := sprintf.ref.ref.i32($p2, .str.65, $i14);
    call {:si_unique_call 625} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;
}



const cdc_ncm_show_wNdpInAlignment: ref;

axiom cdc_ncm_show_wNdpInAlignment == $sub.ref(0, 332171);

procedure cdc_ncm_show_wNdpInAlignment($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation cdc_ncm_show_wNdpInAlignment($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 1336), 3176));
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $p5 := netdev_priv($p4);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(12, 1));
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $i15 := sprintf.ref.ref.i32($p2, .str.65, $i14);
    call {:si_unique_call 628} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;
}



const cdc_ncm_show_dwNtbOutMaxSize: ref;

axiom cdc_ncm_show_dwNtbOutMaxSize == $sub.ref(0, 333203);

procedure cdc_ncm_show_dwNtbOutMaxSize($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation cdc_ncm_show_dwNtbOutMaxSize($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 1336), 3176));
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $p5 := netdev_priv($p4);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $i14 := sprintf.ref.ref.i32($p2, .str.65, $i13);
    call {:si_unique_call 631} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const cdc_ncm_show_wNdpOutDivisor: ref;

axiom cdc_ncm_show_wNdpOutDivisor == $sub.ref(0, 334235);

procedure cdc_ncm_show_wNdpOutDivisor($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation cdc_ncm_show_wNdpOutDivisor($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 1336), 3176));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $p5 := netdev_priv($p4);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(20, 1));
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $i15 := sprintf.ref.ref.i32($p2, .str.65, $i14);
    call {:si_unique_call 634} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;
}



const cdc_ncm_show_wNdpOutPayloadRemainder: ref;

axiom cdc_ncm_show_wNdpOutPayloadRemainder == $sub.ref(0, 335267);

procedure cdc_ncm_show_wNdpOutPayloadRemainder($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation cdc_ncm_show_wNdpOutPayloadRemainder($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 1336), 3176));
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $p5 := netdev_priv($p4);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(22, 1));
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $i15 := sprintf.ref.ref.i32($p2, .str.65, $i14);
    call {:si_unique_call 637} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;
}



const cdc_ncm_show_wNdpOutAlignment: ref;

axiom cdc_ncm_show_wNdpOutAlignment == $sub.ref(0, 336299);

procedure cdc_ncm_show_wNdpOutAlignment($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation cdc_ncm_show_wNdpOutAlignment($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 1336), 3176));
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $p5 := netdev_priv($p4);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $i15 := sprintf.ref.ref.i32($p2, .str.65, $i14);
    call {:si_unique_call 640} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;
}



const cdc_ncm_show_wNtbOutMaxDatagrams: ref;

axiom cdc_ncm_show_wNtbOutMaxDatagrams == $sub.ref(0, 337331);

procedure cdc_ncm_show_wNtbOutMaxDatagrams($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation cdc_ncm_show_wNtbOutMaxDatagrams($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 1336), 3176));
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $p5 := netdev_priv($p4);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1472)), $mul.ref(488, 1)), $mul.ref(0, 8));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p10 := $i2p.i64.ref($i9);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(0, 1)), $mul.ref(26, 1));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $i15 := sprintf.ref.ref.i32($p2, .str.65, $i14);
    call {:si_unique_call 643} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;
}



const usbnet_probe: ref;

axiom usbnet_probe == $sub.ref(0, 338363);

procedure usbnet_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usbnet_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 1} true;
    call {:si_unique_call 644} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 645} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usbnet_disconnect: ref;

axiom usbnet_disconnect == $sub.ref(0, 339395);

procedure usbnet_disconnect($p0: ref);
  free requires assertsPassed;



implementation usbnet_disconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    return;
}



const usbnet_suspend: ref;

axiom usbnet_suspend == $sub.ref(0, 340427);

procedure usbnet_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.41, $CurrAddr;



implementation usbnet_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.41 := $store.i32($M.41, $p3, $i1);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 1} true;
    call {:si_unique_call 647} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 648} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const usbnet_resume: ref;

axiom usbnet_resume == $sub.ref(0, 341459);

procedure usbnet_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usbnet_resume($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 1} true;
    call {:si_unique_call 649} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 650} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const cdc_ncm_bind: ref;

axiom cdc_ncm_bind == $sub.ref(0, 342491);

procedure cdc_ncm_bind($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.13, $M.15, $M.17, $M.19, $M.21, $M.23, $M.24, $M.25, $CurrAddr, $M.11;



implementation cdc_ncm_bind($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i2 := cdc_ncm_select_altsetting($p1);
    call {:si_unique_call 652} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $i6 := cdc_ncm_bind_common($p0, $p1, 1);
    call {:si_unique_call 654} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} usbnet_link_change($p0, 0, 0);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;
}



const usbnet_manage_power: ref;

axiom usbnet_manage_power == $sub.ref(0, 343523);

procedure usbnet_manage_power($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usbnet_manage_power($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 656} {:cexpr "usbnet_manage_power:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 1} true;
    call {:si_unique_call 657} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 658} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const cdc_ncm_status: ref;

axiom cdc_ncm_status == $sub.ref(0, 344555);

procedure cdc_ncm_status($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $CurrAddr;



implementation cdc_ncm_status($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i24;
  var $i50: i24;
  var $i51: i24;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i5 := $ule.i32($i4, 7);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(1464, 1));
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i7 := test_and_clear_bit(3, $p6);
    call {:si_unique_call 661} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.42, $p15);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 42);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i17, 42);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p43, .str.1);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p44, .str.69);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p45, .str.3);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p46, .str.70);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i49 := $load.i24($M.7, $p48);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i50 := $and.i24($i49, $sub.i24(0, 262144));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i51 := $or.i24($i50, 1577);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $M.7 := $store.i24($M.7, $p48, $i51);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $M.8 := $store.i8($M.8, $p52, 0);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.8, $p53);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i64($i54);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i56 := $and.i64($i55, 1);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $i57 := ldv__builtin_expect($i56, 0);
    call {:si_unique_call 668} {:cexpr "tmp___0"} boogie_si_record_i64($i57);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb24:
    assume $i58 == 1;
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(0, 1));
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p14, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.42, $p62);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} vslice_dummy_var_127 := __dynamic_dev_dbg.ref.ref.ref.i32($p2, $p61, .str.70, $i64);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i39 := $ule.i32($i38, 15);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i39 == 1);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p14);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p41, $mul.ref(1, 8));
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} cdc_ncm_speed_change($p0, $p42);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i39 == 1;
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(1464, 1));
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} set_bit(3, $p40);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i17, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb13;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(480, 1));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 4);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p14, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.42, $p33);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} usbnet_link_change($p0, $i36, 0);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i24 == 1;
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p14, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.42, $p27);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p31 := (if $i30 == 1 then .str.67 else .str.68);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} vslice_dummy_var_126 := netdev_info.ref.ref.ref($p26, .str.66, $p31);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} cdc_ncm_speed_change($p0, $p11);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 345587);

procedure test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 671} {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 672} devirtbounce.2(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.29, $p2);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const cdc_ncm_speed_change: ref;

axiom cdc_ncm_speed_change == $sub.ref(0, 346619);

procedure cdc_ncm_speed_change($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation cdc_ncm_speed_change($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.42, $p2);
    call {:si_unique_call 673} {:cexpr "rx_speed"} boogie_si_record_i32($i3);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.43, $p4);
    call {:si_unique_call 674} {:cexpr "tx_speed"} boogie_si_record_i32($i5);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i5, 1000000);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(480, 1));
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 4);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i23 := $udiv.i32($i3, 1000);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i24 := $udiv.i32($i5, 1000);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} vslice_dummy_var_129 := netdev_info.ref.ref.i32.i32($p22, .str.72, $i23, $i24);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i3, 1000000);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(480, 1));
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 4);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i14 := $udiv.i32($i3, 1000000);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i15 := $udiv.i32($i5, 1000000);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} vslice_dummy_var_128 := netdev_info.ref.ref.i32.i32($p13, .str.71, $i14, $i15);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const netdev_info: ref;

axiom netdev_info == $sub.ref(0, 347651);

procedure netdev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 1} true;
    call {:si_unique_call 677} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 678} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure netdev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netdev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 1} true;
    call {:si_unique_call 679} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 680} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usbnet_link_change: ref;

axiom usbnet_link_change == $sub.ref(0, 348683);

procedure usbnet_link_change($p0: ref, $i1: i1, $i2: i1);
  free requires assertsPassed;



implementation usbnet_link_change($p0: ref, $i1: i1, $i2: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} {:cexpr "usbnet_link_change:arg:arg1"} boogie_si_record_i1($i1);
    call {:si_unique_call 682} {:cexpr "usbnet_link_change:arg:arg2"} boogie_si_record_i1($i2);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 349715);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 683} __VERIFIER_error();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const ldv_initialize_driver_info_2: ref;

axiom ldv_initialize_driver_info_2 == $sub.ref(0, 350747);

procedure ldv_initialize_driver_info_2();
  free requires assertsPassed;
  modifies $M.44, $M.45, $M.46, $M.0, $CurrAddr;



implementation ldv_initialize_driver_info_2()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $p0 := ldv_zalloc(1472);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $M.44 := $p0;
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p2 := ldv_zalloc(1560);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $M.45 := $p2;
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $p4 := ldv_zalloc(232);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $M.46 := $p4;
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_driver_info_3: ref;

axiom ldv_initialize_driver_info_3 == $sub.ref(0, 351779);

procedure ldv_initialize_driver_info_3();
  free requires assertsPassed;
  modifies $M.47, $M.48, $M.49, $M.0, $CurrAddr;



implementation ldv_initialize_driver_info_3()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p0 := ldv_zalloc(1472);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $M.47 := $p0;
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $p2 := ldv_zalloc(1560);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $M.48 := $p2;
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $p4 := ldv_zalloc(232);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $M.49 := $p4;
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_ethtool_ops_19: ref;

axiom ldv_initialize_ethtool_ops_19 == $sub.ref(0, 352811);

procedure ldv_initialize_ethtool_ops_19();
  free requires assertsPassed;
  modifies $M.50, $M.51, $M.0, $CurrAddr;



implementation ldv_initialize_ethtool_ops_19()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $p0 := ldv_zalloc(44);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $M.50 := $p0;
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $p2 := ldv_zalloc(3264);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $M.51 := $p2;
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_15: ref;

axiom ldv_initialize_device_attribute_15 == $sub.ref(0, 353843);

procedure ldv_initialize_device_attribute_15();
  free requires assertsPassed;
  modifies $M.52, $M.53, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_15()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $p0 := ldv_zalloc(1416);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $M.52 := $p0;
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $p2 := ldv_zalloc(48);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $M.53 := $p2;
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_17: ref;

axiom ldv_initialize_device_attribute_17 == $sub.ref(0, 354875);

procedure ldv_initialize_device_attribute_17();
  free requires assertsPassed;
  modifies $M.54, $M.55, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_17()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $p0 := ldv_zalloc(1416);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $M.54 := $p0;
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $p2 := ldv_zalloc(48);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $M.55 := $p2;
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_driver_info_4: ref;

axiom ldv_initialize_driver_info_4 == $sub.ref(0, 355907);

procedure ldv_initialize_driver_info_4();
  free requires assertsPassed;
  modifies $M.56, $M.57, $M.58, $M.0, $CurrAddr;



implementation ldv_initialize_driver_info_4()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $p0 := ldv_zalloc(1472);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $M.56 := $p0;
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p2 := ldv_zalloc(1560);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $M.57 := $p2;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $p4 := ldv_zalloc(232);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $M.58 := $p4;
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_driver_1: ref;

axiom ldv_usb_driver_1 == $sub.ref(0, 356939);

procedure ldv_usb_driver_1();
  free requires assertsPassed;
  modifies $M.59, $M.0, $CurrAddr;



implementation ldv_usb_driver_1()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $p0 := ldv_zalloc(1560);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $M.59 := $p0;
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_18: ref;

axiom ldv_initialize_device_attribute_18 == $sub.ref(0, 357971);

procedure ldv_initialize_device_attribute_18();
  free requires assertsPassed;
  modifies $M.60, $M.61, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_18()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $p0 := ldv_zalloc(1416);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $M.60 := $p0;
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $p2 := ldv_zalloc(48);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $M.61 := $p2;
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_16: ref;

axiom ldv_initialize_device_attribute_16 == $sub.ref(0, 359003);

procedure ldv_initialize_device_attribute_16();
  free requires assertsPassed;
  modifies $M.62, $M.63, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_16()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $p0 := ldv_zalloc(1416);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $M.62 := $p0;
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $p2 := ldv_zalloc(48);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $M.63 := $p2;
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 360035);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.11, $M.0, $M.26, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.89, $M.90, $M.41, $M.91, $M.92, $M.94, $M.95, $M.50, $M.51, $M.56, $M.57, $M.58, $M.52, $M.53, $M.47, $M.48, $M.49, $M.62, $M.63, $M.60, $M.61, $M.44, $M.45, $M.46, $M.54, $M.55, $M.96, $M.97, $M.101, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.30, $M.160, $M.31, $M.33, $M.93, $M.59, $M.32, $M.188, $M.189, $CurrAddr, $M.27, $M.28, $M.13, $M.15, $M.17, $M.19, $M.21, $M.23, $M.24, $M.25, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i1;
  var $i122: i32;
  var $i123: i1;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i1;
  var $i129: i32;
  var $i130: i1;
  var $i131: i32;
  var $i132: i1;
  var $i133: i1;
  var $i134: i1;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $p143: ref;
  var $i145: i32;
  var $i146: i1;
  var $i147: i32;
  var $i148: i1;
  var $i149: i1;
  var $i150: i1;
  var $i151: i1;
  var $i152: i1;
  var $i153: i1;
  var $i154: i1;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $p158: ref;
  var $i159: i32;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $p164: ref;
  var $i165: i32;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $i171: i32;
  var $i172: i1;
  var $p173: ref;
  var $i175: i32;
  var $i176: i1;
  var $p177: ref;
  var $p178: ref;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $p188: ref;
  var $i189: i32;
  var $i190: i32;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $p194: ref;
  var $i195: i32;
  var $i196: i32;
  var $i197: i1;
  var $i198: i32;
  var $i199: i32;
  var $i200: i32;
  var $i201: i1;
  var $p202: ref;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $i206: i32;
  var $i207: i1;
  var $i208: i32;
  var $i209: i1;
  var $i210: i1;
  var $i211: i1;
  var $i212: i1;
  var $i213: i1;
  var $i214: i1;
  var $i215: i32;
  var $i216: i1;
  var $p217: ref;
  var $i218: i32;
  var $i219: i32;
  var $i220: i1;
  var $i221: i32;
  var $i222: i32;
  var $i223: i32;
  var $i224: i1;
  var $p225: ref;
  var $p226: ref;
  var $i227: i32;
  var $i228: i32;
  var $i229: i32;
  var $i230: i1;
  var $i231: i32;
  var $i232: i1;
  var $p233: ref;
  var $i234: i32;
  var $i235: i32;
  var $i236: i1;
  var $i237: i32;
  var $i238: i1;
  var $i239: i32;
  var $i240: i1;
  var $p241: ref;
  var $i242: i32;
  var $i243: i32;
  var $i244: i32;
  var $i245: i1;
  var $i246: i32;
  var $i247: i1;
  var $p248: ref;
  var $i249: i32;
  var $i250: i32;
  var $i251: i32;
  var $i252: i1;
  var $p253: ref;
  var $i254: i32;
  var $i255: i32;
  var $i256: i1;
  var $i257: i32;
  var $i258: i1;
  var $i259: i32;
  var $i260: i1;
  var $i261: i1;
  var $i262: i1;
  var $i263: i32;
  var $i264: i1;
  var $p265: ref;
  var $p266: ref;
  var $i268: i32;
  var $i269: i1;
  var $p270: ref;
  var $p271: ref;
  var $i273: i32;
  var $i274: i1;
  var $i275: i32;
  var $i276: i1;
  var $i277: i1;
  var $i278: i1;
  var $i279: i32;
  var $i280: i1;
  var $i281: i32;
  var $i282: i1;
  var $i283: i32;
  var $i284: i1;
  var $i285: i32;
  var $i286: i32;
  var $i287: i1;
  var $i288: i32;
  var $i289: i1;
  var $i290: i32;
  var $i291: i1;
  var $i292: i32;
  var $i293: i1;
  var $i294: i1;
  var $i295: i1;
  var $i296: i32;
  var $i297: i1;
  var $p298: ref;
  var $p299: ref;
  var $i301: i32;
  var $i302: i1;
  var $p303: ref;
  var $p304: ref;
  var $i306: i32;
  var $i307: i1;
  var $i308: i32;
  var $i309: i1;
  var $i310: i32;
  var $i311: i1;
  var $i313: i32;
  var $i314: i1;
  var $i315: i32;
  var $i316: i1;
  var $i317: i32;
  var $i318: i1;
  var $i320: i32;
  var $i321: i1;
  var $i322: i32;
  var $i323: i1;
  var $i324: i1;
  var $i325: i1;
  var $i326: i1;
  var $i327: i1;
  var $i328: i1;
  var $i329: i1;
  var $i330: i32;
  var $i331: i1;
  var $p332: ref;
  var $p333: ref;
  var $i334: i32;
  var $i336: i32;
  var $i337: i1;
  var $p338: ref;
  var $p339: ref;
  var $i340: i32;
  var $i342: i32;
  var $i343: i1;
  var $p344: ref;
  var $i346: i32;
  var $i347: i1;
  var $p348: ref;
  var $i350: i32;
  var $i351: i1;
  var $p352: ref;
  var $p353: ref;
  var $i355: i32;
  var $i356: i1;
  var $p357: ref;
  var $p358: ref;
  var $i360: i32;
  var $i361: i1;
  var $p362: ref;
  var $p363: ref;
  var $i364: i32;
  var $i365: i32;
  var $i366: i32;
  var $i367: i1;
  var $p368: ref;
  var $p369: ref;
  var $i370: i32;
  var $i371: i32;
  var $i372: i1;
  var $i373: i32;
  var $i374: i32;
  var $i375: i32;
  var $i376: i1;
  var $p377: ref;
  var $i378: i32;
  var $i379: i1;
  var $p380: ref;
  var $i381: i32;
  var $i382: i1;
  var $i383: i32;
  var $i384: i1;
  var $i385: i32;
  var $i386: i1;
  var $i388: i32;
  var $i389: i1;
  var $i390: i32;
  var $i391: i1;
  var $i392: i32;
  var $i393: i1;
  var $i395: i32;
  var $i396: i1;
  var $i397: i32;
  var $i398: i1;
  var $i399: i32;
  var $i400: i1;
  var $i402: i32;
  var $i403: i1;
  var $i404: i32;
  var $i405: i1;
  var $i406: i1;
  var $i407: i1;
  var $i408: i32;
  var $i409: i1;
  var $p410: ref;
  var $p411: ref;
  var $i413: i32;
  var $i414: i1;
  var $p415: ref;
  var $p416: ref;
  var $i418: i32;
  var $i419: i1;
  var $i420: i32;
  var $i421: i1;
  var $i422: i32;
  var $i423: i1;
  var $i425: i32;
  var $i426: i1;
  var $i427: i32;
  var $i428: i1;
  var $i429: i1;
  var $i430: i1;
  var $i431: i1;
  var $i432: i1;
  var $i433: i1;
  var $i434: i1;
  var $i435: i32;
  var $i436: i1;
  var $p437: ref;
  var $p438: ref;
  var $i439: i32;
  var $i441: i32;
  var $i442: i1;
  var $p443: ref;
  var $p444: ref;
  var $i445: i32;
  var $i447: i32;
  var $i448: i1;
  var $p449: ref;
  var $i451: i32;
  var $i452: i1;
  var $p453: ref;
  var $i455: i32;
  var $i456: i1;
  var $p457: ref;
  var $p458: ref;
  var $i460: i32;
  var $i461: i1;
  var $p462: ref;
  var $p463: ref;
  var $i465: i32;
  var $i466: i1;
  var $p467: ref;
  var $p468: ref;
  var $i469: i32;
  var $i470: i32;
  var $i471: i32;
  var $i472: i1;
  var $p473: ref;
  var $p474: ref;
  var $i475: i32;
  var $i476: i32;
  var $i477: i1;
  var $i478: i32;
  var $i479: i32;
  var $i480: i32;
  var $i481: i1;
  var $p482: ref;
  var $i483: i32;
  var $i484: i1;
  var $p485: ref;
  var $i486: i32;
  var $i487: i1;
  var $i488: i32;
  var $i489: i1;
  var $i490: i1;
  var $i491: i1;
  var $i492: i1;
  var $i493: i1;
  var $i494: i1;
  var $i495: i1;
  var $i496: i1;
  var $i497: i1;
  var $i498: i1;
  var $i499: i1;
  var $i500: i1;
  var $i501: i32;
  var $i502: i1;
  var $p503: ref;
  var $i505: i32;
  var $i506: i1;
  var $p507: ref;
  var $p508: ref;
  var $i510: i32;
  var $i511: i1;
  var $p512: ref;
  var $i513: i32;
  var $i514: i1;
  var $p515: ref;
  var $i516: i32;
  var $i517: i1;
  var $p518: ref;
  var $i520: i32;
  var $i521: i1;
  var $p522: ref;
  var $p523: ref;
  var $i525: i32;
  var $i526: i1;
  var $p527: ref;
  var $i528: i32;
  var $i529: i1;
  var $p530: ref;
  var $i531: i32;
  var $i532: i1;
  var $p533: ref;
  var $i535: i32;
  var $i536: i1;
  var $p537: ref;
  var $i539: i32;
  var $i540: i1;
  var $p541: ref;
  var $i543: i32;
  var $i544: i1;
  var $i545: i32;
  var $i546: i1;
  var $i547: i32;
  var $i548: i1;
  var $i550: i32;
  var $i551: i1;
  var $i552: i32;
  var $i553: i1;
  var $i554: i32;
  var $i555: i1;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;
  var vslice_dummy_var_130: i64;
  var vslice_dummy_var_131: i64;
  var vslice_dummy_var_132: i64;
  var vslice_dummy_var_133: i64;
  var vslice_dummy_var_134: ref;
  var vslice_dummy_var_135: ref;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i64;
  var vslice_dummy_var_141: i64;
  var vslice_dummy_var_142: i64;
  var vslice_dummy_var_143: i64;
  var vslice_dummy_var_144: i64;
  var vslice_dummy_var_145: i64;
  var vslice_dummy_var_146: ref;
  var vslice_dummy_var_147: ref;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i64;
  var vslice_dummy_var_153: i64;
  var vslice_dummy_var_154: i64;
  var vslice_dummy_var_155: i64;
  var vslice_dummy_var_156: i64;
  var vslice_dummy_var_157: i64;
  var vslice_dummy_var_158: ref;
  var vslice_dummy_var_159: ref;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i64;
  var vslice_dummy_var_172: i64;

  $bb0:
    call {:si_unique_call 704} $initialize();
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $p4 := ldv_zalloc(1);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $p5 := ldv_zalloc(1416);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $p7 := ldv_zalloc(48);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $p9 := ldv_zalloc(1);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $p10 := ldv_zalloc(1416);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $p12 := ldv_zalloc(48);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $p14 := ldv_zalloc(1);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 1} true;
    call {:si_unique_call 717} $i15 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 718} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i15);
    call {:si_unique_call 719} {:cexpr "tmp___6"} boogie_si_record_i64($i15);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $p16 := ldv_zalloc(1);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 1} true;
    call {:si_unique_call 721} $i17 := __VERIFIER_nondet_int();
    call {:si_unique_call 722} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i17);
    call {:si_unique_call 723} {:cexpr "tmp___8"} boogie_si_record_i32($i17);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $p18 := ldv_zalloc(192);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $p20 := ldv_zalloc(32);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $p22 := ldv_zalloc(1);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $p23 := ldv_zalloc(1);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 1} true;
    call {:si_unique_call 728} $i24 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 729} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i24);
    call {:si_unique_call 730} {:cexpr "tmp___13"} boogie_si_record_i64($i24);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 1} true;
    call {:si_unique_call 731} $i25 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 732} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i25);
    call {:si_unique_call 733} {:cexpr "tmp___14"} boogie_si_record_i64($i25);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $p26 := ldv_zalloc(1);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $p27 := ldv_zalloc(1);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $p28 := ldv_zalloc(1);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $p29 := ldv_zalloc(1416);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $p31 := ldv_zalloc(48);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $p33 := ldv_zalloc(1);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $p34 := ldv_zalloc(48);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $p36 := ldv_zalloc(1416);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 1} true;
    call {:si_unique_call 742} $i38 := __VERIFIER_nondet_int();
    call {:si_unique_call 743} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i38);
    call {:si_unique_call 744} {:cexpr "tmp___23"} boogie_si_record_i32($i38);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $p39 := ldv_zalloc(192);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $p41 := ldv_zalloc(48);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $p43 := ldv_zalloc(1416);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $p45 := ldv_zalloc(1);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $p46 := ldv_zalloc(1416);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $p48 := ldv_zalloc(48);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $p50 := ldv_zalloc(1);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $p51 := ldv_zalloc(48);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $p53 := ldv_zalloc(1416);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $p55 := ldv_zalloc(1);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 1} true;
    call {:si_unique_call 755} $i56 := __VERIFIER_nondet_size_t();
    call {:si_unique_call 756} {:cexpr "smack:ext:__VERIFIER_nondet_size_t"} boogie_si_record_i64($i56);
    call {:si_unique_call 757} {:cexpr "tmp___34"} boogie_si_record_i64($i56);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $p57 := ldv_zalloc(1);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $p58 := ldv_zalloc(1);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $p59 := ldv_zalloc(1416);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $p61 := ldv_zalloc(48);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $p63 := ldv_zalloc(1);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 1} true;
    call {:si_unique_call 763} $i64 := __VERIFIER_nondet_int();
    call {:si_unique_call 764} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i64);
    call {:si_unique_call 765} {:cexpr "tmp___40"} boogie_si_record_i32($i64);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $p65 := ldv_zalloc(192);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 1} true;
    call {:si_unique_call 767} $i67 := __VERIFIER_nondet_u32();
    call {:si_unique_call 768} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i67);
    call {:si_unique_call 769} {:cexpr "tmp___42"} boogie_si_record_i32($i67);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 1} true;
    call {:si_unique_call 770} $i68 := __VERIFIER_nondet_int();
    call {:si_unique_call 771} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i68);
    call {:si_unique_call 772} {:cexpr "tmp___43"} boogie_si_record_i32($i68);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $p69 := ldv_zalloc(44);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $p71 := ldv_zalloc(196);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 1} true;
    call {:si_unique_call 775} $i73 := __VERIFIER_nondet_u32();
    call {:si_unique_call 776} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i73);
    call {:si_unique_call 777} {:cexpr "tmp___46"} boogie_si_record_i32($i73);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $p74 := ldv_zalloc(8);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $p76 := ldv_zalloc(8);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $p78 := ldv_zalloc(1);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $p79 := ldv_zalloc(48);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $p81 := ldv_zalloc(1416);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $p83 := ldv_zalloc(1);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $p84 := ldv_zalloc(1416);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $p86 := ldv_zalloc(48);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $p88 := ldv_zalloc(1);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} ldv_initialize();
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p0);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_71 := $M.64;
    call {:si_unique_call 788} cmdloc_dummy_var_72 := $memset.i8(cmdloc_dummy_var_71, $p89, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.64 := cmdloc_dummy_var_72;
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p1);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_73 := $M.65;
    call {:si_unique_call 789} cmdloc_dummy_var_74 := $memset.i8(cmdloc_dummy_var_73, $p90, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.65 := cmdloc_dummy_var_74;
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p2);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_75 := $M.66;
    call {:si_unique_call 790} cmdloc_dummy_var_76 := $memset.i8(cmdloc_dummy_var_75, $p91, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.66 := cmdloc_dummy_var_76;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p3);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_77 := $M.67;
    call {:si_unique_call 791} cmdloc_dummy_var_78 := $memset.i8(cmdloc_dummy_var_77, $p92, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.67 := cmdloc_dummy_var_78;
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $M.68 := 0;
    call {:si_unique_call 792} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $M.69 := 0;
    call {:si_unique_call 793} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $M.70 := 0;
    call {:si_unique_call 794} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $M.71 := 0;
    call {:si_unique_call 795} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $M.72 := 0;
    call {:si_unique_call 796} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $M.73 := 0;
    call {:si_unique_call 797} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(0);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $M.74 := 0;
    call {:si_unique_call 798} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 799} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $M.76 := 0;
    call {:si_unique_call 800} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $M.77 := 0;
    call {:si_unique_call 801} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $M.78 := 0;
    call {:si_unique_call 802} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $M.79 := 0;
    call {:si_unique_call 803} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $M.80 := 0;
    call {:si_unique_call 804} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $M.81 := 0;
    call {:si_unique_call 805} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $M.82 := 0;
    call {:si_unique_call 806} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $M.83 := 0;
    call {:si_unique_call 807} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $M.84 := 0;
    call {:si_unique_call 808} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $M.85 := 0;
    call {:si_unique_call 809} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $M.86 := 0;
    call {:si_unique_call 810} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(0);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $M.87 := 0;
    call {:si_unique_call 811} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $M.88 := 0;
    call {:si_unique_call 812} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i122, $i123, $i124, $i125, $i126, $i127, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $p137, $p138, $i140, $i141, $p142, $p143, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $p157, $p158, $i159, $i161, $i162, $p163, $p164, $i165, $i167, $i168, $p169, $i171, $i172, $p173, $i175, $i176, $p177, $p178, $i180, $i181, $p182, $p183, $i185, $i186, $p187, $p188, $i189, $i190, $i191, $i192, $p193, $p194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $p202, $i203, $i204, $p205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $p217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $p225, $p226, $i227, $i228, $i229, $i230, $i231, $i232, $p233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $p241, $i242, $i243, $i244, $i245, $i246, $i247, $p248, $i249, $i250, $i251, $i252, $p253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $p265, $p266, $i268, $i269, $p270, $p271, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $p298, $p299, $i301, $i302, $p303, $p304, $i306, $i307, $i308, $i309, $i310, $i311, $i313, $i314, $i315, $i316, $i317, $i318, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $i331, $p332, $p333, $i334, $i336, $i337, $p338, $p339, $i340, $i342, $i343, $p344, $i346, $i347, $p348, $i350, $i351, $p352, $p353, $i355, $i356, $p357, $p358, $i360, $i361, $p362, $p363, $i364, $i365, $i366, $i367, $p368, $p369, $i370, $i371, $i372, $i373, $i374, $i375, $i376, $p377, $i378, $i379, $p380, $i381, $i382, $i383, $i384, $i385, $i386, $i388, $i389, $i390, $i391, $i392, $i393, $i395, $i396, $i397, $i398, $i399, $i400, $i402, $i403, $i404, $i405, $i406, $i407, $i408, $i409, $p410, $p411, $i413, $i414, $p415, $p416, $i418, $i419, $i420, $i421, $i422, $i423, $i425, $i426, $i427, $i428, $i429, $i430, $i431, $i432, $i433, $i434, $i435, $i436, $p437, $p438, $i439, $i441, $i442, $p443, $p444, $i445, $i447, $i448, $p449, $i451, $i452, $p453, $i455, $i456, $p457, $p458, $i460, $i461, $p462, $p463, $i465, $i466, $p467, $p468, $i469, $i470, $i471, $i472, $p473, $p474, $i475, $i476, $i477, $i478, $i479, $i480, $i481, $p482, $i483, $i484, $p485, $i486, $i487, $i488, $i489, $i490, $i491, $i492, $i493, $i494, $i495, $i496, $i497, $i498, $i499, $i500, $i501, $i502, $p503, $i505, $i506, $p507, $p508, $i510, $i511, $p512, $i513, $i514, $p515, $i516, $i517, $p518, $i520, $i521, $p522, $p523, $i525, $i526, $p527, $i528, $i529, $p530, $i531, $i532, $p533, $i535, $i536, $p537, $i539, $i540, $p541, $i543, $i544, $i545, $i546, $i547, $i548, $i550, $i551, $i552, $i553, $i554, $i555, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147, vslice_dummy_var_148, vslice_dummy_var_149, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p6, $p8, $p9, $p11, $p13, $p14, $i15, $p16, $i17, $p19, $p21, $p22, $p23, $i24, $i25, $p26, $p27, $p28, $p30, $p32, $p33, $p35, $p37, $i38, $p40, $p42, $p44, $p45, $p47, $p49, $p50, $p52, $p54, $p55, $i56, $p57, $p58, $p60, $p62, $p63, $i64, $p66, $i67, $i68, $p70, $p72, $i73, $p75, $p77, $p78, $p80, $p82, $p83, $p85, $p87, $p88, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i122, $i123, $i124, $i125, $i126, $i127, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $p137, $p138, $i140, $i141, $p142, $p143, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $p157, $p158, $i159, $i161, $i162, $p163, $p164, $i165, $i167, $i168, $p169, $i171, $i172, $p173, $i175, $i176, $p177, $p178, $i180, $i181, $p182, $p183, $i185, $i186, $p187, $p188, $i189, $i190, $i191, $i192, $p193, $p194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $p202, $i203, $i204, $p205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $p217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $p225, $p226, $i227, $i228, $i229, $i230, $i231, $i232, $p233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $p241, $i242, $i243, $i244, $i245, $i246, $i247, $p248, $i249, $i250, $i251, $i252, $p253, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $p265, $p266, $i268, $i269, $p270, $p271, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $p298, $p299, $i301, $i302, $p303, $p304, $i306, $i307, $i308, $i309, $i310, $i311, $i313, $i314, $i315, $i316, $i317, $i318, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $i331, $p332, $p333, $i334, $i336, $i337, $p338, $p339, $i340, $i342, $i343, $p344, $i346, $i347, $p348, $i350, $i351, $p352, $p353, $i355, $i356, $p357, $p358, $i360, $i361, $p362, $p363, $i364, $i365, $i366, $i367, $p368, $p369, $i370, $i371, $i372, $i373, $i374, $i375, $i376, $p377, $i378, $i379, $p380, $i381, $i382, $i383, $i384, $i385, $i386, $i388, $i389, $i390, $i391, $i392, $i393, $i395, $i396, $i397, $i398, $i399, $i400, $i402, $i403, $i404, $i405, $i406, $i407, $i408, $i409, $p410, $p411, $i413, $i414, $p415, $p416, $i418, $i419, $i420, $i421, $i422, $i423, $i425, $i426, $i427, $i428, $i429, $i430, $i431, $i432, $i433, $i434, $i435, $i436, $p437, $p438, $i439, $i441, $i442, $p443, $p444, $i445, $i447, $i448, $p449, $i451, $i452, $p453, $i455, $i456, $p457, $p458, $i460, $i461, $p462, $p463, $i465, $i466, $p467, $p468, $i469, $i470, $i471, $i472, $p473, $p474, $i475, $i476, $i477, $i478, $i479, $i480, $i481, $p482, $i483, $i484, $p485, $i486, $i487, $i488, $i489, $i490, $i491, $i492, $i493, $i494, $i495, $i496, $i497, $i498, $i499, $i500, $i501, $i502, $p503, $i505, $i506, $p507, $p508, $i510, $i511, $p512, $i513, $i514, $p515, $i516, $i517, $p518, $i520, $i521, $p522, $p523, $i525, $i526, $p527, $i528, $i529, $p530, $i531, $i532, $p533, $i535, $i536, $p537, $i539, $i540, $p541, $i543, $i544, $i545, $i546, $i547, $i548, $i550, $i551, $i552, $i553, $i554, $i555, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147, vslice_dummy_var_148, vslice_dummy_var_149, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i93, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i93, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i93, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i93, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i93, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i93, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} ldv_stop();
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb58_dummy;

  $bb13:
    assume $i99 == 1;
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i550 := $M.88;
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i551 := $ne.i32($i550, 0);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb551, $bb552;

  $bb552:
    assume !($i551 == 1);
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb551:
    assume $i551 == 1;
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1069} $i552 := __VERIFIER_nondet_int();
    call {:si_unique_call 1070} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i552);
    call {:si_unique_call 1071} {:cexpr "tmp___76"} boogie_si_record_i32($i552);
    assume {:verifier.code 0} true;
    goto $bb553;

  $bb553:
    assume {:verifier.code 0} true;
    $i553 := $eq.i32($i552, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb554, $bb555;

  $bb555:
    assume !($i553 == 1);
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} ldv_stop();
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb559:
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb554:
    assume $i553 == 1;
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i554 := $M.88;
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i555 := $eq.i32($i554, 1);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb556, $bb557;

  $bb557:
    assume !($i555 == 1);
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb556:
    assume $i555 == 1;
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} vslice_dummy_var_172 := cdc_ncm_show_wNtbOutMaxDatagrams($p85, $p87, $p88);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1073} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb11:
    assume $i98 == 1;
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i543 := $M.87;
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i544 := $ne.i32($i543, 0);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb539, $bb540;

  $bb540:
    assume !($i544 == 1);
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb539:
    assume $i544 == 1;
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1063} $i545 := __VERIFIER_nondet_int();
    call {:si_unique_call 1064} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i545);
    call {:si_unique_call 1065} {:cexpr "tmp___75"} boogie_si_record_i32($i545);
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    $i546 := $eq.i32($i545, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb542, $bb543;

  $bb543:
    assume !($i546 == 1);
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} ldv_stop();
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    goto $bb549;

  $bb549:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb547:
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb542:
    assume $i546 == 1;
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i547 := $M.87;
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i548 := $eq.i32($i547, 1);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb544, $bb545;

  $bb545:
    assume !($i548 == 1);
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb544:
    assume $i548 == 1;
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} vslice_dummy_var_171 := cdc_ncm_show_wNdpInAlignment($p82, $p80, $p83);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1067} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb9:
    assume $i97 == 1;
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i486 := $M.86;
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i487 := $ne.i32($i486, 0);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb474, $bb475;

  $bb475:
    assume !($i487 == 1);
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb474:
    assume $i487 == 1;
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1037} $i488 := __VERIFIER_nondet_int();
    call {:si_unique_call 1038} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i488);
    call {:si_unique_call 1039} {:cexpr "tmp___74"} boogie_si_record_i32($i488);
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    $i489 := $slt.i32($i488, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb477, $bb478;

  $bb478:
    assume !($i489 == 1);
    assume {:verifier.code 0} true;
    $i490 := $slt.i32($i488, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb479, $bb480;

  $bb480:
    assume !($i490 == 1);
    assume {:verifier.code 0} true;
    $i491 := $slt.i32($i488, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb481, $bb482;

  $bb482:
    assume !($i491 == 1);
    assume {:verifier.code 0} true;
    $i492 := $slt.i32($i488, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb483, $bb484;

  $bb484:
    assume !($i492 == 1);
    assume {:verifier.code 0} true;
    $i493 := $eq.i32($i488, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb485, $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    assume !($i493 == 1);
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} ldv_stop();
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb537:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb485:
    assume $i493 == 1;
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i539 := $M.86;
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i540 := $eq.i32($i539, 1);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb533, $bb534;

  $bb534:
    assume !($i540 == 1);
    assume {:verifier.code 0} true;
    goto $bb535;

  $bb535:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb533:
    assume $i540 == 1;
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $p541 := $M.51;
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} vslice_dummy_var_170 := usbnet_get_link($p541);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1061} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    goto $bb535;

  $bb483:
    assume $i492 == 1;
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i535 := $M.86;
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i536 := $eq.i32($i535, 1);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb530, $bb531;

  $bb531:
    assume !($i536 == 1);
    assume {:verifier.code 0} true;
    goto $bb532;

  $bb532:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb530:
    assume $i536 == 1;
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p537 := $M.51;
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} vslice_dummy_var_169 := usbnet_get_msglevel($p537);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1059} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    goto $bb532;

  $bb481:
    assume $i491 == 1;
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i531 := $M.86;
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i532 := $eq.i32($i531, 1);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb527, $bb528;

  $bb528:
    assume !($i532 == 1);
    assume {:verifier.code 0} true;
    goto $bb529;

  $bb529:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb527:
    assume $i532 == 1;
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $p533 := $M.51;
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} vslice_dummy_var_168 := usbnet_nway_reset($p533);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1057} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    goto $bb529;

  $bb479:
    assume $i490 == 1;
    assume {:verifier.code 0} true;
    $i494 := $slt.i32($i488, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb488, $bb489;

  $bb489:
    assume !($i494 == 1);
    assume {:verifier.code 0} true;
    $i495 := $slt.i32($i488, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb490, $bb491;

  $bb491:
    assume !($i495 == 1);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i528 := $M.86;
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i529 := $eq.i32($i528, 1);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb524, $bb525;

  $bb525:
    assume !($i529 == 1);
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb524:
    assume $i529 == 1;
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $p530 := $M.51;
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} cdc_ncm_get_strings($p530, $i67, $p78);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1055} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb490:
    assume $i495 == 1;
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i525 := $M.86;
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i526 := $eq.i32($i525, 1);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb521, $bb522;

  $bb522:
    assume !($i526 == 1);
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb521:
    assume $i526 == 1;
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $p527 := $M.51;
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} cdc_ncm_get_ethtool_stats($p527, $p77, $p75);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1053} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb488:
    assume $i494 == 1;
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i520 := $M.86;
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i521 := $eq.i32($i520, 1);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb518, $bb519;

  $bb519:
    assume !($i521 == 1);
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb518:
    assume $i521 == 1;
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p522 := $M.51;
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $p523 := $M.50;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} vslice_dummy_var_167 := usbnet_set_settings($p522, $p523);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1051} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb477:
    assume $i489 == 1;
    assume {:verifier.code 0} true;
    $i496 := $slt.i32($i488, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb492, $bb493;

  $bb493:
    assume !($i496 == 1);
    assume {:verifier.code 0} true;
    $i497 := $slt.i32($i488, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb494, $bb495;

  $bb495:
    assume !($i497 == 1);
    assume {:verifier.code 0} true;
    $i498 := $slt.i32($i488, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb496, $bb497;

  $bb497:
    assume !($i498 == 1);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i516 := $M.86;
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i517 := $eq.i32($i516, 1);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb515, $bb516;

  $bb516:
    assume !($i517 == 1);
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb515:
    assume $i517 == 1;
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $p518 := $M.51;
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} vslice_dummy_var_166 := ethtool_op_get_ts_info($p518, $p70);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1049} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb496:
    assume $i498 == 1;
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i513 := $M.86;
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i514 := $eq.i32($i513, 1);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb512, $bb513;

  $bb513:
    assume !($i514 == 1);
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb512:
    assume $i514 == 1;
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $p515 := $M.51;
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} usbnet_set_msglevel($p515, $i73);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1047} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb494:
    assume $i497 == 1;
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i510 := $M.86;
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i511 := $eq.i32($i510, 1);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb509, $bb510;

  $bb510:
    assume !($i511 == 1);
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb509:
    assume $i511 == 1;
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $p512 := $M.51;
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} usbnet_get_drvinfo($p512, $p72);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1045} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb492:
    assume $i496 == 1;
    assume {:verifier.code 0} true;
    $i499 := $slt.i32($i488, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb498, $bb499;

  $bb499:
    assume !($i499 == 1);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i505 := $M.86;
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i506 := $eq.i32($i505, 1);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb506, $bb507;

  $bb507:
    assume !($i506 == 1);
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb506:
    assume $i506 == 1;
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $p507 := $M.51;
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p508 := $M.50;
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} vslice_dummy_var_165 := usbnet_get_settings($p507, $p508);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1043} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb498:
    assume $i499 == 1;
    assume {:verifier.code 0} true;
    $i500 := $eq.i32($i488, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb500, $bb501;

  $bb501:
    assume {:verifier.code 0} true;
    assume !($i500 == 1);
    goto $bb487;

  $bb500:
    assume $i500 == 1;
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i501 := $M.86;
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i502 := $eq.i32($i501, 1);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb502, $bb503;

  $bb503:
    assume !($i502 == 1);
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb502:
    assume $i502 == 1;
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p503 := $M.51;
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} vslice_dummy_var_164 := cdc_ncm_get_sset_count($p503, $i68);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1041} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb7:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i93, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i100 == 1);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i425 := $M.85;
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i426 := $ne.i32($i425, 0);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb419, $bb420;

  $bb420:
    assume !($i426 == 1);
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb473:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb419:
    assume $i426 == 1;
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1010} $i427 := __VERIFIER_nondet_int();
    call {:si_unique_call 1011} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i427);
    call {:si_unique_call 1012} {:cexpr "tmp___73"} boogie_si_record_i32($i427);
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    $i428 := $slt.i32($i427, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb422, $bb423;

  $bb423:
    assume !($i428 == 1);
    assume {:verifier.code 0} true;
    $i429 := $slt.i32($i427, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb424, $bb425;

  $bb425:
    assume !($i429 == 1);
    assume {:verifier.code 0} true;
    $i430 := $slt.i32($i427, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  $bb427:
    assume !($i430 == 1);
    assume {:verifier.code 0} true;
    $i431 := $eq.i32($i427, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb428, $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    assume !($i431 == 1);
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} ldv_stop();
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb428:
    assume $i431 == 1;
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i480 := $M.85;
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i481 := $eq.i32($i480, 1);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb465, $bb466;

  $bb466:
    assume !($i481 == 1);
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    $i483 := $M.85;
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i484 := $eq.i32($i483, 2);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb468, $bb469;

  $bb469:
    assume !($i484 == 1);
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb468:
    assume $i484 == 1;
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $p485 := $M.56;
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} cdc_ncm_status($p485, $p66);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1035} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb465:
    assume $i481 == 1;
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p482 := $M.56;
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} cdc_ncm_status($p482, $p66);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1033} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb426:
    assume $i430 == 1;
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i471 := $M.85;
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i472 := $eq.i32($i471, 1);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb459, $bb460;

  $bb460:
    assume !($i472 == 1);
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb459:
    assume $i472 == 1;
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p473 := $M.56;
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p474 := $M.57;
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $i475 := cdc_ncm_bind($p473, $p474);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $M.97 := $i475;
    call {:si_unique_call 1029} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i475);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i476 := $M.97;
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i477 := $eq.i32($i476, 0);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb461, $bb462;

  $bb462:
    assume !($i477 == 1);
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb461:
    assume $i477 == 1;
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1030} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i478 := $M.74;
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i479 := $add.i32($i478, 1);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $M.74 := $i479;
    call {:si_unique_call 1031} {:cexpr "ref_cnt"} boogie_si_record_i32($i479);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb424:
    assume $i429 == 1;
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i465 := $M.85;
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i466 := $eq.i32($i465, 2);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb456, $bb457;

  $bb457:
    assume !($i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb456:
    assume $i466 == 1;
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p467 := $M.56;
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p468 := $M.57;
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} cdc_ncm_unbind($p467, $p468);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1026} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i469 := $M.74;
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i470 := $sub.i32($i469, 1);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $M.74 := $i470;
    call {:si_unique_call 1027} {:cexpr "ref_cnt"} boogie_si_record_i32($i470);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb422:
    assume $i428 == 1;
    assume {:verifier.code 0} true;
    $i432 := $slt.i32($i427, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb431, $bb432;

  $bb432:
    assume !($i432 == 1);
    assume {:verifier.code 0} true;
    $i433 := $slt.i32($i427, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb433, $bb434;

  $bb434:
    assume !($i433 == 1);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i455 := $M.85;
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i456 := $eq.i32($i455, 1);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb450, $bb451;

  $bb451:
    assume !($i456 == 1);
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    $i460 := $M.85;
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i461 := $eq.i32($i460, 2);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  $bb454:
    assume !($i461 == 1);
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb453:
    assume $i461 == 1;
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $p462 := $M.56;
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p463 := $M.58;
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} vslice_dummy_var_163 := cdc_ncm_rx_fixup($p462, $p463);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1024} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb450:
    assume $i456 == 1;
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p457 := $M.56;
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p458 := $M.58;
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} vslice_dummy_var_162 := cdc_ncm_rx_fixup($p457, $p458);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1022} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb433:
    assume $i433 == 1;
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i447 := $M.85;
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i448 := $eq.i32($i447, 1);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb444, $bb445;

  $bb445:
    assume !($i448 == 1);
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    $i451 := $M.85;
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i452 := $eq.i32($i451, 2);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb447, $bb448;

  $bb448:
    assume !($i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb447:
    assume $i452 == 1;
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $p453 := $M.56;
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} vslice_dummy_var_161 := usbnet_manage_power($p453, $i64);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1020} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb444:
    assume $i448 == 1;
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p449 := $M.56;
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} vslice_dummy_var_160 := usbnet_manage_power($p449, $i64);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1018} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb431:
    assume $i432 == 1;
    assume {:verifier.code 0} true;
    $i434 := $eq.i32($i427, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb435, $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    assume !($i434 == 1);
    goto $bb430;

  $bb435:
    assume $i434 == 1;
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i435 := $M.85;
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i436 := $eq.i32($i435, 1);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb437, $bb438;

  $bb438:
    assume !($i436 == 1);
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    $i441 := $M.85;
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i442 := $eq.i32($i441, 2);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb440, $bb441;

  $bb441:
    assume !($i442 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb440:
    assume $i442 == 1;
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p443 := $M.56;
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p444 := $M.58;
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i445 := $load.i32($M.67, $p3);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} vslice_dummy_var_159 := cdc_ncm_tx_fixup($p443, $p444, $i445);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1016} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb437:
    assume $i436 == 1;
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p437 := $M.56;
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p438 := $M.58;
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i439 := $load.i32($M.67, $p3);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} vslice_dummy_var_158 := cdc_ncm_tx_fixup($p437, $p438, $i439);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1014} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb16:
    assume $i100 == 1;
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i418 := $M.84;
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i419 := $ne.i32($i418, 0);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb407, $bb408;

  $bb408:
    assume !($i419 == 1);
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb407:
    assume $i419 == 1;
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1004} $i420 := __VERIFIER_nondet_int();
    call {:si_unique_call 1005} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i420);
    call {:si_unique_call 1006} {:cexpr "tmp___72"} boogie_si_record_i32($i420);
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    $i421 := $eq.i32($i420, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb410, $bb411;

  $bb411:
    assume !($i421 == 1);
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} ldv_stop();
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb410:
    assume $i421 == 1;
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i422 := $M.84;
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i423 := $eq.i32($i422, 1);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb412, $bb413;

  $bb413:
    assume !($i423 == 1);
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb412:
    assume $i423 == 1;
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} vslice_dummy_var_157 := cdc_ncm_show_wNdpOutDivisor($p60, $p62, $p63);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1008} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb5:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i93, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i93, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i93, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i103 == 1);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i402 := $M.83;
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i403 := $ne.i32($i402, 0);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb387, $bb388;

  $bb388:
    assume !($i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb387:
    assume $i403 == 1;
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 1} true;
    call {:si_unique_call 996} $i404 := __VERIFIER_nondet_int();
    call {:si_unique_call 997} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i404);
    call {:si_unique_call 998} {:cexpr "tmp___71"} boogie_si_record_i32($i404);
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    $i405 := $slt.i32($i404, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb390, $bb391;

  $bb391:
    assume !($i405 == 1);
    assume {:verifier.code 0} true;
    $i406 := $eq.i32($i404, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb392, $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    assume !($i406 == 1);
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} ldv_stop();
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb392:
    assume $i406 == 1;
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i413 := $M.83;
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i414 := $eq.i32($i413, 1);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb401, $bb402;

  $bb402:
    assume !($i414 == 1);
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb401:
    assume $i414 == 1;
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $p415 := $M.52;
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $p416 := $M.53;
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} vslice_dummy_var_156 := cdc_ncm_show_tx_timer_usecs($p415, $p416, $p58);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1002} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb390:
    assume $i405 == 1;
    assume {:verifier.code 0} true;
    $i407 := $eq.i32($i404, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb395, $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    assume !($i407 == 1);
    goto $bb394;

  $bb395:
    assume $i407 == 1;
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i408 := $M.83;
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i409 := $eq.i32($i408, 1);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb397, $bb398;

  $bb398:
    assume !($i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb397:
    assume $i409 == 1;
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $p410 := $M.52;
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $p411 := $M.53;
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} vslice_dummy_var_155 := cdc_ncm_store_tx_timer_usecs($p410, $p411, $p57, $i56);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1000} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb22:
    assume $i103 == 1;
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i395 := $M.82;
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i396 := $ne.i32($i395, 0);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb375, $bb376;

  $bb376:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb375:
    assume $i396 == 1;
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 1} true;
    call {:si_unique_call 990} $i397 := __VERIFIER_nondet_int();
    call {:si_unique_call 991} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i397);
    call {:si_unique_call 992} {:cexpr "tmp___70"} boogie_si_record_i32($i397);
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    $i398 := $eq.i32($i397, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb378, $bb379;

  $bb379:
    assume !($i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} ldv_stop();
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb378:
    assume $i398 == 1;
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i399 := $M.82;
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i400 := $eq.i32($i399, 1);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb380, $bb381;

  $bb381:
    assume !($i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb380:
    assume $i400 == 1;
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} vslice_dummy_var_154 := cdc_ncm_show_bmNtbFormatsSupported($p54, $p52, $p55);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 994} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb20:
    assume $i102 == 1;
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i388 := $M.81;
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i389 := $ne.i32($i388, 0);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb363, $bb364;

  $bb364:
    assume !($i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb363:
    assume $i389 == 1;
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 1} true;
    call {:si_unique_call 984} $i390 := __VERIFIER_nondet_int();
    call {:si_unique_call 985} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i390);
    call {:si_unique_call 986} {:cexpr "tmp___69"} boogie_si_record_i32($i390);
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    $i391 := $eq.i32($i390, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb366, $bb367;

  $bb367:
    assume !($i391 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} ldv_stop();
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb366:
    assume $i391 == 1;
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i392 := $M.81;
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i393 := $eq.i32($i392, 1);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb368, $bb369;

  $bb369:
    assume !($i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb368:
    assume $i393 == 1;
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} vslice_dummy_var_153 := cdc_ncm_show_wNdpInDivisor($p47, $p49, $p50);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 988} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb18:
    assume $i101 == 1;
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i93, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i104 == 1);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i381 := $M.80;
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i382 := $ne.i32($i381, 0);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb351, $bb352;

  $bb352:
    assume !($i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb351:
    assume $i382 == 1;
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 1} true;
    call {:si_unique_call 978} $i383 := __VERIFIER_nondet_int();
    call {:si_unique_call 979} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i383);
    call {:si_unique_call 980} {:cexpr "tmp___68"} boogie_si_record_i32($i383);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    $i384 := $eq.i32($i383, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb354, $bb355;

  $bb355:
    assume !($i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} ldv_stop();
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb354:
    assume $i384 == 1;
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i385 := $M.80;
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i386 := $eq.i32($i385, 1);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i386 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb356:
    assume $i386 == 1;
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} vslice_dummy_var_152 := cdc_ncm_show_dwNtbOutMaxSize($p44, $p42, $p45);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 982} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb24:
    assume $i104 == 1;
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i320 := $M.79;
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i321 := $ne.i32($i320, 0);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb296:
    assume $i321 == 1;
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 1} true;
    call {:si_unique_call 951} $i322 := __VERIFIER_nondet_int();
    call {:si_unique_call 952} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i322);
    call {:si_unique_call 953} {:cexpr "tmp___67"} boogie_si_record_i32($i322);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    $i323 := $slt.i32($i322, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    $i324 := $slt.i32($i322, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    $i325 := $slt.i32($i322, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb303, $bb304;

  $bb304:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i322, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    assume !($i326 == 1);
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} ldv_stop();
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb305:
    assume $i326 == 1;
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i375 := $M.79;
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i376 := $eq.i32($i375, 1);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  $bb343:
    assume !($i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    $i378 := $M.79;
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i379 := $eq.i32($i378, 2);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb345, $bb346;

  $bb346:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb345:
    assume $i379 == 1;
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p380 := $M.47;
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} cdc_ncm_status($p380, $p40);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 976} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb342:
    assume $i376 == 1;
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $p377 := $M.47;
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} cdc_ncm_status($p377, $p40);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 974} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb303:
    assume $i325 == 1;
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i366 := $M.79;
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i367 := $eq.i32($i366, 1);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  $bb337:
    assume !($i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb336:
    assume $i367 == 1;
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p368 := $M.47;
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $p369 := $M.48;
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $i370 := cdc_ncm_bind($p368, $p369);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $M.96 := $i370;
    call {:si_unique_call 970} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i370);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i371 := $M.96;
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i372 := $eq.i32($i371, 0);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  $bb339:
    assume !($i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb338:
    assume $i372 == 1;
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 971} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i373 := $M.74;
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i374 := $add.i32($i373, 1);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $M.74 := $i374;
    call {:si_unique_call 972} {:cexpr "ref_cnt"} boogie_si_record_i32($i374);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb301:
    assume $i324 == 1;
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i360 := $M.79;
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i361 := $eq.i32($i360, 2);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb333, $bb334;

  $bb334:
    assume !($i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb333:
    assume $i361 == 1;
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p362 := $M.47;
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p363 := $M.48;
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} cdc_ncm_unbind($p362, $p363);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i364 := $M.74;
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i365 := $sub.i32($i364, 1);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $M.74 := $i365;
    call {:si_unique_call 968} {:cexpr "ref_cnt"} boogie_si_record_i32($i365);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb299:
    assume $i323 == 1;
    assume {:verifier.code 0} true;
    $i327 := $slt.i32($i322, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    $i328 := $slt.i32($i322, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb311:
    assume !($i328 == 1);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i350 := $M.79;
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i351 := $eq.i32($i350, 1);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    $i355 := $M.79;
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i356 := $eq.i32($i355, 2);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  $bb331:
    assume !($i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb330:
    assume $i356 == 1;
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p357 := $M.47;
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p358 := $M.49;
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} vslice_dummy_var_151 := cdc_ncm_rx_fixup($p357, $p358);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 965} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb327:
    assume $i351 == 1;
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p352 := $M.47;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p353 := $M.49;
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} vslice_dummy_var_150 := cdc_ncm_rx_fixup($p352, $p353);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb310:
    assume $i328 == 1;
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i342 := $M.79;
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i343 := $eq.i32($i342, 1);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  $bb322:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    $i346 := $M.79;
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $i347 := $eq.i32($i346, 2);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb324:
    assume $i347 == 1;
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p348 := $M.47;
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} vslice_dummy_var_149 := usbnet_manage_power($p348, $i38);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb321:
    assume $i343 == 1;
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p344 := $M.47;
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} vslice_dummy_var_148 := usbnet_manage_power($p344, $i38);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 959} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb308:
    assume $i327 == 1;
    assume {:verifier.code 0} true;
    $i329 := $eq.i32($i322, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    assume !($i329 == 1);
    goto $bb307;

  $bb312:
    assume $i329 == 1;
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i330 := $M.79;
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i331 := $eq.i32($i330, 1);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    $i336 := $M.79;
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i337 := $eq.i32($i336, 2);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb317:
    assume $i337 == 1;
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p338 := $M.47;
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $p339 := $M.49;
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i340 := $load.i32($M.66, $p2);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} vslice_dummy_var_147 := cdc_ncm_tx_fixup($p338, $p339, $i340);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 957} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb314:
    assume $i331 == 1;
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $p332 := $M.47;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p333 := $M.49;
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i334 := $load.i32($M.66, $p2);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} vslice_dummy_var_146 := cdc_ncm_tx_fixup($p332, $p333, $i334);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 955} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb3:
    assume $i94 == 1;
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i93, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i93, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i93, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i93, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i108 == 1);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i313 := $M.78;
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i314 := $ne.i32($i313, 0);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb284:
    assume $i314 == 1;
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 1} true;
    call {:si_unique_call 945} $i315 := __VERIFIER_nondet_int();
    call {:si_unique_call 946} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i315);
    call {:si_unique_call 947} {:cexpr "tmp___66"} boogie_si_record_i32($i315);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    $i316 := $eq.i32($i315, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} ldv_stop();
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb287:
    assume $i316 == 1;
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i317 := $M.78;
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i318 := $eq.i32($i317, 1);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb289:
    assume $i318 == 1;
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} vslice_dummy_var_145 := cdc_ncm_show_wNdpOutAlignment($p37, $p35, $p33);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 949} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb32:
    assume $i108 == 1;
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i306 := $M.77;
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i307 := $ne.i32($i306, 0);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb272:
    assume $i307 == 1;
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 1} true;
    call {:si_unique_call 939} $i308 := __VERIFIER_nondet_int();
    call {:si_unique_call 940} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i308);
    call {:si_unique_call 941} {:cexpr "tmp___65"} boogie_si_record_i32($i308);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i308, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} ldv_stop();
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb275:
    assume $i309 == 1;
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i310 := $M.77;
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i310, 1);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb277:
    assume $i311 == 1;
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} vslice_dummy_var_144 := cdc_ncm_show_dwNtbInMaxSize($p30, $p32, $p28);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 943} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb30:
    assume $i107 == 1;
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i290 := $M.76;
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i291 := $ne.i32($i290, 0);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i291 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb252:
    assume $i291 == 1;
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 1} true;
    call {:si_unique_call 931} $i292 := __VERIFIER_nondet_int();
    call {:si_unique_call 932} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i292);
    call {:si_unique_call 933} {:cexpr "tmp___64"} boogie_si_record_i32($i292);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $i293 := $slt.i32($i292, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i292, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    assume !($i294 == 1);
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} ldv_stop();
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb257:
    assume $i294 == 1;
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i301 := $M.76;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i301, 1);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb266:
    assume $i302 == 1;
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p303 := $M.62;
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p304 := $M.63;
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} vslice_dummy_var_143 := cdc_ncm_show_tx_max($p303, $p304, $p26);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 937} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb255:
    assume $i293 == 1;
    assume {:verifier.code 0} true;
    $i295 := $eq.i32($i292, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    assume !($i295 == 1);
    goto $bb259;

  $bb260:
    assume $i295 == 1;
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i296 := $M.76;
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i296, 1);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb262:
    assume $i297 == 1;
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p298 := $M.62;
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $p299 := $M.63;
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} vslice_dummy_var_142 := cdc_ncm_store_tx_max($p298, $p299, $p27, $i25);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 935} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb28:
    assume $i106 == 1;
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i93, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i109 == 1);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i273 := $M.75;
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i274 := $ne.i32($i273, 0);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb222:
    assume $i274 == 1;
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 1} true;
    call {:si_unique_call 894} $i275 := __VERIFIER_nondet_int();
    call {:si_unique_call 895} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i275);
    call {:si_unique_call 896} {:cexpr "tmp___63"} boogie_si_record_i32($i275);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $i276 := $slt.i32($i275, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    $i277 := $eq.i32($i275, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    assume !($i277 == 1);
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} ldv_stop();
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb227:
    assume $i277 == 1;
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i283 := $M.75;
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i284 := $eq.i32($i283, 1);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb240:
    assume $i284 == 1;
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $i285 := cdc_ncm_driver_init();
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $M.95 := $i285;
    call {:si_unique_call 901} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i285);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i286 := $M.95;
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i287 := $ne.i32($i286, 0);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $i288 := $M.95;
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i289 := $eq.i32($i288, 0);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb245:
    assume $i289 == 1;
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $M.75 := 2;
    call {:si_unique_call 903} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 904} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 905} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 906} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} ldv_initialize_ethtool_ops_19();
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 908} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} ldv_initialize_driver_info_4();
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 910} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 911} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} ldv_initialize_device_attribute_15();
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 913} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 914} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 915} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 916} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} ldv_initialize_driver_info_3();
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 918} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 919} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 920} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} ldv_initialize_device_attribute_16();
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 922} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} ldv_initialize_device_attribute_18();
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 924} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} ldv_initialize_driver_info_2();
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 926} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} ldv_initialize_device_attribute_17();
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 928} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 929} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb242:
    assume $i287 == 1;
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $M.75 := 3;
    call {:si_unique_call 902} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} ldv_check_final_state();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb225:
    assume $i276 == 1;
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i275, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    assume !($i278 == 1);
    goto $bb229;

  $bb230:
    assume $i278 == 1;
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i279 := $M.75;
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i280 := $eq.i32($i279, 2);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    assume !($i280 == 1);
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb232:
    assume $i280 == 1;
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i281 := $M.74;
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i282 := $eq.i32($i281, 0);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    assume !($i282 == 1);
    goto $bb234;

  $bb235:
    assume $i282 == 1;
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} cdc_ncm_driver_exit();
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $M.75 := 3;
    call {:si_unique_call 898} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb34:
    assume $i109 == 1;
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i257 := $M.73;
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i258 := $ne.i32($i257, 0);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb202:
    assume $i258 == 1;
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 1} true;
    call {:si_unique_call 886} $i259 := __VERIFIER_nondet_int();
    call {:si_unique_call 887} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i259);
    call {:si_unique_call 888} {:cexpr "tmp___62"} boogie_si_record_i32($i259);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $i260 := $slt.i32($i259, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i259, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    assume !($i261 == 1);
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} ldv_stop();
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb207:
    assume $i261 == 1;
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i268 := $M.73;
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i268, 1);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb216:
    assume $i269 == 1;
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p270 := $M.60;
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $p271 := $M.61;
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} vslice_dummy_var_141 := cdc_ncm_show_min_tx_pkt($p270, $p271, $p22);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 892} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb205:
    assume $i260 == 1;
    assume {:verifier.code 0} true;
    $i262 := $eq.i32($i259, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    assume !($i262 == 1);
    goto $bb209;

  $bb210:
    assume $i262 == 1;
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i263 := $M.73;
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i264 := $eq.i32($i263, 1);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb212:
    assume $i264 == 1;
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p265 := $M.60;
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $p266 := $M.61;
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} vslice_dummy_var_140 := cdc_ncm_store_min_tx_pkt($p265, $p266, $p23, $i24);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 890} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb26:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i93, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    $i111 := $slt.i32($i93, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i112 := $slt.i32($i93, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i112 == 1);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i206 := $M.72;
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i207 := $ne.i32($i206, 0);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb146:
    assume $i207 == 1;
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 1} true;
    call {:si_unique_call 863} $i208 := __VERIFIER_nondet_int();
    call {:si_unique_call 864} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i208);
    call {:si_unique_call 865} {:cexpr "tmp___61"} boogie_si_record_i32($i208);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $i209 := $slt.i32($i208, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    $i210 := $slt.i32($i208, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    $i211 := $slt.i32($i208, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i208, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    assume !($i212 == 1);
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} ldv_stop();
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb155:
    assume $i212 == 1;
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i251 := $M.72;
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i252 := $eq.i32($i251, 3);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb193:
    assume $i252 == 1;
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p253 := $M.59;
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $i254 := usbnet_resume($p253);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $M.94 := $i254;
    call {:si_unique_call 883} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i254);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i255 := $M.94;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i256 := $eq.i32($i255, 0);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb195:
    assume $i256 == 1;
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $M.72 := 2;
    call {:si_unique_call 884} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb153:
    assume $i211 == 1;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i237 := $M.72;
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 3);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    assume !($i238 == 1);
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $i244 := $M.72;
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i244, 2);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    assume !($i245 == 1);
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb187:
    assume $i245 == 1;
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i246 := $M.93;
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i246, 0);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    assume !($i247 == 1);
    goto $bb189;

  $bb190:
    assume $i247 == 1;
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p248 := $M.59;
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} usbnet_disconnect($p248);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 880} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i249 := $M.74;
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i250 := $sub.i32($i249, 1);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $M.74 := $i250;
    call {:si_unique_call 881} {:cexpr "ref_cnt"} boogie_si_record_i32($i250);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb181:
    assume $i238 == 1;
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i239 := $M.93;
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i239, 0);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    assume !($i240 == 1);
    goto $bb183;

  $bb184:
    assume $i240 == 1;
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p241 := $M.59;
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} usbnet_disconnect($p241);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 877} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i242 := $M.74;
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i243 := $sub.i32($i242, 1);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $M.74 := $i243;
    call {:si_unique_call 878} {:cexpr "ref_cnt"} boogie_si_record_i32($i243);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb151:
    assume $i210 == 1;
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i231 := $M.72;
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i232 := $eq.i32($i231, 3);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb175:
    assume $i232 == 1;
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $p233 := $M.59;
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i234 := usbnet_resume($p233);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $M.92 := $i234;
    call {:si_unique_call 874} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i234);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i235 := $M.92;
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i235, 0);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb177:
    assume $i236 == 1;
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $M.72 := 2;
    call {:si_unique_call 875} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb149:
    assume $i209 == 1;
    assume {:verifier.code 0} true;
    $i213 := $slt.i32($i208, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i213 == 1);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i223 := $M.72;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i223, 2);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb169:
    assume $i224 == 1;
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p225 := $M.59;
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.65, $p226);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $i228 := usbnet_suspend($p225, $i227);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $M.91 := $i228;
    call {:si_unique_call 871} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i228);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i229 := $M.91;
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 0);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb171:
    assume $i230 == 1;
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $M.72 := 3;
    call {:si_unique_call 872} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb158:
    assume $i213 == 1;
    assume {:verifier.code 0} true;
    $i214 := $eq.i32($i208, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    assume !($i214 == 1);
    goto $bb157;

  $bb160:
    assume $i214 == 1;
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i215 := $M.72;
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 1);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb162:
    assume $i216 == 1;
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p217 := $M.59;
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $i218 := usbnet_probe($p217, $p21);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $M.90 := $i218;
    call {:si_unique_call 867} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i218);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i219 := $M.90;
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i220 := $eq.i32($i219, 0);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb164:
    assume $i220 == 1;
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $M.72 := 2;
    call {:si_unique_call 868} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i221 := $M.74;
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i222 := $add.i32($i221, 1);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $M.74 := $i222;
    call {:si_unique_call 869} {:cexpr "ref_cnt"} boogie_si_record_i32($i222);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb40:
    assume $i112 == 1;
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i145 := $M.71;
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i145, 0);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb91:
    assume $i146 == 1;
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 1} true;
    call {:si_unique_call 836} $i147 := __VERIFIER_nondet_int();
    call {:si_unique_call 837} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i147);
    call {:si_unique_call 838} {:cexpr "tmp___60"} boogie_si_record_i32($i147);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i148 := $slt.i32($i147, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    $i149 := $slt.i32($i147, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    $i150 := $slt.i32($i147, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i147, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} ldv_stop();
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb100:
    assume $i151 == 1;
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i200 := $M.71;
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i200, 1);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $i203 := $M.71;
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 2);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb140:
    assume $i204 == 1;
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p205 := $M.44;
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} cdc_ncm_status($p205, $p19);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 861} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb137:
    assume $i201 == 1;
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $p202 := $M.44;
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} cdc_ncm_status($p202, $p19);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 859} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb98:
    assume $i150 == 1;
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i191 := $M.71;
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 1);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb131:
    assume $i192 == 1;
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p193 := $M.44;
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $p194 := $M.45;
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $i195 := cdc_ncm_bind($p193, $p194);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $M.89 := $i195;
    call {:si_unique_call 855} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i195);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i196 := $M.89;
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i196, 0);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb133:
    assume $i197 == 1;
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 856} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i198 := $M.74;
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i199 := $add.i32($i198, 1);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $M.74 := $i199;
    call {:si_unique_call 857} {:cexpr "ref_cnt"} boogie_si_record_i32($i199);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb96:
    assume $i149 == 1;
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i185 := $M.71;
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 2);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb128:
    assume $i186 == 1;
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p187 := $M.44;
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $p188 := $M.45;
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} cdc_ncm_unbind($p187, $p188);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 852} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i189 := $M.74;
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i190 := $sub.i32($i189, 1);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $M.74 := $i190;
    call {:si_unique_call 853} {:cexpr "ref_cnt"} boogie_si_record_i32($i190);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb94:
    assume $i148 == 1;
    assume {:verifier.code 0} true;
    $i152 := $slt.i32($i147, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    $i153 := $slt.i32($i147, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i153 == 1);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i175 := $M.71;
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 1);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i180 := $M.71;
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 2);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb125:
    assume $i181 == 1;
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p182 := $M.44;
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $p183 := $M.46;
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} vslice_dummy_var_139 := cdc_ncm_rx_fixup($p182, $p183);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 850} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb122:
    assume $i176 == 1;
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $p177 := $M.44;
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $p178 := $M.46;
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} vslice_dummy_var_138 := cdc_ncm_rx_fixup($p177, $p178);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 848} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb105:
    assume $i153 == 1;
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i167 := $M.71;
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 1);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i171 := $M.71;
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i171, 2);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb119:
    assume $i172 == 1;
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p173 := $M.44;
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} vslice_dummy_var_137 := usbnet_manage_power($p173, $i17);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 846} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb116:
    assume $i168 == 1;
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p169 := $M.44;
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} vslice_dummy_var_136 := usbnet_manage_power($p169, $i17);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 844} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb103:
    assume $i152 == 1;
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i147, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i154 == 1);
    goto $bb102;

  $bb107:
    assume $i154 == 1;
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i155 := $M.71;
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 1);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i161 := $M.71;
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 2);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb112:
    assume $i162 == 1;
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $p163 := $M.44;
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p164 := $M.46;
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.64, $p0);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} vslice_dummy_var_135 := cdc_ncm_tx_fixup($p163, $p164, $i165);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 842} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb109:
    assume $i156 == 1;
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p157 := $M.44;
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $p158 := $M.46;
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.64, $p0);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} vslice_dummy_var_134 := cdc_ncm_tx_fixup($p157, $p158, $i159);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 840} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb38:
    assume $i111 == 1;
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i129 := $M.70;
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb71:
    assume $i130 == 1;
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 1} true;
    call {:si_unique_call 828} $i131 := __VERIFIER_nondet_int();
    call {:si_unique_call 829} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i131);
    call {:si_unique_call 830} {:cexpr "tmp___59"} boogie_si_record_i32($i131);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i132 := $slt.i32($i131, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i131, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i133 == 1);
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} ldv_stop();
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb76:
    assume $i133 == 1;
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i140 := $M.70;
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 1);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb85:
    assume $i141 == 1;
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p142 := $M.54;
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p143 := $M.55;
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} vslice_dummy_var_133 := cdc_ncm_show_rx_max($p142, $p143, $p16);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 834} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb74:
    assume $i132 == 1;
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i131, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i134 == 1);
    goto $bb78;

  $bb79:
    assume $i134 == 1;
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i135 := $M.70;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 1);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb81:
    assume $i136 == 1;
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p137 := $M.54;
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p138 := $M.55;
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} vslice_dummy_var_132 := cdc_ncm_store_rx_max($p137, $p138, $p14, $i15);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 832} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb36:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i93, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i113 == 1);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i122 := $M.69;
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb59:
    assume $i123 == 1;
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 1} true;
    call {:si_unique_call 822} $i124 := __VERIFIER_nondet_int();
    call {:si_unique_call 823} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i124);
    call {:si_unique_call 824} {:cexpr "tmp___58"} boogie_si_record_i32($i124);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} ldv_stop();
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb62:
    assume $i125 == 1;
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i126 := $M.69;
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 1);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb64:
    assume $i127 == 1;
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} vslice_dummy_var_131 := cdc_ncm_show_wNdpOutPayloadRemainder($p11, $p13, $p9);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 826} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb42:
    assume $i113 == 1;
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i93, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb15;

  $bb44:
    assume $i114 == 1;
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i115 := $M.68;
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb46:
    assume $i116 == 1;
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 1} true;
    call {:si_unique_call 816} $i117 := __VERIFIER_nondet_int();
    call {:si_unique_call 817} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i117);
    call {:si_unique_call 818} {:cexpr "tmp___57"} boogie_si_record_i32($i117);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} ldv_stop();
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb49:
    assume $i118 == 1;
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i119 := $M.68;
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 1);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb51:
    assume $i120 == 1;
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} vslice_dummy_var_130 := cdc_ncm_show_wNdpInPayloadRemainder($p6, $p8, $p4);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 820} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb58_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 813} $i93 := __VERIFIER_nondet_int();
    call {:si_unique_call 814} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i93);
    call {:si_unique_call 815} {:cexpr "tmp___56"} boogie_si_record_i32($i93);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const __VERIFIER_nondet_size_t: ref;

axiom __VERIFIER_nondet_size_t == $sub.ref(0, 361067);

procedure __VERIFIER_nondet_size_t() returns ($r: i64);



const __VERIFIER_nondet_u32: ref;

axiom __VERIFIER_nondet_u32 == $sub.ref(0, 362099);

procedure __VERIFIER_nondet_u32() returns ($r: i32);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 363131);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.32;



implementation ldv_initialize()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p0 := $M.31;
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} ldv_set_init($p0);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 364163);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const cdc_ncm_driver_exit: ref;

axiom cdc_ncm_driver_exit == $sub.ref(0, 365195);

procedure cdc_ncm_driver_exit();
  free requires assertsPassed;
  modifies $M.72;



implementation cdc_ncm_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} ldv_usb_deregister_14(cdc_ncm_driver);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    return;
}



const cdc_ncm_driver_init: ref;

axiom cdc_ncm_driver_init == $sub.ref(0, 366227);

procedure cdc_ncm_driver_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.72, $M.93, $M.59, $M.0, $CurrAddr;



implementation cdc_ncm_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i0 := ldv_usb_register_driver_13(cdc_ncm_driver, __this_module, .str.1);
    call {:si_unique_call 1079} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 367259);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $p0 := $M.31;
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $i1 := ldv_set_is_empty($p0);
    call {:si_unique_call 1081} {:cexpr "tmp___7"} boogie_si_record_i32($i1);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_set_is_empty: ref;

axiom ldv_set_is_empty == $sub.ref(0, 368291);

procedure ldv_set_is_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_set_is_empty($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i1 := $M.32;
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_register_driver_13: ref;

axiom ldv_usb_register_driver_13 == $sub.ref(0, 369323);

procedure ldv_usb_register_driver_13($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.72, $M.93, $M.59, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_13($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1084} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 1085} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $M.93 := 0;
    call {:si_unique_call 1086} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} ldv_usb_driver_1();
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 370355);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1088} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1089} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_deregister_14: ref;

axiom ldv_usb_deregister_14 == $sub.ref(0, 371387);

procedure ldv_usb_deregister_14($p0: ref);
  free requires assertsPassed;
  modifies $M.72;



implementation ldv_usb_deregister_14($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} usb_deregister($p0);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $M.72 := 0;
    call {:si_unique_call 1091} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 372419);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    return;
}



const ldv_set_init: ref;

axiom ldv_set_init == $sub.ref(0, 373451);

procedure ldv_set_init($p0: ref);
  free requires assertsPassed;
  modifies $M.32;



implementation ldv_set_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $M.32 := 0;
    call {:si_unique_call 1092} {:cexpr "last_index"} boogie_si_record_i32(0);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 374483);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1093} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 1} true;
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 375515);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 376547);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 377579);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 378611);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 379643);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 380675);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 381707);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 382739);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 383771);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 384803);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 385835);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 386867);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 387899);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1094} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1095} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1096} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1097} __VERIFIER_assume($i4);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 388931);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 389963);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 390995);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 392027);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1098} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1099} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1100} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1101} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1102} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1103} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1104} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1105} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1106} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1107} __VERIFIER_assume($i7);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1108} __VERIFIER_assume($i11);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 393059);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 394091);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 395123);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 396155);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 397187);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 398219);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 399251);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 400283);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 401315);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 402347);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 403379);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 404411);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 405443);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 406475);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1109} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1110} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1111} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 407507);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1112} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1113} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 408539);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 409571);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1114} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1115} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 410603);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 411635);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 412667);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1116} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1117} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1118} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1119} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $p6 := malloc($i5);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_79 := $M.0;
    call {:si_unique_call 1121} cmdloc_dummy_var_80 := $memset.i8(cmdloc_dummy_var_79, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_80;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 413699);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 414731);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.101, $M.0, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.30, $M.160, $M.31, $M.33, $M.97, $M.91, $M.94, $M.96, $M.90, $M.95, $M.89, $M.92, $M.55, $M.54, $M.63, $M.85, $M.69, $M.72, $M.62, $M.74, $M.60, $M.56, $M.50, $M.79, $M.53, $M.57, $M.80, $M.86, $M.58, $M.44, $M.73, $M.70, $M.61, $M.52, $M.68, $M.82, $M.93, $M.45, $M.81, $M.47, $M.71, $M.77, $M.51, $M.76, $M.88, $M.48, $M.75, $M.78, $M.49, $M.59, $M.87, $M.83, $M.84, $M.46, $M.32, $M.188, $M.189;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1122} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.101 := $store.i8($M.101, __kstrtab_cdc_ncm_bind_common, 99);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(__kstrtab_cdc_ncm_bind_common, $mul.ref(0, 20)), $mul.ref(1, 1)), 100);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(__kstrtab_cdc_ncm_bind_common, $mul.ref(0, 20)), $mul.ref(2, 1)), 99);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(__kstrtab_cdc_ncm_bind_common, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(__kstrtab_cdc_ncm_bind_common, $mul.ref(0, 20)), $mul.ref(4, 1)), 110);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(__kstrtab_cdc_ncm_bind_common, $mul.ref(0, 20)), $mul.ref(5, 1)), 99);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(__kstrtab_cdc_ncm_bind_common, $mul.ref(0, 20)), $mul.ref(6, 1)), 109);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(__kstrtab_cdc_ncm_bind_common, $mul.ref(0, 20)), $mul.ref(7, 1)), 95);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(__kstrtab_cdc_ncm_bind_common, $mul.ref(0, 20)), $mul.ref(8, 1)), 98);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(__kstrtab_cdc_ncm_bind_common, $mul.ref(0, 20)), $mul.ref(9, 1)), 105);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(__kstrtab_cdc_ncm_bind_common, $mul.ref(0, 20)), $mul.ref(10, 1)), 110);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(__kstrtab_cdc_ncm_bind_common, $mul.ref(0, 20)), $mul.ref(11, 1)), 100);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(__kstrtab_cdc_ncm_bind_common, $mul.ref(0, 20)), $mul.ref(12, 1)), 95);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(__kstrtab_cdc_ncm_bind_common, $mul.ref(0, 20)), $mul.ref(13, 1)), 99);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(__kstrtab_cdc_ncm_bind_common, $mul.ref(0, 20)), $mul.ref(14, 1)), 111);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(__kstrtab_cdc_ncm_bind_common, $mul.ref(0, 20)), $mul.ref(15, 1)), 109);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(__kstrtab_cdc_ncm_bind_common, $mul.ref(0, 20)), $mul.ref(16, 1)), 109);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(__kstrtab_cdc_ncm_bind_common, $mul.ref(0, 20)), $mul.ref(17, 1)), 111);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(__kstrtab_cdc_ncm_bind_common, $mul.ref(0, 20)), $mul.ref(18, 1)), 110);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(__kstrtab_cdc_ncm_bind_common, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, cdc_ncm_gstrings_stats, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(12, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(14, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(0, 40)), $mul.ref(36, 1)), 364);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(14, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(1, 40)), $mul.ref(36, 1)), 368);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(2, 40)), $mul.ref(36, 1)), 372);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(10, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(12, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(18, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(21, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(3, 40)), $mul.ref(36, 1)), 376);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(4, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(7, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(32, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(4, 40)), $mul.ref(36, 1)), 384);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(32, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(5, 40)), $mul.ref(36, 1)), 392);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(4, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(7, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(32, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(6, 40)), $mul.ref(36, 1)), 400);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(32, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(cdc_ncm_gstrings_stats, $mul.ref(0, 320)), $mul.ref(7, 40)), $mul.ref(36, 1)), 408);
    $M.0 := $store.i16($M.0, cdc_devs, 897);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(2, 1)), 3035);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(13, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(14, 1)), 13);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(24, 1)), $p2i.ref.i64(wwan_info));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(0, 1)), 897);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(2, 1)), 16700);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(13, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(14, 1)), 13);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(24, 1)), $p2i.ref.i64(wwan_info));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(0, 1)), 897);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(2, 1)), 2352);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(13, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(14, 1)), 13);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(24, 1)), $p2i.ref.i64(wwan_info));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(0, 1)), 897);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(2, 1)), 4817);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(13, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(14, 1)), 13);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(24, 1)), $p2i.ref.i64(wwan_info));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(0, 1)), 899);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(2, 1)), 5401);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(4, 1)), 1091);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(13, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(14, 1)), 13);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(24, 1)), $p2i.ref.i64(wwan_noarp_info));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(0, 1)), 896);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(13, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(14, 1)), 13);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(24, 1)), $p2i.ref.i64(cdc_ncm_info));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(cdc_devs, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.153 := $store.ref($M.153, cdc_ncm_driver, .str.1);
    $M.153 := $store.ref($M.153, $add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), usbnet_probe);
    $M.153 := $store.ref($M.153, $add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), usbnet_disconnect);
    $M.153 := $store.ref($M.153, $add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), usbnet_suspend);
    $M.153 := $store.ref($M.153, $add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), usbnet_resume);
    $M.153 := $store.ref($M.153, $add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), usbnet_resume);
    $M.153 := $store.ref($M.153, $add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), cdc_devs);
    $M.153 := $store.i32($M.153, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.153 := $store.i32($M.153, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.153 := $store.i32($M.153, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.153 := $store.ref($M.153, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.153 := $store.i32($M.153, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.153 := $store.i64($M.153, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.153 := $store.ref($M.153, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.153 := $store.i8($M.153, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.153 := $store.ref($M.153, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.153 := $store.ref($M.153, $add.ref($add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.153 := $store.i32($M.153, $add.ref($add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(cdc_ncm_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 6);
    $M.154 := $store.i8($M.154, __kstrtab_cdc_ncm_rx_fixup, 99);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_fixup, $mul.ref(0, 17)), $mul.ref(1, 1)), 100);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_fixup, $mul.ref(0, 17)), $mul.ref(2, 1)), 99);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_fixup, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_fixup, $mul.ref(0, 17)), $mul.ref(4, 1)), 110);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_fixup, $mul.ref(0, 17)), $mul.ref(5, 1)), 99);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_fixup, $mul.ref(0, 17)), $mul.ref(6, 1)), 109);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_fixup, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_fixup, $mul.ref(0, 17)), $mul.ref(8, 1)), 114);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_fixup, $mul.ref(0, 17)), $mul.ref(9, 1)), 120);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_fixup, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_fixup, $mul.ref(0, 17)), $mul.ref(11, 1)), 102);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_fixup, $mul.ref(0, 17)), $mul.ref(12, 1)), 105);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_fixup, $mul.ref(0, 17)), $mul.ref(13, 1)), 120);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_fixup, $mul.ref(0, 17)), $mul.ref(14, 1)), 117);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_fixup, $mul.ref(0, 17)), $mul.ref(15, 1)), 112);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_fixup, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.155 := $store.i8($M.155, __kstrtab_cdc_ncm_rx_verify_ndp16, 99);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(1, 1)), 100);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(2, 1)), 99);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(4, 1)), 110);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(5, 1)), 99);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(6, 1)), 109);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(7, 1)), 95);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(8, 1)), 114);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(9, 1)), 120);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(10, 1)), 95);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(11, 1)), 118);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(12, 1)), 101);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(13, 1)), 114);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(14, 1)), 105);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(15, 1)), 102);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(16, 1)), 121);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(17, 1)), 95);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(18, 1)), 110);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(19, 1)), 100);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(20, 1)), 112);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(21, 1)), 49);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(22, 1)), 54);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_ndp16, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.156 := $store.i8($M.156, __kstrtab_cdc_ncm_rx_verify_nth16, 99);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(1, 1)), 100);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(2, 1)), 99);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(4, 1)), 110);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(5, 1)), 99);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(6, 1)), 109);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(7, 1)), 95);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(8, 1)), 114);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(9, 1)), 120);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(10, 1)), 95);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(11, 1)), 118);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(12, 1)), 101);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(13, 1)), 114);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(14, 1)), 105);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(15, 1)), 102);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(16, 1)), 121);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(17, 1)), 95);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(18, 1)), 110);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(19, 1)), 116);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(20, 1)), 104);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(21, 1)), 49);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(22, 1)), 54);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_cdc_ncm_rx_verify_nth16, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.157 := $store.i8($M.157, __kstrtab_cdc_ncm_tx_fixup, 99);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_cdc_ncm_tx_fixup, $mul.ref(0, 17)), $mul.ref(1, 1)), 100);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_cdc_ncm_tx_fixup, $mul.ref(0, 17)), $mul.ref(2, 1)), 99);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_cdc_ncm_tx_fixup, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_cdc_ncm_tx_fixup, $mul.ref(0, 17)), $mul.ref(4, 1)), 110);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_cdc_ncm_tx_fixup, $mul.ref(0, 17)), $mul.ref(5, 1)), 99);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_cdc_ncm_tx_fixup, $mul.ref(0, 17)), $mul.ref(6, 1)), 109);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_cdc_ncm_tx_fixup, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_cdc_ncm_tx_fixup, $mul.ref(0, 17)), $mul.ref(8, 1)), 116);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_cdc_ncm_tx_fixup, $mul.ref(0, 17)), $mul.ref(9, 1)), 120);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_cdc_ncm_tx_fixup, $mul.ref(0, 17)), $mul.ref(10, 1)), 95);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_cdc_ncm_tx_fixup, $mul.ref(0, 17)), $mul.ref(11, 1)), 102);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_cdc_ncm_tx_fixup, $mul.ref(0, 17)), $mul.ref(12, 1)), 105);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_cdc_ncm_tx_fixup, $mul.ref(0, 17)), $mul.ref(13, 1)), 120);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_cdc_ncm_tx_fixup, $mul.ref(0, 17)), $mul.ref(14, 1)), 117);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_cdc_ncm_tx_fixup, $mul.ref(0, 17)), $mul.ref(15, 1)), 112);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_cdc_ncm_tx_fixup, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.158 := $store.i8($M.158, __kstrtab_cdc_ncm_fill_tx_frame, 99);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_cdc_ncm_fill_tx_frame, $mul.ref(0, 22)), $mul.ref(1, 1)), 100);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_cdc_ncm_fill_tx_frame, $mul.ref(0, 22)), $mul.ref(2, 1)), 99);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_cdc_ncm_fill_tx_frame, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_cdc_ncm_fill_tx_frame, $mul.ref(0, 22)), $mul.ref(4, 1)), 110);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_cdc_ncm_fill_tx_frame, $mul.ref(0, 22)), $mul.ref(5, 1)), 99);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_cdc_ncm_fill_tx_frame, $mul.ref(0, 22)), $mul.ref(6, 1)), 109);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_cdc_ncm_fill_tx_frame, $mul.ref(0, 22)), $mul.ref(7, 1)), 95);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_cdc_ncm_fill_tx_frame, $mul.ref(0, 22)), $mul.ref(8, 1)), 102);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_cdc_ncm_fill_tx_frame, $mul.ref(0, 22)), $mul.ref(9, 1)), 105);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_cdc_ncm_fill_tx_frame, $mul.ref(0, 22)), $mul.ref(10, 1)), 108);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_cdc_ncm_fill_tx_frame, $mul.ref(0, 22)), $mul.ref(11, 1)), 108);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_cdc_ncm_fill_tx_frame, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_cdc_ncm_fill_tx_frame, $mul.ref(0, 22)), $mul.ref(13, 1)), 116);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_cdc_ncm_fill_tx_frame, $mul.ref(0, 22)), $mul.ref(14, 1)), 120);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_cdc_ncm_fill_tx_frame, $mul.ref(0, 22)), $mul.ref(15, 1)), 95);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_cdc_ncm_fill_tx_frame, $mul.ref(0, 22)), $mul.ref(16, 1)), 102);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_cdc_ncm_fill_tx_frame, $mul.ref(0, 22)), $mul.ref(17, 1)), 114);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_cdc_ncm_fill_tx_frame, $mul.ref(0, 22)), $mul.ref(18, 1)), 97);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_cdc_ncm_fill_tx_frame, $mul.ref(0, 22)), $mul.ref(19, 1)), 109);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_cdc_ncm_fill_tx_frame, $mul.ref(0, 22)), $mul.ref(20, 1)), 101);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_cdc_ncm_fill_tx_frame, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.159 := $store.i8($M.159, __kstrtab_cdc_ncm_select_altsetting, 99);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(1, 1)), 100);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(2, 1)), 99);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(4, 1)), 110);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(5, 1)), 99);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(6, 1)), 109);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(7, 1)), 95);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(8, 1)), 115);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(9, 1)), 101);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(10, 1)), 108);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(11, 1)), 101);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(12, 1)), 99);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(13, 1)), 116);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(14, 1)), 95);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(15, 1)), 97);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(16, 1)), 108);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(17, 1)), 116);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(18, 1)), 115);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(19, 1)), 101);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(20, 1)), 116);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(21, 1)), 116);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(22, 1)), 105);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(23, 1)), 110);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(24, 1)), 103);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_cdc_ncm_select_altsetting, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.30 := 1;
    call {:si_unique_call 1123} {:cexpr "prefer_mbim"} boogie_si_record_i8(1);
    $M.160 := $store.i8($M.160, __kstrtab_cdc_ncm_unbind, 99);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_cdc_ncm_unbind, $mul.ref(0, 15)), $mul.ref(1, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_cdc_ncm_unbind, $mul.ref(0, 15)), $mul.ref(2, 1)), 99);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_cdc_ncm_unbind, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_cdc_ncm_unbind, $mul.ref(0, 15)), $mul.ref(4, 1)), 110);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_cdc_ncm_unbind, $mul.ref(0, 15)), $mul.ref(5, 1)), 99);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_cdc_ncm_unbind, $mul.ref(0, 15)), $mul.ref(6, 1)), 109);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_cdc_ncm_unbind, $mul.ref(0, 15)), $mul.ref(7, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_cdc_ncm_unbind, $mul.ref(0, 15)), $mul.ref(8, 1)), 117);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_cdc_ncm_unbind, $mul.ref(0, 15)), $mul.ref(9, 1)), 110);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_cdc_ncm_unbind, $mul.ref(0, 15)), $mul.ref(10, 1)), 98);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_cdc_ncm_unbind, $mul.ref(0, 15)), $mul.ref(11, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_cdc_ncm_unbind, $mul.ref(0, 15)), $mul.ref(12, 1)), 110);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_cdc_ncm_unbind, $mul.ref(0, 15)), $mul.ref(13, 1)), 100);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_cdc_ncm_unbind, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.ref($M.0, dev_attr_wNtbOutMaxDatagrams, .str.64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_wNtbOutMaxDatagrams, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_wNtbOutMaxDatagrams, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_wNtbOutMaxDatagrams, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNtbOutMaxDatagrams, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNtbOutMaxDatagrams, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNtbOutMaxDatagrams, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNtbOutMaxDatagrams, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNtbOutMaxDatagrams, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNtbOutMaxDatagrams, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNtbOutMaxDatagrams, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNtbOutMaxDatagrams, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_wNtbOutMaxDatagrams, $mul.ref(0, 48)), $mul.ref(32, 1)), cdc_ncm_show_wNtbOutMaxDatagrams);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_wNtbOutMaxDatagrams, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_wNdpOutAlignment, .str.63);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_wNdpOutAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_wNdpOutAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_wNdpOutAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_wNdpOutAlignment, $mul.ref(0, 48)), $mul.ref(32, 1)), cdc_ncm_show_wNdpOutAlignment);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_wNdpOutAlignment, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_wNdpOutPayloadRemainder, .str.62);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_wNdpOutPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_wNdpOutPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_wNdpOutPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_wNdpOutPayloadRemainder, $mul.ref(0, 48)), $mul.ref(32, 1)), cdc_ncm_show_wNdpOutPayloadRemainder);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_wNdpOutPayloadRemainder, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_wNdpOutDivisor, .str.61);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_wNdpOutDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_wNdpOutDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_wNdpOutDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpOutDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_wNdpOutDivisor, $mul.ref(0, 48)), $mul.ref(32, 1)), cdc_ncm_show_wNdpOutDivisor);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_wNdpOutDivisor, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_dwNtbOutMaxSize, .str.60);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_dwNtbOutMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_dwNtbOutMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_dwNtbOutMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dwNtbOutMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dwNtbOutMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dwNtbOutMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dwNtbOutMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dwNtbOutMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dwNtbOutMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dwNtbOutMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dwNtbOutMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_dwNtbOutMaxSize, $mul.ref(0, 48)), $mul.ref(32, 1)), cdc_ncm_show_dwNtbOutMaxSize);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_dwNtbOutMaxSize, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_wNdpInAlignment, .str.59);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_wNdpInAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_wNdpInAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_wNdpInAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInAlignment, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_wNdpInAlignment, $mul.ref(0, 48)), $mul.ref(32, 1)), cdc_ncm_show_wNdpInAlignment);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_wNdpInAlignment, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_wNdpInPayloadRemainder, .str.58);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_wNdpInPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_wNdpInPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_wNdpInPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInPayloadRemainder, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_wNdpInPayloadRemainder, $mul.ref(0, 48)), $mul.ref(32, 1)), cdc_ncm_show_wNdpInPayloadRemainder);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_wNdpInPayloadRemainder, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_wNdpInDivisor, .str.57);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_wNdpInDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_wNdpInDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_wNdpInDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wNdpInDivisor, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_wNdpInDivisor, $mul.ref(0, 48)), $mul.ref(32, 1)), cdc_ncm_show_wNdpInDivisor);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_wNdpInDivisor, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_dwNtbInMaxSize, .str.56);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_dwNtbInMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_dwNtbInMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_dwNtbInMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dwNtbInMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dwNtbInMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dwNtbInMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dwNtbInMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dwNtbInMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dwNtbInMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dwNtbInMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_dwNtbInMaxSize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_dwNtbInMaxSize, $mul.ref(0, 48)), $mul.ref(32, 1)), cdc_ncm_show_dwNtbInMaxSize);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_dwNtbInMaxSize, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_bmNtbFormatsSupported, .str.55);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_bmNtbFormatsSupported, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_bmNtbFormatsSupported, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_bmNtbFormatsSupported, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmNtbFormatsSupported, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmNtbFormatsSupported, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmNtbFormatsSupported, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmNtbFormatsSupported, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmNtbFormatsSupported, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmNtbFormatsSupported, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmNtbFormatsSupported, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmNtbFormatsSupported, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_bmNtbFormatsSupported, $mul.ref(0, 48)), $mul.ref(32, 1)), cdc_ncm_show_bmNtbFormatsSupported);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_bmNtbFormatsSupported, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, dev_attr_tx_timer_usecs, .str.54);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_tx_timer_usecs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_tx_timer_usecs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_tx_timer_usecs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tx_timer_usecs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tx_timer_usecs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tx_timer_usecs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tx_timer_usecs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tx_timer_usecs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tx_timer_usecs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tx_timer_usecs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tx_timer_usecs, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_tx_timer_usecs, $mul.ref(0, 48)), $mul.ref(32, 1)), cdc_ncm_show_tx_timer_usecs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_tx_timer_usecs, $mul.ref(0, 48)), $mul.ref(40, 1)), cdc_ncm_store_tx_timer_usecs);
    $M.0 := $store.ref($M.0, dev_attr_tx_max, .str.53);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_tx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_tx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_tx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_tx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_tx_max, $mul.ref(0, 48)), $mul.ref(32, 1)), cdc_ncm_show_tx_max);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_tx_max, $mul.ref(0, 48)), $mul.ref(40, 1)), cdc_ncm_store_tx_max);
    $M.0 := $store.ref($M.0, dev_attr_rx_max, .str.52);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_rx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_rx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_rx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_rx_max, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_rx_max, $mul.ref(0, 48)), $mul.ref(32, 1)), cdc_ncm_show_rx_max);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_rx_max, $mul.ref(0, 48)), $mul.ref(40, 1)), cdc_ncm_store_rx_max);
    $M.0 := $store.ref($M.0, dev_attr_min_tx_pkt, .str.51);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_min_tx_pkt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_min_tx_pkt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_min_tx_pkt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_min_tx_pkt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_min_tx_pkt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_min_tx_pkt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_min_tx_pkt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_min_tx_pkt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_min_tx_pkt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_min_tx_pkt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_min_tx_pkt, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_min_tx_pkt, $mul.ref(0, 48)), $mul.ref(32, 1)), cdc_ncm_show_min_tx_pkt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_min_tx_pkt, $mul.ref(0, 48)), $mul.ref(40, 1)), cdc_ncm_store_min_tx_pkt);
    $M.0 := $store.ref($M.0, cdc_ncm_sysfs_attrs, dev_attr_min_tx_pkt);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_sysfs_attrs, $mul.ref(0, 120)), $mul.ref(1, 8)), dev_attr_rx_max);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_sysfs_attrs, $mul.ref(0, 120)), $mul.ref(2, 8)), dev_attr_tx_max);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_sysfs_attrs, $mul.ref(0, 120)), $mul.ref(3, 8)), dev_attr_tx_timer_usecs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_sysfs_attrs, $mul.ref(0, 120)), $mul.ref(4, 8)), dev_attr_bmNtbFormatsSupported);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_sysfs_attrs, $mul.ref(0, 120)), $mul.ref(5, 8)), dev_attr_dwNtbInMaxSize);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_sysfs_attrs, $mul.ref(0, 120)), $mul.ref(6, 8)), dev_attr_wNdpInDivisor);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_sysfs_attrs, $mul.ref(0, 120)), $mul.ref(7, 8)), dev_attr_wNdpInPayloadRemainder);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_sysfs_attrs, $mul.ref(0, 120)), $mul.ref(8, 8)), dev_attr_wNdpInAlignment);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_sysfs_attrs, $mul.ref(0, 120)), $mul.ref(9, 8)), dev_attr_dwNtbOutMaxSize);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_sysfs_attrs, $mul.ref(0, 120)), $mul.ref(10, 8)), dev_attr_wNdpOutDivisor);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_sysfs_attrs, $mul.ref(0, 120)), $mul.ref(11, 8)), dev_attr_wNdpOutPayloadRemainder);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_sysfs_attrs, $mul.ref(0, 120)), $mul.ref(12, 8)), dev_attr_wNdpOutAlignment);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_sysfs_attrs, $mul.ref(0, 120)), $mul.ref(13, 8)), dev_attr_wNtbOutMaxDatagrams);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_sysfs_attrs, $mul.ref(0, 120)), $mul.ref(14, 8)), $0.ref);
    $M.0 := $store.ref($M.0, cdc_ncm_sysfs_attr_group, .str.1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_sysfs_attr_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_sysfs_attr_group, $mul.ref(0, 32)), $mul.ref(16, 1)), cdc_ncm_sysfs_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_sysfs_attr_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, cdc_ncm_ethtool_ops, usbnet_get_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(8, 1)), usbnet_set_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(16, 1)), usbnet_get_drvinfo);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(56, 1)), usbnet_get_msglevel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(64, 1)), usbnet_set_msglevel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(72, 1)), usbnet_nway_reset);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(80, 1)), usbnet_get_link);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(168, 1)), cdc_ncm_get_strings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(184, 1)), cdc_ncm_get_ethtool_stats);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(224, 1)), cdc_ncm_get_sset_count);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(336, 1)), ethtool_op_get_ts_info);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(cdc_ncm_ethtool_ops, $mul.ref(0, 376)), $mul.ref(368, 1)), $0.ref);
    $M.31 := $0.ref;
    $M.33 := $store.ref($M.33, set_impl, $0.ref);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(1, 8)), $0.ref);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(2, 8)), $0.ref);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(3, 8)), $0.ref);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(4, 8)), $0.ref);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(5, 8)), $0.ref);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(6, 8)), $0.ref);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(7, 8)), $0.ref);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(8, 8)), $0.ref);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(9, 8)), $0.ref);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(10, 8)), $0.ref);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(11, 8)), $0.ref);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(12, 8)), $0.ref);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(13, 8)), $0.ref);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(14, 8)), $0.ref);
    $M.97 := 0;
    call {:si_unique_call 1124} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.91 := 0;
    call {:si_unique_call 1125} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.94 := 0;
    call {:si_unique_call 1126} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.96 := 0;
    call {:si_unique_call 1127} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.90 := 0;
    call {:si_unique_call 1128} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.95 := 0;
    call {:si_unique_call 1129} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.89 := 0;
    call {:si_unique_call 1130} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.92 := 0;
    call {:si_unique_call 1131} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.55 := $0.ref;
    $M.54 := $0.ref;
    $M.63 := $0.ref;
    $M.85 := 0;
    call {:si_unique_call 1132} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.69 := 0;
    call {:si_unique_call 1133} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.72 := 0;
    call {:si_unique_call 1134} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.62 := $0.ref;
    $M.74 := 0;
    call {:si_unique_call 1135} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.60 := $0.ref;
    $M.56 := $0.ref;
    $M.50 := $0.ref;
    $M.79 := 0;
    call {:si_unique_call 1136} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.53 := $0.ref;
    $M.57 := $0.ref;
    $M.80 := 0;
    call {:si_unique_call 1137} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.86 := 0;
    call {:si_unique_call 1138} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(0);
    $M.58 := $0.ref;
    $M.44 := $0.ref;
    $M.73 := 0;
    call {:si_unique_call 1139} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(0);
    $M.70 := 0;
    call {:si_unique_call 1140} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    $M.61 := $0.ref;
    $M.52 := $0.ref;
    $M.68 := 0;
    call {:si_unique_call 1141} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.82 := 0;
    call {:si_unique_call 1142} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    $M.93 := 0;
    call {:si_unique_call 1143} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.45 := $0.ref;
    $M.81 := 0;
    call {:si_unique_call 1144} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    $M.47 := $0.ref;
    $M.71 := 0;
    call {:si_unique_call 1145} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.77 := 0;
    call {:si_unique_call 1146} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    $M.51 := $0.ref;
    $M.76 := 0;
    call {:si_unique_call 1147} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    $M.88 := 0;
    call {:si_unique_call 1148} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.48 := $0.ref;
    $M.75 := 0;
    call {:si_unique_call 1149} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.78 := 0;
    call {:si_unique_call 1150} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.49 := $0.ref;
    $M.59 := $0.ref;
    $M.87 := 0;
    call {:si_unique_call 1151} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.83 := 0;
    call {:si_unique_call 1152} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    $M.84 := 0;
    call {:si_unique_call 1153} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.46 := $0.ref;
    $M.32 := 0;
    call {:si_unique_call 1154} {:cexpr "last_index"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, .str.1, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(6, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.51, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 11)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 11)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 11)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 11)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 11)), $mul.ref(5, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 11)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 11)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 11)), $mul.ref(8, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 11)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.188 := $store.i8($M.188, .str.65, 37);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(.str.65, $mul.ref(0, 4)), $mul.ref(1, 1)), 117);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(.str.65, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(.str.65, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.52, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 7)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 7)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 7)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 7)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 7)), $mul.ref(5, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.53, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 7)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 7)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 7)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 7)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 7)), $mul.ref(5, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.54, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 15)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 15)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 15)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 15)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 15)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 15)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 15)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 15)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 15)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 15)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 15)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 15)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 15)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.54, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.55, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(1, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(2, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(4, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(5, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(8, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(12, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(13, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(14, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(20, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.189 := $store.i8($M.189, .str.76, 48);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(.str.76, $mul.ref(0, 8)), $mul.ref(1, 1)), 120);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(.str.76, $mul.ref(0, 8)), $mul.ref(2, 1)), 37);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(.str.76, $mul.ref(0, 8)), $mul.ref(3, 1)), 48);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(.str.76, $mul.ref(0, 8)), $mul.ref(4, 1)), 52);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(.str.76, $mul.ref(0, 8)), $mul.ref(5, 1)), 120);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(.str.76, $mul.ref(0, 8)), $mul.ref(6, 1)), 10);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(.str.76, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.56, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 15)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 15)), $mul.ref(2, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 15)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 15)), $mul.ref(4, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 15)), $mul.ref(5, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 15)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 15)), $mul.ref(7, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 15)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 15)), $mul.ref(9, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 15)), $mul.ref(10, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 15)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 15)), $mul.ref(12, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.57, 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(1, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(4, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(6, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(8, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.58, 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(1, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(4, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(6, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(8, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(13, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(18, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.59, 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(1, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(4, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(6, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(11, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.60, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(1, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(2, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(4, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(5, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(8, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(10, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(11, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(13, 1)), 122);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.61, 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 15)), $mul.ref(1, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 15)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 15)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 15)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 15)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 15)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 15)), $mul.ref(7, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 15)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 15)), $mul.ref(9, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 15)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 15)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 15)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 15)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.62, 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(1, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(7, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(9, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(13, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(14, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(16, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(20, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(22, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.63, 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 17)), $mul.ref(1, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 17)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 17)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 17)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 17)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 17)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 17)), $mul.ref(7, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 17)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 17)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 17)), $mul.ref(10, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 17)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 17)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 17)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 17)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 17)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.64, 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 20)), $mul.ref(1, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 20)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 20)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 20)), $mul.ref(4, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 20)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 20)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 20)), $mul.ref(7, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 20)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 20)), $mul.ref(9, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 20)), $mul.ref(10, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 20)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 20)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 20)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 20)), $mul.ref(14, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 20)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 20)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 20)), $mul.ref(17, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 20)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    call {:si_unique_call 1155} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 415763);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 416795);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(usbnet_resume, $p0);
    assume {:branchcond $i15} true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(usbnet_get_link, $p0);
    assume {:branchcond $i14} true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i14 == 1);
    $i13 := $eq.ref(usbnet_nway_reset, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i13 == 1);
    $i12 := $eq.ref(usbnet_get_msglevel, $p0);
    assume {:branchcond $i12} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i12 == 1);
    $i11 := $eq.ref(cdc_ncm_tx_timer_cb, $p0);
    assume {:branchcond $i11} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1156} $i2 := cdc_ncm_tx_timer_cb($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i12 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1157} $i4 := usbnet_get_msglevel($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1158} $i6 := usbnet_nway_reset($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i14 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1159} $i8 := usbnet_get_link($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i15 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1160} $i10 := usbnet_resume($p9);
    $r := $i10;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 417827);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i32;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.101, $M.0, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.30, $M.160, $M.31, $M.33, $M.97, $M.91, $M.94, $M.96, $M.90, $M.95, $M.89, $M.92, $M.55, $M.54, $M.63, $M.85, $M.69, $M.72, $M.62, $M.74, $M.60, $M.56, $M.50, $M.79, $M.53, $M.57, $M.80, $M.86, $M.58, $M.44, $M.73, $M.70, $M.61, $M.52, $M.68, $M.82, $M.93, $M.45, $M.81, $M.47, $M.71, $M.77, $M.51, $M.76, $M.88, $M.48, $M.75, $M.78, $M.49, $M.59, $M.87, $M.83, $M.84, $M.46, $M.32, $M.188, $M.189, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1161} __SMACK_static_init();
    call {:si_unique_call 1162} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.11, $M.0, $M.26, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.89, $M.90, $M.41, $M.91, $M.92, $M.94, $M.95, $M.50, $M.51, $M.56, $M.57, $M.58, $M.52, $M.53, $M.47, $M.48, $M.49, $M.62, $M.63, $M.60, $M.61, $M.44, $M.45, $M.46, $M.54, $M.55, $M.96, $M.97, $M.101, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.30, $M.160, $M.31, $M.33, $M.93, $M.59, $M.32, $M.188, $M.189, $CurrAddr, $M.27, $M.28, $M.13, $M.15, $M.17, $M.19, $M.21, $M.23, $M.24, $M.25;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation cdc_ncm_bind_common_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p15: ref, in_$p51: ref, in_$i52: i8, in_$i53: i32, in_$i54: i1, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i8, in_$i67: i32, in_$i68: i1, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p74: ref, in_$i75: i8, in_$i76: i32, in_$p77: ref, in_$i78: i8, in_$i79: i32, in_$i80: i1, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$p104: ref, in_$p105: ref, in_$i106: i8, in_$i107: i32, in_$i108: i1, in_$p110: ref, in_$i111: i8, in_$i112: i32, in_$i113: i1, in_$p115: ref, in_$i116: i8, in_$i117: i32, in_$i118: i1, in_$p120: ref, in_$i121: i8, in_$i122: i32, in_$i123: i1, in_$p125: ref, in_$p69: ref, in_$p55: ref, in_$i126: i8, in_$i127: i32, in_$i128: i64, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$i133: i8, in_$i134: i32, in_$i135: i1, in_$i137: i8, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$p136: ref, in_$p132: ref) returns (out_$p51: ref, out_$i52: i8, out_$i53: i32, out_$i54: i1, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i8, out_$i67: i32, out_$i68: i1, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p74: ref, out_$i75: i8, out_$i76: i32, out_$p77: ref, out_$i78: i8, out_$i79: i32, out_$i80: i1, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$p104: ref, out_$p105: ref, out_$i106: i8, out_$i107: i32, out_$i108: i1, out_$p110: ref, out_$i111: i8, out_$i112: i32, out_$i113: i1, out_$p115: ref, out_$i116: i8, out_$i117: i32, out_$i118: i1, out_$p120: ref, out_$i121: i8, out_$i122: i32, out_$i123: i1, out_$p125: ref, out_$p69: ref, out_$p55: ref, out_$i126: i8, out_$i127: i32, out_$i128: i64, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$i133: i8, out_$i134: i32, out_$i135: i1, out_$i137: i8, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$p136: ref, out_$p132: ref)
{

  entry:
    out_$p51, out_$i52, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p70, out_$p71, out_$p72, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p110, out_$i111, out_$i112, out_$i113, out_$p115, out_$i116, out_$i117, out_$i118, out_$p120, out_$i121, out_$i122, out_$i123, out_$p125, out_$p69, out_$p55, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i48, out_$p49, out_$p50, out_$i133, out_$i134, out_$i135, out_$i137, out_$i138, out_$i139, out_$p140, out_$p136, out_$p132 := in_$p51, in_$i52, in_$i53, in_$i54, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$p70, in_$p71, in_$p72, in_$p74, in_$i75, in_$i76, in_$p77, in_$i78, in_$i79, in_$i80, in_$p99, in_$p100, in_$p101, in_$i102, in_$i103, in_$p104, in_$p105, in_$i106, in_$i107, in_$i108, in_$p110, in_$i111, in_$i112, in_$i113, in_$p115, in_$i116, in_$i117, in_$i118, in_$p120, in_$i121, in_$i122, in_$i123, in_$p125, in_$p69, in_$p55, in_$i126, in_$i127, in_$i128, in_$p129, in_$i130, in_$i131, in_$i48, in_$p49, in_$p50, in_$i133, in_$i134, in_$i135, in_$i137, in_$i138, in_$i139, in_$p140, in_$p136, in_$p132;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_45;

  $bb54:
    assume out_$i131 == 1;
    assume {:verifier.code 0} true;
    out_$i48, out_$p49, out_$p50 := out_$i130, out_$p129, out_$p55;
    goto $bb54_dummy;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    out_$p132 := out_$p55;
    assume true;
    goto $bb54;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    out_$i131 := $sgt.i32(out_$i130, 0);
    goto corral_source_split_63;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    out_$i130 := $sub.i32(out_$i48, out_$i127);
    call {:si_unique_call 20} {:cexpr "len"} boogie_si_record_i32(out_$i130);
    goto corral_source_split_62;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref(out_$p49, $mul.ref(out_$i128, 1));
    goto corral_source_split_61;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    out_$i128 := $sext.i32.i64(out_$i127);
    goto corral_source_split_60;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    out_$i127 := $zext.i8.i32(out_$i126);
    call {:si_unique_call 19} {:cexpr "temp"} boogie_si_record_i32(out_$i127);
    goto corral_source_split_59;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i8($M.2, out_$p49);
    goto corral_source_split_58;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_57;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    out_$p55 := out_$p69;
    goto $bb12;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    out_$p55 := out_$p50;
    goto $bb12;

  $bb10:
    assume out_$i54 == 1;
    goto corral_source_split_55;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i53, 36);
    goto corral_source_split_53;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i8.i32(out_$i52);
    goto corral_source_split_52;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i8($M.2, out_$p51);
    goto corral_source_split_51;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p49, $mul.ref(1, 1));
    goto corral_source_split_50;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb58:
    assume out_$i139 == 1;
    goto corral_source_split_187;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    out_$p140 := out_$p50;
    assume true;
    goto $bb58;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    out_$i139 := $sle.i32(out_$i138, out_$i48);
    goto corral_source_split_183;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    out_$i138 := $zext.i8.i32(out_$i137);
    goto corral_source_split_182;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    out_$i137 := $load.i8($M.2, out_$p49);
    goto corral_source_split_181;

  $bb56:
    assume out_$i135 == 1;
    goto corral_source_split_180;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    out_$p136 := out_$p50;
    assume true;
    goto $bb56;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    out_$i135 := $ugt.i32(out_$i134, 2);
    goto corral_source_split_48;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    out_$i134 := $zext.i8.i32(out_$i133);
    goto corral_source_split_47;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i8($M.2, out_$p49);
    goto corral_source_split_46;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_95;

  $bb53:
    assume {:verifier.code 0} true;
    out_$p69 := out_$p50;
    goto $bb32;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$p69 := out_$p50;
    goto $bb32;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    out_$p69 := out_$p50;
    goto $bb32;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    out_$p69 := out_$p50;
    goto $bb32;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    out_$p69 := out_$p50;
    goto $bb32;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    out_$p69 := out_$p50;
    goto $bb32;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    out_$p69 := out_$p50;
    goto $bb32;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    out_$p69 := out_$p50;
    goto $bb32;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    out_$p69 := out_$p50;
    goto $bb32;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    out_$p69 := out_$p49;
    goto $bb32;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    out_$p69 := out_$p50;
    goto $bb32;

  $bb30:
    assume out_$i68 == 1;
    goto corral_source_split_93;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    out_$i68 := $ule.i32(out_$i67, 4);
    goto corral_source_split_91;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i8.i32(out_$i66);
    goto corral_source_split_90;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i8($M.2, out_$p49);
    goto corral_source_split_89;

  $bb28:
    assume out_$i65 == 1;
    goto corral_source_split_88;

  $bb24:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i58, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb15:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i63 := $slt.i32(out_$i58, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i58, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i8.i32(out_$i57);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i8($M.2, out_$p56);
    goto corral_source_split_66;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref(out_$p49, $mul.ref(2, 1));
    goto corral_source_split_65;

  $bb11:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p105, out_$p104);
    goto corral_source_split_152;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(in_$p15, $mul.ref(0, 416)), $mul.ref(208, 1));
    goto corral_source_split_151;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} out_$p104 := usb_ifnum_to_if(out_$p100, out_$i103);
    goto corral_source_split_150;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    out_$i103 := $zext.i8.i32(out_$i102);
    goto corral_source_split_149;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i8($M.2, out_$p101);
    goto corral_source_split_148;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p70, $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_147;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.0, out_$p99);
    goto corral_source_split_146;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1472)), $mul.ref(0, 1));
    goto corral_source_split_145;

  $bb35:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i76, out_$i79);
    goto corral_source_split_106;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    out_$i79 := $zext.i8.i32(out_$i78);
    goto corral_source_split_105;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i8($M.2, out_$p77);
    goto corral_source_split_104;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p70, $mul.ref(0, 5)), $mul.ref(3, 1));
    goto corral_source_split_103;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i8.i32(out_$i75);
    goto corral_source_split_102;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i8($M.0, out_$p74);
    goto corral_source_split_101;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(out_$p72, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_100;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_99;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_98;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p70 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_97;

  $bb31:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb41:
    assume out_$i108 == 1;
    goto corral_source_split_154;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    out_$i108 := $ule.i32(out_$i107, 12);
    goto corral_source_split_86;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i8.i32(out_$i106);
    goto corral_source_split_85;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i8($M.2, out_$p49);
    goto corral_source_split_84;

  $bb26:
    assume out_$i64 == 1;
    goto corral_source_split_83;

  $bb25:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i58, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p110, out_$p49);
    goto corral_source_split_158;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p15, $mul.ref(0, 416)), $mul.ref(192, 1));
    goto corral_source_split_157;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_156;

  $bb42:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb44:
    assume out_$i113 == 1;
    goto corral_source_split_160;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    out_$i113 := $ule.i32(out_$i112, 5);
    goto corral_source_split_71;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    out_$i112 := $zext.i8.i32(out_$i111);
    goto corral_source_split_70;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i8($M.2, out_$p49);
    goto corral_source_split_69;

  $bb17:
    assume out_$i60 == 1;
    goto corral_source_split_68;

  $bb16:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i58, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p115, out_$p49);
    goto corral_source_split_164;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(in_$p15, $mul.ref(0, 416)), $mul.ref(168, 1));
    goto corral_source_split_163;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_162;

  $bb45:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb47:
    assume out_$i118 == 1;
    goto corral_source_split_166;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    out_$i118 := $ule.i32(out_$i117, 11);
    goto corral_source_split_76;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    out_$i117 := $zext.i8.i32(out_$i116);
    goto corral_source_split_75;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i8($M.2, out_$p49);
    goto corral_source_split_74;

  $bb19:
    assume out_$i61 == 1;
    goto corral_source_split_73;

  $bb18:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    out_$i61 := $slt.i32(out_$i58, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p120, out_$p49);
    goto corral_source_split_170;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p15, $mul.ref(0, 416)), $mul.ref(176, 1));
    goto corral_source_split_169;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_168;

  $bb48:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb50:
    assume out_$i123 == 1;
    goto corral_source_split_172;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    out_$i123 := $ule.i32(out_$i122, 7);
    goto corral_source_split_81;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    out_$i122 := $zext.i8.i32(out_$i121);
    goto corral_source_split_80;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i8($M.2, out_$p49);
    goto corral_source_split_79;

  $bb21:
    assume out_$i62 == 1;
    goto corral_source_split_78;

  $bb20:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i58, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p125, out_$p49);
    goto corral_source_split_176;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p15, $mul.ref(0, 416)), $mul.ref(184, 1));
    goto corral_source_split_175;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_174;

  $bb51:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i62 == 1);
    goto $bb23;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb23;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i65 == 1);
    goto $bb23;

  $bb54_dummy:
    call {:si_unique_call 1} out_$p51, out_$i52, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p70, out_$p71, out_$p72, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p110, out_$i111, out_$i112, out_$i113, out_$p115, out_$i116, out_$i117, out_$i118, out_$p120, out_$i121, out_$i122, out_$i123, out_$p125, out_$p69, out_$p55, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i48, out_$p49, out_$p50, out_$i133, out_$i134, out_$i135, out_$i137, out_$i138, out_$i139, out_$p140, out_$p136, out_$p132 := cdc_ncm_bind_common_loop_$bb8(in_$p0, in_$p1, in_$p15, out_$p51, out_$i52, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p70, out_$p71, out_$p72, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p110, out_$i111, out_$i112, out_$i113, out_$p115, out_$i116, out_$i117, out_$i118, out_$p120, out_$i121, out_$i122, out_$i123, out_$p125, out_$p69, out_$p55, out_$i126, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$i48, out_$p49, out_$p50, out_$i133, out_$i134, out_$i135, out_$i137, out_$i138, out_$i139, out_$p140, out_$p136, out_$p132);
    return;

  exit:
    return;
}



procedure cdc_ncm_bind_common_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p15: ref, in_$p51: ref, in_$i52: i8, in_$i53: i32, in_$i54: i1, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i8, in_$i67: i32, in_$i68: i1, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p74: ref, in_$i75: i8, in_$i76: i32, in_$p77: ref, in_$i78: i8, in_$i79: i32, in_$i80: i1, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i8, in_$i103: i32, in_$p104: ref, in_$p105: ref, in_$i106: i8, in_$i107: i32, in_$i108: i1, in_$p110: ref, in_$i111: i8, in_$i112: i32, in_$i113: i1, in_$p115: ref, in_$i116: i8, in_$i117: i32, in_$i118: i1, in_$p120: ref, in_$i121: i8, in_$i122: i32, in_$i123: i1, in_$p125: ref, in_$p69: ref, in_$p55: ref, in_$i126: i8, in_$i127: i32, in_$i128: i64, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$i133: i8, in_$i134: i32, in_$i135: i1, in_$i137: i8, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$p136: ref, in_$p132: ref) returns (out_$p51: ref, out_$i52: i8, out_$i53: i32, out_$i54: i1, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i8, out_$i67: i32, out_$i68: i1, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p74: ref, out_$i75: i8, out_$i76: i32, out_$p77: ref, out_$i78: i8, out_$i79: i32, out_$i80: i1, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i8, out_$i103: i32, out_$p104: ref, out_$p105: ref, out_$i106: i8, out_$i107: i32, out_$i108: i1, out_$p110: ref, out_$i111: i8, out_$i112: i32, out_$i113: i1, out_$p115: ref, out_$i116: i8, out_$i117: i32, out_$i118: i1, out_$p120: ref, out_$i121: i8, out_$i122: i32, out_$i123: i1, out_$p125: ref, out_$p69: ref, out_$p55: ref, out_$i126: i8, out_$i127: i32, out_$i128: i64, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$i133: i8, out_$i134: i32, out_$i135: i1, out_$i137: i8, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$p136: ref, out_$p132: ref);
  modifies $M.0;



implementation cdc_ncm_find_endpoints_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$p21: ref, in_$i22: i8, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p44: ref, in_$p45: ref, in_$p36: ref, in_$p37: ref, in_$i49: i32, in_$i50: i32, in_$i51: i8, in_$p52: ref, in_$p54: ref, in_$i55: i8, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i11: i8, in_$p12: ref, in_$p13: ref, in_$p59: ref, in_$p60: ref) returns (out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$p21: ref, out_$i22: i8, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p44: ref, out_$p45: ref, out_$p36: ref, out_$p37: ref, out_$i49: i32, out_$i50: i32, out_$i51: i8, out_$p52: ref, out_$p54: ref, out_$i55: i8, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i11: i8, out_$p12: ref, out_$p13: ref, out_$p59: ref, out_$p60: ref)
{

  entry:
    out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$p19, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i46, out_$i47, out_$p48, out_$p44, out_$p45, out_$p36, out_$p37, out_$i49, out_$i50, out_$i51, out_$p52, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i11, out_$p12, out_$p13, out_$p59, out_$p60 := in_$p14, in_$p15, in_$p16, in_$p17, in_$i18, in_$p19, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$p28, in_$i29, in_$i30, in_$p31, in_$p32, in_$i33, in_$i34, in_$p35, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p43, in_$i46, in_$i47, in_$p48, in_$p44, in_$p45, in_$p36, in_$p37, in_$i49, in_$i50, in_$i51, in_$p52, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i11, in_$p12, in_$p13, in_$p59, in_$p60;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_907;

  $bb31:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$i11, out_$p12, out_$p13 := out_$i51, out_$p37, out_$p36;
    goto $bb31_dummy;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    out_$p59, out_$p60 := out_$p36, out_$p37;
    assume true;
    goto $bb31;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    out_$i58 := $sgt.i32(out_$i56, out_$i57);
    goto corral_source_split_948;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i8.i32(out_$i51);
    goto corral_source_split_947;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i8.i32(out_$i55);
    goto corral_source_split_946;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i8($M.0, out_$p54);
    goto corral_source_split_945;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref(out_$p52, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_944;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, in_$p2);
    goto corral_source_split_943;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i32.i8(out_$i50);
    call {:si_unique_call 132} {:cexpr "ep"} boogie_si_record_i8(out_$i51);
    goto corral_source_split_942;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i49, 1);
    goto corral_source_split_941;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i8.i32(out_$i11);
    goto corral_source_split_940;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_939;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p36, out_$p37 := out_$p13, out_$p12;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p36, out_$p37 := out_$p13, out_$p12;
    goto $bb20;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    out_$p36, out_$p37 := out_$p44, out_$p45;
    goto $bb20;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_962;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p44, out_$p45 := out_$p13, out_$p48;
    goto $bb26;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    out_$p44, out_$p45 := out_$p43, out_$p12;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_960;

  $bb24:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$p43 := out_$p13;
    goto $bb25;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    out_$p43 := out_$p19;
    goto $bb25;

  $bb23:
    assume out_$i42 == 1;
    goto corral_source_split_958;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i64(out_$i41, 0);
    goto corral_source_split_952;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    out_$i41 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_951;

  $bb21:
    assume out_$i40 == 1;
    goto corral_source_split_950;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_927;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} out_$i39 := usb_endpoint_dir_in(out_$p38);
    call {:si_unique_call 131} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_926;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p17, $mul.ref(out_$i18, 72)), $mul.ref(0, 1));
    goto corral_source_split_925;

  $bb12:
    assume out_$i27 == 1;
    goto corral_source_split_924;

  $bb7:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i24, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i24, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    out_$i24 := $and.i32(out_$i23, 3);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i8.i32(out_$i22);
    goto corral_source_split_917;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i8($M.0, out_$p21);
    goto corral_source_split_916;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(out_$i18, 72)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_915;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p17, $mul.ref(out_$i18, 72));
    goto corral_source_split_914;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i8.i64(out_$i11);
    goto corral_source_split_913;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_912;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_911;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_910;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_909;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb28:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    out_$p48 := out_$p12;
    goto $bb29;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    out_$p48 := out_$p19;
    goto $bb29;

  $bb27:
    assume out_$i47 == 1;
    goto corral_source_split_964;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i64(out_$i46, 0);
    goto corral_source_split_956;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_955;

  $bb22:
    assume !(out_$i40 == 1);
    goto corral_source_split_954;

  $bb15:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p35, out_$p19);
    goto corral_source_split_937;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1472)), $mul.ref(320, 1));
    goto corral_source_split_936;

  $bb16:
    assume out_$i34 == 1;
    goto corral_source_split_935;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i64(out_$i33, 0);
    goto corral_source_split_933;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_932;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_931;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1472)), $mul.ref(320, 1));
    goto corral_source_split_930;

  $bb14:
    assume out_$i30 == 1;
    goto corral_source_split_929;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_922;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} out_$i29 := usb_endpoint_dir_in(out_$p28);
    call {:si_unique_call 129} {:cexpr "tmp"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_921;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p17, $mul.ref(out_$i18, 72)), $mul.ref(0, 1));
    goto corral_source_split_920;

  $bb9:
    assume out_$i26 == 1;
    goto corral_source_split_919;

  $bb8:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i24, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i26 == 1);
    goto $bb11;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i27 == 1);
    goto $bb11;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$p19, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i46, out_$i47, out_$p48, out_$p44, out_$p45, out_$p36, out_$p37, out_$i49, out_$i50, out_$i51, out_$p52, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i11, out_$p12, out_$p13, out_$p59, out_$p60 := cdc_ncm_find_endpoints_loop_$bb4(in_$p0, in_$p1, in_$p2, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$p19, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i46, out_$i47, out_$p48, out_$p44, out_$p45, out_$p36, out_$p37, out_$i49, out_$i50, out_$i51, out_$p52, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i11, out_$p12, out_$p13, out_$p59, out_$p60);
    return;

  exit:
    return;
}



procedure cdc_ncm_find_endpoints_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$p21: ref, in_$i22: i8, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i41: i64, in_$i42: i1, in_$p43: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p44: ref, in_$p45: ref, in_$p36: ref, in_$p37: ref, in_$i49: i32, in_$i50: i32, in_$i51: i8, in_$p52: ref, in_$p54: ref, in_$i55: i8, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i11: i8, in_$p12: ref, in_$p13: ref, in_$p59: ref, in_$p60: ref) returns (out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$p21: ref, out_$i22: i8, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i41: i64, out_$i42: i1, out_$p43: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p44: ref, out_$p45: ref, out_$p36: ref, out_$p37: ref, out_$i49: i32, out_$i50: i32, out_$i51: i8, out_$p52: ref, out_$p54: ref, out_$i55: i8, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i11: i8, out_$p12: ref, out_$p13: ref, out_$p59: ref, out_$p60: ref);
  modifies $M.0;



implementation netif_tx_unlock_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$i4: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$i4: i32)
{

  entry:
    out_$p5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i4 := in_$p5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1996;

  $bb6:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i7;
    goto $bb6_dummy;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    out_$i9 := $ugt.i32(out_$i8, out_$i7);
    goto corral_source_split_2004;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i32($M.0, in_$p1);
    goto corral_source_split_2003;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    out_$i7 := $add.i32(out_$i4, 1);
    call {:si_unique_call 292} {:cexpr "i"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_2002;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} netif_schedule_queue(out_$p5);
    goto corral_source_split_2001;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} clear_bit(2, out_$p6);
    goto corral_source_split_2000;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(out_$p5, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_1999;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} out_$p5 := netdev_get_tx_queue(in_$p0, out_$i4);
    goto corral_source_split_1998;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i4 := netif_tx_unlock_loop_$bb4(in_$p0, in_$p1, out_$p5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i4);
    return;

  exit:
    return;
}



procedure netif_tx_unlock_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$i7: i32, in_$i8: i32, in_$i9: i1, in_$i4: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i32, out_$i8: i32, out_$i9: i1, out_$i4: i32);



implementation netif_tx_lock_loop_$bb26(in_$p0: ref, in_$i10: i32, in_$p14: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i17: i32) returns (out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i17: i32)
{

  entry:
    out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i17 := in_$p18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i17;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_2067;

  $bb28:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i20;
    goto $bb28_dummy;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    out_$i22 := $ugt.i32(out_$i21, out_$i20);
    goto corral_source_split_2076;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, in_$p14);
    goto corral_source_split_2075;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i17, 1);
    call {:si_unique_call 317} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_2074;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} __netif_tx_unlock(out_$p18);
    goto corral_source_split_2073;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} set_bit(2, out_$p19);
    goto corral_source_split_2072;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_2071;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} __netif_tx_lock(out_$p18, in_$i10);
    goto corral_source_split_2070;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} out_$p18 := netdev_get_tx_queue(in_$p0, out_$i17);
    goto corral_source_split_2069;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i17 := netif_tx_lock_loop_$bb26(in_$p0, in_$i10, in_$p14, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i17);
    return;

  exit:
    return;
}



procedure netif_tx_lock_loop_$bb26(in_$p0: ref, in_$i10: i32, in_$p14: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i17: i32) returns (out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i17: i32);
  modifies $M.0;



implementation cdc_ncm_fill_tx_frame_loop_$bb17(in_$p6: ref, in_$p55: ref, in_$p59: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$i78: i16, in_$p79: ref, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$i88: i16, in_$i89: i32, in_$i90: i32, in_$p91: ref, in_$i92: i16, in_$i93: i32, in_$i94: i32, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$i98: i16, in_$i99: i64, in_$p100: ref, in_$i101: i16, in_$i102: i64, in_$p103: ref, in_$i104: i32, in_$i105: i64, in_$i106: i64, in_$i107: i1, in_$p111: ref, in_$i112: i32, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$i108: i16, in_$i109: i32, in_$p110: ref, in_$p154: ref, in_$i155: i16, in_$i156: i64, in_$i157: i64, in_$i158: i64, in_$i159: i16, in_$i160: i32, in_$i161: i32, in_$i162: i16, in_$p163: ref, in_$i164: i32, in_$i165: i16, in_$i166: i32, in_$i167: i64, in_$p170: ref, in_$p171: ref, in_$i172: i32, in_$i173: i16, in_$i174: i32, in_$i175: i64, in_$p178: ref, in_$i179: i32, in_$i180: i32, in_$i181: i16, in_$p182: ref, in_$p183: ref, in_$i184: i32, in_$i185: i64, in_$p186: ref, in_$i187: i32, in_$p188: ref, in_$p189: ref, in_$p190: ref, in_$p191: ref, in_$i192: i32, in_$p193: ref, in_$i194: i32, in_$i195: i32, in_$p196: ref, in_$i197: i32, in_$i198: i1, in_$i199: i16, in_$i204: i32, in_$i205: i32, in_$i206: i16, in_$i207: i16, in_$i208: i32, in_$i209: i32, in_$i210: i1, in_$p66: ref, in_$i67: i32, in_$i68: i16, in_$i211: i16, in_$p212: ref, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8) returns (out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$i78: i16, out_$p79: ref, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$i88: i16, out_$i89: i32, out_$i90: i32, out_$p91: ref, out_$i92: i16, out_$i93: i32, out_$i94: i32, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$i98: i16, out_$i99: i64, out_$p100: ref, out_$i101: i16, out_$i102: i64, out_$p103: ref, out_$i104: i32, out_$i105: i64, out_$i106: i64, out_$i107: i1, out_$p111: ref, out_$i112: i32, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$i108: i16, out_$i109: i32, out_$p110: ref, out_$p154: ref, out_$i155: i16, out_$i156: i64, out_$i157: i64, out_$i158: i64, out_$i159: i16, out_$i160: i32, out_$i161: i32, out_$i162: i16, out_$p163: ref, out_$i164: i32, out_$i165: i16, out_$i166: i32, out_$i167: i64, out_$p170: ref, out_$p171: ref, out_$i172: i32, out_$i173: i16, out_$i174: i32, out_$i175: i64, out_$p178: ref, out_$i179: i32, out_$i180: i32, out_$i181: i16, out_$p182: ref, out_$p183: ref, out_$i184: i32, out_$i185: i64, out_$p186: ref, out_$i187: i32, out_$p188: ref, out_$p189: ref, out_$p190: ref, out_$p191: ref, out_$i192: i32, out_$p193: ref, out_$i194: i32, out_$i195: i32, out_$p196: ref, out_$i197: i32, out_$i198: i1, out_$i199: i16, out_$i204: i32, out_$i205: i32, out_$i206: i16, out_$i207: i16, out_$i208: i32, out_$i209: i32, out_$i210: i1, out_$p66: ref, out_$i67: i32, out_$i68: i16, out_$i211: i16, out_$p212: ref, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8)
{

  entry:
    out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i83, out_$p84, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i108, out_$i109, out_$p110, out_$p154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$p178, out_$i179, out_$i180, out_$i181, out_$p182, out_$p183, out_$i184, out_$i185, out_$p186, out_$i187, out_$p188, out_$p189, out_$p190, out_$p191, out_$i192, out_$p193, out_$i194, out_$i195, out_$p196, out_$i197, out_$i198, out_$i199, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$p66, out_$i67, out_$i68, out_$i211, out_$p212, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13 := in_$i69, in_$i70, in_$p71, in_$p72, in_$p73, in_$i74, in_$p75, in_$i76, in_$i77, in_$i78, in_$p79, in_$i83, in_$p84, in_$p85, in_$i86, in_$p87, in_$i88, in_$i89, in_$i90, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95, in_$p96, in_$p97, in_$i98, in_$i99, in_$p100, in_$i101, in_$i102, in_$p103, in_$i104, in_$i105, in_$i106, in_$i107, in_$p111, in_$i112, in_$p113, in_$i114, in_$i115, in_$p116, in_$i117, in_$i118, in_$i108, in_$i109, in_$p110, in_$p154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$p163, in_$i164, in_$i165, in_$i166, in_$i167, in_$p170, in_$p171, in_$i172, in_$i173, in_$i174, in_$i175, in_$p178, in_$i179, in_$i180, in_$i181, in_$p182, in_$p183, in_$i184, in_$i185, in_$p186, in_$i187, in_$p188, in_$p189, in_$p190, in_$p191, in_$i192, in_$p193, in_$i194, in_$i195, in_$p196, in_$i197, in_$i198, in_$i199, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$p66, in_$i67, in_$i68, in_$i211, in_$p212, in_cmdloc_dummy_var_11, in_cmdloc_dummy_var_12, in_cmdloc_dummy_var_13;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2474;

  $bb41:
    assume out_$i210 == 1;
    assume {:verifier.code 0} true;
    out_$p66, out_$i67, out_$i68 := $0.ref, out_$i83, out_$i206;
    goto $bb41_dummy;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    out_$i211, out_$p212 := out_$i206, $0.ref;
    assume true;
    goto $bb41;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    out_$i210 := $sgt.i32(out_$i208, out_$i209);
    goto corral_source_split_2639;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    out_$i209 := $zext.i16.i32(out_$i206);
    goto corral_source_split_2638;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    out_$i208 := $zext.i16.i32(out_$i207);
    goto corral_source_split_2637;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    out_$i207 := $load.i16($M.0, in_$p59);
    goto corral_source_split_2636;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    out_$i206 := $trunc.i32.i16(out_$i205);
    call {:si_unique_call 415} {:cexpr "n"} boogie_si_record_i16(out_$i206);
    goto corral_source_split_2635;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    out_$i205 := $add.i32(out_$i204, 1);
    goto corral_source_split_2634;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i204 := $zext.i16.i32(out_$i68);
    goto corral_source_split_2633;

  $bb39:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    out_$i199 := out_$i68;
    assume true;
    goto $bb39;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    out_$i198 := $ugt.i32(out_$i197, 39);
    goto corral_source_split_2624;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    out_$i197 := $zext.i16.i32(out_$i162);
    goto corral_source_split_2623;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} dev_kfree_skb_any(out_$p84);
    goto corral_source_split_2622;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p196, out_$i195);
    goto corral_source_split_2621;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    out_$p196 := $add.ref($add.ref(in_$p6, $mul.ref(0, 416)), $mul.ref(360, 1));
    goto corral_source_split_2620;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    out_$i195 := $add.i32(out_$i192, out_$i194);
    goto corral_source_split_2619;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    out_$i194 := $load.i32($M.0, out_$p193);
    goto corral_source_split_2618;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref(out_$p84, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2617;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    out_$i192 := $load.i32($M.0, out_$p191);
    goto corral_source_split_2616;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    out_$p191 := $add.ref($add.ref(in_$p6, $mul.ref(0, 416)), $mul.ref(360, 1));
    goto corral_source_split_2615;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_11 := $M.0;
    out_cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 413} out_cmdloc_dummy_var_13 := $memcpy.i8(out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_$p188, out_$p190, out_$i185, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_13;
    goto corral_source_split_2614;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    out_$p190 := $load.ref($M.0, out_$p189);
    goto corral_source_split_2613;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref(out_$p84, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2612;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} out_$p188 := skb_put(in_$p55, out_$i187);
    goto corral_source_split_2611;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    out_$i187 := $load.i32($M.0, out_$p186);
    goto corral_source_split_2610;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    out_$p186 := $add.ref($add.ref(out_$p84, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2609;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    out_$i185 := $zext.i32.i64(out_$i184);
    call {:si_unique_call 411} {:cexpr "__len"} boogie_si_record_i64(out_$i185);
    goto corral_source_split_2608;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    out_$i184 := $load.i32($M.0, out_$p183);
    goto corral_source_split_2607;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    out_$p183 := $add.ref($add.ref(out_$p84, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2606;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p182, out_$i181);
    goto corral_source_split_2605;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    out_$p182 := $add.ref($add.ref(out_$p96, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2604;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    out_$i181 := $trunc.i32.i16(out_$i180);
    goto corral_source_split_2603;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    out_$i180 := $add.i32(out_$i179, 4);
    goto corral_source_split_2602;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    out_$i179 := $zext.i16.i32(out_$i155);
    goto corral_source_split_2601;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p178, out_$i173);
    goto corral_source_split_2600;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    out_$p178 := $add.ref($add.ref($add.ref($add.ref(out_$p96, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref(out_$i175, 4)), $mul.ref(0, 1));
    goto corral_source_split_2599;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    out_$i175 := $sext.i32.i64(out_$i174);
    goto corral_source_split_2598;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    out_$i174 := $zext.i16.i32(out_$i162);
    goto corral_source_split_2597;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    out_$i173 := $trunc.i32.i16(out_$i172);
    goto corral_source_split_2596;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    out_$i172 := $load.i32($M.0, out_$p171);
    goto corral_source_split_2595;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    out_$p171 := $add.ref($add.ref(in_$p55, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2594;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p170, out_$i165);
    goto corral_source_split_2593;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref($add.ref($add.ref(out_$p96, $mul.ref(0, 8)), $mul.ref(8, 1)), $mul.ref(out_$i167, 4)), $mul.ref(2, 1));
    goto corral_source_split_2592;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    out_$i167 := $sext.i32.i64(out_$i166);
    goto corral_source_split_2591;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    out_$i166 := $zext.i16.i32(out_$i162);
    goto corral_source_split_2590;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    out_$i165 := $trunc.i32.i16(out_$i164);
    goto corral_source_split_2589;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    out_$i164 := $load.i32($M.0, out_$p163);
    goto corral_source_split_2588;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref(out_$p84, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2587;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    out_$i162 := $trunc.i32.i16(out_$i161);
    call {:si_unique_call 410} {:cexpr "index"} boogie_si_record_i16(out_$i162);
    goto corral_source_split_2586;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    out_$i161 := $sub.i32(out_$i160, 1);
    goto corral_source_split_2585;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    out_$i160 := $zext.i16.i32(out_$i159);
    goto corral_source_split_2584;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    out_$i159 := $trunc.i64.i16(out_$i158);
    goto corral_source_split_2583;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    out_$i158 := $udiv.i64(out_$i157, 4);
    goto corral_source_split_2582;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    out_$i157 := $sub.i64(out_$i156, 8);
    goto corral_source_split_2581;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    out_$i156 := $zext.i16.i64(out_$i155);
    goto corral_source_split_2580;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    out_$i155 := $load.i16($M.0, out_$p154);
    call {:si_unique_call 409} {:cexpr "ndplen"} boogie_si_record_i16(out_$i155);
    goto corral_source_split_2579;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref(out_$p96, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2578;

  $bb30:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    out_$i108, out_$i109, out_$p110 := out_$i68, out_$i83, out_$p84;
    assume true;
    goto $bb30;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    out_$i118 := $ugt.i32(out_$i115, out_$i117);
    goto corral_source_split_2533;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    out_$i117 := $load.i32($M.0, out_$p116);
    goto corral_source_split_2532;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p6, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_2531;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    out_$i115 := $add.i32(out_$i112, out_$i114);
    goto corral_source_split_2530;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i32($M.0, out_$p113);
    goto corral_source_split_2529;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(out_$p84, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2528;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i32($M.0, out_$p111);
    goto corral_source_split_2527;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p55, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2526;

  $bb28:
    assume !(out_$i107 == 1);
    goto corral_source_split_2525;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    out_$i108, out_$i109, out_$p110 := out_$i68, out_$i83, out_$p84;
    assume true;
    goto $bb28;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i64(out_$i106, 0);
    goto corral_source_split_2519;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    out_$i106 := $p2i.ref.i64(out_$p96);
    goto corral_source_split_2518;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} cdc_ncm_align_tail(in_$p55, out_$i99, out_$i102, out_$i105);
    goto corral_source_split_2517;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    out_$i105 := $zext.i32.i64(out_$i104);
    goto corral_source_split_2516;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i32($M.0, out_$p103);
    goto corral_source_split_2515;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p6, $mul.ref(0, 416)), $mul.ref(336, 1));
    goto corral_source_split_2514;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i16.i64(out_$i101);
    goto corral_source_split_2513;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i16($M.0, out_$p100);
    goto corral_source_split_2512;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p6, $mul.ref(0, 416)), $mul.ref(346, 1));
    goto corral_source_split_2511;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i16.i64(out_$i98);
    goto corral_source_split_2510;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i16($M.0, out_$p97);
    goto corral_source_split_2509;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p6, $mul.ref(0, 416)), $mul.ref(348, 1));
    goto corral_source_split_2508;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} out_$p96 := cdc_ncm_ndp(in_$p6, in_$p55, out_$i83, out_$i95);
    goto corral_source_split_2507;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i32.i64(out_$i94);
    goto corral_source_split_2506;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i90, out_$i93);
    goto corral_source_split_2505;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i16.i32(out_$i92);
    goto corral_source_split_2504;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i16($M.0, out_$p91);
    goto corral_source_split_2503;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(in_$p6, $mul.ref(0, 416)), $mul.ref(346, 1));
    goto corral_source_split_2502;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    out_$i90 := $add.i32(out_$i86, out_$i89);
    goto corral_source_split_2501;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i16.i32(out_$i88);
    goto corral_source_split_2500;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i16($M.0, out_$p87);
    goto corral_source_split_2499;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p6, $mul.ref(0, 416)), $mul.ref(348, 1));
    goto corral_source_split_2498;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i32($M.0, out_$p85);
    goto corral_source_split_2497;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p84, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_2496;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2495;

  $bb20:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i83, out_$p84 := out_$i67, out_$p66;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i83, out_$p84 := out_$i74, out_$p72;
    goto $bb25;

  $bb22:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    out_$i78, out_$p79 := out_$i68, out_$p72;
    assume true;
    goto $bb22;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i64(out_$i76, 0);
    goto corral_source_split_2487;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    out_$i76 := $p2i.ref.i64(out_$p72);
    goto corral_source_split_2486;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p75, $0.ref);
    goto corral_source_split_2485;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p6, $mul.ref(0, 416)), $mul.ref(224, 1));
    goto corral_source_split_2484;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.0, out_$p73);
    call {:si_unique_call 404} {:cexpr "sign"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_2483;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p6, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_2482;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_2481;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p6, $mul.ref(0, 416)), $mul.ref(224, 1));
    goto corral_source_split_2480;

  $bb19:
    assume out_$i70 == 1;
    goto corral_source_split_2479;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i64(out_$i69, 0);
    goto corral_source_split_2477;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p66);
    goto corral_source_split_2476;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb41_dummy:
    call {:si_unique_call 1} out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i83, out_$p84, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i108, out_$i109, out_$p110, out_$p154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$p178, out_$i179, out_$i180, out_$i181, out_$p182, out_$p183, out_$i184, out_$i185, out_$p186, out_$i187, out_$p188, out_$p189, out_$p190, out_$p191, out_$i192, out_$p193, out_$i194, out_$i195, out_$p196, out_$i197, out_$i198, out_$i199, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$p66, out_$i67, out_$i68, out_$i211, out_$p212, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13 := cdc_ncm_fill_tx_frame_loop_$bb17(in_$p6, in_$p55, in_$p59, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$i74, out_$p75, out_$i76, out_$i77, out_$i78, out_$p79, out_$i83, out_$p84, out_$p85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i108, out_$i109, out_$p110, out_$p154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p170, out_$p171, out_$i172, out_$i173, out_$i174, out_$i175, out_$p178, out_$i179, out_$i180, out_$i181, out_$p182, out_$p183, out_$i184, out_$i185, out_$p186, out_$i187, out_$p188, out_$p189, out_$p190, out_$p191, out_$i192, out_$p193, out_$i194, out_$i195, out_$p196, out_$i197, out_$i198, out_$i199, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$p66, out_$i67, out_$i68, out_$i211, out_$p212, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13);
    return;

  exit:
    return;
}



procedure cdc_ncm_fill_tx_frame_loop_$bb17(in_$p6: ref, in_$p55: ref, in_$p59: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$i78: i16, in_$p79: ref, in_$i83: i32, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$i88: i16, in_$i89: i32, in_$i90: i32, in_$p91: ref, in_$i92: i16, in_$i93: i32, in_$i94: i32, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$i98: i16, in_$i99: i64, in_$p100: ref, in_$i101: i16, in_$i102: i64, in_$p103: ref, in_$i104: i32, in_$i105: i64, in_$i106: i64, in_$i107: i1, in_$p111: ref, in_$i112: i32, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$i108: i16, in_$i109: i32, in_$p110: ref, in_$p154: ref, in_$i155: i16, in_$i156: i64, in_$i157: i64, in_$i158: i64, in_$i159: i16, in_$i160: i32, in_$i161: i32, in_$i162: i16, in_$p163: ref, in_$i164: i32, in_$i165: i16, in_$i166: i32, in_$i167: i64, in_$p170: ref, in_$p171: ref, in_$i172: i32, in_$i173: i16, in_$i174: i32, in_$i175: i64, in_$p178: ref, in_$i179: i32, in_$i180: i32, in_$i181: i16, in_$p182: ref, in_$p183: ref, in_$i184: i32, in_$i185: i64, in_$p186: ref, in_$i187: i32, in_$p188: ref, in_$p189: ref, in_$p190: ref, in_$p191: ref, in_$i192: i32, in_$p193: ref, in_$i194: i32, in_$i195: i32, in_$p196: ref, in_$i197: i32, in_$i198: i1, in_$i199: i16, in_$i204: i32, in_$i205: i32, in_$i206: i16, in_$i207: i16, in_$i208: i32, in_$i209: i32, in_$i210: i1, in_$p66: ref, in_$i67: i32, in_$i68: i16, in_$i211: i16, in_$p212: ref, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8) returns (out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$i78: i16, out_$p79: ref, out_$i83: i32, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$i88: i16, out_$i89: i32, out_$i90: i32, out_$p91: ref, out_$i92: i16, out_$i93: i32, out_$i94: i32, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$i98: i16, out_$i99: i64, out_$p100: ref, out_$i101: i16, out_$i102: i64, out_$p103: ref, out_$i104: i32, out_$i105: i64, out_$i106: i64, out_$i107: i1, out_$p111: ref, out_$i112: i32, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$i108: i16, out_$i109: i32, out_$p110: ref, out_$p154: ref, out_$i155: i16, out_$i156: i64, out_$i157: i64, out_$i158: i64, out_$i159: i16, out_$i160: i32, out_$i161: i32, out_$i162: i16, out_$p163: ref, out_$i164: i32, out_$i165: i16, out_$i166: i32, out_$i167: i64, out_$p170: ref, out_$p171: ref, out_$i172: i32, out_$i173: i16, out_$i174: i32, out_$i175: i64, out_$p178: ref, out_$i179: i32, out_$i180: i32, out_$i181: i16, out_$p182: ref, out_$p183: ref, out_$i184: i32, out_$i185: i64, out_$p186: ref, out_$i187: i32, out_$p188: ref, out_$p189: ref, out_$p190: ref, out_$p191: ref, out_$i192: i32, out_$p193: ref, out_$i194: i32, out_$i195: i32, out_$p196: ref, out_$i197: i32, out_$i198: i1, out_$i199: i16, out_$i204: i32, out_$i205: i32, out_$i206: i16, out_$i207: i16, out_$i208: i32, out_$i209: i32, out_$i210: i1, out_$p66: ref, out_$i67: i32, out_$i68: i16, out_$i211: i16, out_$p212: ref, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8);
  modifies $M.0;



implementation cdc_ncm_ndp_loop_$bb4(in_$p1: ref, in_$i2: i32, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p22: ref, in_$i23: i16, in_$i24: i64, in_$i25: i1, in_$i12: i64, in_$p26: ref) returns (out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p22: ref, out_$i23: i16, out_$i24: i64, out_$i25: i1, out_$i12: i64, out_$p26: ref)
{

  entry:
    out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p22, out_$i23, out_$i24, out_$i25, out_$i12, out_$p26 := in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p20, in_$p22, in_$i23, in_$i24, in_$i25, in_$i12, in_$p26;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2833;

  $bb10:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i24;
    goto $bb10_dummy;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    out_$p26 := out_$p15;
    assume true;
    goto $bb10;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_2850;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i16.i64(out_$i23);
    call {:si_unique_call 429} {:cexpr "ndpoffset"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_2849;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i16($M.0, out_$p22);
    goto corral_source_split_2848;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p16, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_2847;

  $bb7:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    out_$p20 := out_$p15;
    assume true;
    goto $bb7;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i18, in_$i2);
    goto corral_source_split_2841;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, out_$p17);
    goto corral_source_split_2840;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2839;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_2838;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(out_$p14, $mul.ref(out_$i12, 1));
    goto corral_source_split_2837;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_2836;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2835;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p22, out_$i23, out_$i24, out_$i25, out_$i12, out_$p26 := cdc_ncm_ndp_loop_$bb4(in_$p1, in_$i2, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p22, out_$i23, out_$i24, out_$i25, out_$i12, out_$p26);
    return;

  exit:
    return;
}



procedure cdc_ncm_ndp_loop_$bb4(in_$p1: ref, in_$i2: i32, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$p20: ref, in_$p22: ref, in_$i23: i16, in_$i24: i64, in_$i25: i1, in_$i12: i64, in_$p26: ref) returns (out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$p20: ref, out_$p22: ref, out_$i23: i16, out_$i24: i64, out_$i25: i1, out_$i12: i64, out_$p26: ref);



implementation ldv_set_add_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$i11: i32, in_$i12: i32, in_$i13: i1) returns (out_$i4: i32, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$i11: i32, out_$i12: i32, out_$i13: i1)
{

  entry:
    out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := in_$i4, in_$i5, in_$p6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3000;

  $bb12:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i11;
    goto $bb12_dummy;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i11, out_$i12);
    goto corral_source_split_3018;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    out_$i12 := $M.32;
    goto corral_source_split_3017;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i4, 1);
    call {:si_unique_call 452} {:cexpr "i"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_3016;

  $bb9:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i64(out_$i8, out_$i9);
    goto corral_source_split_3007;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_3006;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_3005;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.33, out_$p6);
    goto corral_source_split_3004;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i5, 8));
    goto corral_source_split_3003;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i4);
    goto corral_source_split_3002;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13 := ldv_set_add_loop_$bb4(in_$p1, out_$i4, out_$i5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13);
    return;

  exit:
    return;
}



procedure ldv_set_add_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i64, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i64, in_$i10: i1, in_$i11: i32, in_$i12: i32, in_$i13: i1) returns (out_$i4: i32, out_$i5: i64, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i64, out_$i10: i1, out_$i11: i32, out_$i12: i32, out_$i13: i1);



implementation cdc_ncm_rx_fixup_loop_$bb26(in_$p0: ref, in_$p1: ref, in_$p7: ref, in_$i12: i32, in_$p62: ref, in_$i63: i16, in_$i64: i32, in_$p65: ref, in_$i66: i16, in_$i67: i32, in_$i68: i1, in_$i71: i1, in_$i69: i32, in_$i70: i32, in_$i74: i32, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$i85: i1, in_$i78: i32, in_$i79: i32, in_$i80: i32, in_$i81: i32, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$i115: i64, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$p120: ref, in_$i121: i32, in_$i122: i32, in_$p123: ref, in_$i124: i1, in_$i59: i32, in_$p60: ref, in_$i61: i32, in_$i125: i32, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8) returns (out_$p62: ref, out_$i63: i16, out_$i64: i32, out_$p65: ref, out_$i66: i16, out_$i67: i32, out_$i68: i1, out_$i71: i1, out_$i69: i32, out_$i70: i32, out_$i74: i32, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$i85: i1, out_$i78: i32, out_$i79: i32, out_$i80: i32, out_$i81: i32, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$i115: i64, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$p120: ref, out_$i121: i32, out_$i122: i32, out_$p123: ref, out_$i124: i1, out_$i59: i32, out_$p60: ref, out_$i61: i32, out_$i125: i32, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8)
{

  entry:
    out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i71, out_$i69, out_$i70, out_$i74, out_$p75, out_$i76, out_$i77, out_$p82, out_$i83, out_$i84, out_$i85, out_$i78, out_$i79, out_$i80, out_$i81, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$p118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i59, out_$p60, out_$i61, out_$i125, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22 := in_$p62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i71, in_$i69, in_$i70, in_$i74, in_$p75, in_$i76, in_$i77, in_$p82, in_$i83, in_$i84, in_$i85, in_$i78, in_$i79, in_$i80, in_$i81, in_$p110, in_$p111, in_$p112, in_$i113, in_$i114, in_$i115, in_$p116, in_$p117, in_$p118, in_$i119, in_$p120, in_$i121, in_$i122, in_$p123, in_$i124, in_$i59, in_$p60, in_$i61, in_$i125, in_cmdloc_dummy_var_20, in_cmdloc_dummy_var_21, in_cmdloc_dummy_var_22;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3514;

  $bb58:
    assume out_$i124 == 1;
    assume {:verifier.code 0} true;
    out_$i59, out_$p60, out_$i61 := out_$i121, out_$p123, out_$i122;
    goto $bb58_dummy;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    out_$i125 := out_$i121;
    assume true;
    goto $bb58;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    out_$i124 := $slt.i32(out_$i122, in_$i12);
    goto corral_source_split_3606;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref(out_$p60, $mul.ref(1, 4));
    goto corral_source_split_3605;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i122 := $add.i32(out_$i61, 1);
    call {:si_unique_call 525} {:cexpr "x"} boogie_si_record_i32(out_$i122);
    goto corral_source_split_3604;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    out_$i121 := $add.i32(out_$i59, out_$i67);
    call {:si_unique_call 524} {:cexpr "payload"} boogie_si_record_i32(out_$i121);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} usbnet_skb_return(in_$p0, out_$p112);
    goto corral_source_split_3602;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_20 := $M.0;
    out_cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 522} out_cmdloc_dummy_var_22 := $memcpy.i8(out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_$p116, out_$p120, out_$i115, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_22;
    goto corral_source_split_3601;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref(out_$p118, $mul.ref(out_$i119, 1));
    goto corral_source_split_3600;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    out_$i119 := $sext.i32.i64(out_$i64);
    goto corral_source_split_3599;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    out_$p118 := $load.ref($M.0, out_$p117);
    goto corral_source_split_3598;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(in_$p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3597;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} out_$p116 := skb_put(out_$p112, out_$i67);
    goto corral_source_split_3596;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i115 := $sext.i32.i64(out_$i67);
    call {:si_unique_call 520} {:cexpr "__len"} boogie_si_record_i64(out_$i115);
    goto corral_source_split_3595;

  $bb55:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i64(out_$i113, 0);
    goto corral_source_split_3558;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    out_$i113 := $p2i.ref.i64(out_$p112);
    goto corral_source_split_3557;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} out_$p112 := netdev_alloc_skb_ip_align(out_$p111, out_$i67);
    goto corral_source_split_3556;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    out_$p111 := $load.ref($M.0, out_$p110);
    goto corral_source_split_3555;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_3554;

  $bb44:
    assume !(out_$i85 == 1);
    goto corral_source_split_3553;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    out_$i78, out_$i79, out_$i80, out_$i81 := out_$i61, out_$i59, out_$i64, out_$i67;
    assume true;
    goto $bb44;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    out_$i85 := $sle.i32(out_$i67, 13);
    goto corral_source_split_3551;

  $bb42:
    assume !(out_$i84 == 1);
    goto corral_source_split_3550;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    out_$i78, out_$i79, out_$i80, out_$i81 := out_$i61, out_$i59, out_$i64, out_$i67;
    assume true;
    goto $bb42;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    out_$i84 := $ugt.i32(out_$i67, out_$i83);
    goto corral_source_split_3548;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.0, out_$p82);
    goto corral_source_split_3547;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p7, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_3546;

  $bb40:
    assume !(out_$i77 == 1);
    goto corral_source_split_3545;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    out_$i78, out_$i79, out_$i80, out_$i81 := out_$i61, out_$i59, out_$i64, out_$i67;
    assume true;
    goto $bb40;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    out_$i77 := $ugt.i32(out_$i74, out_$i76);
    goto corral_source_split_3537;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i32($M.0, out_$p75);
    goto corral_source_split_3536;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p1, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_3535;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(out_$i64, out_$i67);
    goto corral_source_split_3534;

  $bb32:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    out_$i69, out_$i70 := out_$i61, out_$i59;
    assume true;
    goto $bb32;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i67, 0);
    goto corral_source_split_3528;

  $bb30:
    assume !(out_$i68 == 1);
    goto corral_source_split_3527;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    out_$i69, out_$i70 := out_$i61, out_$i59;
    assume true;
    goto $bb30;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i64, 0);
    goto corral_source_split_3522;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i16.i32(out_$i66);
    call {:si_unique_call 515} {:cexpr "len"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_3521;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i16($M.0, out_$p65);
    goto corral_source_split_3520;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p60, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3519;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i16.i32(out_$i63);
    call {:si_unique_call 514} {:cexpr "offset"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_3518;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i16($M.0, out_$p62);
    goto corral_source_split_3517;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p60, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3516;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb58_dummy:
    call {:si_unique_call 1} out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i71, out_$i69, out_$i70, out_$i74, out_$p75, out_$i76, out_$i77, out_$p82, out_$i83, out_$i84, out_$i85, out_$i78, out_$i79, out_$i80, out_$i81, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$p118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i59, out_$p60, out_$i61, out_$i125, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22 := cdc_ncm_rx_fixup_loop_$bb26(in_$p0, in_$p1, in_$p7, in_$i12, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i71, out_$i69, out_$i70, out_$i74, out_$p75, out_$i76, out_$i77, out_$p82, out_$i83, out_$i84, out_$i85, out_$i78, out_$i79, out_$i80, out_$i81, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$p118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i59, out_$p60, out_$i61, out_$i125, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22);
    return;

  exit:
    return;
}



procedure cdc_ncm_rx_fixup_loop_$bb26(in_$p0: ref, in_$p1: ref, in_$p7: ref, in_$i12: i32, in_$p62: ref, in_$i63: i16, in_$i64: i32, in_$p65: ref, in_$i66: i16, in_$i67: i32, in_$i68: i1, in_$i71: i1, in_$i69: i32, in_$i70: i32, in_$i74: i32, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$i85: i1, in_$i78: i32, in_$i79: i32, in_$i80: i32, in_$i81: i32, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$i115: i64, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$p120: ref, in_$i121: i32, in_$i122: i32, in_$p123: ref, in_$i124: i1, in_$i59: i32, in_$p60: ref, in_$i61: i32, in_$i125: i32, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8) returns (out_$p62: ref, out_$i63: i16, out_$i64: i32, out_$p65: ref, out_$i66: i16, out_$i67: i32, out_$i68: i1, out_$i71: i1, out_$i69: i32, out_$i70: i32, out_$i74: i32, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$i85: i1, out_$i78: i32, out_$i79: i32, out_$i80: i32, out_$i81: i32, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$i115: i64, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$p120: ref, out_$i121: i32, out_$i122: i32, out_$p123: ref, out_$i124: i1, out_$i59: i32, out_$p60: ref, out_$i61: i32, out_$i125: i32, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8);
  modifies $M.0;



implementation cdc_ncm_rx_fixup_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p7: ref, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i32, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i24, in_$i40: i24, in_$i41: i24, in_$p42: ref, in_$p43: ref, in_$i44: i8, in_$i45: i64, in_$i46: i64, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$p55: ref, in_$i57: i1, in_$p62: ref, in_$i63: i16, in_$i64: i32, in_$p65: ref, in_$i66: i16, in_$i67: i32, in_$i68: i1, in_$i71: i1, in_$i69: i32, in_$i70: i32, in_$i72: i1, in_$i74: i32, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$i85: i1, in_$i78: i32, in_$i79: i32, in_$i80: i32, in_$i81: i32, in_$p86: ref, in_$i87: i32, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i24, in_$i97: i24, in_$i98: i24, in_$p99: ref, in_$p100: ref, in_$i101: i8, in_$i102: i64, in_$i103: i64, in_$i104: i64, in_$i105: i1, in_$p106: ref, in_$p107: ref, in_$i109: i1, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$i115: i64, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$p120: ref, in_$i121: i32, in_$i122: i32, in_$p123: ref, in_$i124: i1, in_$i59: i32, in_$p60: ref, in_$i61: i32, in_$i125: i32, in_$i58: i32, in_$i73: i32, in_$i54: i32, in_$p126: ref, in_$i127: i16, in_$i128: i32, in_$i129: i1, in_$i131: i32, in_$i132: i1, in_$i133: i32, in_$i130: i32, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32) returns (out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i32, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i24, out_$i40: i24, out_$i41: i24, out_$p42: ref, out_$p43: ref, out_$i44: i8, out_$i45: i64, out_$i46: i64, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$p55: ref, out_$i57: i1, out_$p62: ref, out_$i63: i16, out_$i64: i32, out_$p65: ref, out_$i66: i16, out_$i67: i32, out_$i68: i1, out_$i71: i1, out_$i69: i32, out_$i70: i32, out_$i72: i1, out_$i74: i32, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$i85: i1, out_$i78: i32, out_$i79: i32, out_$i80: i32, out_$i81: i32, out_$p86: ref, out_$i87: i32, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i24, out_$i97: i24, out_$i98: i24, out_$p99: ref, out_$p100: ref, out_$i101: i8, out_$i102: i64, out_$i103: i64, out_$i104: i64, out_$i105: i1, out_$p106: ref, out_$p107: ref, out_$i109: i1, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$i115: i64, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$p120: ref, out_$i121: i32, out_$i122: i32, out_$p123: ref, out_$i124: i1, out_$i59: i32, out_$p60: ref, out_$i61: i32, out_$i125: i32, out_$i58: i32, out_$i73: i32, out_$i54: i32, out_$p126: ref, out_$i127: i16, out_$i128: i32, out_$i129: i1, out_$i131: i32, out_$i132: i1, out_$i133: i32, out_$i130: i32, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32)
{

  entry:
    out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i12, out_$i13, out_$i14, out_$i15, out_$p21, out_$p22, out_$p23, out_$i24, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$i52, out_$p55, out_$i57, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i71, out_$i69, out_$i70, out_$i72, out_$i74, out_$p75, out_$i76, out_$i77, out_$p82, out_$i83, out_$i84, out_$i85, out_$i78, out_$i79, out_$i80, out_$i81, out_$p86, out_$i87, out_$i88, out_$i89, out_$p90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$i109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$p118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i59, out_$p60, out_$i61, out_$i125, out_$i58, out_$i73, out_$i54, out_$p126, out_$i127, out_$i128, out_$i129, out_$i131, out_$i132, out_$i133, out_$i130, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_vslice_dummy_var_124, out_vslice_dummy_var_125 := in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i12, in_$i13, in_$i14, in_$i15, in_$p21, in_$p22, in_$p23, in_$i24, in_$p26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$i41, in_$p42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$p49, in_$p50, in_$p51, in_$i52, in_$p55, in_$i57, in_$p62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i71, in_$i69, in_$i70, in_$i72, in_$i74, in_$p75, in_$i76, in_$i77, in_$p82, in_$i83, in_$i84, in_$i85, in_$i78, in_$i79, in_$i80, in_$i81, in_$p86, in_$i87, in_$i88, in_$i89, in_$p90, in_$p91, in_$p92, in_$p93, in_$p94, in_$p95, in_$i96, in_$i97, in_$i98, in_$p99, in_$p100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$p106, in_$p107, in_$i109, in_$p110, in_$p111, in_$p112, in_$i113, in_$i114, in_$i115, in_$p116, in_$p117, in_$p118, in_$i119, in_$p120, in_$i121, in_$i122, in_$p123, in_$i124, in_$i59, in_$p60, in_$i61, in_$i125, in_$i58, in_$i73, in_$i54, in_$p126, in_$i127, in_$i128, in_$i129, in_$i131, in_$i132, in_$i133, in_$i130, in_cmdloc_dummy_var_20, in_cmdloc_dummy_var_21, in_cmdloc_dummy_var_22, in_vslice_dummy_var_124, in_vslice_dummy_var_125;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb11:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i12, out_$i13, out_$i14, out_$i15 := out_$i19, out_$i18, out_$i17, out_$i16;
    goto $bb11_dummy;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i19, 0);
    goto corral_source_split_3452;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} out_$i19 := cdc_ncm_rx_verify_ndp16(in_$p1, out_$i16);
    call {:si_unique_call 509} {:cexpr "nframes"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_3451;

  $bb9:
    assume out_$i132 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3450;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    out_$i16, out_$i17, out_$i18, out_$i133 := out_$i128, out_$i131, out_$i54, out_$i54;
    assume true;
    goto $bb9;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    out_$i132 := $ne.i32(out_$i14, 0);
    goto corral_source_split_3612;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    out_$i131 := $sub.i32(out_$i14, 1);
    call {:si_unique_call 526} {:cexpr "loopcount"} boogie_si_record_i32(out_$i131);
    goto corral_source_split_3611;

  $bb61:
    assume out_$i129 == 1;
    goto corral_source_split_3610;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    out_$i130 := out_$i54;
    assume true;
    goto $bb61;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    out_$i129 := $ne.i32(out_$i128, 0);
    goto corral_source_split_3506;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i16.i32(out_$i127);
    call {:si_unique_call 513} {:cexpr "ndpoffset"} boogie_si_record_i32(out_$i128);
    goto corral_source_split_3505;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    out_$i127 := $load.i16($M.0, out_$p126);
    goto corral_source_split_3504;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(out_$p23, $mul.ref(out_$i24, 8)), $mul.ref(6, 1));
    goto corral_source_split_3503;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_3502;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i73;
    goto $bb21;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i79;
    goto $bb21;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i70;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i13;
    goto $bb21;

  $bb16:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} out_vslice_dummy_var_124 := __dynamic_netdev_dbg.ref.ref.ref.i32(in_$p2, out_$p50, .str.25, out_$i52);
    goto corral_source_split_3500;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.0, out_$p51);
    goto corral_source_split_3499;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p23, $mul.ref(out_$i24, 8)), $mul.ref(0, 1));
    goto corral_source_split_3498;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_3497;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_3496;

  $bb17:
    assume out_$i48 == 1;
    goto corral_source_split_3495;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i64(out_$i47, 0);
    goto corral_source_split_3493;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} out_$i47 := ldv__builtin_expect(out_$i46, 0);
    call {:si_unique_call 511} {:cexpr "tmp"} boogie_si_record_i64(out_$i47);
    goto corral_source_split_3492;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    out_$i46 := $and.i64(out_$i45, 1);
    goto corral_source_split_3491;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i8.i64(out_$i44);
    goto corral_source_split_3490;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i8($M.39, out_$p43);
    goto corral_source_split_3489;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3488;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, out_$p42, 0);
    goto corral_source_split_3487;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3486;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $M.38 := $store.i24($M.38, out_$p38, out_$i41);
    goto corral_source_split_3485;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    out_$i41 := $or.i24(out_$i40, 1454);
    goto corral_source_split_3484;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    out_$i40 := $and.i24(out_$i39, $sub.i24(0, 262144));
    goto corral_source_split_3483;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i24($M.38, out_$p38);
    goto corral_source_split_3482;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_3481;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3480;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, out_$p36, .str.25);
    goto corral_source_split_3479;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3478;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, out_$p35, .str.3);
    goto corral_source_split_3477;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3476;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, out_$p34, .str.24);
    goto corral_source_split_3475;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3474;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, out_$p33, .str.1);
    goto corral_source_split_3473;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3472;

  $bb15:
    assume out_$i32 == 1;
    goto corral_source_split_3471;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i32(out_$i31, 0);
    goto corral_source_split_3469;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    out_$i31 := $and.i32(out_$i30, 64);
    goto corral_source_split_3468;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    goto corral_source_split_3467;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1472)), $mul.ref(480, 1));
    goto corral_source_split_3466;

  $bb13:
    assume out_$i28 == 1;
    goto corral_source_split_3465;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 810369870);
    goto corral_source_split_3463;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_3462;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p23, $mul.ref(out_$i24, 8)), $mul.ref(0, 1));
    goto corral_source_split_3461;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    goto corral_source_split_3460;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i15);
    goto corral_source_split_3459;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_3458;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_3457;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3456;

  $bb33:
    assume out_$i72 == 1;
    goto corral_source_split_3530;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i69, 0);
    goto corral_source_split_3525;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3524;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i71 == 1;
    goto $bb29;

  $bb28:
    assume {:verifier.code 0} true;
    assume out_$i68 == 1;
    goto $bb29;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    out_$i69, out_$i70 := out_$i61, out_$i59;
    assume true;
    goto $bb28, $bb30;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i32(out_$i64, 0);
    goto corral_source_split_3522;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i16.i32(out_$i66);
    call {:si_unique_call 515} {:cexpr "len"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_3521;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i16($M.0, out_$p65);
    goto corral_source_split_3520;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p60, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3519;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i16.i32(out_$i63);
    call {:si_unique_call 514} {:cexpr "offset"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_3518;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i16($M.0, out_$p62);
    goto corral_source_split_3517;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p60, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3516;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb26:
    call out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i71, out_$i69, out_$i70, out_$i74, out_$p75, out_$i76, out_$i77, out_$p82, out_$i83, out_$i84, out_$i85, out_$i78, out_$i79, out_$i80, out_$i81, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$p118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i59, out_$p60, out_$i61, out_$i125, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22 := cdc_ncm_rx_fixup_loop_$bb26(in_$p0, in_$p1, in_$p7, out_$i12, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i71, out_$i69, out_$i70, out_$i74, out_$p75, out_$i76, out_$i77, out_$p82, out_$i83, out_$i84, out_$i85, out_$i78, out_$i79, out_$i80, out_$i81, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$p118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i59, out_$p60, out_$i61, out_$i125, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22);
    goto $bb26_last;

  $bb26_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3514;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    out_$i59, out_$p60, out_$i61 := out_$i13, out_$p55, 0;
    goto $bb26;

  $bb58:
    assume out_$i124 == 1;
    assume {:verifier.code 0} true;
    out_$i59, out_$p60, out_$i61 := out_$i121, out_$p123, out_$i122;
    assume false;
    return;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    out_$i125 := out_$i121;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    out_$i124 := $slt.i32(out_$i122, out_$i12);
    goto corral_source_split_3606;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref(out_$p60, $mul.ref(1, 4));
    goto corral_source_split_3605;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i122 := $add.i32(out_$i61, 1);
    call {:si_unique_call 525} {:cexpr "x"} boogie_si_record_i32(out_$i122);
    goto corral_source_split_3604;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    out_$i121 := $add.i32(out_$i59, out_$i67);
    call {:si_unique_call 524} {:cexpr "payload"} boogie_si_record_i32(out_$i121);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} usbnet_skb_return(in_$p0, out_$p112);
    goto corral_source_split_3602;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_20 := $M.0;
    out_cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 522} out_cmdloc_dummy_var_22 := $memcpy.i8(out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_$p116, out_$p120, out_$i115, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_22;
    goto corral_source_split_3601;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref(out_$p118, $mul.ref(out_$i119, 1));
    goto corral_source_split_3600;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    out_$i119 := $sext.i32.i64(out_$i64);
    goto corral_source_split_3599;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    out_$p118 := $load.ref($M.0, out_$p117);
    goto corral_source_split_3598;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(in_$p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3597;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} out_$p116 := skb_put(out_$p112, out_$i67);
    goto corral_source_split_3596;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i115 := $sext.i32.i64(out_$i67);
    call {:si_unique_call 520} {:cexpr "__len"} boogie_si_record_i64(out_$i115);
    goto corral_source_split_3595;

  $bb55:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i64(out_$i113, 0);
    goto corral_source_split_3558;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    out_$i113 := $p2i.ref.i64(out_$p112);
    goto corral_source_split_3557;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} out_$p112 := netdev_alloc_skb_ip_align(out_$p111, out_$i67);
    goto corral_source_split_3556;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    out_$p111 := $load.ref($M.0, out_$p110);
    goto corral_source_split_3555;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_3554;

  $bb44:
    assume !(out_$i85 == 1);
    goto corral_source_split_3553;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    out_$i78, out_$i79, out_$i80, out_$i81 := out_$i61, out_$i59, out_$i64, out_$i67;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    out_$i85 := $sle.i32(out_$i67, 13);
    goto corral_source_split_3551;

  $bb42:
    assume !(out_$i84 == 1);
    goto corral_source_split_3550;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    out_$i78, out_$i79, out_$i80, out_$i81 := out_$i61, out_$i59, out_$i64, out_$i67;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    out_$i84 := $ugt.i32(out_$i67, out_$i83);
    goto corral_source_split_3548;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.0, out_$p82);
    goto corral_source_split_3547;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p7, $mul.ref(0, 416)), $mul.ref(332, 1));
    goto corral_source_split_3546;

  $bb40:
    assume !(out_$i77 == 1);
    goto corral_source_split_3545;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    out_$i78, out_$i79, out_$i80, out_$i81 := out_$i61, out_$i59, out_$i64, out_$i67;
    assume true;
    goto $bb38, $bb40;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    out_$i77 := $ugt.i32(out_$i74, out_$i76);
    goto corral_source_split_3537;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i32($M.0, out_$p75);
    goto corral_source_split_3536;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p1, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_3535;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(out_$i64, out_$i67);
    goto corral_source_split_3534;

  $bb32:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    out_$i69, out_$i70 := out_$i61, out_$i59;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i67, 0);
    goto corral_source_split_3528;

  $bb30:
    assume !(out_$i68 == 1);
    goto corral_source_split_3527;

  $bb23:
    assume out_$i57 == 1;
    goto corral_source_split_3512;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    out_$i58 := out_$i13;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    out_$i57 := $slt.i32(0, out_$i12);
    goto corral_source_split_3510;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    goto corral_source_split_3509;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p23, $mul.ref(out_$i24, 8)), $mul.ref(8, 1));
    goto corral_source_split_3508;

  $bb14:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb51:
    assume out_$i109 == 1;
    goto corral_source_split_3591;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i78, 0);
    goto corral_source_split_3589;

  $bb46:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} out_vslice_dummy_var_125 := __dynamic_netdev_dbg.ref.ref.ref.i32.i32.i32.ref(in_$p3, out_$p107, .str.26, out_$i78, out_$i80, out_$i81, in_$p1);
    goto corral_source_split_3587;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    out_$p107 := $load.ref($M.0, out_$p106);
    goto corral_source_split_3586;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1472)), $mul.ref(472, 1));
    goto corral_source_split_3585;

  $bb47:
    assume out_$i105 == 1;
    goto corral_source_split_3584;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    out_$i105 := $ne.i64(out_$i104, 0);
    goto corral_source_split_3582;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} out_$i104 := ldv__builtin_expect(out_$i103, 0);
    call {:si_unique_call 518} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i104);
    goto corral_source_split_3581;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    out_$i103 := $and.i64(out_$i102, 1);
    goto corral_source_split_3580;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i8.i64(out_$i101);
    goto corral_source_split_3579;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i8($M.39, out_$p100);
    goto corral_source_split_3578;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3577;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, out_$p99, 0);
    goto corral_source_split_3576;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3575;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $M.38 := $store.i24($M.38, out_$p95, out_$i98);
    goto corral_source_split_3574;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    out_$i98 := $or.i24(out_$i97, 1478);
    goto corral_source_split_3573;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    out_$i97 := $and.i24(out_$i96, $sub.i24(0, 262144));
    goto corral_source_split_3572;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i24($M.38, out_$p95);
    goto corral_source_split_3571;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    out_$p95 := $bitcast.ref.ref(out_$p94);
    goto corral_source_split_3570;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3569;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, out_$p93, .str.26);
    goto corral_source_split_3568;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3567;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, out_$p92, .str.3);
    goto corral_source_split_3566;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3565;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, out_$p91, .str.24);
    goto corral_source_split_3564;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3563;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, out_$p90, .str.1);
    goto corral_source_split_3562;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3561;

  $bb45:
    assume out_$i89 == 1;
    goto corral_source_split_3560;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i32(out_$i88, 0);
    goto corral_source_split_3543;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    out_$i88 := $and.i32(out_$i87, 64);
    goto corral_source_split_3542;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.0, out_$p86);
    goto corral_source_split_3541;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1472)), $mul.ref(480, 1));
    goto corral_source_split_3540;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3539;

  $bb43:
    assume {:verifier.code 0} true;
    assume out_$i85 == 1;
    goto $bb39;

  $bb41:
    assume {:verifier.code 0} true;
    assume out_$i84 == 1;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    assume out_$i77 == 1;
    goto $bb39;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_3532;

  $bb60:
    assume {:verifier.code 0} true;
    out_$i73 := out_$i58;
    goto $bb36;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i73 := out_$i79;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i73 := out_$i70;
    goto $bb36;

  $bb34:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb52:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i57 == 1);
    goto $bb25;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    out_$i58 := out_$i125;
    goto $bb25;

  $bb59:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3608;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i12, out_$i13, out_$i14, out_$i15, out_$p21, out_$p22, out_$p23, out_$i24, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$i52, out_$p55, out_$i57, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i71, out_$i69, out_$i70, out_$i72, out_$i74, out_$p75, out_$i76, out_$i77, out_$p82, out_$i83, out_$i84, out_$i85, out_$i78, out_$i79, out_$i80, out_$i81, out_$p86, out_$i87, out_$i88, out_$i89, out_$p90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$i109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$p118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i59, out_$p60, out_$i61, out_$i125, out_$i58, out_$i73, out_$i54, out_$p126, out_$i127, out_$i128, out_$i129, out_$i131, out_$i132, out_$i133, out_$i130, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_vslice_dummy_var_124, out_vslice_dummy_var_125 := cdc_ncm_rx_fixup_loop_$bb8(in_$p0, in_$p1, in_$p2, in_$p3, in_$p7, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i12, out_$i13, out_$i14, out_$i15, out_$p21, out_$p22, out_$p23, out_$i24, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$i52, out_$p55, out_$i57, out_$p62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i71, out_$i69, out_$i70, out_$i72, out_$i74, out_$p75, out_$i76, out_$i77, out_$p82, out_$i83, out_$i84, out_$i85, out_$i78, out_$i79, out_$i80, out_$i81, out_$p86, out_$i87, out_$i88, out_$i89, out_$p90, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$p107, out_$i109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$p118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i59, out_$p60, out_$i61, out_$i125, out_$i58, out_$i73, out_$i54, out_$p126, out_$i127, out_$i128, out_$i129, out_$i131, out_$i132, out_$i133, out_$i130, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_vslice_dummy_var_124, out_vslice_dummy_var_125);
    return;

  exit:
    return;
}



procedure cdc_ncm_rx_fixup_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p7: ref, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i32, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i24, in_$i40: i24, in_$i41: i24, in_$p42: ref, in_$p43: ref, in_$i44: i8, in_$i45: i64, in_$i46: i64, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$p55: ref, in_$i57: i1, in_$p62: ref, in_$i63: i16, in_$i64: i32, in_$p65: ref, in_$i66: i16, in_$i67: i32, in_$i68: i1, in_$i71: i1, in_$i69: i32, in_$i70: i32, in_$i72: i1, in_$i74: i32, in_$p75: ref, in_$i76: i32, in_$i77: i1, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$i85: i1, in_$i78: i32, in_$i79: i32, in_$i80: i32, in_$i81: i32, in_$p86: ref, in_$i87: i32, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i24, in_$i97: i24, in_$i98: i24, in_$p99: ref, in_$p100: ref, in_$i101: i8, in_$i102: i64, in_$i103: i64, in_$i104: i64, in_$i105: i1, in_$p106: ref, in_$p107: ref, in_$i109: i1, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$i115: i64, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$p120: ref, in_$i121: i32, in_$i122: i32, in_$p123: ref, in_$i124: i1, in_$i59: i32, in_$p60: ref, in_$i61: i32, in_$i125: i32, in_$i58: i32, in_$i73: i32, in_$i54: i32, in_$p126: ref, in_$i127: i16, in_$i128: i32, in_$i129: i1, in_$i131: i32, in_$i132: i1, in_$i133: i32, in_$i130: i32, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32) returns (out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i32, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i24, out_$i40: i24, out_$i41: i24, out_$p42: ref, out_$p43: ref, out_$i44: i8, out_$i45: i64, out_$i46: i64, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$p55: ref, out_$i57: i1, out_$p62: ref, out_$i63: i16, out_$i64: i32, out_$p65: ref, out_$i66: i16, out_$i67: i32, out_$i68: i1, out_$i71: i1, out_$i69: i32, out_$i70: i32, out_$i72: i1, out_$i74: i32, out_$p75: ref, out_$i76: i32, out_$i77: i1, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$i85: i1, out_$i78: i32, out_$i79: i32, out_$i80: i32, out_$i81: i32, out_$p86: ref, out_$i87: i32, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i24, out_$i97: i24, out_$i98: i24, out_$p99: ref, out_$p100: ref, out_$i101: i8, out_$i102: i64, out_$i103: i64, out_$i104: i64, out_$i105: i1, out_$p106: ref, out_$p107: ref, out_$i109: i1, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$i115: i64, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$p120: ref, out_$i121: i32, out_$i122: i32, out_$p123: ref, out_$i124: i1, out_$i59: i32, out_$p60: ref, out_$i61: i32, out_$i125: i32, out_$i58: i32, out_$i73: i32, out_$i54: i32, out_$p126: ref, out_$i127: i16, out_$i128: i32, out_$i129: i1, out_$i131: i32, out_$i132: i1, out_$i133: i32, out_$i130: i32, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32);
  modifies $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $CurrAddr, $M.0;



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$i17: i32, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p33: ref, in_$p35: ref, in_$p37: ref, in_$i38: i32, in_$p40: ref, in_$p42: ref, in_$p44: ref, in_$p45: ref, in_$p47: ref, in_$p49: ref, in_$p50: ref, in_$p52: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$p60: ref, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$p70: ref, in_$p72: ref, in_$i73: i32, in_$p75: ref, in_$p77: ref, in_$p78: ref, in_$p80: ref, in_$p82: ref, in_$p83: ref, in_$p85: ref, in_$p87: ref, in_$p88: ref, in_$i93: i32, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i1, in_$i122: i32, in_$i123: i1, in_$i124: i32, in_$i125: i1, in_$i126: i32, in_$i127: i1, in_$i129: i32, in_$i130: i1, in_$i131: i32, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$p138: ref, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$p143: ref, in_$i145: i32, in_$i146: i1, in_$i147: i32, in_$i148: i1, in_$i149: i1, in_$i150: i1, in_$i151: i1, in_$i152: i1, in_$i153: i1, in_$i154: i1, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$p158: ref, in_$i159: i32, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$p164: ref, in_$i165: i32, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$i171: i32, in_$i172: i1, in_$p173: ref, in_$i175: i32, in_$i176: i1, in_$p177: ref, in_$p178: ref, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$p183: ref, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$p194: ref, in_$i195: i32, in_$i196: i32, in_$i197: i1, in_$i198: i32, in_$i199: i32, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i206: i32, in_$i207: i1, in_$i208: i32, in_$i209: i1, in_$i210: i1, in_$i211: i1, in_$i212: i1, in_$i213: i1, in_$i214: i1, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$i218: i32, in_$i219: i32, in_$i220: i1, in_$i221: i32, in_$i222: i32, in_$i223: i32, in_$i224: i1, in_$p225: ref, in_$p226: ref, in_$i227: i32, in_$i228: i32, in_$i229: i32, in_$i230: i1, in_$i231: i32, in_$i232: i1, in_$p233: ref, in_$i234: i32, in_$i235: i32, in_$i236: i1, in_$i237: i32, in_$i238: i1, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$i242: i32, in_$i243: i32, in_$i244: i32, in_$i245: i1, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$i249: i32, in_$i250: i32, in_$i251: i32, in_$i252: i1, in_$p253: ref, in_$i254: i32, in_$i255: i32, in_$i256: i1, in_$i257: i32, in_$i258: i1, in_$i259: i32, in_$i260: i1, in_$i261: i1, in_$i262: i1, in_$i263: i32, in_$i264: i1, in_$p265: ref, in_$p266: ref, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$p271: ref, in_$i273: i32, in_$i274: i1, in_$i275: i32, in_$i276: i1, in_$i277: i1, in_$i278: i1, in_$i279: i32, in_$i280: i1, in_$i281: i32, in_$i282: i1, in_$i283: i32, in_$i284: i1, in_$i285: i32, in_$i286: i32, in_$i287: i1, in_$i288: i32, in_$i289: i1, in_$i290: i32, in_$i291: i1, in_$i292: i32, in_$i293: i1, in_$i294: i1, in_$i295: i1, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$p299: ref, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$p304: ref, in_$i306: i32, in_$i307: i1, in_$i308: i32, in_$i309: i1, in_$i310: i32, in_$i311: i1, in_$i313: i32, in_$i314: i1, in_$i315: i32, in_$i316: i1, in_$i317: i32, in_$i318: i1, in_$i320: i32, in_$i321: i1, in_$i322: i32, in_$i323: i1, in_$i324: i1, in_$i325: i1, in_$i326: i1, in_$i327: i1, in_$i328: i1, in_$i329: i1, in_$i330: i32, in_$i331: i1, in_$p332: ref, in_$p333: ref, in_$i334: i32, in_$i336: i32, in_$i337: i1, in_$p338: ref, in_$p339: ref, in_$i340: i32, in_$i342: i32, in_$i343: i1, in_$p344: ref, in_$i346: i32, in_$i347: i1, in_$p348: ref, in_$i350: i32, in_$i351: i1, in_$p352: ref, in_$p353: ref, in_$i355: i32, in_$i356: i1, in_$p357: ref, in_$p358: ref, in_$i360: i32, in_$i361: i1, in_$p362: ref, in_$p363: ref, in_$i364: i32, in_$i365: i32, in_$i366: i32, in_$i367: i1, in_$p368: ref, in_$p369: ref, in_$i370: i32, in_$i371: i32, in_$i372: i1, in_$i373: i32, in_$i374: i32, in_$i375: i32, in_$i376: i1, in_$p377: ref, in_$i378: i32, in_$i379: i1, in_$p380: ref, in_$i381: i32, in_$i382: i1, in_$i383: i32, in_$i384: i1, in_$i385: i32, in_$i386: i1, in_$i388: i32, in_$i389: i1, in_$i390: i32, in_$i391: i1, in_$i392: i32, in_$i393: i1, in_$i395: i32, in_$i396: i1, in_$i397: i32, in_$i398: i1, in_$i399: i32, in_$i400: i1, in_$i402: i32, in_$i403: i1, in_$i404: i32, in_$i405: i1, in_$i406: i1, in_$i407: i1, in_$i408: i32, in_$i409: i1, in_$p410: ref, in_$p411: ref, in_$i413: i32, in_$i414: i1, in_$p415: ref, in_$p416: ref, in_$i418: i32, in_$i419: i1, in_$i420: i32, in_$i421: i1, in_$i422: i32, in_$i423: i1, in_$i425: i32, in_$i426: i1, in_$i427: i32, in_$i428: i1, in_$i429: i1, in_$i430: i1, in_$i431: i1, in_$i432: i1, in_$i433: i1, in_$i434: i1, in_$i435: i32, in_$i436: i1, in_$p437: ref, in_$p438: ref, in_$i439: i32, in_$i441: i32, in_$i442: i1, in_$p443: ref, in_$p444: ref, in_$i445: i32, in_$i447: i32, in_$i448: i1, in_$p449: ref, in_$i451: i32, in_$i452: i1, in_$p453: ref, in_$i455: i32, in_$i456: i1, in_$p457: ref, in_$p458: ref, in_$i460: i32, in_$i461: i1, in_$p462: ref, in_$p463: ref, in_$i465: i32, in_$i466: i1, in_$p467: ref, in_$p468: ref, in_$i469: i32, in_$i470: i32, in_$i471: i32, in_$i472: i1, in_$p473: ref, in_$p474: ref, in_$i475: i32, in_$i476: i32, in_$i477: i1, in_$i478: i32, in_$i479: i32, in_$i480: i32, in_$i481: i1, in_$p482: ref, in_$i483: i32, in_$i484: i1, in_$p485: ref, in_$i486: i32, in_$i487: i1, in_$i488: i32, in_$i489: i1, in_$i490: i1, in_$i491: i1, in_$i492: i1, in_$i493: i1, in_$i494: i1, in_$i495: i1, in_$i496: i1, in_$i497: i1, in_$i498: i1, in_$i499: i1, in_$i500: i1, in_$i501: i32, in_$i502: i1, in_$p503: ref, in_$i505: i32, in_$i506: i1, in_$p507: ref, in_$p508: ref, in_$i510: i32, in_$i511: i1, in_$p512: ref, in_$i513: i32, in_$i514: i1, in_$p515: ref, in_$i516: i32, in_$i517: i1, in_$p518: ref, in_$i520: i32, in_$i521: i1, in_$p522: ref, in_$p523: ref, in_$i525: i32, in_$i526: i1, in_$p527: ref, in_$i528: i32, in_$i529: i1, in_$p530: ref, in_$i531: i32, in_$i532: i1, in_$p533: ref, in_$i535: i32, in_$i536: i1, in_$p537: ref, in_$i539: i32, in_$i540: i1, in_$p541: ref, in_$i543: i32, in_$i544: i1, in_$i545: i32, in_$i546: i1, in_$i547: i32, in_$i548: i1, in_$i550: i32, in_$i551: i1, in_$i552: i32, in_$i553: i1, in_$i554: i32, in_$i555: i1, in_vslice_dummy_var_130: i64, in_vslice_dummy_var_131: i64, in_vslice_dummy_var_132: i64, in_vslice_dummy_var_133: i64, in_vslice_dummy_var_134: ref, in_vslice_dummy_var_135: ref, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i64, in_vslice_dummy_var_141: i64, in_vslice_dummy_var_142: i64, in_vslice_dummy_var_143: i64, in_vslice_dummy_var_144: i64, in_vslice_dummy_var_145: i64, in_vslice_dummy_var_146: ref, in_vslice_dummy_var_147: ref, in_vslice_dummy_var_148: i32, in_vslice_dummy_var_149: i32, in_vslice_dummy_var_150: i32, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i64, in_vslice_dummy_var_153: i64, in_vslice_dummy_var_154: i64, in_vslice_dummy_var_155: i64, in_vslice_dummy_var_156: i64, in_vslice_dummy_var_157: i64, in_vslice_dummy_var_158: ref, in_vslice_dummy_var_159: ref, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: i32, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i32, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32, in_vslice_dummy_var_171: i64, in_vslice_dummy_var_172: i64) returns (out_$i93: i32, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i1, out_$i122: i32, out_$i123: i1, out_$i124: i32, out_$i125: i1, out_$i126: i32, out_$i127: i1, out_$i129: i32, out_$i130: i1, out_$i131: i32, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$p138: ref, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$p143: ref, out_$i145: i32, out_$i146: i1, out_$i147: i32, out_$i148: i1, out_$i149: i1, out_$i150: i1, out_$i151: i1, out_$i152: i1, out_$i153: i1, out_$i154: i1, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$p158: ref, out_$i159: i32, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$p164: ref, out_$i165: i32, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$i171: i32, out_$i172: i1, out_$p173: ref, out_$i175: i32, out_$i176: i1, out_$p177: ref, out_$p178: ref, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$p183: ref, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$p194: ref, out_$i195: i32, out_$i196: i32, out_$i197: i1, out_$i198: i32, out_$i199: i32, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i206: i32, out_$i207: i1, out_$i208: i32, out_$i209: i1, out_$i210: i1, out_$i211: i1, out_$i212: i1, out_$i213: i1, out_$i214: i1, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$i218: i32, out_$i219: i32, out_$i220: i1, out_$i221: i32, out_$i222: i32, out_$i223: i32, out_$i224: i1, out_$p225: ref, out_$p226: ref, out_$i227: i32, out_$i228: i32, out_$i229: i32, out_$i230: i1, out_$i231: i32, out_$i232: i1, out_$p233: ref, out_$i234: i32, out_$i235: i32, out_$i236: i1, out_$i237: i32, out_$i238: i1, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$i242: i32, out_$i243: i32, out_$i244: i32, out_$i245: i1, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$i249: i32, out_$i250: i32, out_$i251: i32, out_$i252: i1, out_$p253: ref, out_$i254: i32, out_$i255: i32, out_$i256: i1, out_$i257: i32, out_$i258: i1, out_$i259: i32, out_$i260: i1, out_$i261: i1, out_$i262: i1, out_$i263: i32, out_$i264: i1, out_$p265: ref, out_$p266: ref, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$p271: ref, out_$i273: i32, out_$i274: i1, out_$i275: i32, out_$i276: i1, out_$i277: i1, out_$i278: i1, out_$i279: i32, out_$i280: i1, out_$i281: i32, out_$i282: i1, out_$i283: i32, out_$i284: i1, out_$i285: i32, out_$i286: i32, out_$i287: i1, out_$i288: i32, out_$i289: i1, out_$i290: i32, out_$i291: i1, out_$i292: i32, out_$i293: i1, out_$i294: i1, out_$i295: i1, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$p299: ref, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$p304: ref, out_$i306: i32, out_$i307: i1, out_$i308: i32, out_$i309: i1, out_$i310: i32, out_$i311: i1, out_$i313: i32, out_$i314: i1, out_$i315: i32, out_$i316: i1, out_$i317: i32, out_$i318: i1, out_$i320: i32, out_$i321: i1, out_$i322: i32, out_$i323: i1, out_$i324: i1, out_$i325: i1, out_$i326: i1, out_$i327: i1, out_$i328: i1, out_$i329: i1, out_$i330: i32, out_$i331: i1, out_$p332: ref, out_$p333: ref, out_$i334: i32, out_$i336: i32, out_$i337: i1, out_$p338: ref, out_$p339: ref, out_$i340: i32, out_$i342: i32, out_$i343: i1, out_$p344: ref, out_$i346: i32, out_$i347: i1, out_$p348: ref, out_$i350: i32, out_$i351: i1, out_$p352: ref, out_$p353: ref, out_$i355: i32, out_$i356: i1, out_$p357: ref, out_$p358: ref, out_$i360: i32, out_$i361: i1, out_$p362: ref, out_$p363: ref, out_$i364: i32, out_$i365: i32, out_$i366: i32, out_$i367: i1, out_$p368: ref, out_$p369: ref, out_$i370: i32, out_$i371: i32, out_$i372: i1, out_$i373: i32, out_$i374: i32, out_$i375: i32, out_$i376: i1, out_$p377: ref, out_$i378: i32, out_$i379: i1, out_$p380: ref, out_$i381: i32, out_$i382: i1, out_$i383: i32, out_$i384: i1, out_$i385: i32, out_$i386: i1, out_$i388: i32, out_$i389: i1, out_$i390: i32, out_$i391: i1, out_$i392: i32, out_$i393: i1, out_$i395: i32, out_$i396: i1, out_$i397: i32, out_$i398: i1, out_$i399: i32, out_$i400: i1, out_$i402: i32, out_$i403: i1, out_$i404: i32, out_$i405: i1, out_$i406: i1, out_$i407: i1, out_$i408: i32, out_$i409: i1, out_$p410: ref, out_$p411: ref, out_$i413: i32, out_$i414: i1, out_$p415: ref, out_$p416: ref, out_$i418: i32, out_$i419: i1, out_$i420: i32, out_$i421: i1, out_$i422: i32, out_$i423: i1, out_$i425: i32, out_$i426: i1, out_$i427: i32, out_$i428: i1, out_$i429: i1, out_$i430: i1, out_$i431: i1, out_$i432: i1, out_$i433: i1, out_$i434: i1, out_$i435: i32, out_$i436: i1, out_$p437: ref, out_$p438: ref, out_$i439: i32, out_$i441: i32, out_$i442: i1, out_$p443: ref, out_$p444: ref, out_$i445: i32, out_$i447: i32, out_$i448: i1, out_$p449: ref, out_$i451: i32, out_$i452: i1, out_$p453: ref, out_$i455: i32, out_$i456: i1, out_$p457: ref, out_$p458: ref, out_$i460: i32, out_$i461: i1, out_$p462: ref, out_$p463: ref, out_$i465: i32, out_$i466: i1, out_$p467: ref, out_$p468: ref, out_$i469: i32, out_$i470: i32, out_$i471: i32, out_$i472: i1, out_$p473: ref, out_$p474: ref, out_$i475: i32, out_$i476: i32, out_$i477: i1, out_$i478: i32, out_$i479: i32, out_$i480: i32, out_$i481: i1, out_$p482: ref, out_$i483: i32, out_$i484: i1, out_$p485: ref, out_$i486: i32, out_$i487: i1, out_$i488: i32, out_$i489: i1, out_$i490: i1, out_$i491: i1, out_$i492: i1, out_$i493: i1, out_$i494: i1, out_$i495: i1, out_$i496: i1, out_$i497: i1, out_$i498: i1, out_$i499: i1, out_$i500: i1, out_$i501: i32, out_$i502: i1, out_$p503: ref, out_$i505: i32, out_$i506: i1, out_$p507: ref, out_$p508: ref, out_$i510: i32, out_$i511: i1, out_$p512: ref, out_$i513: i32, out_$i514: i1, out_$p515: ref, out_$i516: i32, out_$i517: i1, out_$p518: ref, out_$i520: i32, out_$i521: i1, out_$p522: ref, out_$p523: ref, out_$i525: i32, out_$i526: i1, out_$p527: ref, out_$i528: i32, out_$i529: i1, out_$p530: ref, out_$i531: i32, out_$i532: i1, out_$p533: ref, out_$i535: i32, out_$i536: i1, out_$p537: ref, out_$i539: i32, out_$i540: i1, out_$p541: ref, out_$i543: i32, out_$i544: i1, out_$i545: i32, out_$i546: i1, out_$i547: i32, out_$i548: i1, out_$i550: i32, out_$i551: i1, out_$i552: i32, out_$i553: i1, out_$i554: i32, out_$i555: i1, out_vslice_dummy_var_130: i64, out_vslice_dummy_var_131: i64, out_vslice_dummy_var_132: i64, out_vslice_dummy_var_133: i64, out_vslice_dummy_var_134: ref, out_vslice_dummy_var_135: ref, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i64, out_vslice_dummy_var_141: i64, out_vslice_dummy_var_142: i64, out_vslice_dummy_var_143: i64, out_vslice_dummy_var_144: i64, out_vslice_dummy_var_145: i64, out_vslice_dummy_var_146: ref, out_vslice_dummy_var_147: ref, out_vslice_dummy_var_148: i32, out_vslice_dummy_var_149: i32, out_vslice_dummy_var_150: i32, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i64, out_vslice_dummy_var_153: i64, out_vslice_dummy_var_154: i64, out_vslice_dummy_var_155: i64, out_vslice_dummy_var_156: i64, out_vslice_dummy_var_157: i64, out_vslice_dummy_var_158: ref, out_vslice_dummy_var_159: ref, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: i32, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i32, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32, out_vslice_dummy_var_171: i64, out_vslice_dummy_var_172: i64)
{

  entry:
    out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p137, out_$p138, out_$i140, out_$i141, out_$p142, out_$p143, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$p157, out_$p158, out_$i159, out_$i161, out_$i162, out_$p163, out_$p164, out_$i165, out_$i167, out_$i168, out_$p169, out_$i171, out_$i172, out_$p173, out_$i175, out_$i176, out_$p177, out_$p178, out_$i180, out_$i181, out_$p182, out_$p183, out_$i185, out_$i186, out_$p187, out_$p188, out_$i189, out_$i190, out_$i191, out_$i192, out_$p193, out_$p194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$p225, out_$p226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$p253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$p265, out_$p266, out_$i268, out_$i269, out_$p270, out_$p271, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$p299, out_$i301, out_$i302, out_$p303, out_$p304, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$p332, out_$p333, out_$i334, out_$i336, out_$i337, out_$p338, out_$p339, out_$i340, out_$i342, out_$i343, out_$p344, out_$i346, out_$i347, out_$p348, out_$i350, out_$i351, out_$p352, out_$p353, out_$i355, out_$i356, out_$p357, out_$p358, out_$i360, out_$i361, out_$p362, out_$p363, out_$i364, out_$i365, out_$i366, out_$i367, out_$p368, out_$p369, out_$i370, out_$i371, out_$i372, out_$i373, out_$i374, out_$i375, out_$i376, out_$p377, out_$i378, out_$i379, out_$p380, out_$i381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i386, out_$i388, out_$i389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$p410, out_$p411, out_$i413, out_$i414, out_$p415, out_$p416, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$p437, out_$p438, out_$i439, out_$i441, out_$i442, out_$p443, out_$p444, out_$i445, out_$i447, out_$i448, out_$p449, out_$i451, out_$i452, out_$p453, out_$i455, out_$i456, out_$p457, out_$p458, out_$i460, out_$i461, out_$p462, out_$p463, out_$i465, out_$i466, out_$p467, out_$p468, out_$i469, out_$i470, out_$i471, out_$i472, out_$p473, out_$p474, out_$i475, out_$i476, out_$i477, out_$i478, out_$i479, out_$i480, out_$i481, out_$p482, out_$i483, out_$i484, out_$p485, out_$i486, out_$i487, out_$i488, out_$i489, out_$i490, out_$i491, out_$i492, out_$i493, out_$i494, out_$i495, out_$i496, out_$i497, out_$i498, out_$i499, out_$i500, out_$i501, out_$i502, out_$p503, out_$i505, out_$i506, out_$p507, out_$p508, out_$i510, out_$i511, out_$p512, out_$i513, out_$i514, out_$p515, out_$i516, out_$i517, out_$p518, out_$i520, out_$i521, out_$p522, out_$p523, out_$i525, out_$i526, out_$p527, out_$i528, out_$i529, out_$p530, out_$i531, out_$i532, out_$p533, out_$i535, out_$i536, out_$p537, out_$i539, out_$i540, out_$p541, out_$i543, out_$i544, out_$i545, out_$i546, out_$i547, out_$i548, out_$i550, out_$i551, out_$i552, out_$i553, out_$i554, out_$i555, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172 := in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$p137, in_$p138, in_$i140, in_$i141, in_$p142, in_$p143, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$p157, in_$p158, in_$i159, in_$i161, in_$i162, in_$p163, in_$p164, in_$i165, in_$i167, in_$i168, in_$p169, in_$i171, in_$i172, in_$p173, in_$i175, in_$i176, in_$p177, in_$p178, in_$i180, in_$i181, in_$p182, in_$p183, in_$i185, in_$i186, in_$p187, in_$p188, in_$i189, in_$i190, in_$i191, in_$i192, in_$p193, in_$p194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$p202, in_$i203, in_$i204, in_$p205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$p217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$p225, in_$p226, in_$i227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$p233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$p241, in_$i242, in_$i243, in_$i244, in_$i245, in_$i246, in_$i247, in_$p248, in_$i249, in_$i250, in_$i251, in_$i252, in_$p253, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$p265, in_$p266, in_$i268, in_$i269, in_$p270, in_$p271, in_$i273, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$i279, in_$i280, in_$i281, in_$i282, in_$i283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290, in_$i291, in_$i292, in_$i293, in_$i294, in_$i295, in_$i296, in_$i297, in_$p298, in_$p299, in_$i301, in_$i302, in_$p303, in_$p304, in_$i306, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i313, in_$i314, in_$i315, in_$i316, in_$i317, in_$i318, in_$i320, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$i326, in_$i327, in_$i328, in_$i329, in_$i330, in_$i331, in_$p332, in_$p333, in_$i334, in_$i336, in_$i337, in_$p338, in_$p339, in_$i340, in_$i342, in_$i343, in_$p344, in_$i346, in_$i347, in_$p348, in_$i350, in_$i351, in_$p352, in_$p353, in_$i355, in_$i356, in_$p357, in_$p358, in_$i360, in_$i361, in_$p362, in_$p363, in_$i364, in_$i365, in_$i366, in_$i367, in_$p368, in_$p369, in_$i370, in_$i371, in_$i372, in_$i373, in_$i374, in_$i375, in_$i376, in_$p377, in_$i378, in_$i379, in_$p380, in_$i381, in_$i382, in_$i383, in_$i384, in_$i385, in_$i386, in_$i388, in_$i389, in_$i390, in_$i391, in_$i392, in_$i393, in_$i395, in_$i396, in_$i397, in_$i398, in_$i399, in_$i400, in_$i402, in_$i403, in_$i404, in_$i405, in_$i406, in_$i407, in_$i408, in_$i409, in_$p410, in_$p411, in_$i413, in_$i414, in_$p415, in_$p416, in_$i418, in_$i419, in_$i420, in_$i421, in_$i422, in_$i423, in_$i425, in_$i426, in_$i427, in_$i428, in_$i429, in_$i430, in_$i431, in_$i432, in_$i433, in_$i434, in_$i435, in_$i436, in_$p437, in_$p438, in_$i439, in_$i441, in_$i442, in_$p443, in_$p444, in_$i445, in_$i447, in_$i448, in_$p449, in_$i451, in_$i452, in_$p453, in_$i455, in_$i456, in_$p457, in_$p458, in_$i460, in_$i461, in_$p462, in_$p463, in_$i465, in_$i466, in_$p467, in_$p468, in_$i469, in_$i470, in_$i471, in_$i472, in_$p473, in_$p474, in_$i475, in_$i476, in_$i477, in_$i478, in_$i479, in_$i480, in_$i481, in_$p482, in_$i483, in_$i484, in_$p485, in_$i486, in_$i487, in_$i488, in_$i489, in_$i490, in_$i491, in_$i492, in_$i493, in_$i494, in_$i495, in_$i496, in_$i497, in_$i498, in_$i499, in_$i500, in_$i501, in_$i502, in_$p503, in_$i505, in_$i506, in_$p507, in_$p508, in_$i510, in_$i511, in_$p512, in_$i513, in_$i514, in_$p515, in_$i516, in_$i517, in_$p518, in_$i520, in_$i521, in_$p522, in_$p523, in_$i525, in_$i526, in_$p527, in_$i528, in_$i529, in_$p530, in_$i531, in_$i532, in_$p533, in_$i535, in_$i536, in_$p537, in_$i539, in_$i540, in_$p541, in_$i543, in_$i544, in_$i545, in_$i546, in_$i547, in_$i548, in_$i550, in_$i551, in_$i552, in_$i553, in_$i554, in_$i555, in_vslice_dummy_var_130, in_vslice_dummy_var_131, in_vslice_dummy_var_132, in_vslice_dummy_var_133, in_vslice_dummy_var_134, in_vslice_dummy_var_135, in_vslice_dummy_var_136, in_vslice_dummy_var_137, in_vslice_dummy_var_138, in_vslice_dummy_var_139, in_vslice_dummy_var_140, in_vslice_dummy_var_141, in_vslice_dummy_var_142, in_vslice_dummy_var_143, in_vslice_dummy_var_144, in_vslice_dummy_var_145, in_vslice_dummy_var_146, in_vslice_dummy_var_147, in_vslice_dummy_var_148, in_vslice_dummy_var_149, in_vslice_dummy_var_150, in_vslice_dummy_var_151, in_vslice_dummy_var_152, in_vslice_dummy_var_153, in_vslice_dummy_var_154, in_vslice_dummy_var_155, in_vslice_dummy_var_156, in_vslice_dummy_var_157, in_vslice_dummy_var_158, in_vslice_dummy_var_159, in_vslice_dummy_var_160, in_vslice_dummy_var_161, in_vslice_dummy_var_162, in_vslice_dummy_var_163, in_vslice_dummy_var_164, in_vslice_dummy_var_165, in_vslice_dummy_var_166, in_vslice_dummy_var_167, in_vslice_dummy_var_168, in_vslice_dummy_var_169, in_vslice_dummy_var_170, in_vslice_dummy_var_171, in_vslice_dummy_var_172;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 813} out_$i93 := __VERIFIER_nondet_int();
    call {:si_unique_call 814} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i93);
    call {:si_unique_call 815} {:cexpr "tmp___56"} boogie_si_record_i32(out_$i93);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb58_dummy;

  $bb564:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb562:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb550:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb538:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb473:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb374:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb362:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb47:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 820} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_4643;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} out_vslice_dummy_var_130 := cdc_ncm_show_wNdpInPayloadRemainder(in_$p6, in_$p8, in_$p4);
    goto corral_source_split_4642;

  $bb51:
    assume out_$i120 == 1;
    goto corral_source_split_4641;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 1);
    goto corral_source_split_4639;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    out_$i119 := $M.68;
    goto corral_source_split_4638;

  $bb49:
    assume out_$i118 == 1;
    goto corral_source_split_4637;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_4635:
    assume {:verifier.code 1} true;
    call {:si_unique_call 816} out_$i117 := __VERIFIER_nondet_int();
    call {:si_unique_call 817} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i117);
    call {:si_unique_call 818} {:cexpr "tmp___57"} boogie_si_record_i32(out_$i117);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb46:
    assume out_$i116 == 1;
    goto corral_source_split_4635;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    out_$i116 := $ne.i32(out_$i115, 0);
    goto corral_source_split_4633;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    out_$i115 := $M.68;
    goto corral_source_split_4632;

  $bb44:
    assume out_$i114 == 1;
    goto corral_source_split_4631;

  $bb42:
    assume out_$i113 == 1;
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i93, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb36:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$i113 := $slt.i32(out_$i93, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb26:
    assume out_$i105 == 1;
    assume {:verifier.code 0} true;
    out_$i110 := $slt.i32(out_$i93, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb3:
    assume out_$i94 == 1;
    assume {:verifier.code 0} true;
    out_$i105 := $slt.i32(out_$i93, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i94 := $slt.i32(out_$i93, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} ldv_stop();
    goto corral_source_split_4645;

  $bb50:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb60:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb65:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 826} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4655;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} out_vslice_dummy_var_131 := cdc_ncm_show_wNdpOutPayloadRemainder(in_$p11, in_$p13, in_$p9);
    goto corral_source_split_4654;

  $bb64:
    assume out_$i127 == 1;
    goto corral_source_split_4653;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i32(out_$i126, 1);
    goto corral_source_split_4651;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    out_$i126 := $M.69;
    goto corral_source_split_4650;

  $bb62:
    assume out_$i125 == 1;
    goto corral_source_split_4649;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i124, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_4647:
    assume {:verifier.code 1} true;
    call {:si_unique_call 822} out_$i124 := __VERIFIER_nondet_int();
    call {:si_unique_call 823} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i124);
    call {:si_unique_call 824} {:cexpr "tmp___58"} boogie_si_record_i32(out_$i124);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume out_$i123 == 1;
    goto corral_source_split_4647;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    out_$i123 := $ne.i32(out_$i122, 0);
    goto corral_source_split_4629;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    out_$i122 := $M.69;
    goto corral_source_split_4628;

  $bb43:
    assume !(out_$i113 == 1);
    goto corral_source_split_4627;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} ldv_stop();
    goto corral_source_split_4657;

  $bb63:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb72:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb82:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 832} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_4673;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} out_vslice_dummy_var_132 := cdc_ncm_store_rx_max(out_$p137, out_$p138, in_$p14, in_$i15);
    goto corral_source_split_4672;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    out_$p138 := $M.55;
    goto corral_source_split_4671;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    out_$p137 := $M.54;
    goto corral_source_split_4670;

  $bb81:
    assume out_$i136 == 1;
    goto corral_source_split_4669;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    out_$i136 := $eq.i32(out_$i135, 1);
    goto corral_source_split_4667;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    out_$i135 := $M.70;
    goto corral_source_split_4666;

  $bb79:
    assume out_$i134 == 1;
    goto corral_source_split_4665;

  $bb74:
    assume out_$i132 == 1;
    assume {:verifier.code 0} true;
    out_$i134 := $eq.i32(out_$i131, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb73:
    assume {:verifier.code 0} true;
    out_$i132 := $slt.i32(out_$i131, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_4659:
    assume {:verifier.code 1} true;
    call {:si_unique_call 828} out_$i131 := __VERIFIER_nondet_int();
    call {:si_unique_call 829} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i131);
    call {:si_unique_call 830} {:cexpr "tmp___59"} boogie_si_record_i32(out_$i131);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb71:
    assume out_$i130 == 1;
    goto corral_source_split_4659;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    out_$i130 := $ne.i32(out_$i129, 0);
    goto corral_source_split_4617;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    out_$i129 := $M.70;
    goto corral_source_split_4616;

  $bb38:
    assume out_$i111 == 1;
    goto corral_source_split_4615;

  $bb37:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    out_$i111 := $slt.i32(out_$i93, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb86:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 834} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_4679;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} out_vslice_dummy_var_133 := cdc_ncm_show_rx_max(out_$p142, out_$p143, in_$p16);
    goto corral_source_split_4678;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    out_$p143 := $M.55;
    goto corral_source_split_4677;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    out_$p142 := $M.54;
    goto corral_source_split_4676;

  $bb85:
    assume out_$i141 == 1;
    goto corral_source_split_4675;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i32(out_$i140, 1);
    goto corral_source_split_4663;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    out_$i140 := $M.70;
    goto corral_source_split_4662;

  $bb76:
    assume out_$i133 == 1;
    goto corral_source_split_4661;

  $bb75:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i32(out_$i131, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} ldv_stop();
    goto corral_source_split_4681;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb77:
    assume {:verifier.code 0} true;
    assume !(out_$i133 == 1);
    goto $bb78;

  $bb80:
    assume {:verifier.code 0} true;
    assume !(out_$i134 == 1);
    goto $bb78;

  $bb92:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb113:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 842} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4724;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} out_vslice_dummy_var_135 := cdc_ncm_tx_fixup(out_$p163, out_$p164, out_$i165);
    goto corral_source_split_4723;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    out_$i165 := $load.i32($M.64, in_$p0);
    goto corral_source_split_4722;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    out_$p164 := $M.46;
    goto corral_source_split_4721;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    out_$p163 := $M.44;
    goto corral_source_split_4720;

  $bb112:
    assume out_$i162 == 1;
    goto corral_source_split_4719;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, 2);
    goto corral_source_split_4717;

  $bb111:
    assume {:verifier.code 0} true;
    out_$i161 := $M.71;
    goto corral_source_split_4716;

  $bb110:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 840} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4714;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} out_vslice_dummy_var_134 := cdc_ncm_tx_fixup(out_$p157, out_$p158, out_$i159);
    goto corral_source_split_4713;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    out_$i159 := $load.i32($M.64, in_$p0);
    goto corral_source_split_4712;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    out_$p158 := $M.46;
    goto corral_source_split_4711;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    out_$p157 := $M.44;
    goto corral_source_split_4710;

  $bb109:
    assume out_$i156 == 1;
    goto corral_source_split_4709;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i32(out_$i155, 1);
    goto corral_source_split_4707;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    out_$i155 := $M.71;
    goto corral_source_split_4706;

  $bb107:
    assume out_$i154 == 1;
    goto corral_source_split_4705;

  $bb103:
    assume out_$i152 == 1;
    assume {:verifier.code 0} true;
    out_$i154 := $eq.i32(out_$i147, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb94:
    assume out_$i148 == 1;
    assume {:verifier.code 0} true;
    out_$i152 := $slt.i32(out_$i147, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb93:
    assume {:verifier.code 0} true;
    out_$i148 := $slt.i32(out_$i147, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_4683:
    assume {:verifier.code 1} true;
    call {:si_unique_call 836} out_$i147 := __VERIFIER_nondet_int();
    call {:si_unique_call 837} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i147);
    call {:si_unique_call 838} {:cexpr "tmp___60"} boogie_si_record_i32(out_$i147);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb91:
    assume out_$i146 == 1;
    goto corral_source_split_4683;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    out_$i146 := $ne.i32(out_$i145, 0);
    goto corral_source_split_4621;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    out_$i145 := $M.71;
    goto corral_source_split_4620;

  $bb40:
    assume out_$i112 == 1;
    goto corral_source_split_4619;

  $bb39:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    out_$i112 := $slt.i32(out_$i93, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb120:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 846} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4737;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} out_vslice_dummy_var_137 := usbnet_manage_power(out_$p173, in_$i17);
    goto corral_source_split_4736;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    out_$p173 := $M.44;
    goto corral_source_split_4735;

  $bb119:
    assume out_$i172 == 1;
    goto corral_source_split_4734;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    out_$i172 := $eq.i32(out_$i171, 2);
    goto corral_source_split_4732;

  $bb118:
    assume {:verifier.code 0} true;
    out_$i171 := $M.71;
    goto corral_source_split_4731;

  $bb117:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 844} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4729;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} out_vslice_dummy_var_136 := usbnet_manage_power(out_$p169, in_$i17);
    goto corral_source_split_4728;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    out_$p169 := $M.44;
    goto corral_source_split_4727;

  $bb116:
    assume out_$i168 == 1;
    goto corral_source_split_4726;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 1);
    goto corral_source_split_4699;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    out_$i167 := $M.71;
    goto corral_source_split_4698;

  $bb105:
    assume out_$i153 == 1;
    goto corral_source_split_4697;

  $bb104:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    out_$i153 := $slt.i32(out_$i147, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb126:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 850} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4752;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} out_vslice_dummy_var_139 := cdc_ncm_rx_fixup(out_$p182, out_$p183);
    goto corral_source_split_4751;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    out_$p183 := $M.46;
    goto corral_source_split_4750;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    out_$p182 := $M.44;
    goto corral_source_split_4749;

  $bb125:
    assume out_$i181 == 1;
    goto corral_source_split_4748;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i180, 2);
    goto corral_source_split_4746;

  $bb124:
    assume {:verifier.code 0} true;
    out_$i180 := $M.71;
    goto corral_source_split_4745;

  $bb123:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 848} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4743;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} out_vslice_dummy_var_138 := cdc_ncm_rx_fixup(out_$p177, out_$p178);
    goto corral_source_split_4742;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    out_$p178 := $M.46;
    goto corral_source_split_4741;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    out_$p177 := $M.44;
    goto corral_source_split_4740;

  $bb122:
    assume out_$i176 == 1;
    goto corral_source_split_4739;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    out_$i176 := $eq.i32(out_$i175, 1);
    goto corral_source_split_4703;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    out_$i175 := $M.71;
    goto corral_source_split_4702;

  $bb106:
    assume !(out_$i153 == 1);
    goto corral_source_split_4701;

  $bb129:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $M.74 := out_$i190;
    call {:si_unique_call 853} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i190);
    goto corral_source_split_4761;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    out_$i190 := $sub.i32(out_$i189, 1);
    goto corral_source_split_4760;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    out_$i189 := $M.74;
    goto corral_source_split_4759;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 852} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4758;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} cdc_ncm_unbind(out_$p187, out_$p188);
    goto corral_source_split_4757;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    out_$p188 := $M.45;
    goto corral_source_split_4756;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    out_$p187 := $M.44;
    goto corral_source_split_4755;

  $bb128:
    assume out_$i186 == 1;
    goto corral_source_split_4754;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    out_$i186 := $eq.i32(out_$i185, 2);
    goto corral_source_split_4687;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    out_$i185 := $M.71;
    goto corral_source_split_4686;

  $bb96:
    assume out_$i149 == 1;
    goto corral_source_split_4685;

  $bb95:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    out_$i149 := $slt.i32(out_$i147, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb132:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb134:
    assume !(out_$i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $M.74 := out_$i199;
    call {:si_unique_call 857} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i199);
    goto corral_source_split_4775;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    out_$i199 := $add.i32(out_$i198, 1);
    goto corral_source_split_4774;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    out_$i198 := $M.74;
    goto corral_source_split_4773;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 856} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4772;

  $bb133:
    assume out_$i197 == 1;
    goto corral_source_split_4771;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    out_$i197 := $eq.i32(out_$i196, 0);
    goto corral_source_split_4769;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    out_$i196 := $M.89;
    goto corral_source_split_4768;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $M.89 := out_$i195;
    call {:si_unique_call 855} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i195);
    goto corral_source_split_4767;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} out_$i195 := cdc_ncm_bind(out_$p193, out_$p194);
    goto corral_source_split_4766;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    out_$p194 := $M.45;
    goto corral_source_split_4765;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    out_$p193 := $M.44;
    goto corral_source_split_4764;

  $bb131:
    assume out_$i192 == 1;
    goto corral_source_split_4763;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    out_$i192 := $eq.i32(out_$i191, 1);
    goto corral_source_split_4691;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    out_$i191 := $M.71;
    goto corral_source_split_4690;

  $bb98:
    assume out_$i150 == 1;
    goto corral_source_split_4689;

  $bb97:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    out_$i150 := $slt.i32(out_$i147, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb141:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 861} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4788;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} cdc_ncm_status(out_$p205, in_$p19);
    goto corral_source_split_4787;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    out_$p205 := $M.44;
    goto corral_source_split_4786;

  $bb140:
    assume out_$i204 == 1;
    goto corral_source_split_4785;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i203, 2);
    goto corral_source_split_4783;

  $bb139:
    assume {:verifier.code 0} true;
    out_$i203 := $M.71;
    goto corral_source_split_4782;

  $bb138:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    goto $bb139;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 859} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4780;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} cdc_ncm_status(out_$p202, in_$p19);
    goto corral_source_split_4779;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    out_$p202 := $M.44;
    goto corral_source_split_4778;

  $bb137:
    assume out_$i201 == 1;
    goto corral_source_split_4777;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    out_$i201 := $eq.i32(out_$i200, 1);
    goto corral_source_split_4695;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    out_$i200 := $M.71;
    goto corral_source_split_4694;

  $bb100:
    assume out_$i151 == 1;
    goto corral_source_split_4693;

  $bb99:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i147, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} ldv_stop();
    goto corral_source_split_4790;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb101:
    assume {:verifier.code 0} true;
    assume !(out_$i151 == 1);
    goto $bb102;

  $bb108:
    assume {:verifier.code 0} true;
    assume !(out_$i154 == 1);
    goto $bb102;

  $bb147:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb163:
    assume !(out_$i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb165:
    assume !(out_$i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $M.74 := out_$i222;
    call {:si_unique_call 869} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i222);
    goto corral_source_split_4825;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    out_$i222 := $add.i32(out_$i221, 1);
    goto corral_source_split_4824;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    out_$i221 := $M.74;
    goto corral_source_split_4823;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $M.72 := 2;
    call {:si_unique_call 868} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4822;

  $bb164:
    assume out_$i220 == 1;
    goto corral_source_split_4821;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    out_$i220 := $eq.i32(out_$i219, 0);
    goto corral_source_split_4819;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    out_$i219 := $M.90;
    goto corral_source_split_4818;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $M.90 := out_$i218;
    call {:si_unique_call 867} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i218);
    goto corral_source_split_4817;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} out_$i218 := usbnet_probe(out_$p217, in_$p21);
    goto corral_source_split_4816;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    out_$p217 := $M.59;
    goto corral_source_split_4815;

  $bb162:
    assume out_$i216 == 1;
    goto corral_source_split_4814;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i215, 1);
    goto corral_source_split_4812;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    out_$i215 := $M.72;
    goto corral_source_split_4811;

  $bb160:
    assume out_$i214 == 1;
    goto corral_source_split_4810;

  $bb158:
    assume out_$i213 == 1;
    assume {:verifier.code 0} true;
    out_$i214 := $eq.i32(out_$i208, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb149:
    assume out_$i209 == 1;
    assume {:verifier.code 0} true;
    out_$i213 := $slt.i32(out_$i208, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb148:
    assume {:verifier.code 0} true;
    out_$i209 := $slt.i32(out_$i208, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_4792:
    assume {:verifier.code 1} true;
    call {:si_unique_call 863} out_$i208 := __VERIFIER_nondet_int();
    call {:si_unique_call 864} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i208);
    call {:si_unique_call 865} {:cexpr "tmp___61"} boogie_si_record_i32(out_$i208);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb146:
    assume out_$i207 == 1;
    goto corral_source_split_4792;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    out_$i207 := $ne.i32(out_$i206, 0);
    goto corral_source_split_4625;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    out_$i206 := $M.72;
    goto corral_source_split_4624;

  $bb41:
    assume !(out_$i112 == 1);
    goto corral_source_split_4623;

  $bb170:
    assume !(out_$i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb172:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $M.72 := 3;
    call {:si_unique_call 872} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_4837;

  $bb171:
    assume out_$i230 == 1;
    goto corral_source_split_4836;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i229, 0);
    goto corral_source_split_4834;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    out_$i229 := $M.91;
    goto corral_source_split_4833;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $M.91 := out_$i228;
    call {:si_unique_call 871} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i228);
    goto corral_source_split_4832;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} out_$i228 := usbnet_suspend(out_$p225, out_$i227);
    goto corral_source_split_4831;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    out_$i227 := $load.i32($M.65, out_$p226);
    goto corral_source_split_4830;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    out_$p226 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4829;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    out_$p225 := $M.59;
    goto corral_source_split_4828;

  $bb169:
    assume out_$i224 == 1;
    goto corral_source_split_4827;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    out_$i224 := $eq.i32(out_$i223, 2);
    goto corral_source_split_4808;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    out_$i223 := $M.72;
    goto corral_source_split_4807;

  $bb159:
    assume !(out_$i213 == 1);
    goto corral_source_split_4806;

  $bb176:
    assume !(out_$i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb178:
    assume !(out_$i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $M.72 := 2;
    call {:si_unique_call 875} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4847;

  $bb177:
    assume out_$i236 == 1;
    goto corral_source_split_4846;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    out_$i236 := $eq.i32(out_$i235, 0);
    goto corral_source_split_4844;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    out_$i235 := $M.92;
    goto corral_source_split_4843;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $M.92 := out_$i234;
    call {:si_unique_call 874} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i234);
    goto corral_source_split_4842;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} out_$i234 := usbnet_resume(out_$p233);
    goto corral_source_split_4841;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    out_$p233 := $M.59;
    goto corral_source_split_4840;

  $bb175:
    assume out_$i232 == 1;
    goto corral_source_split_4839;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    out_$i232 := $eq.i32(out_$i231, 3);
    goto corral_source_split_4796;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    out_$i231 := $M.72;
    goto corral_source_split_4795;

  $bb151:
    assume out_$i210 == 1;
    goto corral_source_split_4794;

  $bb150:
    assume !(out_$i209 == 1);
    assume {:verifier.code 0} true;
    out_$i210 := $slt.i32(out_$i208, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $M.74 := out_$i250;
    call {:si_unique_call 881} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i250);
    goto corral_source_split_4874;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    out_$i250 := $sub.i32(out_$i249, 1);
    goto corral_source_split_4873;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    out_$i249 := $M.74;
    goto corral_source_split_4872;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 880} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4871;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} usbnet_disconnect(out_$p248);
    goto corral_source_split_4870;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    out_$p248 := $M.59;
    goto corral_source_split_4869;

  $bb190:
    assume out_$i247 == 1;
    goto corral_source_split_4868;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    out_$i247 := $eq.i32(out_$i246, 0);
    goto corral_source_split_4866;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    out_$i246 := $M.93;
    goto corral_source_split_4865;

  $bb187:
    assume out_$i245 == 1;
    goto corral_source_split_4864;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    out_$i245 := $eq.i32(out_$i244, 2);
    goto corral_source_split_4862;

  $bb186:
    assume {:verifier.code 0} true;
    out_$i244 := $M.72;
    goto corral_source_split_4861;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $M.74 := out_$i243;
    call {:si_unique_call 878} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i243);
    goto corral_source_split_4859;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    out_$i243 := $sub.i32(out_$i242, 1);
    goto corral_source_split_4858;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    out_$i242 := $M.74;
    goto corral_source_split_4857;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $M.72 := 1;
    call {:si_unique_call 877} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4856;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} usbnet_disconnect(out_$p241);
    goto corral_source_split_4855;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    out_$p241 := $M.59;
    goto corral_source_split_4854;

  $bb184:
    assume out_$i240 == 1;
    goto corral_source_split_4853;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    out_$i240 := $eq.i32(out_$i239, 0);
    goto corral_source_split_4851;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    out_$i239 := $M.93;
    goto corral_source_split_4850;

  $bb181:
    assume out_$i238 == 1;
    goto corral_source_split_4849;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    out_$i238 := $eq.i32(out_$i237, 3);
    goto corral_source_split_4800;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    out_$i237 := $M.72;
    goto corral_source_split_4799;

  $bb153:
    assume out_$i211 == 1;
    goto corral_source_split_4798;

  $bb152:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    out_$i211 := $slt.i32(out_$i208, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb182:
    assume {:verifier.code 0} true;
    assume !(out_$i238 == 1);
    goto $bb183;

  $bb185:
    assume {:verifier.code 0} true;
    assume !(out_$i240 == 1);
    goto $bb183;

  $bb188:
    assume {:verifier.code 0} true;
    assume !(out_$i245 == 1);
    goto $bb189;

  $bb191:
    assume {:verifier.code 0} true;
    assume !(out_$i247 == 1);
    goto $bb189;

  $bb194:
    assume !(out_$i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb196:
    assume !(out_$i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $M.72 := 2;
    call {:si_unique_call 884} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_4884;

  $bb195:
    assume out_$i256 == 1;
    goto corral_source_split_4883;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    out_$i256 := $eq.i32(out_$i255, 0);
    goto corral_source_split_4881;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    out_$i255 := $M.94;
    goto corral_source_split_4880;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $M.94 := out_$i254;
    call {:si_unique_call 883} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i254);
    goto corral_source_split_4879;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} out_$i254 := usbnet_resume(out_$p253);
    goto corral_source_split_4878;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    out_$p253 := $M.59;
    goto corral_source_split_4877;

  $bb193:
    assume out_$i252 == 1;
    goto corral_source_split_4876;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    out_$i252 := $eq.i32(out_$i251, 3);
    goto corral_source_split_4804;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    out_$i251 := $M.72;
    goto corral_source_split_4803;

  $bb155:
    assume out_$i212 == 1;
    goto corral_source_split_4802;

  $bb154:
    assume !(out_$i211 == 1);
    assume {:verifier.code 0} true;
    out_$i212 := $eq.i32(out_$i208, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} ldv_stop();
    goto corral_source_split_4886;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb156:
    assume {:verifier.code 0} true;
    assume !(out_$i212 == 1);
    goto $bb157;

  $bb161:
    assume {:verifier.code 0} true;
    assume !(out_$i214 == 1);
    goto $bb157;

  $bb203:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb213:
    assume !(out_$i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 890} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_4902;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} out_vslice_dummy_var_140 := cdc_ncm_store_min_tx_pkt(out_$p265, out_$p266, in_$p23, in_$i24);
    goto corral_source_split_4901;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    out_$p266 := $M.61;
    goto corral_source_split_4900;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    out_$p265 := $M.60;
    goto corral_source_split_4899;

  $bb212:
    assume out_$i264 == 1;
    goto corral_source_split_4898;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    out_$i264 := $eq.i32(out_$i263, 1);
    goto corral_source_split_4896;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    out_$i263 := $M.73;
    goto corral_source_split_4895;

  $bb210:
    assume out_$i262 == 1;
    goto corral_source_split_4894;

  $bb205:
    assume out_$i260 == 1;
    assume {:verifier.code 0} true;
    out_$i262 := $eq.i32(out_$i259, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb204:
    assume {:verifier.code 0} true;
    out_$i260 := $slt.i32(out_$i259, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  corral_source_split_4888:
    assume {:verifier.code 1} true;
    call {:si_unique_call 886} out_$i259 := __VERIFIER_nondet_int();
    call {:si_unique_call 887} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i259);
    call {:si_unique_call 888} {:cexpr "tmp___62"} boogie_si_record_i32(out_$i259);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb202:
    assume out_$i258 == 1;
    goto corral_source_split_4888;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    out_$i258 := $ne.i32(out_$i257, 0);
    goto corral_source_split_4609;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    out_$i257 := $M.73;
    goto corral_source_split_4608;

  $bb34:
    assume out_$i109 == 1;
    goto corral_source_split_4607;

  $bb28:
    assume out_$i106 == 1;
    assume {:verifier.code 0} true;
    out_$i109 := $slt.i32(out_$i93, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb27:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i93, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb217:
    assume !(out_$i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 892} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_4908;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} out_vslice_dummy_var_141 := cdc_ncm_show_min_tx_pkt(out_$p270, out_$p271, in_$p22);
    goto corral_source_split_4907;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    out_$p271 := $M.61;
    goto corral_source_split_4906;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    out_$p270 := $M.60;
    goto corral_source_split_4905;

  $bb216:
    assume out_$i269 == 1;
    goto corral_source_split_4904;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i268, 1);
    goto corral_source_split_4892;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    out_$i268 := $M.73;
    goto corral_source_split_4891;

  $bb207:
    assume out_$i261 == 1;
    goto corral_source_split_4890;

  $bb206:
    assume !(out_$i260 == 1);
    assume {:verifier.code 0} true;
    out_$i261 := $eq.i32(out_$i259, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} ldv_stop();
    goto corral_source_split_4910;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb208:
    assume {:verifier.code 0} true;
    assume !(out_$i261 == 1);
    goto $bb209;

  $bb211:
    assume {:verifier.code 0} true;
    assume !(out_$i262 == 1);
    goto $bb209;

  $bb223:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb233:
    assume {:verifier.code 0} true;
    assume !(out_$i280 == 1);
    goto $bb234;

  $bb236:
    assume {:verifier.code 0} true;
    assume !(out_$i282 == 1);
    goto $bb234;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    out_$i282 := $eq.i32(out_$i281, 0);
    goto corral_source_split_4924;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    out_$i281 := $M.74;
    goto corral_source_split_4923;

  $bb232:
    assume out_$i280 == 1;
    goto corral_source_split_4922;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    out_$i280 := $eq.i32(out_$i279, 2);
    goto corral_source_split_4920;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    out_$i279 := $M.75;
    goto corral_source_split_4919;

  $bb230:
    assume out_$i278 == 1;
    goto corral_source_split_4918;

  $bb225:
    assume out_$i276 == 1;
    assume {:verifier.code 0} true;
    out_$i278 := $eq.i32(out_$i275, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb224:
    assume {:verifier.code 0} true;
    out_$i276 := $slt.i32(out_$i275, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_4912:
    assume {:verifier.code 1} true;
    call {:si_unique_call 894} out_$i275 := __VERIFIER_nondet_int();
    call {:si_unique_call 895} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i275);
    call {:si_unique_call 896} {:cexpr "tmp___63"} boogie_si_record_i32(out_$i275);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb222:
    assume out_$i274 == 1;
    goto corral_source_split_4912;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    out_$i274 := $ne.i32(out_$i273, 0);
    goto corral_source_split_4613;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    out_$i273 := $M.75;
    goto corral_source_split_4612;

  $bb35:
    assume !(out_$i109 == 1);
    goto corral_source_split_4611;

  $bb241:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb246:
    assume !(out_$i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 929} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_4971;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $M.69 := 1;
    call {:si_unique_call 928} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4970;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} ldv_initialize_device_attribute_17();
    goto corral_source_split_4969;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 926} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_4968;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} ldv_initialize_driver_info_2();
    goto corral_source_split_4967;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 924} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4966;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} ldv_initialize_device_attribute_18();
    goto corral_source_split_4965;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $M.73 := 1;
    call {:si_unique_call 922} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_4964;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} ldv_initialize_device_attribute_16();
    goto corral_source_split_4963;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 920} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_4962;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 919} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_4961;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 918} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4960;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} ldv_initialize_driver_info_3();
    goto corral_source_split_4959;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 916} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4958;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 915} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_4957;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 914} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_4956;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 913} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_4955;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} ldv_initialize_device_attribute_15();
    goto corral_source_split_4954;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 911} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_4953;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 910} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_4952;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} ldv_initialize_driver_info_4();
    goto corral_source_split_4951;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 908} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4950;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} ldv_initialize_ethtool_ops_19();
    goto corral_source_split_4949;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 906} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_4948;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 905} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_4947;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 904} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4946;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $M.75 := 2;
    call {:si_unique_call 903} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4945;

  $bb245:
    assume out_$i289 == 1;
    goto corral_source_split_4944;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    out_$i289 := $eq.i32(out_$i288, 0);
    goto corral_source_split_4942;

  $bb244:
    assume {:verifier.code 0} true;
    out_$i288 := $M.95;
    goto corral_source_split_4941;

  $bb243:
    assume !(out_$i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    out_$i287 := $ne.i32(out_$i286, 0);
    goto corral_source_split_4936;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    out_$i286 := $M.95;
    goto corral_source_split_4935;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $M.95 := out_$i285;
    call {:si_unique_call 901} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i285);
    goto corral_source_split_4934;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} out_$i285 := cdc_ncm_driver_init();
    goto corral_source_split_4933;

  $bb240:
    assume out_$i284 == 1;
    goto corral_source_split_4932;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    out_$i284 := $eq.i32(out_$i283, 1);
    goto corral_source_split_4916;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    out_$i283 := $M.75;
    goto corral_source_split_4915;

  $bb227:
    assume out_$i277 == 1;
    goto corral_source_split_4914;

  $bb226:
    assume !(out_$i276 == 1);
    assume {:verifier.code 0} true;
    out_$i277 := $eq.i32(out_$i275, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} ldv_stop();
    goto corral_source_split_4973;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb228:
    assume {:verifier.code 0} true;
    assume !(out_$i277 == 1);
    goto $bb229;

  $bb231:
    assume {:verifier.code 0} true;
    assume !(out_$i278 == 1);
    goto $bb229;

  $bb253:
    assume !(out_$i291 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb263:
    assume !(out_$i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    goto $bb264;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 935} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_4989;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} out_vslice_dummy_var_142 := cdc_ncm_store_tx_max(out_$p298, out_$p299, in_$p27, in_$i25);
    goto corral_source_split_4988;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    out_$p299 := $M.63;
    goto corral_source_split_4987;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    out_$p298 := $M.62;
    goto corral_source_split_4986;

  $bb262:
    assume out_$i297 == 1;
    goto corral_source_split_4985;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    out_$i297 := $eq.i32(out_$i296, 1);
    goto corral_source_split_4983;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    out_$i296 := $M.76;
    goto corral_source_split_4982;

  $bb260:
    assume out_$i295 == 1;
    goto corral_source_split_4981;

  $bb255:
    assume out_$i293 == 1;
    assume {:verifier.code 0} true;
    out_$i295 := $eq.i32(out_$i292, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb254:
    assume {:verifier.code 0} true;
    out_$i293 := $slt.i32(out_$i292, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  corral_source_split_4975:
    assume {:verifier.code 1} true;
    call {:si_unique_call 931} out_$i292 := __VERIFIER_nondet_int();
    call {:si_unique_call 932} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i292);
    call {:si_unique_call 933} {:cexpr "tmp___64"} boogie_si_record_i32(out_$i292);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb252:
    assume out_$i291 == 1;
    goto corral_source_split_4975;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    out_$i291 := $ne.i32(out_$i290, 0);
    goto corral_source_split_4597;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    out_$i290 := $M.76;
    goto corral_source_split_4596;

  $bb30:
    assume out_$i107 == 1;
    goto corral_source_split_4595;

  $bb29:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    out_$i107 := $slt.i32(out_$i93, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb267:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 937} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_4995;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} out_vslice_dummy_var_143 := cdc_ncm_show_tx_max(out_$p303, out_$p304, in_$p26);
    goto corral_source_split_4994;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    out_$p304 := $M.63;
    goto corral_source_split_4993;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    out_$p303 := $M.62;
    goto corral_source_split_4992;

  $bb266:
    assume out_$i302 == 1;
    goto corral_source_split_4991;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    out_$i302 := $eq.i32(out_$i301, 1);
    goto corral_source_split_4979;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    out_$i301 := $M.76;
    goto corral_source_split_4978;

  $bb257:
    assume out_$i294 == 1;
    goto corral_source_split_4977;

  $bb256:
    assume !(out_$i293 == 1);
    assume {:verifier.code 0} true;
    out_$i294 := $eq.i32(out_$i292, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} ldv_stop();
    goto corral_source_split_4997;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb258:
    assume {:verifier.code 0} true;
    assume !(out_$i294 == 1);
    goto $bb259;

  $bb261:
    assume {:verifier.code 0} true;
    assume !(out_$i295 == 1);
    goto $bb259;

  $bb273:
    assume !(out_$i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb278:
    assume !(out_$i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb279;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    goto $bb279;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 943} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_5007;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} out_vslice_dummy_var_144 := cdc_ncm_show_dwNtbInMaxSize(in_$p30, in_$p32, in_$p28);
    goto corral_source_split_5006;

  $bb277:
    assume out_$i311 == 1;
    goto corral_source_split_5005;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    out_$i311 := $eq.i32(out_$i310, 1);
    goto corral_source_split_5003;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    out_$i310 := $M.77;
    goto corral_source_split_5002;

  $bb275:
    assume out_$i309 == 1;
    goto corral_source_split_5001;

  $bb274:
    assume {:verifier.code 0} true;
    out_$i309 := $eq.i32(out_$i308, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  corral_source_split_4999:
    assume {:verifier.code 1} true;
    call {:si_unique_call 939} out_$i308 := __VERIFIER_nondet_int();
    call {:si_unique_call 940} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i308);
    call {:si_unique_call 941} {:cexpr "tmp___65"} boogie_si_record_i32(out_$i308);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb272:
    assume out_$i307 == 1;
    goto corral_source_split_4999;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    out_$i307 := $ne.i32(out_$i306, 0);
    goto corral_source_split_4601;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    out_$i306 := $M.77;
    goto corral_source_split_4600;

  $bb32:
    assume out_$i108 == 1;
    goto corral_source_split_4599;

  $bb31:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i93, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} ldv_stop();
    goto corral_source_split_5009;

  $bb276:
    assume !(out_$i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb285:
    assume !(out_$i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb290:
    assume !(out_$i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 949} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_5019;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} out_vslice_dummy_var_145 := cdc_ncm_show_wNdpOutAlignment(in_$p37, in_$p35, in_$p33);
    goto corral_source_split_5018;

  $bb289:
    assume out_$i318 == 1;
    goto corral_source_split_5017;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    out_$i318 := $eq.i32(out_$i317, 1);
    goto corral_source_split_5015;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    out_$i317 := $M.78;
    goto corral_source_split_5014;

  $bb287:
    assume out_$i316 == 1;
    goto corral_source_split_5013;

  $bb286:
    assume {:verifier.code 0} true;
    out_$i316 := $eq.i32(out_$i315, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  corral_source_split_5011:
    assume {:verifier.code 1} true;
    call {:si_unique_call 945} out_$i315 := __VERIFIER_nondet_int();
    call {:si_unique_call 946} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i315);
    call {:si_unique_call 947} {:cexpr "tmp___66"} boogie_si_record_i32(out_$i315);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb284:
    assume out_$i314 == 1;
    goto corral_source_split_5011;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    out_$i314 := $ne.i32(out_$i313, 0);
    goto corral_source_split_4605;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    out_$i313 := $M.78;
    goto corral_source_split_4604;

  $bb33:
    assume !(out_$i108 == 1);
    goto corral_source_split_4603;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} ldv_stop();
    goto corral_source_split_5021;

  $bb288:
    assume !(out_$i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb297:
    assume !(out_$i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb320:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb347:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb341:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb332:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb326:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb318:
    assume !(out_$i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 957} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5064;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} out_vslice_dummy_var_147 := cdc_ncm_tx_fixup(out_$p338, out_$p339, out_$i340);
    goto corral_source_split_5063;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    out_$i340 := $load.i32($M.66, in_$p2);
    goto corral_source_split_5062;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    out_$p339 := $M.49;
    goto corral_source_split_5061;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    out_$p338 := $M.47;
    goto corral_source_split_5060;

  $bb317:
    assume out_$i337 == 1;
    goto corral_source_split_5059;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    out_$i337 := $eq.i32(out_$i336, 2);
    goto corral_source_split_5057;

  $bb316:
    assume {:verifier.code 0} true;
    out_$i336 := $M.79;
    goto corral_source_split_5056;

  $bb315:
    assume !(out_$i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    goto $bb316;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 955} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5054;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} out_vslice_dummy_var_146 := cdc_ncm_tx_fixup(out_$p332, out_$p333, out_$i334);
    goto corral_source_split_5053;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    out_$i334 := $load.i32($M.66, in_$p2);
    goto corral_source_split_5052;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    out_$p333 := $M.49;
    goto corral_source_split_5051;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    out_$p332 := $M.47;
    goto corral_source_split_5050;

  $bb314:
    assume out_$i331 == 1;
    goto corral_source_split_5049;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    out_$i331 := $eq.i32(out_$i330, 1);
    goto corral_source_split_5047;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    out_$i330 := $M.79;
    goto corral_source_split_5046;

  $bb312:
    assume out_$i329 == 1;
    goto corral_source_split_5045;

  $bb308:
    assume out_$i327 == 1;
    assume {:verifier.code 0} true;
    out_$i329 := $eq.i32(out_$i322, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  $bb299:
    assume out_$i323 == 1;
    assume {:verifier.code 0} true;
    out_$i327 := $slt.i32(out_$i322, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb298:
    assume {:verifier.code 0} true;
    out_$i323 := $slt.i32(out_$i322, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  corral_source_split_5023:
    assume {:verifier.code 1} true;
    call {:si_unique_call 951} out_$i322 := __VERIFIER_nondet_int();
    call {:si_unique_call 952} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i322);
    call {:si_unique_call 953} {:cexpr "tmp___67"} boogie_si_record_i32(out_$i322);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb296:
    assume out_$i321 == 1;
    goto corral_source_split_5023;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    out_$i321 := $ne.i32(out_$i320, 0);
    goto corral_source_split_4589;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    out_$i320 := $M.79;
    goto corral_source_split_4588;

  $bb24:
    assume out_$i104 == 1;
    goto corral_source_split_4587;

  $bb18:
    assume out_$i101 == 1;
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i93, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb5:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i93, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb4:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    out_$i95 := $slt.i32(out_$i93, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb325:
    assume !(out_$i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb326;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    goto $bb326;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5077;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} out_vslice_dummy_var_149 := usbnet_manage_power(out_$p348, in_$i38);
    goto corral_source_split_5076;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    out_$p348 := $M.47;
    goto corral_source_split_5075;

  $bb324:
    assume out_$i347 == 1;
    goto corral_source_split_5074;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    out_$i347 := $eq.i32(out_$i346, 2);
    goto corral_source_split_5072;

  $bb323:
    assume {:verifier.code 0} true;
    out_$i346 := $M.79;
    goto corral_source_split_5071;

  $bb322:
    assume !(out_$i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb323;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    goto $bb323;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 959} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5069;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} out_vslice_dummy_var_148 := usbnet_manage_power(out_$p344, in_$i38);
    goto corral_source_split_5068;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    out_$p344 := $M.47;
    goto corral_source_split_5067;

  $bb321:
    assume out_$i343 == 1;
    goto corral_source_split_5066;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    out_$i343 := $eq.i32(out_$i342, 1);
    goto corral_source_split_5039;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    out_$i342 := $M.79;
    goto corral_source_split_5038;

  $bb310:
    assume out_$i328 == 1;
    goto corral_source_split_5037;

  $bb309:
    assume !(out_$i327 == 1);
    assume {:verifier.code 0} true;
    out_$i328 := $slt.i32(out_$i322, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb331:
    assume !(out_$i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb332;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    goto $bb332;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 965} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5092;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} out_vslice_dummy_var_151 := cdc_ncm_rx_fixup(out_$p357, out_$p358);
    goto corral_source_split_5091;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    out_$p358 := $M.49;
    goto corral_source_split_5090;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    out_$p357 := $M.47;
    goto corral_source_split_5089;

  $bb330:
    assume out_$i356 == 1;
    goto corral_source_split_5088;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    out_$i356 := $eq.i32(out_$i355, 2);
    goto corral_source_split_5086;

  $bb329:
    assume {:verifier.code 0} true;
    out_$i355 := $M.79;
    goto corral_source_split_5085;

  $bb328:
    assume !(out_$i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    goto $bb329;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5083;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} out_vslice_dummy_var_150 := cdc_ncm_rx_fixup(out_$p352, out_$p353);
    goto corral_source_split_5082;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    out_$p353 := $M.49;
    goto corral_source_split_5081;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    out_$p352 := $M.47;
    goto corral_source_split_5080;

  $bb327:
    assume out_$i351 == 1;
    goto corral_source_split_5079;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb327, $bb328;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    out_$i351 := $eq.i32(out_$i350, 1);
    goto corral_source_split_5043;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    out_$i350 := $M.79;
    goto corral_source_split_5042;

  $bb311:
    assume !(out_$i328 == 1);
    goto corral_source_split_5041;

  $bb334:
    assume !(out_$i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb335;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    goto $bb335;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $M.74 := out_$i365;
    call {:si_unique_call 968} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i365);
    goto corral_source_split_5101;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    out_$i365 := $sub.i32(out_$i364, 1);
    goto corral_source_split_5100;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    out_$i364 := $M.74;
    goto corral_source_split_5099;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5098;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} cdc_ncm_unbind(out_$p362, out_$p363);
    goto corral_source_split_5097;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    out_$p363 := $M.48;
    goto corral_source_split_5096;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    out_$p362 := $M.47;
    goto corral_source_split_5095;

  $bb333:
    assume out_$i361 == 1;
    goto corral_source_split_5094;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb333, $bb334;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    out_$i361 := $eq.i32(out_$i360, 2);
    goto corral_source_split_5027;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    out_$i360 := $M.79;
    goto corral_source_split_5026;

  $bb301:
    assume out_$i324 == 1;
    goto corral_source_split_5025;

  $bb300:
    assume !(out_$i323 == 1);
    assume {:verifier.code 0} true;
    out_$i324 := $slt.i32(out_$i322, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb337:
    assume !(out_$i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb339:
    assume !(out_$i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $M.74 := out_$i374;
    call {:si_unique_call 972} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i374);
    goto corral_source_split_5115;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    out_$i374 := $add.i32(out_$i373, 1);
    goto corral_source_split_5114;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    out_$i373 := $M.74;
    goto corral_source_split_5113;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 971} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5112;

  $bb338:
    assume out_$i372 == 1;
    goto corral_source_split_5111;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    out_$i372 := $eq.i32(out_$i371, 0);
    goto corral_source_split_5109;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    out_$i371 := $M.96;
    goto corral_source_split_5108;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $M.96 := out_$i370;
    call {:si_unique_call 970} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i370);
    goto corral_source_split_5107;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} out_$i370 := cdc_ncm_bind(out_$p368, out_$p369);
    goto corral_source_split_5106;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    out_$p369 := $M.48;
    goto corral_source_split_5105;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    out_$p368 := $M.47;
    goto corral_source_split_5104;

  $bb336:
    assume out_$i367 == 1;
    goto corral_source_split_5103;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    out_$i367 := $eq.i32(out_$i366, 1);
    goto corral_source_split_5031;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    out_$i366 := $M.79;
    goto corral_source_split_5030;

  $bb303:
    assume out_$i325 == 1;
    goto corral_source_split_5029;

  $bb302:
    assume !(out_$i324 == 1);
    assume {:verifier.code 0} true;
    out_$i325 := $slt.i32(out_$i322, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb303, $bb304;

  $bb346:
    assume !(out_$i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb347;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    goto $bb347;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $M.79 := 2;
    call {:si_unique_call 976} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_5128;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} cdc_ncm_status(out_$p380, in_$p40);
    goto corral_source_split_5127;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    out_$p380 := $M.47;
    goto corral_source_split_5126;

  $bb345:
    assume out_$i379 == 1;
    goto corral_source_split_5125;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb345, $bb346;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    out_$i379 := $eq.i32(out_$i378, 2);
    goto corral_source_split_5123;

  $bb344:
    assume {:verifier.code 0} true;
    out_$i378 := $M.79;
    goto corral_source_split_5122;

  $bb343:
    assume !(out_$i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb344;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    goto $bb344;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 974} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5120;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} cdc_ncm_status(out_$p377, in_$p40);
    goto corral_source_split_5119;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    out_$p377 := $M.47;
    goto corral_source_split_5118;

  $bb342:
    assume out_$i376 == 1;
    goto corral_source_split_5117;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    out_$i376 := $eq.i32(out_$i375, 1);
    goto corral_source_split_5035;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    out_$i375 := $M.79;
    goto corral_source_split_5034;

  $bb305:
    assume out_$i326 == 1;
    goto corral_source_split_5033;

  $bb304:
    assume !(out_$i325 == 1);
    assume {:verifier.code 0} true;
    out_$i326 := $eq.i32(out_$i322, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} ldv_stop();
    goto corral_source_split_5130;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb306:
    assume {:verifier.code 0} true;
    assume !(out_$i326 == 1);
    goto $bb307;

  $bb313:
    assume {:verifier.code 0} true;
    assume !(out_$i329 == 1);
    goto $bb307;

  $bb352:
    assume !(out_$i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb359:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb361:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb357:
    assume !(out_$i386 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    goto $bb358;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $M.80 := 1;
    call {:si_unique_call 982} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_5140;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} out_vslice_dummy_var_152 := cdc_ncm_show_dwNtbOutMaxSize(in_$p44, in_$p42, in_$p45);
    goto corral_source_split_5139;

  $bb356:
    assume out_$i386 == 1;
    goto corral_source_split_5138;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    out_$i386 := $eq.i32(out_$i385, 1);
    goto corral_source_split_5136;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    out_$i385 := $M.80;
    goto corral_source_split_5135;

  $bb354:
    assume out_$i384 == 1;
    goto corral_source_split_5134;

  $bb353:
    assume {:verifier.code 0} true;
    out_$i384 := $eq.i32(out_$i383, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb354, $bb355;

  corral_source_split_5132:
    assume {:verifier.code 1} true;
    call {:si_unique_call 978} out_$i383 := __VERIFIER_nondet_int();
    call {:si_unique_call 979} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i383);
    call {:si_unique_call 980} {:cexpr "tmp___68"} boogie_si_record_i32(out_$i383);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb351:
    assume out_$i382 == 1;
    goto corral_source_split_5132;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb351, $bb352;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    out_$i382 := $ne.i32(out_$i381, 0);
    goto corral_source_split_4593;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    out_$i381 := $M.80;
    goto corral_source_split_4592;

  $bb25:
    assume !(out_$i104 == 1);
    goto corral_source_split_4591;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} ldv_stop();
    goto corral_source_split_5142;

  $bb355:
    assume !(out_$i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb364:
    assume !(out_$i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb371:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb373:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb369:
    assume !(out_$i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    goto $bb370;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 988} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_5152;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} out_vslice_dummy_var_153 := cdc_ncm_show_wNdpInDivisor(in_$p47, in_$p49, in_$p50);
    goto corral_source_split_5151;

  $bb368:
    assume out_$i393 == 1;
    goto corral_source_split_5150;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb368, $bb369;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    out_$i393 := $eq.i32(out_$i392, 1);
    goto corral_source_split_5148;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    out_$i392 := $M.81;
    goto corral_source_split_5147;

  $bb366:
    assume out_$i391 == 1;
    goto corral_source_split_5146;

  $bb365:
    assume {:verifier.code 0} true;
    out_$i391 := $eq.i32(out_$i390, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb366, $bb367;

  corral_source_split_5144:
    assume {:verifier.code 1} true;
    call {:si_unique_call 984} out_$i390 := __VERIFIER_nondet_int();
    call {:si_unique_call 985} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i390);
    call {:si_unique_call 986} {:cexpr "tmp___69"} boogie_si_record_i32(out_$i390);
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb363:
    assume out_$i389 == 1;
    goto corral_source_split_5144;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb363, $bb364;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    out_$i389 := $ne.i32(out_$i388, 0);
    goto corral_source_split_4577;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    out_$i388 := $M.81;
    goto corral_source_split_4576;

  $bb20:
    assume out_$i102 == 1;
    goto corral_source_split_4575;

  $bb19:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i93, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} ldv_stop();
    goto corral_source_split_5154;

  $bb367:
    assume !(out_$i391 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb376:
    assume !(out_$i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb383:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb382:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb381:
    assume !(out_$i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    goto $bb382;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 994} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_5164;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} out_vslice_dummy_var_154 := cdc_ncm_show_bmNtbFormatsSupported(in_$p54, in_$p52, in_$p55);
    goto corral_source_split_5163;

  $bb380:
    assume out_$i400 == 1;
    goto corral_source_split_5162;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb380, $bb381;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    out_$i400 := $eq.i32(out_$i399, 1);
    goto corral_source_split_5160;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    out_$i399 := $M.82;
    goto corral_source_split_5159;

  $bb378:
    assume out_$i398 == 1;
    goto corral_source_split_5158;

  $bb377:
    assume {:verifier.code 0} true;
    out_$i398 := $eq.i32(out_$i397, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb378, $bb379;

  corral_source_split_5156:
    assume {:verifier.code 1} true;
    call {:si_unique_call 990} out_$i397 := __VERIFIER_nondet_int();
    call {:si_unique_call 991} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i397);
    call {:si_unique_call 992} {:cexpr "tmp___70"} boogie_si_record_i32(out_$i397);
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb375:
    assume out_$i396 == 1;
    goto corral_source_split_5156;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb375, $bb376;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    out_$i396 := $ne.i32(out_$i395, 0);
    goto corral_source_split_4581;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    out_$i395 := $M.82;
    goto corral_source_split_4580;

  $bb22:
    assume out_$i103 == 1;
    goto corral_source_split_4579;

  $bb21:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i93, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} ldv_stop();
    goto corral_source_split_5166;

  $bb379:
    assume !(out_$i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb388:
    assume !(out_$i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb400:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb403:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb398:
    assume !(out_$i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    goto $bb399;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1000} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_5182;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} out_vslice_dummy_var_155 := cdc_ncm_store_tx_timer_usecs(out_$p410, out_$p411, in_$p57, in_$i56);
    goto corral_source_split_5181;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    out_$p411 := $M.53;
    goto corral_source_split_5180;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    out_$p410 := $M.52;
    goto corral_source_split_5179;

  $bb397:
    assume out_$i409 == 1;
    goto corral_source_split_5178;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb397, $bb398;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    out_$i409 := $eq.i32(out_$i408, 1);
    goto corral_source_split_5176;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    out_$i408 := $M.83;
    goto corral_source_split_5175;

  $bb395:
    assume out_$i407 == 1;
    goto corral_source_split_5174;

  $bb390:
    assume out_$i405 == 1;
    assume {:verifier.code 0} true;
    out_$i407 := $eq.i32(out_$i404, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb395, $bb396;

  $bb389:
    assume {:verifier.code 0} true;
    out_$i405 := $slt.i32(out_$i404, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb390, $bb391;

  corral_source_split_5168:
    assume {:verifier.code 1} true;
    call {:si_unique_call 996} out_$i404 := __VERIFIER_nondet_int();
    call {:si_unique_call 997} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i404);
    call {:si_unique_call 998} {:cexpr "tmp___71"} boogie_si_record_i32(out_$i404);
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb387:
    assume out_$i403 == 1;
    goto corral_source_split_5168;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb387, $bb388;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    out_$i403 := $ne.i32(out_$i402, 0);
    goto corral_source_split_4585;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    out_$i402 := $M.83;
    goto corral_source_split_4584;

  $bb23:
    assume !(out_$i103 == 1);
    goto corral_source_split_4583;

  $bb402:
    assume !(out_$i414 == 1);
    assume {:verifier.code 0} true;
    goto $bb403;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    goto $bb403;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1002} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_5188;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} out_vslice_dummy_var_156 := cdc_ncm_show_tx_timer_usecs(out_$p415, out_$p416, in_$p58);
    goto corral_source_split_5187;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    out_$p416 := $M.53;
    goto corral_source_split_5186;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    out_$p415 := $M.52;
    goto corral_source_split_5185;

  $bb401:
    assume out_$i414 == 1;
    goto corral_source_split_5184;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb401, $bb402;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    out_$i414 := $eq.i32(out_$i413, 1);
    goto corral_source_split_5172;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    out_$i413 := $M.83;
    goto corral_source_split_5171;

  $bb392:
    assume out_$i406 == 1;
    goto corral_source_split_5170;

  $bb391:
    assume !(out_$i405 == 1);
    assume {:verifier.code 0} true;
    out_$i406 := $eq.i32(out_$i404, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb392, $bb393;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} ldv_stop();
    goto corral_source_split_5190;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb393:
    assume {:verifier.code 0} true;
    assume !(out_$i406 == 1);
    goto $bb394;

  $bb396:
    assume {:verifier.code 0} true;
    assume !(out_$i407 == 1);
    goto $bb394;

  $bb408:
    assume !(out_$i419 == 1);
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb415:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb414:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb413:
    assume !(out_$i423 == 1);
    assume {:verifier.code 0} true;
    goto $bb414;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    goto $bb414;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1008} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_5200;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} out_vslice_dummy_var_157 := cdc_ncm_show_wNdpOutDivisor(in_$p60, in_$p62, in_$p63);
    goto corral_source_split_5199;

  $bb412:
    assume out_$i423 == 1;
    goto corral_source_split_5198;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb412, $bb413;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    out_$i423 := $eq.i32(out_$i422, 1);
    goto corral_source_split_5196;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    out_$i422 := $M.84;
    goto corral_source_split_5195;

  $bb410:
    assume out_$i421 == 1;
    goto corral_source_split_5194;

  $bb409:
    assume {:verifier.code 0} true;
    out_$i421 := $eq.i32(out_$i420, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb410, $bb411;

  corral_source_split_5192:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1004} out_$i420 := __VERIFIER_nondet_int();
    call {:si_unique_call 1005} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i420);
    call {:si_unique_call 1006} {:cexpr "tmp___72"} boogie_si_record_i32(out_$i420);
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb407:
    assume out_$i419 == 1;
    goto corral_source_split_5192;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb407, $bb408;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    out_$i419 := $ne.i32(out_$i418, 0);
    goto corral_source_split_4569;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    out_$i418 := $M.84;
    goto corral_source_split_4568;

  $bb16:
    assume out_$i100 == 1;
    goto corral_source_split_4567;

  $bb7:
    assume out_$i96 == 1;
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i93, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb6:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i93, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} ldv_stop();
    goto corral_source_split_5202;

  $bb411:
    assume !(out_$i421 == 1);
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb420:
    assume !(out_$i426 == 1);
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb443:
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb472:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb470:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb464:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb458:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb455:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb449:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb442:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb441:
    assume !(out_$i442 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    goto $bb442;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1016} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5245;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} out_vslice_dummy_var_159 := cdc_ncm_tx_fixup(out_$p443, out_$p444, out_$i445);
    goto corral_source_split_5244;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    out_$i445 := $load.i32($M.67, in_$p3);
    goto corral_source_split_5243;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    out_$p444 := $M.58;
    goto corral_source_split_5242;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    out_$p443 := $M.56;
    goto corral_source_split_5241;

  $bb440:
    assume out_$i442 == 1;
    goto corral_source_split_5240;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb440, $bb441;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    out_$i442 := $eq.i32(out_$i441, 2);
    goto corral_source_split_5238;

  $bb439:
    assume {:verifier.code 0} true;
    out_$i441 := $M.85;
    goto corral_source_split_5237;

  $bb438:
    assume !(out_$i436 == 1);
    assume {:verifier.code 0} true;
    goto $bb439;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    goto $bb439;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1014} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5235;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} out_vslice_dummy_var_158 := cdc_ncm_tx_fixup(out_$p437, out_$p438, out_$i439);
    goto corral_source_split_5234;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    out_$i439 := $load.i32($M.67, in_$p3);
    goto corral_source_split_5233;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    out_$p438 := $M.58;
    goto corral_source_split_5232;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    out_$p437 := $M.56;
    goto corral_source_split_5231;

  $bb437:
    assume out_$i436 == 1;
    goto corral_source_split_5230;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb437, $bb438;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    out_$i436 := $eq.i32(out_$i435, 1);
    goto corral_source_split_5228;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    out_$i435 := $M.85;
    goto corral_source_split_5227;

  $bb435:
    assume out_$i434 == 1;
    goto corral_source_split_5226;

  $bb431:
    assume out_$i432 == 1;
    assume {:verifier.code 0} true;
    out_$i434 := $eq.i32(out_$i427, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb435, $bb436;

  $bb422:
    assume out_$i428 == 1;
    assume {:verifier.code 0} true;
    out_$i432 := $slt.i32(out_$i427, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb431, $bb432;

  $bb421:
    assume {:verifier.code 0} true;
    out_$i428 := $slt.i32(out_$i427, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb422, $bb423;

  corral_source_split_5204:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1010} out_$i427 := __VERIFIER_nondet_int();
    call {:si_unique_call 1011} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i427);
    call {:si_unique_call 1012} {:cexpr "tmp___73"} boogie_si_record_i32(out_$i427);
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb419:
    assume out_$i426 == 1;
    goto corral_source_split_5204;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb419, $bb420;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    out_$i426 := $ne.i32(out_$i425, 0);
    goto corral_source_split_4573;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    out_$i425 := $M.85;
    goto corral_source_split_4572;

  $bb17:
    assume !(out_$i100 == 1);
    goto corral_source_split_4571;

  $bb448:
    assume !(out_$i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb449;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    goto $bb449;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1020} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5258;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} out_vslice_dummy_var_161 := usbnet_manage_power(out_$p453, in_$i64);
    goto corral_source_split_5257;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    out_$p453 := $M.56;
    goto corral_source_split_5256;

  $bb447:
    assume out_$i452 == 1;
    goto corral_source_split_5255;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb447, $bb448;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    out_$i452 := $eq.i32(out_$i451, 2);
    goto corral_source_split_5253;

  $bb446:
    assume {:verifier.code 0} true;
    out_$i451 := $M.85;
    goto corral_source_split_5252;

  $bb445:
    assume !(out_$i448 == 1);
    assume {:verifier.code 0} true;
    goto $bb446;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    goto $bb446;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1018} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5250;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} out_vslice_dummy_var_160 := usbnet_manage_power(out_$p449, in_$i64);
    goto corral_source_split_5249;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    out_$p449 := $M.56;
    goto corral_source_split_5248;

  $bb444:
    assume out_$i448 == 1;
    goto corral_source_split_5247;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb444, $bb445;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    out_$i448 := $eq.i32(out_$i447, 1);
    goto corral_source_split_5220;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    out_$i447 := $M.85;
    goto corral_source_split_5219;

  $bb433:
    assume out_$i433 == 1;
    goto corral_source_split_5218;

  $bb432:
    assume !(out_$i432 == 1);
    assume {:verifier.code 0} true;
    out_$i433 := $slt.i32(out_$i427, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb433, $bb434;

  $bb454:
    assume !(out_$i461 == 1);
    assume {:verifier.code 0} true;
    goto $bb455;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    goto $bb455;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1024} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5273;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} out_vslice_dummy_var_163 := cdc_ncm_rx_fixup(out_$p462, out_$p463);
    goto corral_source_split_5272;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    out_$p463 := $M.58;
    goto corral_source_split_5271;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    out_$p462 := $M.56;
    goto corral_source_split_5270;

  $bb453:
    assume out_$i461 == 1;
    goto corral_source_split_5269;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    out_$i461 := $eq.i32(out_$i460, 2);
    goto corral_source_split_5267;

  $bb452:
    assume {:verifier.code 0} true;
    out_$i460 := $M.85;
    goto corral_source_split_5266;

  $bb451:
    assume !(out_$i456 == 1);
    assume {:verifier.code 0} true;
    goto $bb452;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    goto $bb452;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1022} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5264;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} out_vslice_dummy_var_162 := cdc_ncm_rx_fixup(out_$p457, out_$p458);
    goto corral_source_split_5263;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    out_$p458 := $M.58;
    goto corral_source_split_5262;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    out_$p457 := $M.56;
    goto corral_source_split_5261;

  $bb450:
    assume out_$i456 == 1;
    goto corral_source_split_5260;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb450, $bb451;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    out_$i456 := $eq.i32(out_$i455, 1);
    goto corral_source_split_5224;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    out_$i455 := $M.85;
    goto corral_source_split_5223;

  $bb434:
    assume !(out_$i433 == 1);
    goto corral_source_split_5222;

  $bb457:
    assume !(out_$i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb458;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    goto $bb458;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $M.74 := out_$i470;
    call {:si_unique_call 1027} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i470);
    goto corral_source_split_5282;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    out_$i470 := $sub.i32(out_$i469, 1);
    goto corral_source_split_5281;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    out_$i469 := $M.74;
    goto corral_source_split_5280;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1026} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5279;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} cdc_ncm_unbind(out_$p467, out_$p468);
    goto corral_source_split_5278;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    out_$p468 := $M.57;
    goto corral_source_split_5277;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    out_$p467 := $M.56;
    goto corral_source_split_5276;

  $bb456:
    assume out_$i466 == 1;
    goto corral_source_split_5275;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb456, $bb457;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    out_$i466 := $eq.i32(out_$i465, 2);
    goto corral_source_split_5208;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    out_$i465 := $M.85;
    goto corral_source_split_5207;

  $bb424:
    assume out_$i429 == 1;
    goto corral_source_split_5206;

  $bb423:
    assume !(out_$i428 == 1);
    assume {:verifier.code 0} true;
    out_$i429 := $slt.i32(out_$i427, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb424, $bb425;

  $bb460:
    assume !(out_$i472 == 1);
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb463:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb462:
    assume !(out_$i477 == 1);
    assume {:verifier.code 0} true;
    goto $bb463;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    goto $bb463;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $M.74 := out_$i479;
    call {:si_unique_call 1031} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i479);
    goto corral_source_split_5296;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    out_$i479 := $add.i32(out_$i478, 1);
    goto corral_source_split_5295;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    out_$i478 := $M.74;
    goto corral_source_split_5294;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1030} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5293;

  $bb461:
    assume out_$i477 == 1;
    goto corral_source_split_5292;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb461, $bb462;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    out_$i477 := $eq.i32(out_$i476, 0);
    goto corral_source_split_5290;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    out_$i476 := $M.97;
    goto corral_source_split_5289;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $M.97 := out_$i475;
    call {:si_unique_call 1029} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i475);
    goto corral_source_split_5288;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} out_$i475 := cdc_ncm_bind(out_$p473, out_$p474);
    goto corral_source_split_5287;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    out_$p474 := $M.57;
    goto corral_source_split_5286;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    out_$p473 := $M.56;
    goto corral_source_split_5285;

  $bb459:
    assume out_$i472 == 1;
    goto corral_source_split_5284;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb459, $bb460;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    out_$i472 := $eq.i32(out_$i471, 1);
    goto corral_source_split_5212;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    out_$i471 := $M.85;
    goto corral_source_split_5211;

  $bb426:
    assume out_$i430 == 1;
    goto corral_source_split_5210;

  $bb425:
    assume !(out_$i429 == 1);
    assume {:verifier.code 0} true;
    out_$i430 := $slt.i32(out_$i427, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  $bb469:
    assume !(out_$i484 == 1);
    assume {:verifier.code 0} true;
    goto $bb470;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    goto $bb470;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 1035} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_5309;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} cdc_ncm_status(out_$p485, in_$p66);
    goto corral_source_split_5308;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    out_$p485 := $M.56;
    goto corral_source_split_5307;

  $bb468:
    assume out_$i484 == 1;
    goto corral_source_split_5306;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb468, $bb469;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    out_$i484 := $eq.i32(out_$i483, 2);
    goto corral_source_split_5304;

  $bb467:
    assume {:verifier.code 0} true;
    out_$i483 := $M.85;
    goto corral_source_split_5303;

  $bb466:
    assume !(out_$i481 == 1);
    assume {:verifier.code 0} true;
    goto $bb467;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    goto $bb467;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1033} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_5301;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} cdc_ncm_status(out_$p482, in_$p66);
    goto corral_source_split_5300;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    out_$p482 := $M.56;
    goto corral_source_split_5299;

  $bb465:
    assume out_$i481 == 1;
    goto corral_source_split_5298;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb465, $bb466;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    out_$i481 := $eq.i32(out_$i480, 1);
    goto corral_source_split_5216;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    out_$i480 := $M.85;
    goto corral_source_split_5215;

  $bb428:
    assume out_$i431 == 1;
    goto corral_source_split_5214;

  $bb427:
    assume !(out_$i430 == 1);
    assume {:verifier.code 0} true;
    out_$i431 := $eq.i32(out_$i427, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb428, $bb429;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} ldv_stop();
    goto corral_source_split_5311;

  $bb430:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb429:
    assume {:verifier.code 0} true;
    assume !(out_$i431 == 1);
    goto $bb430;

  $bb436:
    assume {:verifier.code 0} true;
    assume !(out_$i434 == 1);
    goto $bb430;

  $bb475:
    assume !(out_$i487 == 1);
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb505:
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb537:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb535:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb532:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb529:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb526:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb523:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb520:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb517:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb514:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb511:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb508:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb504:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb503:
    assume !(out_$i502 == 1);
    assume {:verifier.code 0} true;
    goto $bb504;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    goto $bb504;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1041} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5362;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} out_vslice_dummy_var_164 := cdc_ncm_get_sset_count(out_$p503, in_$i68);
    goto corral_source_split_5361;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    out_$p503 := $M.51;
    goto corral_source_split_5360;

  $bb502:
    assume out_$i502 == 1;
    goto corral_source_split_5359;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb502, $bb503;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    out_$i502 := $eq.i32(out_$i501, 1);
    goto corral_source_split_5357;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    out_$i501 := $M.86;
    goto corral_source_split_5356;

  $bb500:
    assume out_$i500 == 1;
    goto corral_source_split_5355;

  $bb498:
    assume out_$i499 == 1;
    assume {:verifier.code 0} true;
    out_$i500 := $eq.i32(out_$i488, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb500, $bb501;

  $bb492:
    assume out_$i496 == 1;
    assume {:verifier.code 0} true;
    out_$i499 := $slt.i32(out_$i488, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb498, $bb499;

  $bb477:
    assume out_$i489 == 1;
    assume {:verifier.code 0} true;
    out_$i496 := $slt.i32(out_$i488, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb492, $bb493;

  $bb476:
    assume {:verifier.code 0} true;
    out_$i489 := $slt.i32(out_$i488, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb477, $bb478;

  corral_source_split_5313:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1037} out_$i488 := __VERIFIER_nondet_int();
    call {:si_unique_call 1038} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i488);
    call {:si_unique_call 1039} {:cexpr "tmp___74"} boogie_si_record_i32(out_$i488);
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb474:
    assume out_$i487 == 1;
    goto corral_source_split_5313;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb474, $bb475;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    out_$i487 := $ne.i32(out_$i486, 0);
    goto corral_source_split_4557;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    out_$i486 := $M.86;
    goto corral_source_split_4556;

  $bb9:
    assume out_$i97 == 1;
    goto corral_source_split_4555;

  $bb8:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    out_$i97 := $slt.i32(out_$i93, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb507:
    assume !(out_$i506 == 1);
    assume {:verifier.code 0} true;
    goto $bb508;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    goto $bb508;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1043} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5368;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} out_vslice_dummy_var_165 := usbnet_get_settings(out_$p507, out_$p508);
    goto corral_source_split_5367;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    out_$p508 := $M.50;
    goto corral_source_split_5366;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    out_$p507 := $M.51;
    goto corral_source_split_5365;

  $bb506:
    assume out_$i506 == 1;
    goto corral_source_split_5364;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb506, $bb507;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    out_$i506 := $eq.i32(out_$i505, 1);
    goto corral_source_split_5353;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    out_$i505 := $M.86;
    goto corral_source_split_5352;

  $bb499:
    assume !(out_$i499 == 1);
    goto corral_source_split_5351;

  $bb510:
    assume !(out_$i511 == 1);
    assume {:verifier.code 0} true;
    goto $bb511;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    goto $bb511;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1045} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5373;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} usbnet_get_drvinfo(out_$p512, in_$p72);
    goto corral_source_split_5372;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    out_$p512 := $M.51;
    goto corral_source_split_5371;

  $bb509:
    assume out_$i511 == 1;
    goto corral_source_split_5370;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb509, $bb510;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    out_$i511 := $eq.i32(out_$i510, 1);
    goto corral_source_split_5341;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    out_$i510 := $M.86;
    goto corral_source_split_5340;

  $bb494:
    assume out_$i497 == 1;
    goto corral_source_split_5339;

  $bb493:
    assume !(out_$i496 == 1);
    assume {:verifier.code 0} true;
    out_$i497 := $slt.i32(out_$i488, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb494, $bb495;

  $bb513:
    assume !(out_$i514 == 1);
    assume {:verifier.code 0} true;
    goto $bb514;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    goto $bb514;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1047} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5378;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} usbnet_set_msglevel(out_$p515, in_$i73);
    goto corral_source_split_5377;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    out_$p515 := $M.51;
    goto corral_source_split_5376;

  $bb512:
    assume out_$i514 == 1;
    goto corral_source_split_5375;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb512, $bb513;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    out_$i514 := $eq.i32(out_$i513, 1);
    goto corral_source_split_5345;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    out_$i513 := $M.86;
    goto corral_source_split_5344;

  $bb496:
    assume out_$i498 == 1;
    goto corral_source_split_5343;

  $bb495:
    assume !(out_$i497 == 1);
    assume {:verifier.code 0} true;
    out_$i498 := $slt.i32(out_$i488, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb496, $bb497;

  $bb516:
    assume !(out_$i517 == 1);
    assume {:verifier.code 0} true;
    goto $bb517;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    goto $bb517;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1049} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5383;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} out_vslice_dummy_var_166 := ethtool_op_get_ts_info(out_$p518, in_$p70);
    goto corral_source_split_5382;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    out_$p518 := $M.51;
    goto corral_source_split_5381;

  $bb515:
    assume out_$i517 == 1;
    goto corral_source_split_5380;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb515, $bb516;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    out_$i517 := $eq.i32(out_$i516, 1);
    goto corral_source_split_5349;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    out_$i516 := $M.86;
    goto corral_source_split_5348;

  $bb497:
    assume !(out_$i498 == 1);
    goto corral_source_split_5347;

  $bb519:
    assume !(out_$i521 == 1);
    assume {:verifier.code 0} true;
    goto $bb520;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    goto $bb520;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1051} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5389;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} out_vslice_dummy_var_167 := usbnet_set_settings(out_$p522, out_$p523);
    goto corral_source_split_5388;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    out_$p523 := $M.50;
    goto corral_source_split_5387;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    out_$p522 := $M.51;
    goto corral_source_split_5386;

  $bb518:
    assume out_$i521 == 1;
    goto corral_source_split_5385;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb518, $bb519;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    out_$i521 := $eq.i32(out_$i520, 1);
    goto corral_source_split_5329;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    out_$i520 := $M.86;
    goto corral_source_split_5328;

  $bb488:
    assume out_$i494 == 1;
    goto corral_source_split_5327;

  $bb479:
    assume out_$i490 == 1;
    assume {:verifier.code 0} true;
    out_$i494 := $slt.i32(out_$i488, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb488, $bb489;

  $bb478:
    assume !(out_$i489 == 1);
    assume {:verifier.code 0} true;
    out_$i490 := $slt.i32(out_$i488, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb479, $bb480;

  $bb522:
    assume !(out_$i526 == 1);
    assume {:verifier.code 0} true;
    goto $bb523;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    goto $bb523;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1053} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5394;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} cdc_ncm_get_ethtool_stats(out_$p527, in_$p77, in_$p75);
    goto corral_source_split_5393;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    out_$p527 := $M.51;
    goto corral_source_split_5392;

  $bb521:
    assume out_$i526 == 1;
    goto corral_source_split_5391;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb521, $bb522;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    out_$i526 := $eq.i32(out_$i525, 1);
    goto corral_source_split_5333;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    out_$i525 := $M.86;
    goto corral_source_split_5332;

  $bb490:
    assume out_$i495 == 1;
    goto corral_source_split_5331;

  $bb489:
    assume !(out_$i494 == 1);
    assume {:verifier.code 0} true;
    out_$i495 := $slt.i32(out_$i488, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb490, $bb491;

  $bb525:
    assume !(out_$i529 == 1);
    assume {:verifier.code 0} true;
    goto $bb526;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    goto $bb526;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1055} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5399;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} cdc_ncm_get_strings(out_$p530, in_$i67, in_$p78);
    goto corral_source_split_5398;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    out_$p530 := $M.51;
    goto corral_source_split_5397;

  $bb524:
    assume out_$i529 == 1;
    goto corral_source_split_5396;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb524, $bb525;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    out_$i529 := $eq.i32(out_$i528, 1);
    goto corral_source_split_5337;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    out_$i528 := $M.86;
    goto corral_source_split_5336;

  $bb491:
    assume !(out_$i495 == 1);
    goto corral_source_split_5335;

  $bb528:
    assume !(out_$i532 == 1);
    assume {:verifier.code 0} true;
    goto $bb529;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    goto $bb529;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1057} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5404;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} out_vslice_dummy_var_168 := usbnet_nway_reset(out_$p533);
    goto corral_source_split_5403;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    out_$p533 := $M.51;
    goto corral_source_split_5402;

  $bb527:
    assume out_$i532 == 1;
    goto corral_source_split_5401;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb527, $bb528;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    out_$i532 := $eq.i32(out_$i531, 1);
    goto corral_source_split_5317;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    out_$i531 := $M.86;
    goto corral_source_split_5316;

  $bb481:
    assume out_$i491 == 1;
    goto corral_source_split_5315;

  $bb480:
    assume !(out_$i490 == 1);
    assume {:verifier.code 0} true;
    out_$i491 := $slt.i32(out_$i488, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb481, $bb482;

  $bb531:
    assume !(out_$i536 == 1);
    assume {:verifier.code 0} true;
    goto $bb532;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    goto $bb532;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1059} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5409;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} out_vslice_dummy_var_169 := usbnet_get_msglevel(out_$p537);
    goto corral_source_split_5408;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    out_$p537 := $M.51;
    goto corral_source_split_5407;

  $bb530:
    assume out_$i536 == 1;
    goto corral_source_split_5406;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb530, $bb531;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    out_$i536 := $eq.i32(out_$i535, 1);
    goto corral_source_split_5321;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    out_$i535 := $M.86;
    goto corral_source_split_5320;

  $bb483:
    assume out_$i492 == 1;
    goto corral_source_split_5319;

  $bb482:
    assume !(out_$i491 == 1);
    assume {:verifier.code 0} true;
    out_$i492 := $slt.i32(out_$i488, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb483, $bb484;

  $bb534:
    assume !(out_$i540 == 1);
    assume {:verifier.code 0} true;
    goto $bb535;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    goto $bb535;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1061} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_5414;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} out_vslice_dummy_var_170 := usbnet_get_link(out_$p541);
    goto corral_source_split_5413;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    out_$p541 := $M.51;
    goto corral_source_split_5412;

  $bb533:
    assume out_$i540 == 1;
    goto corral_source_split_5411;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb533, $bb534;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    out_$i540 := $eq.i32(out_$i539, 1);
    goto corral_source_split_5325;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    out_$i539 := $M.86;
    goto corral_source_split_5324;

  $bb485:
    assume out_$i493 == 1;
    goto corral_source_split_5323;

  $bb484:
    assume !(out_$i492 == 1);
    assume {:verifier.code 0} true;
    out_$i493 := $eq.i32(out_$i488, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb485, $bb486;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} ldv_stop();
    goto corral_source_split_5416;

  $bb487:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb486:
    assume {:verifier.code 0} true;
    assume !(out_$i493 == 1);
    goto $bb487;

  $bb501:
    assume {:verifier.code 0} true;
    assume !(out_$i500 == 1);
    goto $bb487;

  $bb540:
    assume !(out_$i544 == 1);
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb547:
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb549:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb546:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb545:
    assume !(out_$i548 == 1);
    assume {:verifier.code 0} true;
    goto $bb546;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    goto $bb546;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1067} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_5426;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} out_vslice_dummy_var_171 := cdc_ncm_show_wNdpInAlignment(in_$p82, in_$p80, in_$p83);
    goto corral_source_split_5425;

  $bb544:
    assume out_$i548 == 1;
    goto corral_source_split_5424;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb544, $bb545;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    out_$i548 := $eq.i32(out_$i547, 1);
    goto corral_source_split_5422;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    out_$i547 := $M.87;
    goto corral_source_split_5421;

  $bb542:
    assume out_$i546 == 1;
    goto corral_source_split_5420;

  $bb541:
    assume {:verifier.code 0} true;
    out_$i546 := $eq.i32(out_$i545, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb542, $bb543;

  corral_source_split_5418:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1063} out_$i545 := __VERIFIER_nondet_int();
    call {:si_unique_call 1064} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i545);
    call {:si_unique_call 1065} {:cexpr "tmp___75"} boogie_si_record_i32(out_$i545);
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb539:
    assume out_$i544 == 1;
    goto corral_source_split_5418;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb539, $bb540;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    out_$i544 := $ne.i32(out_$i543, 0);
    goto corral_source_split_4561;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    out_$i543 := $M.87;
    goto corral_source_split_4560;

  $bb11:
    assume out_$i98 == 1;
    goto corral_source_split_4559;

  $bb10:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(out_$i93, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    goto $bb549;

  $bb548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} ldv_stop();
    goto corral_source_split_5428;

  $bb543:
    assume !(out_$i546 == 1);
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb552:
    assume !(out_$i551 == 1);
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb559:
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb561:
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb558:
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb557:
    assume !(out_$i555 == 1);
    assume {:verifier.code 0} true;
    goto $bb558;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    goto $bb558;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1073} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_5438;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} out_vslice_dummy_var_172 := cdc_ncm_show_wNtbOutMaxDatagrams(in_$p85, in_$p87, in_$p88);
    goto corral_source_split_5437;

  $bb556:
    assume out_$i555 == 1;
    goto corral_source_split_5436;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb556, $bb557;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    out_$i555 := $eq.i32(out_$i554, 1);
    goto corral_source_split_5434;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    out_$i554 := $M.88;
    goto corral_source_split_5433;

  $bb554:
    assume out_$i553 == 1;
    goto corral_source_split_5432;

  $bb553:
    assume {:verifier.code 0} true;
    out_$i553 := $eq.i32(out_$i552, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb554, $bb555;

  corral_source_split_5430:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1069} out_$i552 := __VERIFIER_nondet_int();
    call {:si_unique_call 1070} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i552);
    call {:si_unique_call 1071} {:cexpr "tmp___76"} boogie_si_record_i32(out_$i552);
    assume {:verifier.code 0} true;
    goto $bb553;

  $bb551:
    assume out_$i551 == 1;
    goto corral_source_split_5430;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb551, $bb552;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    out_$i551 := $ne.i32(out_$i550, 0);
    goto corral_source_split_4565;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    out_$i550 := $M.88;
    goto corral_source_split_4564;

  $bb13:
    assume out_$i99 == 1;
    goto corral_source_split_4563;

  $bb12:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    out_$i99 := $eq.i32(out_$i93, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} ldv_stop();
    goto corral_source_split_5440;

  $bb555:
    assume !(out_$i553 == 1);
    assume {:verifier.code 0} true;
    goto $bb560;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} ldv_stop();
    goto corral_source_split_5442;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i99 == 1);
    goto $bb15;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(out_$i114 == 1);
    goto $bb15;

  $bb58_dummy:
    call {:si_unique_call 1} out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p137, out_$p138, out_$i140, out_$i141, out_$p142, out_$p143, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$p157, out_$p158, out_$i159, out_$i161, out_$i162, out_$p163, out_$p164, out_$i165, out_$i167, out_$i168, out_$p169, out_$i171, out_$i172, out_$p173, out_$i175, out_$i176, out_$p177, out_$p178, out_$i180, out_$i181, out_$p182, out_$p183, out_$i185, out_$i186, out_$p187, out_$p188, out_$i189, out_$i190, out_$i191, out_$i192, out_$p193, out_$p194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$p225, out_$p226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$p253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$p265, out_$p266, out_$i268, out_$i269, out_$p270, out_$p271, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$p299, out_$i301, out_$i302, out_$p303, out_$p304, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$p332, out_$p333, out_$i334, out_$i336, out_$i337, out_$p338, out_$p339, out_$i340, out_$i342, out_$i343, out_$p344, out_$i346, out_$i347, out_$p348, out_$i350, out_$i351, out_$p352, out_$p353, out_$i355, out_$i356, out_$p357, out_$p358, out_$i360, out_$i361, out_$p362, out_$p363, out_$i364, out_$i365, out_$i366, out_$i367, out_$p368, out_$p369, out_$i370, out_$i371, out_$i372, out_$i373, out_$i374, out_$i375, out_$i376, out_$p377, out_$i378, out_$i379, out_$p380, out_$i381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i386, out_$i388, out_$i389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$p410, out_$p411, out_$i413, out_$i414, out_$p415, out_$p416, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$p437, out_$p438, out_$i439, out_$i441, out_$i442, out_$p443, out_$p444, out_$i445, out_$i447, out_$i448, out_$p449, out_$i451, out_$i452, out_$p453, out_$i455, out_$i456, out_$p457, out_$p458, out_$i460, out_$i461, out_$p462, out_$p463, out_$i465, out_$i466, out_$p467, out_$p468, out_$i469, out_$i470, out_$i471, out_$i472, out_$p473, out_$p474, out_$i475, out_$i476, out_$i477, out_$i478, out_$i479, out_$i480, out_$i481, out_$p482, out_$i483, out_$i484, out_$p485, out_$i486, out_$i487, out_$i488, out_$i489, out_$i490, out_$i491, out_$i492, out_$i493, out_$i494, out_$i495, out_$i496, out_$i497, out_$i498, out_$i499, out_$i500, out_$i501, out_$i502, out_$p503, out_$i505, out_$i506, out_$p507, out_$p508, out_$i510, out_$i511, out_$p512, out_$i513, out_$i514, out_$p515, out_$i516, out_$i517, out_$p518, out_$i520, out_$i521, out_$p522, out_$p523, out_$i525, out_$i526, out_$p527, out_$i528, out_$i529, out_$p530, out_$i531, out_$i532, out_$p533, out_$i535, out_$i536, out_$p537, out_$i539, out_$i540, out_$p541, out_$i543, out_$i544, out_$i545, out_$i546, out_$i547, out_$i548, out_$i550, out_$i551, out_$i552, out_$i553, out_$i554, out_$i555, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p6, in_$p8, in_$p9, in_$p11, in_$p13, in_$p14, in_$i15, in_$p16, in_$i17, in_$p19, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$p27, in_$p28, in_$p30, in_$p32, in_$p33, in_$p35, in_$p37, in_$i38, in_$p40, in_$p42, in_$p44, in_$p45, in_$p47, in_$p49, in_$p50, in_$p52, in_$p54, in_$p55, in_$i56, in_$p57, in_$p58, in_$p60, in_$p62, in_$p63, in_$i64, in_$p66, in_$i67, in_$i68, in_$p70, in_$p72, in_$i73, in_$p75, in_$p77, in_$p78, in_$p80, in_$p82, in_$p83, in_$p85, in_$p87, in_$p88, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p137, out_$p138, out_$i140, out_$i141, out_$p142, out_$p143, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$p157, out_$p158, out_$i159, out_$i161, out_$i162, out_$p163, out_$p164, out_$i165, out_$i167, out_$i168, out_$p169, out_$i171, out_$i172, out_$p173, out_$i175, out_$i176, out_$p177, out_$p178, out_$i180, out_$i181, out_$p182, out_$p183, out_$i185, out_$i186, out_$p187, out_$p188, out_$i189, out_$i190, out_$i191, out_$i192, out_$p193, out_$p194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$p225, out_$p226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$p248, out_$i249, out_$i250, out_$i251, out_$i252, out_$p253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$p265, out_$p266, out_$i268, out_$i269, out_$p270, out_$p271, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$p298, out_$p299, out_$i301, out_$i302, out_$p303, out_$p304, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$p332, out_$p333, out_$i334, out_$i336, out_$i337, out_$p338, out_$p339, out_$i340, out_$i342, out_$i343, out_$p344, out_$i346, out_$i347, out_$p348, out_$i350, out_$i351, out_$p352, out_$p353, out_$i355, out_$i356, out_$p357, out_$p358, out_$i360, out_$i361, out_$p362, out_$p363, out_$i364, out_$i365, out_$i366, out_$i367, out_$p368, out_$p369, out_$i370, out_$i371, out_$i372, out_$i373, out_$i374, out_$i375, out_$i376, out_$p377, out_$i378, out_$i379, out_$p380, out_$i381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i386, out_$i388, out_$i389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i409, out_$p410, out_$p411, out_$i413, out_$i414, out_$p415, out_$p416, out_$i418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$p437, out_$p438, out_$i439, out_$i441, out_$i442, out_$p443, out_$p444, out_$i445, out_$i447, out_$i448, out_$p449, out_$i451, out_$i452, out_$p453, out_$i455, out_$i456, out_$p457, out_$p458, out_$i460, out_$i461, out_$p462, out_$p463, out_$i465, out_$i466, out_$p467, out_$p468, out_$i469, out_$i470, out_$i471, out_$i472, out_$p473, out_$p474, out_$i475, out_$i476, out_$i477, out_$i478, out_$i479, out_$i480, out_$i481, out_$p482, out_$i483, out_$i484, out_$p485, out_$i486, out_$i487, out_$i488, out_$i489, out_$i490, out_$i491, out_$i492, out_$i493, out_$i494, out_$i495, out_$i496, out_$i497, out_$i498, out_$i499, out_$i500, out_$i501, out_$i502, out_$p503, out_$i505, out_$i506, out_$p507, out_$p508, out_$i510, out_$i511, out_$p512, out_$i513, out_$i514, out_$p515, out_$i516, out_$i517, out_$p518, out_$i520, out_$i521, out_$p522, out_$p523, out_$i525, out_$i526, out_$p527, out_$i528, out_$i529, out_$p530, out_$i531, out_$i532, out_$p533, out_$i535, out_$i536, out_$p537, out_$i539, out_$i540, out_$p541, out_$i543, out_$i544, out_$i545, out_$i546, out_$i547, out_$i548, out_$i550, out_$i551, out_$i552, out_$i553, out_$i554, out_$i555, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$i17: i32, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p33: ref, in_$p35: ref, in_$p37: ref, in_$i38: i32, in_$p40: ref, in_$p42: ref, in_$p44: ref, in_$p45: ref, in_$p47: ref, in_$p49: ref, in_$p50: ref, in_$p52: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$p60: ref, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$p70: ref, in_$p72: ref, in_$i73: i32, in_$p75: ref, in_$p77: ref, in_$p78: ref, in_$p80: ref, in_$p82: ref, in_$p83: ref, in_$p85: ref, in_$p87: ref, in_$p88: ref, in_$i93: i32, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i1, in_$i122: i32, in_$i123: i1, in_$i124: i32, in_$i125: i1, in_$i126: i32, in_$i127: i1, in_$i129: i32, in_$i130: i1, in_$i131: i32, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$p138: ref, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$p143: ref, in_$i145: i32, in_$i146: i1, in_$i147: i32, in_$i148: i1, in_$i149: i1, in_$i150: i1, in_$i151: i1, in_$i152: i1, in_$i153: i1, in_$i154: i1, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$p158: ref, in_$i159: i32, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$p164: ref, in_$i165: i32, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$i171: i32, in_$i172: i1, in_$p173: ref, in_$i175: i32, in_$i176: i1, in_$p177: ref, in_$p178: ref, in_$i180: i32, in_$i181: i1, in_$p182: ref, in_$p183: ref, in_$i185: i32, in_$i186: i1, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$p194: ref, in_$i195: i32, in_$i196: i32, in_$i197: i1, in_$i198: i32, in_$i199: i32, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i206: i32, in_$i207: i1, in_$i208: i32, in_$i209: i1, in_$i210: i1, in_$i211: i1, in_$i212: i1, in_$i213: i1, in_$i214: i1, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$i218: i32, in_$i219: i32, in_$i220: i1, in_$i221: i32, in_$i222: i32, in_$i223: i32, in_$i224: i1, in_$p225: ref, in_$p226: ref, in_$i227: i32, in_$i228: i32, in_$i229: i32, in_$i230: i1, in_$i231: i32, in_$i232: i1, in_$p233: ref, in_$i234: i32, in_$i235: i32, in_$i236: i1, in_$i237: i32, in_$i238: i1, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$i242: i32, in_$i243: i32, in_$i244: i32, in_$i245: i1, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$i249: i32, in_$i250: i32, in_$i251: i32, in_$i252: i1, in_$p253: ref, in_$i254: i32, in_$i255: i32, in_$i256: i1, in_$i257: i32, in_$i258: i1, in_$i259: i32, in_$i260: i1, in_$i261: i1, in_$i262: i1, in_$i263: i32, in_$i264: i1, in_$p265: ref, in_$p266: ref, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$p271: ref, in_$i273: i32, in_$i274: i1, in_$i275: i32, in_$i276: i1, in_$i277: i1, in_$i278: i1, in_$i279: i32, in_$i280: i1, in_$i281: i32, in_$i282: i1, in_$i283: i32, in_$i284: i1, in_$i285: i32, in_$i286: i32, in_$i287: i1, in_$i288: i32, in_$i289: i1, in_$i290: i32, in_$i291: i1, in_$i292: i32, in_$i293: i1, in_$i294: i1, in_$i295: i1, in_$i296: i32, in_$i297: i1, in_$p298: ref, in_$p299: ref, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$p304: ref, in_$i306: i32, in_$i307: i1, in_$i308: i32, in_$i309: i1, in_$i310: i32, in_$i311: i1, in_$i313: i32, in_$i314: i1, in_$i315: i32, in_$i316: i1, in_$i317: i32, in_$i318: i1, in_$i320: i32, in_$i321: i1, in_$i322: i32, in_$i323: i1, in_$i324: i1, in_$i325: i1, in_$i326: i1, in_$i327: i1, in_$i328: i1, in_$i329: i1, in_$i330: i32, in_$i331: i1, in_$p332: ref, in_$p333: ref, in_$i334: i32, in_$i336: i32, in_$i337: i1, in_$p338: ref, in_$p339: ref, in_$i340: i32, in_$i342: i32, in_$i343: i1, in_$p344: ref, in_$i346: i32, in_$i347: i1, in_$p348: ref, in_$i350: i32, in_$i351: i1, in_$p352: ref, in_$p353: ref, in_$i355: i32, in_$i356: i1, in_$p357: ref, in_$p358: ref, in_$i360: i32, in_$i361: i1, in_$p362: ref, in_$p363: ref, in_$i364: i32, in_$i365: i32, in_$i366: i32, in_$i367: i1, in_$p368: ref, in_$p369: ref, in_$i370: i32, in_$i371: i32, in_$i372: i1, in_$i373: i32, in_$i374: i32, in_$i375: i32, in_$i376: i1, in_$p377: ref, in_$i378: i32, in_$i379: i1, in_$p380: ref, in_$i381: i32, in_$i382: i1, in_$i383: i32, in_$i384: i1, in_$i385: i32, in_$i386: i1, in_$i388: i32, in_$i389: i1, in_$i390: i32, in_$i391: i1, in_$i392: i32, in_$i393: i1, in_$i395: i32, in_$i396: i1, in_$i397: i32, in_$i398: i1, in_$i399: i32, in_$i400: i1, in_$i402: i32, in_$i403: i1, in_$i404: i32, in_$i405: i1, in_$i406: i1, in_$i407: i1, in_$i408: i32, in_$i409: i1, in_$p410: ref, in_$p411: ref, in_$i413: i32, in_$i414: i1, in_$p415: ref, in_$p416: ref, in_$i418: i32, in_$i419: i1, in_$i420: i32, in_$i421: i1, in_$i422: i32, in_$i423: i1, in_$i425: i32, in_$i426: i1, in_$i427: i32, in_$i428: i1, in_$i429: i1, in_$i430: i1, in_$i431: i1, in_$i432: i1, in_$i433: i1, in_$i434: i1, in_$i435: i32, in_$i436: i1, in_$p437: ref, in_$p438: ref, in_$i439: i32, in_$i441: i32, in_$i442: i1, in_$p443: ref, in_$p444: ref, in_$i445: i32, in_$i447: i32, in_$i448: i1, in_$p449: ref, in_$i451: i32, in_$i452: i1, in_$p453: ref, in_$i455: i32, in_$i456: i1, in_$p457: ref, in_$p458: ref, in_$i460: i32, in_$i461: i1, in_$p462: ref, in_$p463: ref, in_$i465: i32, in_$i466: i1, in_$p467: ref, in_$p468: ref, in_$i469: i32, in_$i470: i32, in_$i471: i32, in_$i472: i1, in_$p473: ref, in_$p474: ref, in_$i475: i32, in_$i476: i32, in_$i477: i1, in_$i478: i32, in_$i479: i32, in_$i480: i32, in_$i481: i1, in_$p482: ref, in_$i483: i32, in_$i484: i1, in_$p485: ref, in_$i486: i32, in_$i487: i1, in_$i488: i32, in_$i489: i1, in_$i490: i1, in_$i491: i1, in_$i492: i1, in_$i493: i1, in_$i494: i1, in_$i495: i1, in_$i496: i1, in_$i497: i1, in_$i498: i1, in_$i499: i1, in_$i500: i1, in_$i501: i32, in_$i502: i1, in_$p503: ref, in_$i505: i32, in_$i506: i1, in_$p507: ref, in_$p508: ref, in_$i510: i32, in_$i511: i1, in_$p512: ref, in_$i513: i32, in_$i514: i1, in_$p515: ref, in_$i516: i32, in_$i517: i1, in_$p518: ref, in_$i520: i32, in_$i521: i1, in_$p522: ref, in_$p523: ref, in_$i525: i32, in_$i526: i1, in_$p527: ref, in_$i528: i32, in_$i529: i1, in_$p530: ref, in_$i531: i32, in_$i532: i1, in_$p533: ref, in_$i535: i32, in_$i536: i1, in_$p537: ref, in_$i539: i32, in_$i540: i1, in_$p541: ref, in_$i543: i32, in_$i544: i1, in_$i545: i32, in_$i546: i1, in_$i547: i32, in_$i548: i1, in_$i550: i32, in_$i551: i1, in_$i552: i32, in_$i553: i1, in_$i554: i32, in_$i555: i1, in_vslice_dummy_var_130: i64, in_vslice_dummy_var_131: i64, in_vslice_dummy_var_132: i64, in_vslice_dummy_var_133: i64, in_vslice_dummy_var_134: ref, in_vslice_dummy_var_135: ref, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i64, in_vslice_dummy_var_141: i64, in_vslice_dummy_var_142: i64, in_vslice_dummy_var_143: i64, in_vslice_dummy_var_144: i64, in_vslice_dummy_var_145: i64, in_vslice_dummy_var_146: ref, in_vslice_dummy_var_147: ref, in_vslice_dummy_var_148: i32, in_vslice_dummy_var_149: i32, in_vslice_dummy_var_150: i32, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i64, in_vslice_dummy_var_153: i64, in_vslice_dummy_var_154: i64, in_vslice_dummy_var_155: i64, in_vslice_dummy_var_156: i64, in_vslice_dummy_var_157: i64, in_vslice_dummy_var_158: ref, in_vslice_dummy_var_159: ref, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: i32, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i32, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32, in_vslice_dummy_var_171: i64, in_vslice_dummy_var_172: i64) returns (out_$i93: i32, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i1, out_$i122: i32, out_$i123: i1, out_$i124: i32, out_$i125: i1, out_$i126: i32, out_$i127: i1, out_$i129: i32, out_$i130: i1, out_$i131: i32, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$p138: ref, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$p143: ref, out_$i145: i32, out_$i146: i1, out_$i147: i32, out_$i148: i1, out_$i149: i1, out_$i150: i1, out_$i151: i1, out_$i152: i1, out_$i153: i1, out_$i154: i1, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$p158: ref, out_$i159: i32, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$p164: ref, out_$i165: i32, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$i171: i32, out_$i172: i1, out_$p173: ref, out_$i175: i32, out_$i176: i1, out_$p177: ref, out_$p178: ref, out_$i180: i32, out_$i181: i1, out_$p182: ref, out_$p183: ref, out_$i185: i32, out_$i186: i1, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$p194: ref, out_$i195: i32, out_$i196: i32, out_$i197: i1, out_$i198: i32, out_$i199: i32, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i206: i32, out_$i207: i1, out_$i208: i32, out_$i209: i1, out_$i210: i1, out_$i211: i1, out_$i212: i1, out_$i213: i1, out_$i214: i1, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$i218: i32, out_$i219: i32, out_$i220: i1, out_$i221: i32, out_$i222: i32, out_$i223: i32, out_$i224: i1, out_$p225: ref, out_$p226: ref, out_$i227: i32, out_$i228: i32, out_$i229: i32, out_$i230: i1, out_$i231: i32, out_$i232: i1, out_$p233: ref, out_$i234: i32, out_$i235: i32, out_$i236: i1, out_$i237: i32, out_$i238: i1, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$i242: i32, out_$i243: i32, out_$i244: i32, out_$i245: i1, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$i249: i32, out_$i250: i32, out_$i251: i32, out_$i252: i1, out_$p253: ref, out_$i254: i32, out_$i255: i32, out_$i256: i1, out_$i257: i32, out_$i258: i1, out_$i259: i32, out_$i260: i1, out_$i261: i1, out_$i262: i1, out_$i263: i32, out_$i264: i1, out_$p265: ref, out_$p266: ref, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$p271: ref, out_$i273: i32, out_$i274: i1, out_$i275: i32, out_$i276: i1, out_$i277: i1, out_$i278: i1, out_$i279: i32, out_$i280: i1, out_$i281: i32, out_$i282: i1, out_$i283: i32, out_$i284: i1, out_$i285: i32, out_$i286: i32, out_$i287: i1, out_$i288: i32, out_$i289: i1, out_$i290: i32, out_$i291: i1, out_$i292: i32, out_$i293: i1, out_$i294: i1, out_$i295: i1, out_$i296: i32, out_$i297: i1, out_$p298: ref, out_$p299: ref, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$p304: ref, out_$i306: i32, out_$i307: i1, out_$i308: i32, out_$i309: i1, out_$i310: i32, out_$i311: i1, out_$i313: i32, out_$i314: i1, out_$i315: i32, out_$i316: i1, out_$i317: i32, out_$i318: i1, out_$i320: i32, out_$i321: i1, out_$i322: i32, out_$i323: i1, out_$i324: i1, out_$i325: i1, out_$i326: i1, out_$i327: i1, out_$i328: i1, out_$i329: i1, out_$i330: i32, out_$i331: i1, out_$p332: ref, out_$p333: ref, out_$i334: i32, out_$i336: i32, out_$i337: i1, out_$p338: ref, out_$p339: ref, out_$i340: i32, out_$i342: i32, out_$i343: i1, out_$p344: ref, out_$i346: i32, out_$i347: i1, out_$p348: ref, out_$i350: i32, out_$i351: i1, out_$p352: ref, out_$p353: ref, out_$i355: i32, out_$i356: i1, out_$p357: ref, out_$p358: ref, out_$i360: i32, out_$i361: i1, out_$p362: ref, out_$p363: ref, out_$i364: i32, out_$i365: i32, out_$i366: i32, out_$i367: i1, out_$p368: ref, out_$p369: ref, out_$i370: i32, out_$i371: i32, out_$i372: i1, out_$i373: i32, out_$i374: i32, out_$i375: i32, out_$i376: i1, out_$p377: ref, out_$i378: i32, out_$i379: i1, out_$p380: ref, out_$i381: i32, out_$i382: i1, out_$i383: i32, out_$i384: i1, out_$i385: i32, out_$i386: i1, out_$i388: i32, out_$i389: i1, out_$i390: i32, out_$i391: i1, out_$i392: i32, out_$i393: i1, out_$i395: i32, out_$i396: i1, out_$i397: i32, out_$i398: i1, out_$i399: i32, out_$i400: i1, out_$i402: i32, out_$i403: i1, out_$i404: i32, out_$i405: i1, out_$i406: i1, out_$i407: i1, out_$i408: i32, out_$i409: i1, out_$p410: ref, out_$p411: ref, out_$i413: i32, out_$i414: i1, out_$p415: ref, out_$p416: ref, out_$i418: i32, out_$i419: i1, out_$i420: i32, out_$i421: i1, out_$i422: i32, out_$i423: i1, out_$i425: i32, out_$i426: i1, out_$i427: i32, out_$i428: i1, out_$i429: i1, out_$i430: i1, out_$i431: i1, out_$i432: i1, out_$i433: i1, out_$i434: i1, out_$i435: i32, out_$i436: i1, out_$p437: ref, out_$p438: ref, out_$i439: i32, out_$i441: i32, out_$i442: i1, out_$p443: ref, out_$p444: ref, out_$i445: i32, out_$i447: i32, out_$i448: i1, out_$p449: ref, out_$i451: i32, out_$i452: i1, out_$p453: ref, out_$i455: i32, out_$i456: i1, out_$p457: ref, out_$p458: ref, out_$i460: i32, out_$i461: i1, out_$p462: ref, out_$p463: ref, out_$i465: i32, out_$i466: i1, out_$p467: ref, out_$p468: ref, out_$i469: i32, out_$i470: i32, out_$i471: i32, out_$i472: i1, out_$p473: ref, out_$p474: ref, out_$i475: i32, out_$i476: i32, out_$i477: i1, out_$i478: i32, out_$i479: i32, out_$i480: i32, out_$i481: i1, out_$p482: ref, out_$i483: i32, out_$i484: i1, out_$p485: ref, out_$i486: i32, out_$i487: i1, out_$i488: i32, out_$i489: i1, out_$i490: i1, out_$i491: i1, out_$i492: i1, out_$i493: i1, out_$i494: i1, out_$i495: i1, out_$i496: i1, out_$i497: i1, out_$i498: i1, out_$i499: i1, out_$i500: i1, out_$i501: i32, out_$i502: i1, out_$p503: ref, out_$i505: i32, out_$i506: i1, out_$p507: ref, out_$p508: ref, out_$i510: i32, out_$i511: i1, out_$p512: ref, out_$i513: i32, out_$i514: i1, out_$p515: ref, out_$i516: i32, out_$i517: i1, out_$p518: ref, out_$i520: i32, out_$i521: i1, out_$p522: ref, out_$p523: ref, out_$i525: i32, out_$i526: i1, out_$p527: ref, out_$i528: i32, out_$i529: i1, out_$p530: ref, out_$i531: i32, out_$i532: i1, out_$p533: ref, out_$i535: i32, out_$i536: i1, out_$p537: ref, out_$i539: i32, out_$i540: i1, out_$p541: ref, out_$i543: i32, out_$i544: i1, out_$i545: i32, out_$i546: i1, out_$i547: i32, out_$i548: i1, out_$i550: i32, out_$i551: i1, out_$i552: i32, out_$i553: i1, out_$i554: i32, out_$i555: i1, out_vslice_dummy_var_130: i64, out_vslice_dummy_var_131: i64, out_vslice_dummy_var_132: i64, out_vslice_dummy_var_133: i64, out_vslice_dummy_var_134: ref, out_vslice_dummy_var_135: ref, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i64, out_vslice_dummy_var_141: i64, out_vslice_dummy_var_142: i64, out_vslice_dummy_var_143: i64, out_vslice_dummy_var_144: i64, out_vslice_dummy_var_145: i64, out_vslice_dummy_var_146: ref, out_vslice_dummy_var_147: ref, out_vslice_dummy_var_148: i32, out_vslice_dummy_var_149: i32, out_vslice_dummy_var_150: i32, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i64, out_vslice_dummy_var_153: i64, out_vslice_dummy_var_154: i64, out_vslice_dummy_var_155: i64, out_vslice_dummy_var_156: i64, out_vslice_dummy_var_157: i64, out_vslice_dummy_var_158: ref, out_vslice_dummy_var_159: ref, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: i32, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i32, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32, out_vslice_dummy_var_171: i64, out_vslice_dummy_var_172: i64);
  modifies $M.68, $M.69, $M.70, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.11, $M.0, $CurrAddr, $M.71, $M.26, $M.27, $M.28, $M.33, $M.32, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.74, $M.89, $M.13, $M.15, $M.17, $M.19, $M.21, $M.23, $M.24, $M.25, $M.72, $M.90, $M.91, $M.41, $M.92, $M.94, $M.73, $M.54, $M.55, $M.44, $M.45, $M.46, $M.60, $M.61, $M.62, $M.63, $M.76, $M.77, $M.78, $M.47, $M.48, $M.49, $M.79, $M.80, $M.81, $M.82, $M.52, $M.53, $M.83, $M.84, $M.56, $M.57, $M.58, $M.85, $M.50, $M.51, $M.86, $M.87, $M.88, $M.75, $M.95, $M.93, $M.59, $M.96, $M.97;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


