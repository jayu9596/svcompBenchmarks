var $M.0: [ref]i32;

var $M.1: [ref]i8;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]ref;

var $M.7: [ref]ref;

var $M.8: [ref]i24;

var $M.9: [ref]i8;

var $M.10: i32;

var $M.14: [ref]i8;

var $M.15: [ref]i8;

var $M.20: [ref]i64;

var $M.22: [ref]i64;

var $M.28: [ref]i32;

var $M.29: [ref]ref;

var $M.30: [ref]ref;

var $M.31: [ref]ref;

var $M.32: [ref]ref;

var $M.33: [ref]i64;

var $M.34: [ref]i64;

var $M.35: [ref]i8;

var $M.37: [ref]i32;

var $M.39: [ref]i64;

var $M.41: [ref]i32;

var $M.43: [ref]i32;

var $M.45: [ref]i32;

var $M.46: [ref]i32;

var $M.48: [ref]i32;

var $M.50: [ref]i32;

var $M.52: [ref]ref;

var $M.54: [ref]i32;

var $M.56: [ref]i32;

var $M.58: [ref]i32;

var $M.60: [ref]i32;

var $M.62: [ref]i32;

var $M.64: [ref]i32;

var $M.66: [ref]i32;

var $M.67: [ref]i32;

var $M.69: [ref]i64;

var $M.70: [ref]ref;

var $M.71: [ref]i32;

var $M.72: [ref]i64;

var $M.73: [ref]i64;

var $M.74: [ref]i64;

var $M.75: [ref]i8;

var $M.76: ref;

var $M.77: ref;

var $M.78: ref;

var $M.79: ref;

var $M.80: ref;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: i32;

var $M.87: i32;

var $M.88: i32;

var $M.89: i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: i32;

var $M.93: i32;

var $M.94: i32;

var $M.95: i32;

var $M.96: i32;

var $M.97: i32;

var $M.98: i32;

var $M.99: i32;

var $M.100: i32;

var $M.101: i32;

var $M.102: i32;

var $M.103: i32;

var $M.104: i32;

var $M.105: i32;

var $M.106: i32;

var $M.107: i32;

var $M.108: i32;

var $M.109: i32;

var $M.110: i32;

var $M.111: i32;

var $M.112: i32;

var $M.113: i32;

var $M.114: i32;

var $M.115: i32;

var $M.116: i32;

var $M.117: i32;

var $M.118: i32;

var $M.119: i32;

var $M.120: i32;

var $M.121: i32;

var $M.122: i32;

var $M.123: i32;

var $M.124: i32;

var $M.125: ref;

var $M.126: ref;

var $M.127: i32;

var $M.128: ref;

var $M.132: [ref]i8;

var $M.135: [ref]i8;

var $M.164: [ref]i8;

var $M.165: [ref]i8;

var $M.166: [ref]i8;

var $M.167: [ref]i8;

var $M.168: [ref]i8;

var $M.169: [ref]i8;

var $M.170: [ref]i8;

var $M.171: [ref]ref;

var $M.172: [ref]i8;

var $M.173: [ref]i8;

var $M.174: [ref]i8;

var $M.175: [ref]i8;

var $M.176: [ref]i8;

var $M.177: [ref]i8;

var $M.206: [ref]i8;

var $M.207: [ref]i8;

var $M.208: [ref]i8;

var $M.209: [ref]i8;

var $M.210: [ref]i8;

var $M.211: [ref]i8;

var $M.212: [ref]i8;

var $M.213: [ref]i8;

var $M.214: [ref]i8;

var $M.215: [ref]i8;

var $M.216: [ref]i8;

var $M.217: [ref]i8;

var $M.218: [ref]i8;

var $M.219: [ref]i8;

var $M.220: [ref]i8;

var $M.221: [ref]i8;

var $M.222: [ref]i8;

var $M.223: [ref]i8;

var $M.224: [ref]i8;

var $M.225: [ref]i8;

var $M.226: [ref]i8;

var $M.227: [ref]i8;

var $M.228: [ref]i8;

var $M.229: [ref]i8;

var $M.230: [ref]i8;

var $M.231: [ref]i8;

var $M.232: [ref]i8;

var $M.233: [ref]i8;

var $M.234: [ref]i8;

var $M.235: [ref]i8;

var $M.236: [ref]i8;

var $M.321: [ref]i8;

var $M.322: [ref]i8;

var $M.323: [ref]i8;

var $M.324: [ref]i8;

var $M.325: [ref]i8;

var $M.326: [ref]i8;

var $M.327: [ref]i8;

var $M.328: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 685208);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const mtd_table_mutex: ref;

axiom mtd_table_mutex == $sub.ref(0, 2212);

const .str: ref;

axiom .str == $sub.ref(0, 3262);

const {:count 16} .str.1: ref;

axiom .str.1 == $sub.ref(0, 4302);

const __ksymtab_mtd_table_mutex: ref;

axiom __ksymtab_mtd_table_mutex == $sub.ref(0, 5342);

const {:count 16} __kstrtab_mtd_table_mutex: ref;

axiom __kstrtab_mtd_table_mutex == $sub.ref(0, 6382);

const __ksymtab___mtd_next_device: ref;

axiom __ksymtab___mtd_next_device == $sub.ref(0, 7422);

const {:count 18} __kstrtab___mtd_next_device: ref;

axiom __kstrtab___mtd_next_device == $sub.ref(0, 8464);

const mtd_mutex: ref;

axiom mtd_mutex == $sub.ref(0, 9648);

const mtd_fops: ref;

axiom mtd_fops == $sub.ref(0, 10896);

const {:count 20} __kstrtab_mtd_get_device_size: ref;

axiom __kstrtab_mtd_get_device_size == $sub.ref(0, 11940);

const {:count 17} __kstrtab_mtd_is_partition: ref;

axiom __kstrtab_mtd_is_partition == $sub.ref(0, 12981);

const {:count 3} default_mtd_part_types: ref;

axiom default_mtd_part_types == $sub.ref(0, 14029);

const {:count 22} __kstrtab_deregister_mtd_parser: ref;

axiom __kstrtab_deregister_mtd_parser == $sub.ref(0, 15075);

const {:count 20} __kstrtab_register_mtd_parser: ref;

axiom __kstrtab_register_mtd_parser == $sub.ref(0, 16119);

const part_parsers: ref;

axiom part_parsers == $sub.ref(0, 17159);

const part_parser_lock: ref;

axiom part_parser_lock == $sub.ref(0, 18255);

const {:count 18} __kstrtab_mtd_del_partition: ref;

axiom __kstrtab_mtd_del_partition == $sub.ref(0, 19297);

const dev_attr_offset: ref;

axiom dev_attr_offset == $sub.ref(0, 20369);

const {:count 2} mtd_partition_attrs: ref;

axiom mtd_partition_attrs == $sub.ref(0, 21409);

const {:count 18} __kstrtab_mtd_add_partition: ref;

axiom __kstrtab_mtd_add_partition == $sub.ref(0, 22451);

const mtd_partitions: ref;

axiom mtd_partitions == $sub.ref(0, 23491);

const mtd_partitions_mutex: ref;

axiom mtd_partitions_mutex == $sub.ref(0, 24675);

const {:count 19} __kstrtab_mtd_erase_callback: ref;

axiom __kstrtab_mtd_erase_callback == $sub.ref(0, 25718);

const {:count 19} __kstrtab_mtd_concat_destroy: ref;

axiom __kstrtab_mtd_concat_destroy == $sub.ref(0, 26761);

const {:count 18} __kstrtab_mtd_concat_create: ref;

axiom __kstrtab_mtd_concat_create == $sub.ref(0, 27803);

const {:count 15} __kstrtab_kill_mtd_super: ref;

axiom __kstrtab_kill_mtd_super == $sub.ref(0, 28842);

const {:count 10} __kstrtab_mount_mtd: ref;

axiom __kstrtab_mount_mtd == $sub.ref(0, 29876);

const mtd_proc_ops: ref;

axiom mtd_proc_ops == $sub.ref(0, 31124);

const proc_mtd: ref;

axiom proc_mtd == $sub.ref(0, 32156);

const {:count 18} __kstrtab_mtd_kmalloc_up_to: ref;

axiom __kstrtab_mtd_kmalloc_up_to == $sub.ref(0, 33198);

const {:count 11} __kstrtab_mtd_writev: ref;

axiom __kstrtab_mtd_writev == $sub.ref(0, 34233);

const {:count 18} __kstrtab_mtd_block_markbad: ref;

axiom __kstrtab_mtd_block_markbad == $sub.ref(0, 35275);

const {:count 16} __kstrtab_mtd_block_isbad: ref;

axiom __kstrtab_mtd_block_isbad == $sub.ref(0, 36315);

const {:count 21} __kstrtab_mtd_block_isreserved: ref;

axiom __kstrtab_mtd_block_isreserved == $sub.ref(0, 37360);

const {:count 14} __kstrtab_mtd_is_locked: ref;

axiom __kstrtab_mtd_is_locked == $sub.ref(0, 38398);

const {:count 11} __kstrtab_mtd_unlock: ref;

axiom __kstrtab_mtd_unlock == $sub.ref(0, 39433);

const {:count 9} __kstrtab_mtd_lock: ref;

axiom __kstrtab_mtd_lock == $sub.ref(0, 40466);

const {:count 23} __kstrtab_mtd_lock_user_prot_reg: ref;

axiom __kstrtab_mtd_lock_user_prot_reg == $sub.ref(0, 41513);

const {:count 24} __kstrtab_mtd_write_user_prot_reg: ref;

axiom __kstrtab_mtd_write_user_prot_reg == $sub.ref(0, 42561);

const {:count 23} __kstrtab_mtd_read_user_prot_reg: ref;

axiom __kstrtab_mtd_read_user_prot_reg == $sub.ref(0, 43608);

const {:count 23} __kstrtab_mtd_get_user_prot_info: ref;

axiom __kstrtab_mtd_get_user_prot_info == $sub.ref(0, 44655);

const {:count 23} __kstrtab_mtd_read_fact_prot_reg: ref;

axiom __kstrtab_mtd_read_fact_prot_reg == $sub.ref(0, 45702);

const {:count 23} __kstrtab_mtd_get_fact_prot_info: ref;

axiom __kstrtab_mtd_get_fact_prot_info == $sub.ref(0, 46749);

const {:count 13} __kstrtab_mtd_read_oob: ref;

axiom __kstrtab_mtd_read_oob == $sub.ref(0, 47786);

const {:count 16} __kstrtab_mtd_panic_write: ref;

axiom __kstrtab_mtd_panic_write == $sub.ref(0, 48826);

const {:count 10} __kstrtab_mtd_write: ref;

axiom __kstrtab_mtd_write == $sub.ref(0, 49860);

const {:count 9} __kstrtab_mtd_read: ref;

axiom __kstrtab_mtd_read == $sub.ref(0, 50893);

const {:count 22} __kstrtab_mtd_get_unmapped_area: ref;

axiom __kstrtab_mtd_get_unmapped_area == $sub.ref(0, 51939);

const {:count 12} __kstrtab_mtd_unpoint: ref;

axiom __kstrtab_mtd_unpoint == $sub.ref(0, 52975);

const {:count 10} __kstrtab_mtd_point: ref;

axiom __kstrtab_mtd_point == $sub.ref(0, 54009);

const {:count 10} __kstrtab_mtd_erase: ref;

axiom __kstrtab_mtd_erase == $sub.ref(0, 55043);

const {:count 17} __kstrtab___put_mtd_device: ref;

axiom __kstrtab___put_mtd_device == $sub.ref(0, 56084);

const {:count 15} __kstrtab_put_mtd_device: ref;

axiom __kstrtab_put_mtd_device == $sub.ref(0, 57123);

const {:count 18} __kstrtab_get_mtd_device_nm: ref;

axiom __kstrtab_get_mtd_device_nm == $sub.ref(0, 58165);

const {:count 17} __kstrtab___get_mtd_device: ref;

axiom __kstrtab___get_mtd_device == $sub.ref(0, 59206);

const {:count 15} __kstrtab_get_mtd_device: ref;

axiom __kstrtab_get_mtd_device == $sub.ref(0, 60245);

const {:count 20} __kstrtab_unregister_mtd_user: ref;

axiom __kstrtab_unregister_mtd_user == $sub.ref(0, 61289);

const {:count 18} __kstrtab_register_mtd_user: ref;

axiom __kstrtab_register_mtd_user == $sub.ref(0, 62331);

const {:count 22} __kstrtab_mtd_device_unregister: ref;

axiom __kstrtab_mtd_device_unregister == $sub.ref(0, 63377);

const {:count 26} __kstrtab_mtd_device_parse_register: ref;

axiom __kstrtab_mtd_device_parse_register == $sub.ref(0, 64427);

const mtd_notifiers: ref;

axiom mtd_notifiers == $sub.ref(0, 65467);

const mtd_cls_pm_ops: ref;

axiom mtd_cls_pm_ops == $sub.ref(0, 66675);

const mtd_class: ref;

axiom mtd_class == $sub.ref(0, 67819);

const dev_attr_bitflip_threshold: ref;

axiom dev_attr_bitflip_threshold == $sub.ref(0, 68891);

const dev_attr_bbt_blocks: ref;

axiom dev_attr_bbt_blocks == $sub.ref(0, 69963);

const dev_attr_bad_blocks: ref;

axiom dev_attr_bad_blocks == $sub.ref(0, 71035);

const dev_attr_ecc_failures: ref;

axiom dev_attr_ecc_failures == $sub.ref(0, 72107);

const dev_attr_corrected_bits: ref;

axiom dev_attr_corrected_bits == $sub.ref(0, 73179);

const dev_attr_ecc_step_size: ref;

axiom dev_attr_ecc_step_size == $sub.ref(0, 74251);

const dev_attr_ecc_strength: ref;

axiom dev_attr_ecc_strength == $sub.ref(0, 75323);

const dev_attr_name: ref;

axiom dev_attr_name == $sub.ref(0, 76395);

const dev_attr_numeraseregions: ref;

axiom dev_attr_numeraseregions == $sub.ref(0, 77467);

const dev_attr_oobsize: ref;

axiom dev_attr_oobsize == $sub.ref(0, 78539);

const dev_attr_subpagesize: ref;

axiom dev_attr_subpagesize == $sub.ref(0, 79611);

const dev_attr_writesize: ref;

axiom dev_attr_writesize == $sub.ref(0, 80683);

const dev_attr_erasesize: ref;

axiom dev_attr_erasesize == $sub.ref(0, 81755);

const dev_attr_size: ref;

axiom dev_attr_size == $sub.ref(0, 82827);

const dev_attr_flags: ref;

axiom dev_attr_flags == $sub.ref(0, 83899);

const dev_attr_type: ref;

axiom dev_attr_type == $sub.ref(0, 84971);

const {:count 17} mtd_attrs: ref;

axiom mtd_attrs == $sub.ref(0, 86131);

const mtd_group: ref;

axiom mtd_group == $sub.ref(0, 87187);

const {:count 2} mtd_groups: ref;

axiom mtd_groups == $sub.ref(0, 88227);

const mtd_devtype: ref;

axiom mtd_devtype == $sub.ref(0, 89299);

const mtd_bdi: ref;

axiom mtd_bdi == $sub.ref(0, 92187);

const mtd_idr: ref;

axiom mtd_idr == $sub.ref(0, 93323);

const ldv_retval_19: ref;

axiom ldv_retval_19 == $sub.ref(0, 94351);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 95379);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 96407);

const ldv_retval_10: ref;

axiom ldv_retval_10 == $sub.ref(0, 97435);

const ldv_retval_9: ref;

axiom ldv_retval_9 == $sub.ref(0, 98463);

const ldv_retval_13: ref;

axiom ldv_retval_13 == $sub.ref(0, 99491);

const ldv_retval_21: ref;

axiom ldv_retval_21 == $sub.ref(0, 100519);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 101547);

const ldv_retval_12: ref;

axiom ldv_retval_12 == $sub.ref(0, 102575);

const ldv_retval_17: ref;

axiom ldv_retval_17 == $sub.ref(0, 103603);

const ldv_retval_14: ref;

axiom ldv_retval_14 == $sub.ref(0, 104631);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 105659);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 106687);

const ldv_retval_16: ref;

axiom ldv_retval_16 == $sub.ref(0, 107715);

const ldv_retval_15: ref;

axiom ldv_retval_15 == $sub.ref(0, 108743);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 109771);

const ldv_retval_11: ref;

axiom ldv_retval_11 == $sub.ref(0, 110799);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 111827);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 112855);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 113883);

const ldv_retval_18: ref;

axiom ldv_retval_18 == $sub.ref(0, 114911);

const ldv_retval_20: ref;

axiom ldv_retval_20 == $sub.ref(0, 115939);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 116967);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 117995);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 119023);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 120051);

const mtd_proc_ops_group1: ref;

axiom mtd_proc_ops_group1 == $sub.ref(0, 121083);

const dev_attr_bitflip_threshold_group1: ref;

axiom dev_attr_bitflip_threshold_group1 == $sub.ref(0, 122115);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 123143);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 124171);

const ldv_state_variable_19: ref;

axiom ldv_state_variable_19 == $sub.ref(0, 125199);

const dev_attr_bitflip_threshold_group0: ref;

axiom dev_attr_bitflip_threshold_group0 == $sub.ref(0, 126231);

const mtd_proc_ops_group2: ref;

axiom mtd_proc_ops_group2 == $sub.ref(0, 127263);

const ldv_state_variable_18: ref;

axiom ldv_state_variable_18 == $sub.ref(0, 128291);

const ldv_state_variable_17: ref;

axiom ldv_state_variable_17 == $sub.ref(0, 129319);

const ldv_state_variable_11: ref;

axiom ldv_state_variable_11 == $sub.ref(0, 130347);

const ldv_state_variable_14: ref;

axiom ldv_state_variable_14 == $sub.ref(0, 131375);

const mtd_cls_pm_ops_group1: ref;

axiom mtd_cls_pm_ops_group1 == $sub.ref(0, 132407);

const ldv_state_variable_12: ref;

axiom ldv_state_variable_12 == $sub.ref(0, 133435);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 134463);

const ldv_state_variable_13: ref;

axiom ldv_state_variable_13 == $sub.ref(0, 135491);

const ldv_state_variable_16: ref;

axiom ldv_state_variable_16 == $sub.ref(0, 136519);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 137547);

const ldv_state_variable_21: ref;

axiom ldv_state_variable_21 == $sub.ref(0, 138575);

const mtd_fops_group2: ref;

axiom mtd_fops_group2 == $sub.ref(0, 139607);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 140635);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 141663);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 142691);

const ldv_state_variable_20: ref;

axiom ldv_state_variable_20 == $sub.ref(0, 143719);

const ldv_state_variable_15: ref;

axiom ldv_state_variable_15 == $sub.ref(0, 144747);

const mtd_fops_group1: ref;

axiom mtd_fops_group1 == $sub.ref(0, 145779);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 146807);

const ldv_module_refcounter: ref;

axiom ldv_module_refcounter == $sub.ref(0, 147835);

const __ksymtab_mtd_get_device_size: ref;

axiom __ksymtab_mtd_get_device_size == $sub.ref(0, 148875);

const __ksymtab_mtd_is_partition: ref;

axiom __ksymtab_mtd_is_partition == $sub.ref(0, 149915);

const __ksymtab_deregister_mtd_parser: ref;

axiom __ksymtab_deregister_mtd_parser == $sub.ref(0, 150955);

const __ksymtab_register_mtd_parser: ref;

axiom __ksymtab_register_mtd_parser == $sub.ref(0, 151995);

const __ksymtab_mtd_del_partition: ref;

axiom __ksymtab_mtd_del_partition == $sub.ref(0, 153035);

const __ksymtab_mtd_add_partition: ref;

axiom __ksymtab_mtd_add_partition == $sub.ref(0, 154075);

const __ksymtab_mtd_erase_callback: ref;

axiom __ksymtab_mtd_erase_callback == $sub.ref(0, 155115);

const __ksymtab_mtd_concat_destroy: ref;

axiom __ksymtab_mtd_concat_destroy == $sub.ref(0, 156155);

const __ksymtab_mtd_concat_create: ref;

axiom __ksymtab_mtd_concat_create == $sub.ref(0, 157195);

const __ksymtab_kill_mtd_super: ref;

axiom __ksymtab_kill_mtd_super == $sub.ref(0, 158235);

const __ksymtab_mount_mtd: ref;

axiom __ksymtab_mount_mtd == $sub.ref(0, 159275);

const __ksymtab_mtd_kmalloc_up_to: ref;

axiom __ksymtab_mtd_kmalloc_up_to == $sub.ref(0, 160315);

const __ksymtab_mtd_writev: ref;

axiom __ksymtab_mtd_writev == $sub.ref(0, 161355);

const __ksymtab_mtd_block_markbad: ref;

axiom __ksymtab_mtd_block_markbad == $sub.ref(0, 162395);

const __ksymtab_mtd_block_isbad: ref;

axiom __ksymtab_mtd_block_isbad == $sub.ref(0, 163435);

const __ksymtab_mtd_block_isreserved: ref;

axiom __ksymtab_mtd_block_isreserved == $sub.ref(0, 164475);

const __ksymtab_mtd_is_locked: ref;

axiom __ksymtab_mtd_is_locked == $sub.ref(0, 165515);

const __ksymtab_mtd_unlock: ref;

axiom __ksymtab_mtd_unlock == $sub.ref(0, 166555);

const __ksymtab_mtd_lock: ref;

axiom __ksymtab_mtd_lock == $sub.ref(0, 167595);

const __ksymtab_mtd_lock_user_prot_reg: ref;

axiom __ksymtab_mtd_lock_user_prot_reg == $sub.ref(0, 168635);

const __ksymtab_mtd_write_user_prot_reg: ref;

axiom __ksymtab_mtd_write_user_prot_reg == $sub.ref(0, 169675);

const __ksymtab_mtd_read_user_prot_reg: ref;

axiom __ksymtab_mtd_read_user_prot_reg == $sub.ref(0, 170715);

const __ksymtab_mtd_get_user_prot_info: ref;

axiom __ksymtab_mtd_get_user_prot_info == $sub.ref(0, 171755);

const __ksymtab_mtd_read_fact_prot_reg: ref;

axiom __ksymtab_mtd_read_fact_prot_reg == $sub.ref(0, 172795);

const __ksymtab_mtd_get_fact_prot_info: ref;

axiom __ksymtab_mtd_get_fact_prot_info == $sub.ref(0, 173835);

const __ksymtab_mtd_read_oob: ref;

axiom __ksymtab_mtd_read_oob == $sub.ref(0, 174875);

const __ksymtab_mtd_panic_write: ref;

axiom __ksymtab_mtd_panic_write == $sub.ref(0, 175915);

const __ksymtab_mtd_write: ref;

axiom __ksymtab_mtd_write == $sub.ref(0, 176955);

const __ksymtab_mtd_read: ref;

axiom __ksymtab_mtd_read == $sub.ref(0, 177995);

const __ksymtab_mtd_get_unmapped_area: ref;

axiom __ksymtab_mtd_get_unmapped_area == $sub.ref(0, 179035);

const __ksymtab_mtd_unpoint: ref;

axiom __ksymtab_mtd_unpoint == $sub.ref(0, 180075);

const __ksymtab_mtd_point: ref;

axiom __ksymtab_mtd_point == $sub.ref(0, 181115);

const __ksymtab_mtd_erase: ref;

axiom __ksymtab_mtd_erase == $sub.ref(0, 182155);

const __ksymtab___put_mtd_device: ref;

axiom __ksymtab___put_mtd_device == $sub.ref(0, 183195);

const __ksymtab_put_mtd_device: ref;

axiom __ksymtab_put_mtd_device == $sub.ref(0, 184235);

const __ksymtab_get_mtd_device_nm: ref;

axiom __ksymtab_get_mtd_device_nm == $sub.ref(0, 185275);

const __ksymtab___get_mtd_device: ref;

axiom __ksymtab___get_mtd_device == $sub.ref(0, 186315);

const __ksymtab_get_mtd_device: ref;

axiom __ksymtab_get_mtd_device == $sub.ref(0, 187355);

const __ksymtab_unregister_mtd_user: ref;

axiom __ksymtab_unregister_mtd_user == $sub.ref(0, 188395);

const __ksymtab_register_mtd_user: ref;

axiom __ksymtab_register_mtd_user == $sub.ref(0, 189435);

const __ksymtab_mtd_device_unregister: ref;

axiom __ksymtab_mtd_device_unregister == $sub.ref(0, 190475);

const __ksymtab_mtd_device_parse_register: ref;

axiom __ksymtab_mtd_device_parse_register == $sub.ref(0, 191515);

const {:count 49} .str.9: ref;

axiom .str.9 == $sub.ref(0, 192588);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 38} .str.27: ref;

axiom .str.27 == $sub.ref(0, 193650);

const {:count 48} .str.86: ref;

axiom .str.86 == $sub.ref(0, 194722);

const {:count 61} .str.77: ref;

axiom .str.77 == $sub.ref(0, 195807);

const {:count 46} .str.78: ref;

axiom .str.78 == $sub.ref(0, 196877);

const {:count 72} .str.79: ref;

axiom .str.79 == $sub.ref(0, 197973);

const {:count 28} .str.80: ref;

axiom .str.80 == $sub.ref(0, 199025);

const {:count 50} .str.81: ref;

axiom .str.81 == $sub.ref(0, 200099);

const {:count 87} .str.82: ref;

axiom .str.82 == $sub.ref(0, 201210);

const {:count 200} .str.83: ref;

axiom .str.83 == $sub.ref(0, 202434);

const {:count 82} .str.84: ref;

axiom .str.84 == $sub.ref(0, 203540);

const {:count 71} .str.85: ref;

axiom .str.85 == $sub.ref(0, 204635);

const {:count 200} .str.2: ref;

axiom .str.2 == $sub.ref(0, 205859);

const {:count 41} .str.3: ref;

axiom .str.3 == $sub.ref(0, 206924);

const {:count 6} .str.4: ref;

axiom .str.4 == $sub.ref(0, 207954);

const {:count 8} .str.5: ref;

axiom .str.5 == $sub.ref(0, 208986);

const {:count 4} .str.6: ref;

axiom .str.6 == $sub.ref(0, 210014);

const {:count 15} .str.7: ref;

axiom .str.7 == $sub.ref(0, 211053);

const {:count 33} .str.8: ref;

axiom .str.8 == $sub.ref(0, 212110);

const {:count 3} .str.28: ref;

axiom .str.28 == $sub.ref(0, 213137);

const {:count 42} .str.29: ref;

axiom .str.29 == $sub.ref(0, 214203);

const {:count 10} .str.10: ref;

axiom .str.10 == $sub.ref(0, 215237);

const {:count 201} .str.11: ref;

axiom .str.11 == $sub.ref(0, 216462);

const {:count 22} .str.12: ref;

axiom .str.12 == $sub.ref(0, 217508);

const {:count 27} .str.13: ref;

axiom .str.13 == $sub.ref(0, 218559);

const {:count 44} .str.14: ref;

axiom .str.14 == $sub.ref(0, 219627);

const _ctype: ref;

axiom _ctype == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 25} .str.15: ref;

axiom .str.15 == $sub.ref(0, 220676);

const {:count 34} .str.16: ref;

axiom .str.16 == $sub.ref(0, 221734);

const {:count 33} .str.17: ref;

axiom .str.17 == $sub.ref(0, 222791);

const {:count 44} .str.18: ref;

axiom .str.18 == $sub.ref(0, 223859);

const {:count 13} .str.71: ref;

axiom .str.71 == $sub.ref(0, 224896);

const {:count 43} .str.72: ref;

axiom .str.72 == $sub.ref(0, 225963);

const {:count 14} .str.65: ref;

axiom .str.65 == $sub.ref(0, 227001);

const {:count 44} .str.66: ref;

axiom .str.66 == $sub.ref(0, 228069);

const {:count 44} .str.67: ref;

axiom .str.67 == $sub.ref(0, 229137);

const {:count 19} .str.68: ref;

axiom .str.68 == $sub.ref(0, 230180);

const {:count 34} .str.69: ref;

axiom .str.69 == $sub.ref(0, 231238);

const {:count 53} .str.70: ref;

axiom .str.70 == $sub.ref(0, 232315);

const {:count 29} .str.19: ref;

axiom .str.19 == $sub.ref(0, 233368);

const {:count 13} .str.20: ref;

axiom .str.20 == $sub.ref(0, 234405);

const {:count 19} .str.21: ref;

axiom .str.21 == $sub.ref(0, 235448);

const {:count 65} .str.22: ref;

axiom .str.22 == $sub.ref(0, 236537);

const {:count 34} .str.23: ref;

axiom .str.23 == $sub.ref(0, 237595);

const {:count 35} .str.24: ref;

axiom .str.24 == $sub.ref(0, 238654);

const {:count 38} .str.25: ref;

axiom .str.25 == $sub.ref(0, 239716);

const {:count 74} .str.26: ref;

axiom .str.26 == $sub.ref(0, 240814);

const {:count 202} .str.73: ref;

axiom .str.73 == $sub.ref(0, 242040);

const {:count 7} .str.74: ref;

axiom .str.74 == $sub.ref(0, 243071);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 13} .str.31: ref;

axiom .str.31 == $sub.ref(0, 244108);

const {:count 5} .str.32: ref;

axiom .str.32 == $sub.ref(0, 245137);

const {:count 7} .str.55: ref;

axiom .str.55 == $sub.ref(0, 246168);

const {:count 4} .str.56: ref;

axiom .str.56 == $sub.ref(0, 247196);

const {:count 4} .str.57: ref;

axiom .str.57 == $sub.ref(0, 248224);

const {:count 4} .str.58: ref;

axiom .str.58 == $sub.ref(0, 249252);

const {:count 5} .str.59: ref;

axiom .str.59 == $sub.ref(0, 250281);

const {:count 10} .str.60: ref;

axiom .str.60 == $sub.ref(0, 251315);

const {:count 4} .str.61: ref;

axiom .str.61 == $sub.ref(0, 252343);

const {:count 9} .str.62: ref;

axiom .str.62 == $sub.ref(0, 253376);

const {:count 8} .str.63: ref;

axiom .str.63 == $sub.ref(0, 254408);

const {:count 4} .str.54: ref;

axiom .str.54 == $sub.ref(0, 255436);

const {:count 6} .str.33: ref;

axiom .str.33 == $sub.ref(0, 256466);

const {:count 7} .str.64: ref;

axiom .str.64 == $sub.ref(0, 257497);

const {:count 5} .str.34: ref;

axiom .str.34 == $sub.ref(0, 258526);

const {:count 6} .str.50: ref;

axiom .str.50 == $sub.ref(0, 259556);

const {:count 10} .str.35: ref;

axiom .str.35 == $sub.ref(0, 260590);

const {:count 5} .str.49: ref;

axiom .str.49 == $sub.ref(0, 261619);

const {:count 10} .str.36: ref;

axiom .str.36 == $sub.ref(0, 262653);

const {:count 12} .str.37: ref;

axiom .str.37 == $sub.ref(0, 263689);

const {:count 4} .str.48: ref;

axiom .str.48 == $sub.ref(0, 264717);

const {:count 8} .str.38: ref;

axiom .str.38 == $sub.ref(0, 265749);

const {:count 16} .str.39: ref;

axiom .str.39 == $sub.ref(0, 266789);

const {:count 5} .str.40: ref;

axiom .str.40 == $sub.ref(0, 267818);

const {:count 13} .str.41: ref;

axiom .str.41 == $sub.ref(0, 268855);

const {:count 14} .str.42: ref;

axiom .str.42 == $sub.ref(0, 269893);

const {:count 15} .str.43: ref;

axiom .str.43 == $sub.ref(0, 270932);

const {:count 13} .str.44: ref;

axiom .str.44 == $sub.ref(0, 271969);

const {:count 11} .str.45: ref;

axiom .str.45 == $sub.ref(0, 273004);

const {:count 11} .str.46: ref;

axiom .str.46 == $sub.ref(0, 274039);

const {:count 18} .str.47: ref;

axiom .str.47 == $sub.ref(0, 275081);

const {:count 32} .str.52: ref;

axiom .str.52 == $sub.ref(0, 276137);

const {:count 27} .str.53: ref;

axiom .str.53 == $sub.ref(0, 277188);

const {:count 31} .str.75: ref;

axiom .str.75 == $sub.ref(0, 278243);

const {:count 21} .str.76: ref;

axiom .str.76 == $sub.ref(0, 279288);

const {:count 7} .str.87: ref;

axiom .str.87 == $sub.ref(0, 280319);

const {:count 6} .str.91: ref;

axiom .str.91 == $sub.ref(0, 281349);

const {:count 17} .str.88: ref;

axiom .str.88 == $sub.ref(0, 282390);

const {:count 12} .str.89: ref;

axiom .str.89 == $sub.ref(0, 283426);

const {:count 7} .str.90: ref;

axiom .str.90 == $sub.ref(0, 284457);

const {:count 14} .str.104: ref;

axiom .str.104 == $sub.ref(0, 285495);

const {:count 200} .str.93: ref;

axiom .str.93 == $sub.ref(0, 286719);

const {:count 11} .str.105: ref;

axiom .str.105 == $sub.ref(0, 287754);

const {:count 13} .str.102: ref;

axiom .str.102 == $sub.ref(0, 288791);

const {:count 10} .str.103: ref;

axiom .str.103 == $sub.ref(0, 289825);

const high_memory: ref;

axiom high_memory == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const boot_cpu_data: ref;

axiom boot_cpu_data == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const __cachemode2pte_tbl: ref;

axiom __cachemode2pte_tbl == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 14} .str.100: ref;

axiom .str.100 == $sub.ref(0, 290863);

const {:count 11} .str.101: ref;

axiom .str.101 == $sub.ref(0, 291898);

const {:count 33} .str.95: ref;

axiom .str.95 == $sub.ref(0, 292955);

const cpu_tss: ref;

axiom cpu_tss == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 14} .str.92: ref;

axiom .str.92 == $sub.ref(0, 293993);

const {:count 11} .str.94: ref;

axiom .str.94 == $sub.ref(0, 295028);

const {:count 13} .str.96: ref;

axiom .str.96 == $sub.ref(0, 296065);

const {:count 10} .str.97: ref;

axiom .str.97 == $sub.ref(0, 297099);

const {:count 20} .str.98: ref;

axiom .str.98 == $sub.ref(0, 298143);

const {:count 10} .str.99: ref;

axiom .str.99 == $sub.ref(0, 299177);

const {:count 41} .str.51: ref;

axiom .str.51 == $sub.ref(0, 300242);

const {:count 41} .str.30: ref;

axiom .str.30 == $sub.ref(0, 301307);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 302339);

const {:count 3} .str.1.224: ref;

axiom .str.1.224 == $sub.ref(0, 303366);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 304404);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 305432);

const __mtd_next_device: ref;

axiom __mtd_next_device == $sub.ref(0, 306464);

procedure __mtd_next_device($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation __mtd_next_device($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i0);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p2 := idr_get_next(mtd_idr, $p1);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 307496);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const idr_get_next: ref;

axiom idr_get_next == $sub.ref(0, 308528);

procedure idr_get_next($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation idr_get_next($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := external_alloc();
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 309560);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 4} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const mtd_device_parse_register: ref;

axiom mtd_device_parse_register == $sub.ref(0, 310592);

procedure mtd_device_parse_register($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32);



const parse_mtd_partitions: ref;

axiom parse_mtd_partitions == $sub.ref(0, 311624);

procedure parse_mtd_partitions($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);



const kmemdup: ref;

axiom kmemdup == $sub.ref(0, 312656);

procedure kmemdup($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);



const mtd_add_device_partitions: ref;

axiom mtd_add_device_partitions == $sub.ref(0, 313688);

procedure mtd_add_device_partitions($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const mtd_reboot_notifier: ref;

axiom mtd_reboot_notifier == $sub.ref(0, 314720);

procedure mtd_reboot_notifier($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation mtd_reboot_notifier($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} {:cexpr "mtd_reboot_notifier:arg:state"} boogie_si_record_i64($i1);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 336), 1832));
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 336), 1832)), $mul.ref(304, 1));
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    call {:si_unique_call 6} devirtbounce.1($p6, $p4);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const register_reboot_notifier: ref;

axiom register_reboot_notifier == $sub.ref(0, 315752);

procedure register_reboot_notifier($p0: ref) returns ($r: i32);



const kfree: ref;

axiom kfree == $sub.ref(0, 316784);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} free_($p0);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 317816);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 8} $free($p0);
    return;
}



const add_mtd_device: ref;

axiom add_mtd_device == $sub.ref(0, 318848);

procedure add_mtd_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.10, assertsPassed;



implementation add_mtd_device($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $i25: i1;
  var $i26: i8;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $i37: i1;
  var $i38: i8;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i64;
  var $i66: i32;
  var $i67: i1;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p73: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $p79: ref;
  var $p80: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i24;
  var $i101: i24;
  var $i102: i24;
  var $p103: ref;
  var $p104: ref;
  var $i105: i8;
  var $i106: i64;
  var $i107: i64;
  var $i108: i64;
  var $i109: i1;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i64;
  var $i117: i1;
  var $p119: ref;
  var $p120: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $p118: ref;
  var $i13: i32;
  var $i129: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(328, 1));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, mtd_bdi);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(20, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 11} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} mutex_lock_nested(mtd_table_mutex, 0);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i11 := idr_alloc(mtd_idr, $p10, 0, 0, 208);
    call {:si_unique_call 15} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(64, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p14, $i11);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(1824, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p15, 0);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(52, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.1, $p16);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(16, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p22);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i25 := is_power_of_2($i24);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i8($i25);
    call {:si_unique_call 18} {:cexpr "tmp___1"} boogie_si_record_i8($i26);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i26);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i27 == 1);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(36, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p33, 0);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(20, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i35);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i37 := is_power_of_2($i36);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i8($i37);
    call {:si_unique_call 22} {:cexpr "tmp___3"} boogie_si_record_i8($i38);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i38);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i39 == 1);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(40, 1));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p45, 0);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(36, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.1, $p46);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i48 := $shl.i32(1, $i47);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, $sub.i32(0, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(44, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p50, $i49);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(40, 1));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.1, $p51);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i53 := $shl.i32(1, $i52);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, $sub.i32(0, 1));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(48, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p55, $i54);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(4, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.1, $p56);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 1024);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(400, 1)), $mul.ref(320, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p73, mtd_devtype);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(400, 1)), $mul.ref(1384, 1));
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p75, mtd_class);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i76 := $mul.i32($i11, 2);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i77 := $or.i32($i76, 94371840);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(400, 1)), $mul.ref(1256, 1));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p79, $i77);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(400, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} vslice_dummy_var_60 := dev_set_name.ref.ref.i32($p80, .str.4, $i11);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(400, 1));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p0);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} dev_set_drvdata($p82, $p83);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(400, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i85 := device_register($p84);
    call {:si_unique_call 31} {:cexpr "error"} boogie_si_record_i32($i85);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(400, 1)), $mul.ref(0, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.1, $p88);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i90 := $mul.i32($i11, 2);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i91 := $or.i32($i90, 94371840);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i91, 1);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} vslice_dummy_var_61 := device_create.ref.ref.i32.ref.ref.i32(mtd_class, $p89, $i92, $0.ref, .str.5, $i11);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p94, .str.6);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p95, .str.7);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p96, .str.2);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p97, .str.8);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i100 := $load.i24($M.8, $p99);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i101 := $and.i24($i100, $sub.i24(0, 262144));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i102 := $or.i24($i101, 447);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p99, $i102);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p103, 0);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.9, $p104);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i64($i105);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i107 := $and.i64($i106, 1);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $i108 := ldv__builtin_expect($i107, 0);
    call {:si_unique_call 35} {:cexpr "tmp___4"} boogie_si_record_i64($i108);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i109 := $ne.i64($i108, 0);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.1, mtd_notifiers);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p113, $mul.ref($sub.ref(0, 16), 32));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p113, $mul.ref($sub.ref(0, 16), 32)), $mul.ref(16, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i116 := $p2i.ref.i64($p115);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i117 := $ne.i64($i116, $p2i.ref.i64(mtd_notifiers));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} mutex_unlock(mtd_table_mutex);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} ldv___module_get_5(__this_module);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i129 := 0;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $r := $i129;
    return;

  $bb37:
    assume $i117 == 1;
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p118 := $p114;
    goto $bb40;

  $bb40:
    call $p119, $p120, $p122, $p123, $p124, $p125, $p126, $i127, $i128, $p118 := add_mtd_device_loop_$bb40($p0, $p119, $p120, $p122, $p123, $p124, $p125, $p126, $i127, $i128, $p118);
    goto $bb40_last;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.1, $p119);
    call {:si_unique_call 37} devirtbounce.1($p120, $p0);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p118, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.1, $p122);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p124, $mul.ref($sub.ref(0, 16), 32));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p124, $mul.ref($sub.ref(0, 16), 32)), $mul.ref(16, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, $p2i.ref.i64(mtd_notifiers));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i128 == 1);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb42:
    assume $i128 == 1;
    assume {:verifier.code 0} true;
    $p118 := $p125;
    goto $bb42_dummy;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i109 == 1;
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(56, 1));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.1, $p110);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} __dynamic_pr_debug.ref.ref.i32.ref($p1, .str.8, $i11, $p111);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb30:
    assume $i86 == 1;
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} idr_remove(mtd_idr, $i11);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i13 := $i85;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} mutex_unlock(mtd_table_mutex);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i129 := $i13;
    goto $bb45;

  $bb18:
    assume $i59 == 1;
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(4, 1));
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.1, $p60);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 8192);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb20;

  $bb21:
    assume $i63 == 1;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.1, $p64);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i66 := mtd_unlock($p0, 0, $i65);
    call {:si_unique_call 26} {:cexpr "error"} boogie_si_record_i32($i66);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb23:
    assume $i67 == 1;
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i66, $sub.i32(0, 95));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb25;

  $bb26:
    assume $i68 == 1;
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(56, 1));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.1, $p69);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} vslice_dummy_var_59 := printk.ref.ref(.str.3, $p70);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb15:
    assume $i39 == 1;
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(20, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.1, $p40);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $i42 := ffs($i41);
    call {:si_unique_call 24} {:cexpr "tmp___2"} boogie_si_record_i32($i42);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, $sub.i32(0, 1));
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(40, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p44, $i43);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i27 == 1;
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(16, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p28);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i30 := ffs($i29);
    call {:si_unique_call 20} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, $sub.i32(0, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(36, 1));
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p32, $i31);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(84, 1));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(52, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p21, $i20);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    call {:si_unique_call 12} devirtbounce.2(0, .str.2, 392, 12);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call add_mtd_device_loop_$bb3();
    goto $bb3_last;

  $bb42_dummy:
    assume false;
    return;

  $bb40_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_194;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const add_mtd_partitions: ref;

axiom add_mtd_partitions == $sub.ref(0, 319880);

procedure add_mtd_partitions($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const del_mtd_device: ref;

axiom del_mtd_device == $sub.ref(0, 320912);

procedure del_mtd_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation del_mtd_device($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p15: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i36: i32;
  var $i8: i32;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} mutex_lock_nested(mtd_table_mutex, 0);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(64, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $p3 := idr_find(mtd_idr, $i2);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i4, $i6);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, mtd_notifiers);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 16), 32));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 16), 32)), $mul.ref(16, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, $p2i.ref.i64(mtd_notifiers));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(1824, 1));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(400, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} device_unregister($p37);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(64, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.1, $p38);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} idr_remove(mtd_idr, $i39);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} ldv_module_put_6(__this_module);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i8 := $i36;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} mutex_unlock(mtd_table_mutex);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(64, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.1, $p29);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(56, 1));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(1824, 1));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.1, $p33);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} vslice_dummy_var_62 := printk.ref.i32.ref.i32(.str.9, $i30, $p32, $i34);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 16);
    goto $bb15;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p15 := $p11;
    goto $bb8;

  $bb8:
    call $p16, $p17, $p19, $p20, $p21, $p22, $p23, $i24, $i25, $p15 := del_mtd_device_loop_$bb8($p0, $p16, $p17, $p19, $p20, $p21, $p22, $p23, $i24, $i25, $p15);
    goto $bb8_last;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    call {:si_unique_call 43} devirtbounce.1($p17, $p0);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref($sub.ref(0, 16), 32));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p21, $mul.ref($sub.ref(0, 16), 32)), $mul.ref(16, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, $p2i.ref.i64(mtd_notifiers));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $p15 := $p22;
    goto $bb10_dummy;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_237;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 321944);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    return;
}



const idr_find: ref;

axiom idr_find == $sub.ref(0, 322976);

procedure idr_find($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation idr_find($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p29: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 51} {:cexpr "idr_find:arg:id"} boogie_si_record_i32($i1);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} __read_once_size($p5, $p7, 8);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $i10 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 54} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $p29 := idr_find_slowpath($p0, $i1);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p28 := $p29;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $r := $p28;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i1, $sub.i32(0, 256));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p9, $mul.ref(0, 2096)), $mul.ref(0, 1));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i13, $i15);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p9, $mul.ref(0, 2096)), $mul.ref(8, 1));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i1);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 255);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p18, $mul.ref($i20, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} __read_once_size($p21, $p23, 8);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $i26 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 57} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p28 := $p25;
    goto $bb6;
}



const printk: ref;

axiom printk == $sub.ref(0, 324008);

procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 1} true;
    call {:si_unique_call 59} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 60} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 1} true;
    call {:si_unique_call 61} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 62} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref($p0: ref, p.1: i32, p.2: ref) returns ($r: i32);



procedure printk.ref($p0: ref) returns ($r: i32);



procedure printk.ref.i32.ref.ref($p0: ref, p.1: i32, p.2: ref, p.3: ref) returns ($r: i32);



procedure printk.ref.ref.ref.i64($p0: ref, p.1: ref, p.2: ref, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i64($p0: ref, p.1: ref, p.2: ref, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 1} true;
    call {:si_unique_call 63} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 64} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i64.i64.ref($p0: ref, p.1: i64, p.2: i64, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i64.i64.ref($p0: ref, p.1: i64, p.2: i64, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 1} true;
    call {:si_unique_call 65} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 66} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64.i64($p0: ref, p.1: ref, p.2: i64, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64.i64($p0: ref, p.1: ref, p.2: i64, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 1} true;
    call {:si_unique_call 67} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 68} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i64.i64($p0: ref, p.1: i32, p.2: i64, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i64.i64($p0: ref, p.1: i32, p.2: i64, p.3: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 1} true;
    call {:si_unique_call 69} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 70} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.ref.i32($p0: ref, p.1: i32, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.ref.i32($p0: ref, p.1: i32, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 1} true;
    call {:si_unique_call 71} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 72} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const device_unregister: ref;

axiom device_unregister == $sub.ref(0, 325040);

procedure device_unregister($p0: ref);
  free requires assertsPassed;



implementation device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    return;
}



const idr_remove: ref;

axiom idr_remove == $sub.ref(0, 326072);

procedure idr_remove($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation idr_remove($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} {:cexpr "idr_remove:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    return;
}



const ldv_module_put_6: ref;

axiom ldv_module_put_6 == $sub.ref(0, 327104);

procedure ldv_module_put_6($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_module_put_6($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} ldv_module_put($p0);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 328136);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    return;
}



const ldv_module_put: ref;

axiom ldv_module_put == $sub.ref(0, 329168);

procedure ldv_module_put($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_module_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 1);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $M.10;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $M.10 := $i6;
    call {:si_unique_call 76} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} ldv_error();
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 330200);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 77} __VERIFIER_error();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const __read_once_size: ref;

axiom __read_once_size == $sub.ref(0, 331232);

procedure __read_once_size($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation __read_once_size($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i8;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    call {:si_unique_call 78} {:cexpr "__read_once_size:arg:size"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call {:si_unique_call 79} devirtbounce.3(0);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i2);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.1;
    cmdloc_dummy_var_1 := $M.1;
    call {:si_unique_call 80} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p1, $p0, $i20, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_2;
    call {:si_unique_call 81} devirtbounce.3(0);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.1, $p17);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p19, $i18);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p16, $i15);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.1, $p11);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p13, $i12);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.1, $p0);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1, $i10);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 332264);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 1} true;
    call {:si_unique_call 82} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 83} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const idr_find_slowpath: ref;

axiom idr_find_slowpath == $sub.ref(0, 333296);

procedure idr_find_slowpath($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation idr_find_slowpath($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} {:cexpr "idr_find_slowpath:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $p2 := external_alloc();
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 334328);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const allocate_partition: ref;

axiom allocate_partition == $sub.ref(0, 335360);

procedure allocate_partition($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation allocate_partition($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p20: ref;
  var $i21: i8;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $p62: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i1;
  var $p85: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $i97: i1;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $i103: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $i109: i1;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i64;
  var $i121: i1;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i64;
  var $i127: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $i133: i1;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i64;
  var $i139: i1;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $i145: i1;
  var $p147: ref;
  var $i148: i1;
  var $p150: ref;
  var $p151: ref;
  var $i152: i64;
  var $i153: i1;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $i161: i1;
  var $p163: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i64;
  var $i169: i1;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i64;
  var $i175: i1;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $i180: i64;
  var $i181: i1;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $i186: i64;
  var $i187: i1;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $i192: i64;
  var $i193: i1;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $i198: i64;
  var $i199: i1;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $i204: i64;
  var $i205: i1;
  var $p207: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $i212: i64;
  var $p213: ref;
  var $p214: ref;
  var $i215: i64;
  var $i216: i1;
  var $p217: ref;
  var $p218: ref;
  var $i219: i64;
  var $i220: i1;
  var $p221: ref;
  var $i222: i32;
  var $i223: i1;
  var $i224: i32;
  var $i225: i32;
  var $p226: ref;
  var $i227: i32;
  var $i228: i32;
  var $i229: i64;
  var $p230: ref;
  var $p231: ref;
  var $i232: i64;
  var $p234: ref;
  var $i235: i64;
  var $i236: i1;
  var $p237: ref;
  var $p238: ref;
  var $i239: i64;
  var $p240: ref;
  var $i241: i64;
  var $i242: i64;
  var $p244: ref;
  var $i245: i64;
  var $i246: i1;
  var $p247: ref;
  var $i248: i64;
  var $p249: ref;
  var $i250: i64;
  var $i251: i64;
  var $p253: ref;
  var $i254: i64;
  var $i255: i64;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $i261: i64;
  var $p262: ref;
  var $i263: i64;
  var $i264: i64;
  var $p266: ref;
  var $i267: i64;
  var $p270: ref;
  var $i271: i64;
  var $i272: i1;
  var $p273: ref;
  var $i274: i64;
  var $p275: ref;
  var $i276: i64;
  var $i277: i64;
  var $p279: ref;
  var $p280: ref;
  var $i281: i64;
  var $p282: ref;
  var $i283: i64;
  var $p285: ref;
  var $i286: i64;
  var $i287: i64;
  var $p289: ref;
  var $p290: ref;
  var $p292: ref;
  var $i293: i64;
  var $p294: ref;
  var $i295: i64;
  var $i296: i1;
  var $p297: ref;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $p303: ref;
  var $i304: i64;
  var $p306: ref;
  var $i307: i64;
  var $i308: i64;
  var $p309: ref;
  var $i310: i64;
  var $i311: i1;
  var $p312: ref;
  var $i313: i64;
  var $p314: ref;
  var $i315: i64;
  var $i316: i64;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $p322: ref;
  var $p324: ref;
  var $i325: i64;
  var $p327: ref;
  var $i328: i32;
  var $i329: i1;
  var $p330: ref;
  var $i331: i32;
  var $p332: ref;
  var $i333: i64;
  var $p335: ref;
  var $i336: i64;
  var $i337: i64;
  var $p338: ref;
  var $p339: ref;
  var $i340: i1;
  var $i343: i32;
  var $i344: i1;
  var $i342: i32;
  var $i346: i64;
  var $p348: ref;
  var $i349: i64;
  var $p350: ref;
  var $i351: i64;
  var $i352: i1;
  var $i353: i32;
  var $i345: i32;
  var $i341: i32;
  var $i354: i1;
  var $i355: i32;
  var $i356: i32;
  var $i357: i1;
  var $p360: ref;
  var $i361: i32;
  var $i362: i64;
  var $p364: ref;
  var $i365: i32;
  var $i366: i1;
  var $i367: i64;
  var $p369: ref;
  var $i370: i32;
  var $p372: ref;
  var $i373: i32;
  var $i374: i1;
  var $i358: i32;
  var $i375: i64;
  var $p377: ref;
  var $i378: i64;
  var $i379: i1;
  var $p381: ref;
  var $i382: i32;
  var $i383: i1;
  var $i384: i32;
  var $i385: i64;
  var $i386: i64;
  var $i387: i1;
  var $p388: ref;
  var $i389: i32;
  var $p391: ref;
  var $p393: ref;
  var $i394: i32;
  var $i395: i32;
  var $i396: i1;
  var $p397: ref;
  var $i398: i64;
  var $p399: ref;
  var $i400: i32;
  var $i401: i1;
  var $p403: ref;
  var $i404: i32;
  var $i405: i32;
  var $p407: ref;
  var $p408: ref;
  var $p409: ref;
  var $p412: ref;
  var $i413: i32;
  var $i414: i32;
  var $i415: i1;
  var $p417: ref;
  var $i418: i64;
  var $p419: ref;
  var $i420: i32;
  var $i421: i1;
  var $p423: ref;
  var $i424: i32;
  var $i425: i32;
  var $p427: ref;
  var $p428: ref;
  var $p429: ref;
  var $p431: ref;
  var $p432: ref;
  var $p434: ref;
  var $p435: ref;
  var $i436: i32;
  var $p438: ref;
  var $p439: ref;
  var $i440: i32;
  var $p442: ref;
  var $p443: ref;
  var $i444: i32;
  var $p446: ref;
  var $p447: ref;
  var $p448: ref;
  var $i449: i64;
  var $i450: i1;
  var $p452: ref;
  var $i453: i64;
  var $i454: i1;
  var $p456: ref;
  var $i457: i64;
  var $i458: i64;
  var $i459: i32;
  var $i460: i1;
  var $p463: ref;
  var $i464: i32;
  var $i465: i32;
  var $p468: ref;
  var $p469: ref;
  var $i470: i64;
  var $i471: i64;
  var $i472: i32;
  var $i473: i1;
  var $p476: ref;
  var $i477: i32;
  var $i478: i32;
  var $p481: ref;
  var $p483: ref;
  var $i484: i32;
  var $i485: i64;
  var $i486: i64;
  var $i487: i64;
  var $i488: i1;
  var $i455: i64;
  var $p19: ref;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} {:cexpr "allocate_partition:arg:partno"} boogie_si_record_i32($i2);
    call {:si_unique_call 87} {:cexpr "allocate_partition:arg:cur_offset"} boogie_si_record_i64($i3);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $p4 := kzalloc(1856, 208);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $p8 := kstrdup($p7, 208);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p5);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(0, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.1, $p20);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p23, $i21);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(4, 1));
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i28 := $xor.i32($i27, $sub.i32(0, 1));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i25, $i28);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p31, $i29);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.1, $p32);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p35, $i33);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(20, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.1, $p36);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(20, 1));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p39, $i37);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(24, 1));
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.1, $p40);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p43, $i41);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(28, 1));
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.1, $p44);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(28, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p47, $i45);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(32, 1));
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.1, $p48);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p51, $i49);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(376, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.1, $p52);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(376, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p55, $i53);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p57, $p8);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(392, 1));
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.1, $p58);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(392, 1));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p61, $p59);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(400, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(400, 1)), $mul.ref(0, 1));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p65, $p62);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(136, 1));
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p67, part_read);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(144, 1));
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p69, part_write);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(152, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.1, $p70);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(112, 1));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.1, $p76);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(128, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.1, $p88);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(160, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.1, $p94);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p95);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i97 := $ne.i64($i96, 0);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(168, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.1, $p100);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p101);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, 0);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(200, 1));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.1, $p106);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p107);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i109 := $ne.i64($i108, 0);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(184, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.1, $p112);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p113);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, 0);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(208, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.1, $p118);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p119);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i121 := $ne.i64($i120, 0);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(216, 1));
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.1, $p124);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p125);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(192, 1));
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.1, $p130);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p131);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i133 := $ne.i64($i132, 0);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(176, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.1, $p136);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i138 := $p2i.ref.i64($p137);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i139 := $ne.i64($i138, 0);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(232, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.1, $p142);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i144 := $p2i.ref.i64($p143);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i145 := $ne.i64($i144, 0);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i2, 0);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i148 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(224, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.1, $p166);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i168 := $p2i.ref.i64($p167);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i169 := $ne.i64($i168, 0);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i169} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(240, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.1, $p172);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i174 := $p2i.ref.i64($p173);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i175 := $ne.i64($i174, 0);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(248, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.1, $p178);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i180 := $p2i.ref.i64($p179);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i181 := $ne.i64($i180, 0);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(256, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.1, $p184);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i186 := $p2i.ref.i64($p185);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i187 := $ne.i64($i186, 0);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i187} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(264, 1));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.1, $p190);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i192 := $p2i.ref.i64($p191);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i193 := $ne.i64($i192, 0);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(272, 1));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.1, $p196);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i198 := $p2i.ref.i64($p197);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i199 := $ne.i64($i198, 0);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(280, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.1, $p202);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i204 := $p2i.ref.i64($p203);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i205 := $ne.i64($i204, 0);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p209, part_erase);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p210, $p0);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i212 := $load.i64($M.1, $p211);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p213, $i212);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i215 := $load.i64($M.1, $p214);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i216 := $eq.i64($i215, $sub.i64(0, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i219 := $load.i64($M.1, $p218);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i220 := $eq.i64($i219, $sub.i64(0, 2));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i235 := $load.i64($M.1, $p234);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i236 := $eq.i64($i235, $sub.i64(0, 3));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i271 := $load.i64($M.1, $p270);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i272 := $eq.i64($i271, 0);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i281 := $load.i64($M.1, $p280);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i283 := $load.i64($M.1, $p282);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i286 := $load.i64($M.1, $p285);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i287 := $add.i64($i283, $i286);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p290 := $load.ref($M.1, $p289);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} vslice_dummy_var_66 := printk.ref.i64.i64.ref(.str.80, $i281, $i287, $p290);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i293 := $load.i64($M.1, $p292);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i295 := $load.i64($M.1, $p294);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i296 := $uge.i64($i293, $i295);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i304 := $load.i64($M.1, $p303);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i307 := $load.i64($M.1, $p306);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i308 := $add.i64($i304, $i307);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $i310 := $load.i64($M.1, $p309);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i311 := $ugt.i64($i308, $i310);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(88, 1));
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i328 := $load.i32($M.1, $p327);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i329 := $sgt.i32($i328, 1);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i329 == 1);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(16, 1));
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i389 := $load.i32($M.1, $p388);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p391, $i389);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i394 := $load.i32($M.1, $p393);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i395 := $and.i32($i394, 1024);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i396 := $ne.i32($i395, 0);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i396} true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i413 := $load.i32($M.1, $p412);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i414 := $and.i32($i413, 1024);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i415 := $ne.i32($i414, 0);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(72, 1));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $p432 := $load.ref($M.1, $p431);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p434, $p432);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(80, 1));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i436 := $load.i32($M.1, $p435);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p438, $i436);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(84, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i440 := $load.i32($M.1, $p439);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p442, $i440);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(52, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i444 := $load.i32($M.1, $p443);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(52, 1));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p446, $i444);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(272, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p448 := $load.ref($M.1, $p447);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i449 := $p2i.ref.i64($p448);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i450 := $ne.i64($i449, 0);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i450} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p19 := $p4;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $r := $p19;
    return;

  $bb148:
    assume $i450 == 1;
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i453 := $load.i64($M.1, $p452);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i454 := $ugt.i64($i453, 0);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i454} true;
    goto $bb150, $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    assume !($i454 == 1);
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb150:
    assume $i454 == 1;
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i455 := 0;
    goto $bb153;

  $bb153:
    call $p456, $i457, $i458, $i459, $i460, $p463, $i464, $i465, $p468, $p469, $i470, $i471, $i472, $i473, $p476, $i477, $i478, $p481, $p483, $i484, $i485, $i486, $i487, $i488, $i455 := allocate_partition_loop_$bb153($p0, $p5, $p452, $p456, $i457, $i458, $i459, $i460, $p463, $i464, $i465, $p468, $p469, $i470, $i471, $i472, $i473, $p476, $i477, $i478, $p481, $p483, $i484, $i485, $i486, $i487, $i488, $i455);
    goto $bb153_last;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i457 := $load.i64($M.1, $p456);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i458 := $add.i64($i457, $i455);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i459 := mtd_block_isreserved($p0, $i458);
    call {:si_unique_call 118} {:cexpr "tmp___7"} boogie_si_record_i32($i459);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i460 := $ne.i32($i459, 0);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i460 == 1);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i470 := $load.i64($M.1, $p469);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i471 := $add.i64($i470, $i455);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i472 := mtd_block_isbad($p0, $i471);
    call {:si_unique_call 120} {:cexpr "tmp___6"} boogie_si_record_i32($i472);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i473 := $ne.i32($i472, 0);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i473 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i484 := $load.i32($M.1, $p483);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i485 := $zext.i32.i64($i484);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i486 := $add.i64($i485, $i455);
    call {:si_unique_call 121} {:cexpr "offs"} boogie_si_record_i64($i486);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i487 := $load.i64($M.1, $p452);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i488 := $ugt.i64($i487, $i486);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i488 == 1);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb161:
    assume $i488 == 1;
    assume {:verifier.code 0} true;
    $i455 := $i486;
    goto $bb161_dummy;

  $bb158:
    assume $i473 == 1;
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i477 := $load.i32($M.1, $p476);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i478 := $add.i32($i477, 1);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p481, $i478);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb155:
    assume $i460 == 1;
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(360, 1)), $mul.ref(12, 1));
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i464 := $load.i32($M.1, $p463);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i465 := $add.i32($i464, 1);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $p468 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(360, 1)), $mul.ref(12, 1));
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p468, $i465);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb142:
    assume $i415 == 1;
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i418 := $load.i64($M.1, $p417);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $i420 := mtd_mod_by_eb($i418, $p419);
    call {:si_unique_call 115} {:cexpr "tmp___5"} boogie_si_record_i32($i420);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i421 := $ne.i32($i420, 0);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i421} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i421 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb144:
    assume $i421 == 1;
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i424 := $load.i32($M.1, $p423);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i425 := $and.i32($i424, $sub.i32(0, 1025));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p427, $i425);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p429 := $load.ref($M.1, $p428);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} vslice_dummy_var_70 := printk.ref.ref(.str.85, $p429);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb136:
    assume $i396 == 1;
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i398 := $load.i64($M.1, $p397);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i400 := mtd_mod_by_eb($i398, $p399);
    call {:si_unique_call 112} {:cexpr "tmp___4"} boogie_si_record_i32($i400);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i401 := $ne.i32($i400, 0);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i401 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb138:
    assume $i401 == 1;
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i404 := $load.i32($M.1, $p403);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i405 := $and.i32($i404, $sub.i32(0, 1025));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p407, $i405);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p409 := $load.ref($M.1, $p408);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} vslice_dummy_var_69 := printk.ref.ref(.str.84, $p409);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb103:
    assume $i329 == 1;
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(88, 1));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i331 := $load.i32($M.1, $p330);
    call {:si_unique_call 103} {:cexpr "max"} boogie_si_record_i32($i331);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i333 := $load.i64($M.1, $p332);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i336 := $load.i64($M.1, $p335);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i337 := $add.i64($i333, $i336);
    call {:si_unique_call 104} {:cexpr "end"} boogie_si_record_i64($i337);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(96, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p339 := $load.ref($M.1, $p338);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i340 := $slt.i32(0, $i331);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i341 := 0;
    assume {:branchcond $i340} true;
    goto $bb105, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i340 == 1);
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $i354 := $sgt.i32($i341, 0);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i354} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i354 == 1);
    assume {:verifier.code 0} true;
    $i356 := $i341;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i357 := $slt.i32($i356, $i331);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i357} true;
    goto $bb118, $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    assume !($i357 == 1);
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i382 := $load.i32($M.1, $p381);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i383 := $eq.i32($i382, 0);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i384 := $zext.i1.i32($i383);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i385 := $sext.i32.i64($i384);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $i386 := ldv__builtin_expect($i385, 0);
    call {:si_unique_call 109} {:cexpr "tmp___3"} boogie_si_record_i64($i386);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i387 := $ne.i64($i386, 0);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i387} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb131:
    assume $i387 == 1;
    call {:si_unique_call 110} devirtbounce.2(0, .str.83, 514, 12);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    call allocate_partition_loop_$bb133();
    goto $bb133_last;

  $bb118:
    assume $i357 == 1;
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i358 := $i356;
    goto $bb121;

  $bb121:
    call $p360, $i361, $i362, $p364, $i365, $i366, $i367, $p369, $i370, $p372, $i373, $i374, $i358, $i375, $p377, $i378, $i379 := allocate_partition_loop_$bb121($p5, $i331, $i337, $p339, $p360, $i361, $i362, $p364, $i365, $i366, $i367, $p369, $i370, $p372, $i373, $i374, $i358, $i375, $p377, $i378, $i379);
    goto $bb121_last;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i375 := $sext.i32.i64($i358);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p339, $mul.ref($i375, 24)), $mul.ref(0, 1));
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i378 := $load.i64($M.1, $p377);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i379 := $ult.i64($i378, $i337);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i379 == 1);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb128:
    assume $i379 == 1;
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i361 := $load.i32($M.1, $p360);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i362 := $sext.i32.i64($i358);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p339, $mul.ref($i362, 24)), $mul.ref(8, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i365 := $load.i32($M.1, $p364);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i366 := $ult.i32($i361, $i365);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $i373 := $add.i32($i358, 1);
    call {:si_unique_call 107} {:cexpr "i"} boogie_si_record_i32($i373);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i374 := $slt.i32($i373, $i331);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i374 == 1);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb126:
    assume $i374 == 1;
    assume {:verifier.code 0} true;
    $i358 := $i373;
    goto $bb126_dummy;

  $bb123:
    assume $i366 == 1;
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i367 := $sext.i32.i64($i358);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p339, $mul.ref($i367, 24)), $mul.ref(8, 1));
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i370 := $load.i32($M.1, $p369);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p372, $i370);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb115:
    assume $i354 == 1;
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i355 := $sub.i32($i341, 1);
    call {:si_unique_call 106} {:cexpr "i"} boogie_si_record_i32($i355);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i356 := $i355;
    goto $bb117;

  $bb105:
    assume $i340 == 1;
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i342 := 0;
    goto $bb108;

  $bb108:
    call $i343, $i344, $i342, $i346, $p348, $i349, $p350, $i351, $i352, $i353, $i345 := allocate_partition_loop_$bb108($p5, $i331, $p339, $i343, $i344, $i342, $i346, $p348, $i349, $p350, $i351, $i352, $i353, $i345);
    goto $bb108_last;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i346 := $sext.i32.i64($i342);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p339, $mul.ref($i346, 24)), $mul.ref(0, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i349 := $load.i64($M.1, $p348);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i351 := $load.i64($M.1, $p350);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i352 := $ule.i64($i349, $i351);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i353 := $i342;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i341 := $i353;
    goto $bb107;

  $bb112:
    assume $i352 == 1;
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i343 := $add.i32($i342, 1);
    call {:si_unique_call 105} {:cexpr "i"} boogie_si_record_i32($i343);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i344 := $slt.i32($i343, $i331);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i345 := $i343;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i341 := $i345;
    goto $bb107;

  $bb110:
    assume $i344 == 1;
    assume {:verifier.code 0} true;
    $i342 := $i343;
    goto $bb110_dummy;

  $bb100:
    assume $i311 == 1;
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i313 := $load.i64($M.1, $p312);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i315 := $load.i64($M.1, $p314);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i316 := $sub.i64($i313, $i315);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p318, $i316);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p320 := $load.ref($M.1, $p319);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(56, 1));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p322 := $load.ref($M.1, $p321);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i325 := $load.i64($M.1, $p324);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} vslice_dummy_var_68 := printk.ref.ref.ref.i64(.str.82, $p320, $p322, $i325);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb97:
    assume $i296 == 1;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p297, 0);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p299, 0);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $p301 := $load.ref($M.1, $p300);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} vslice_dummy_var_67 := printk.ref.ref(.str.81, $p301);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb94:
    assume $i272 == 1;
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i274 := $load.i64($M.1, $p273);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i276 := $load.i64($M.1, $p275);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i277 := $sub.i64($i274, $i276);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p279, $i277);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb87:
    assume $i236 == 1;
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p237, $i3);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i239 := $load.i64($M.1, $p238);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i241 := $load.i64($M.1, $p240);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i242 := $sub.i64($i239, $i241);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i245 := $load.i64($M.1, $p244);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i246 := $uge.i64($i242, $i245);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i246 == 1);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.1, $p258);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i261 := $load.i64($M.1, $p260);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i263 := $load.i64($M.1, $p262);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i264 := $sub.i64($i261, $i263);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i267 := $load.i64($M.1, $p266);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} vslice_dummy_var_65 := printk.ref.ref.i64.i64(.str.79, $p259, $i264, $i267);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb89:
    assume $i246 == 1;
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i248 := $load.i64($M.1, $p247);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i250 := $load.i64($M.1, $p249);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i251 := $sub.i64($i248, $i250);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i254 := $load.i64($M.1, $p253);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i255 := $sub.i64($i251, $i254);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p257, $i255);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb81:
    assume $i220 == 1;
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p221, $i3);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i222 := mtd_mod_by_eb($i3, $p0);
    call {:si_unique_call 95} {:cexpr "tmp___2"} boogie_si_record_i32($i222);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i223 := $ne.i32($i222, 0);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb83:
    assume $i223 == 1;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $i224 := mtd_div_by_eb($i3, $p0);
    call {:si_unique_call 97} {:cexpr "tmp___1"} boogie_si_record_i32($i224);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i225 := $add.i32($i224, 1);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(16, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.1, $p226);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i228 := $mul.i32($i225, $i227);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i229 := $zext.i32.i64($i228);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p230, $i229);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i232 := $load.i64($M.1, $p231);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} vslice_dummy_var_64 := printk.ref.i32.i64.i64(.str.78, $i2, $i3, $i232);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb78:
    assume $i216 == 1;
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p217, $i3);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb75:
    assume $i205 == 1;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(280, 1));
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p207, part_block_markbad);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb72:
    assume $i199 == 1;
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(272, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p201, part_block_isbad);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb69:
    assume $i193 == 1;
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(264, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p195, part_block_isreserved);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb66:
    assume $i187 == 1;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(256, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p189, part_is_locked);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb63:
    assume $i181 == 1;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p183, part_unlock);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume $i175 == 1;
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(240, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p177, part_lock);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb57:
    assume $i169 == 1;
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(224, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p171, part_writev);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb47:
    assume $i148 == 1;
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(400, 1)), $mul.ref(1384, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.1, $p150);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i152 := $p2i.ref.i64($p151);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i153 := $eq.i64($i152, 0);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i153 == 1);
    goto $bb49;

  $bb50:
    assume $i153 == 1;
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(288, 1));
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.1, $p154);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i156 := $p2i.ref.i64($p155);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i157 := $ne.i64($i156, 0);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i157 == 1);
    goto $bb49;

  $bb52:
    assume $i157 == 1;
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(296, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.1, $p158);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p159);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i160, 0);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i161 == 1);
    goto $bb49;

  $bb54:
    assume $i161 == 1;
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(288, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p163, part_suspend);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(296, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p165, part_resume);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb44:
    assume $i145 == 1;
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(232, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p147, part_sync);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i139 == 1;
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(176, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p141, part_get_fact_prot_info);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i133 == 1;
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p135, part_get_user_prot_info);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume $i127 == 1;
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(216, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p129, part_lock_user_prot_reg);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i121 == 1;
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(208, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p123, part_write_user_prot_reg);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i115 == 1;
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(184, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p117, part_read_fact_prot_reg);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i109 == 1;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p111, part_read_user_prot_reg);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i103 == 1;
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(168, 1));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p105, part_write_oob);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i97 == 1;
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(160, 1));
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p99, part_read_oob);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i91 == 1;
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(128, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p93, part_get_unmapped_area);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i79 == 1;
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(120, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.1, $p80);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i83 := $ne.i64($i82, 0);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb13;

  $bb14:
    assume $i83 == 1;
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p85, part_point);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(120, 1));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p87, part_unpoint);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i73 == 1;
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(152, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p75, part_panic_write);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(56, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} vslice_dummy_var_63 := printk.ref.ref(.str.77, $p14);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} kfree($p8);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p5);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} kfree($p16);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $p17 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p19 := $p17;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb161_dummy:
    assume false;
    return;

  $bb153_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_977;

  $bb133_dummy:
    assume false;
    return;

  $bb133_last:
    assume {:verifier.code 0} true;
    goto $bb133_dummy;

  $bb126_dummy:
    assume false;
    return;

  $bb121_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_863;

  $bb110_dummy:
    assume false;
    return;

  $bb108_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_835;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 336392);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $i1 := ldv_is_err($p0);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 123} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 337424);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 125} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 338456);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} __list_add($p0, $p1, $p3);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    return;
}



const mtd_add_partition_attrs: ref;

axiom mtd_add_partition_attrs == $sub.ref(0, 339488);

procedure mtd_add_partition_attrs($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mtd_add_partition_attrs($p0: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(400, 1)), $mul.ref(16, 1));
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i4 := sysfs_create_files($p3, mtd_partition_attrs);
    call {:si_unique_call 128} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} vslice_dummy_var_71 := printk.ref.i32(.str.86, $i4);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sysfs_create_files: ref;

axiom sysfs_create_files == $sub.ref(0, 340520);

procedure sysfs_create_files($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sysfs_create_files($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 1} true;
    call {:si_unique_call 130} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 131} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 341552);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 342584);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 343616);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 344648);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 133} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const kstrdup: ref;

axiom kstrdup == $sub.ref(0, 345680);

procedure kstrdup($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kstrdup($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} {:cexpr "kstrdup:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $p2 := external_alloc();
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 346712);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const part_read: ref;

axiom part_read == $sub.ref(0, 347744);

procedure part_read($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.20, $CurrAddr;



implementation part_read($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $p41: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $p55: ref;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 140} {:cexpr "part_read:arg:from"} boogie_si_record_i64($i1);
    call {:si_unique_call 141} {:cexpr "part_read:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1832)), $mul.ref(360, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p5);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p9);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.1;
    cmdloc_dummy_var_4 := $M.1;
    call {:si_unique_call 142} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p10, $p11, 16, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_5;
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 1832)), $mul.ref(136, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.1, $p18);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, $i1);
    call {:si_unique_call 143} $i21 := devirtbounce.4($p15, $p17, $i20, $i2, $p3, $p4);
    call {:si_unique_call 144} {:cexpr "res"} boogie_si_record_i32($i21);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $i22 := mtd_is_eccerr($i21);
    call {:si_unique_call 146} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 148} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.1, $p43);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.1, $p45);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.1, $p48);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.1, $p50);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i49, $i51);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i44, $i52);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p55, $i53);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(4, 1));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.1, $p29);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(4, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.1, $p36);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32($i35, $i37);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i30, $i38);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(4, 1));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p41, $i39);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const part_write: ref;

axiom part_write == $sub.ref(0, 348776);

procedure part_write($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.20, $CurrAddr;



implementation part_write($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} {:cexpr "part_write:arg:to"} boogie_si_record_i64($i1);
    call {:si_unique_call 150} {:cexpr "part_write:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1832)), $mul.ref(144, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.1, $p12);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, $i1);
    call {:si_unique_call 151} $i15 := devirtbounce.4($p9, $p11, $i14, $i2, $p3, $p4);
    call {:si_unique_call 152} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const part_panic_write: ref;

axiom part_panic_write == $sub.ref(0, 349808);

procedure part_panic_write($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.20, $CurrAddr;



implementation part_panic_write($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} {:cexpr "part_panic_write:arg:to"} boogie_si_record_i64($i1);
    call {:si_unique_call 154} {:cexpr "part_panic_write:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1832)), $mul.ref(152, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.1, $p12);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, $i1);
    call {:si_unique_call 155} $i15 := devirtbounce.4($p9, $p11, $i14, $i2, $p3, $p4);
    call {:si_unique_call 156} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const part_point: ref;

axiom part_point == $sub.ref(0, 350840);

procedure part_point($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32);



const part_unpoint: ref;

axiom part_unpoint == $sub.ref(0, 351872);

procedure part_unpoint($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation part_unpoint($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} {:cexpr "part_unpoint:arg:from"} boogie_si_record_i64($i1);
    call {:si_unique_call 158} {:cexpr "part_unpoint:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1832)), $mul.ref(120, 1));
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.1, $p10);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, $i1);
    call {:si_unique_call 159} $i13 := devirtbounce.6($p7, $p9, $i12, $i2);
    call {:si_unique_call 160} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const part_get_unmapped_area: ref;

axiom part_get_unmapped_area == $sub.ref(0, 352904);

procedure part_get_unmapped_area($p0: ref, $i1: i64, $i2: i64, $i3: i64) returns ($r: i64);



const part_read_oob: ref;

axiom part_read_oob == $sub.ref(0, 353936);

procedure part_read_oob($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.15, $M.0, $M.10, $CurrAddr, assertsPassed;



implementation part_read_oob($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $i28: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i32;
  var $i35: i64;
  var $i36: i32;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i64;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $i62: i32;
  var $i63: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $p77: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} {:cexpr "part_read_oob:arg:from"} boogie_si_record_i64($i1);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.1, $p4);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $i6 := $uge.i64($i1, $i5);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.15, $p8);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.15, $p18);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.1, $p47);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 1832)), $mul.ref(160, 1));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.1, $p49);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.1, $p53);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i55 := $add.i64($i54, $i1);
    call {:si_unique_call 170} $i56 := devirtbounce.8($p50, $p52, $i55, $p2);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 171} {:cexpr "res"} boogie_si_record_i32($i56);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i32($i57);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i58);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i60 := ldv__builtin_expect($i59, 0);
    call {:si_unique_call 173} {:cexpr "tmp___3"} boogie_si_record_i64($i60);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i7 := $i56;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb20:
    assume $i61 == 1;
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i62 := mtd_is_bitflip($i56);
    call {:si_unique_call 175} {:cexpr "tmp___1"} boogie_si_record_i32($i62);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i70 := mtd_is_eccerr($i56);
    call {:si_unique_call 177} {:cexpr "tmp___2"} boogie_si_record_i32($i70);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i71 == 1;
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(4, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.1, $p73);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i74, 1);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(4, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p77, $i75);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i63 == 1;
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.1, $p65);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i66, 1);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p69, $i67);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.15, $p22);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(28, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.1, $p29);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i30);
    call {:si_unique_call 163} {:cexpr "len"} boogie_si_record_i64($i31);
    assume {:verifier.code 0} true;
    $i28 := $i31;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.1, $p32);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $i34 := mtd_div_by_ws($i33, $p0);
    call {:si_unique_call 165} {:cexpr "tmp"} boogie_si_record_i32($i34);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i34);
    call {:si_unique_call 166} {:cexpr "pages"} boogie_si_record_i64($i35);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $i36 := mtd_div_by_ws($i1, $p0);
    call {:si_unique_call 168} {:cexpr "tmp___0"} boogie_si_record_i32($i36);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i36);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i38 := $sub.i64($i35, $i37);
    call {:si_unique_call 169} {:cexpr "pages"} boogie_si_record_i64($i38);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.15, $p39);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i40);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.15, $p42);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i41, $i43);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i45 := $mul.i64($i38, $i28);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i46 := $ugt.i64($i44, $i45);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i46 == 1;
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(32, 1));
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.1, $p25);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    call {:si_unique_call 162} {:cexpr "len"} boogie_si_record_i64($i27);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb15;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.15, $p12);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, $i1);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.1, $p15);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i64($i14, $i16);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const part_write_oob: ref;

axiom part_write_oob == $sub.ref(0, 354968);

procedure part_write_oob($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.15, $M.0, $M.10, $CurrAddr, assertsPassed;



implementation part_write_oob($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i27: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} {:cexpr "part_write_oob:arg:to"} boogie_si_record_i64($i1);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.1, $p4);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i6 := $uge.i64($i1, $i5);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.15, $p8);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1832)), $mul.ref(168, 1));
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.1, $p24);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, $i1);
    call {:si_unique_call 179} $i27 := devirtbounce.8($p21, $p23, $i26, $p2);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 180} {:cexpr "tmp"} boogie_si_record_i32($i27);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i7 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.15, $p12);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, $i1);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.1, $p15);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i64($i14, $i16);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const part_read_user_prot_reg: ref;

axiom part_read_user_prot_reg == $sub.ref(0, 356000);

procedure part_read_user_prot_reg($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.20, $CurrAddr;



implementation part_read_user_prot_reg($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} {:cexpr "part_read_user_prot_reg:arg:from"} boogie_si_record_i64($i1);
    call {:si_unique_call 182} {:cexpr "part_read_user_prot_reg:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1832)), $mul.ref(200, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    call {:si_unique_call 183} $i12 := devirtbounce.4($p9, $p11, $i1, $i2, $p3, $p4);
    call {:si_unique_call 184} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const part_read_fact_prot_reg: ref;

axiom part_read_fact_prot_reg == $sub.ref(0, 357032);

procedure part_read_fact_prot_reg($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.20, $CurrAddr;



implementation part_read_fact_prot_reg($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} {:cexpr "part_read_fact_prot_reg:arg:from"} boogie_si_record_i64($i1);
    call {:si_unique_call 186} {:cexpr "part_read_fact_prot_reg:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1832)), $mul.ref(184, 1));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    call {:si_unique_call 187} $i12 := devirtbounce.4($p9, $p11, $i1, $i2, $p3, $p4);
    call {:si_unique_call 188} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const part_write_user_prot_reg: ref;

axiom part_write_user_prot_reg == $sub.ref(0, 358064);

procedure part_write_user_prot_reg($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.20, $CurrAddr;



implementation part_write_user_prot_reg($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} {:cexpr "part_write_user_prot_reg:arg:from"} boogie_si_record_i64($i1);
    call {:si_unique_call 190} {:cexpr "part_write_user_prot_reg:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1832)), $mul.ref(208, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    call {:si_unique_call 191} $i12 := devirtbounce.4($p9, $p11, $i1, $i2, $p3, $p4);
    call {:si_unique_call 192} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const part_lock_user_prot_reg: ref;

axiom part_lock_user_prot_reg == $sub.ref(0, 359096);

procedure part_lock_user_prot_reg($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation part_lock_user_prot_reg($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} {:cexpr "part_lock_user_prot_reg:arg:from"} boogie_si_record_i64($i1);
    call {:si_unique_call 194} {:cexpr "part_lock_user_prot_reg:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1832)), $mul.ref(216, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    call {:si_unique_call 195} $i10 := devirtbounce.6($p7, $p9, $i1, $i2);
    call {:si_unique_call 196} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const part_get_user_prot_info: ref;

axiom part_get_user_prot_info == $sub.ref(0, 360128);

procedure part_get_user_prot_info($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation part_get_user_prot_info($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} {:cexpr "part_get_user_prot_info:arg:len"} boogie_si_record_i64($i1);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1832)), $mul.ref(192, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    call {:si_unique_call 198} $i11 := devirtbounce.9($p8, $p10, $i1, $p2, $p3);
    call {:si_unique_call 199} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const part_get_fact_prot_info: ref;

axiom part_get_fact_prot_info == $sub.ref(0, 361160);

procedure part_get_fact_prot_info($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation part_get_fact_prot_info($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} {:cexpr "part_get_fact_prot_info:arg:len"} boogie_si_record_i64($i1);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1832)), $mul.ref(176, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    call {:si_unique_call 201} $i11 := devirtbounce.9($p8, $p10, $i1, $p2, $p3);
    call {:si_unique_call 202} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const part_sync: ref;

axiom part_sync == $sub.ref(0, 362192);

procedure part_sync($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation part_sync($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1832)), $mul.ref(232, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    call {:si_unique_call 203} devirtbounce.1($p5, $p7);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const part_suspend: ref;

axiom part_suspend == $sub.ref(0, 363224);

procedure part_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation part_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1832)), $mul.ref(288, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    call {:si_unique_call 204} $i8 := devirtbounce.10($p5, $p7);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 205} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const part_resume: ref;

axiom part_resume == $sub.ref(0, 364256);

procedure part_resume($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation part_resume($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1832)), $mul.ref(296, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    call {:si_unique_call 206} devirtbounce.1($p5, $p7);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const part_writev: ref;

axiom part_writev == $sub.ref(0, 365288);

procedure part_writev($p0: ref, $p1: ref, $i2: i64, $i3: i64, $p4: ref) returns ($r: i32);



const part_lock: ref;

axiom part_lock == $sub.ref(0, 366320);

procedure part_lock($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation part_lock($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} {:cexpr "part_lock:arg:ofs"} boogie_si_record_i64($i1);
    call {:si_unique_call 208} {:cexpr "part_lock:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1832)), $mul.ref(240, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.1, $p10);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, $i1);
    call {:si_unique_call 209} $i13 := devirtbounce.6($p7, $p9, $i12, $i2);
    call {:si_unique_call 210} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const part_unlock: ref;

axiom part_unlock == $sub.ref(0, 367352);

procedure part_unlock($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation part_unlock($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} {:cexpr "part_unlock:arg:ofs"} boogie_si_record_i64($i1);
    call {:si_unique_call 212} {:cexpr "part_unlock:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1832)), $mul.ref(248, 1));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.1, $p10);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, $i1);
    call {:si_unique_call 213} $i13 := devirtbounce.6($p7, $p9, $i12, $i2);
    call {:si_unique_call 214} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const part_is_locked: ref;

axiom part_is_locked == $sub.ref(0, 368384);

procedure part_is_locked($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation part_is_locked($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} {:cexpr "part_is_locked:arg:ofs"} boogie_si_record_i64($i1);
    call {:si_unique_call 216} {:cexpr "part_is_locked:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1832)), $mul.ref(256, 1));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.1, $p10);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i11, $i1);
    call {:si_unique_call 217} $i13 := devirtbounce.6($p7, $p9, $i12, $i2);
    call {:si_unique_call 218} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const part_block_isreserved: ref;

axiom part_block_isreserved == $sub.ref(0, 369416);

procedure part_block_isreserved($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation part_block_isreserved($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} {:cexpr "part_block_isreserved:arg:ofs"} boogie_si_record_i64($i1);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.1, $p3);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $i1);
    call {:si_unique_call 220} {:cexpr "ofs"} boogie_si_record_i64($i5);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1832)), $mul.ref(264, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    call {:si_unique_call 221} $i12 := devirtbounce.12($p9, $p11, $i5);
    call {:si_unique_call 222} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const part_block_isbad: ref;

axiom part_block_isbad == $sub.ref(0, 370448);

procedure part_block_isbad($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation part_block_isbad($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} {:cexpr "part_block_isbad:arg:ofs"} boogie_si_record_i64($i1);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.1, $p3);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $i1);
    call {:si_unique_call 224} {:cexpr "ofs"} boogie_si_record_i64($i5);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1832)), $mul.ref(272, 1));
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    call {:si_unique_call 225} $i12 := devirtbounce.12($p9, $p11, $i5);
    call {:si_unique_call 226} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const part_block_markbad: ref;

axiom part_block_markbad == $sub.ref(0, 371480);

procedure part_block_markbad($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation part_block_markbad($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} {:cexpr "part_block_markbad:arg:ofs"} boogie_si_record_i64($i1);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.1, $p3);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $i1);
    call {:si_unique_call 228} {:cexpr "ofs"} boogie_si_record_i64($i5);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1832)), $mul.ref(280, 1));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    call {:si_unique_call 229} $i12 := devirtbounce.12($p9, $p11, $i5);
    call {:si_unique_call 230} {:cexpr "res"} boogie_si_record_i32($i12);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 1);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p19, $i17);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const part_erase: ref;

axiom part_erase == $sub.ref(0, 372512);

procedure part_erase($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $CurrAddr, $M.10, assertsPassed;



implementation part_erase($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.1, $p3);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.1, $p5);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i4, $i6);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p8, $i7);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1832)), $mul.ref(104, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    call {:si_unique_call 231} $i15 := devirtbounce.13($p12, $p14, $p1);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 232} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.1, $p17);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, $sub.i64(0, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.1, $p26);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.1, $p28);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i30 := $sub.i64($i27, $i29);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p31, $i30);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.1, $p20);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.1, $p22);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i24 := $sub.i64($i21, $i23);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p25, $i24);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const mtd_mod_by_eb: ref;

axiom mtd_mod_by_eb == $sub.ref(0, 373544);

procedure mtd_mod_by_eb($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mtd_mod_by_eb($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} {:cexpr "mtd_mod_by_eb:arg:sz"} boogie_si_record_i64($i0);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1832)), $mul.ref(36, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 1832)), $mul.ref(16, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    call {:si_unique_call 234} {:cexpr "__base"} boogie_si_record_i32($i11);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i13 := $urem.i64($i0, $i12);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    call {:si_unique_call 235} {:cexpr "__rem"} boogie_si_record_i32($i14);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i9 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 1832)), $mul.ref(44, 1));
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i0);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i6, $i7);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const mtd_div_by_eb: ref;

axiom mtd_div_by_eb == $sub.ref(0, 374576);

procedure mtd_div_by_eb($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mtd_div_by_eb($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} {:cexpr "mtd_div_by_eb:arg:sz"} boogie_si_record_i64($i0);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1832)), $mul.ref(36, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 1832)), $mul.ref(16, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    call {:si_unique_call 237} {:cexpr "__base"} boogie_si_record_i32($i12);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i14 := $udiv.i64($i0, $i13);
    call {:si_unique_call 238} {:cexpr "sz"} boogie_si_record_i64($i14);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i10 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 1832)), $mul.ref(36, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i0, $i7);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 375608);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 240} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const mtd_block_isreserved: ref;

axiom mtd_block_isreserved == $sub.ref(0, 376640);

procedure mtd_block_isreserved($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation mtd_block_isreserved($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} {:cexpr "mtd_block_isreserved:arg:ofs"} boogie_si_record_i64($i1);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i2 := $slt.i64($i1, 0);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.1, $p3);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i1, $i4);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(264, 1));
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(264, 1));
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    call {:si_unique_call 242} $i13 := devirtbounce.12($p12, $p0, $i1);
    call {:si_unique_call 243} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i6 := $i13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const mtd_block_isbad: ref;

axiom mtd_block_isbad == $sub.ref(0, 377672);

procedure mtd_block_isbad($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation mtd_block_isbad($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} {:cexpr "mtd_block_isbad:arg:ofs"} boogie_si_record_i64($i1);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i2 := $slt.i64($i1, 0);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.1, $p3);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i1, $i4);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(272, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(272, 1));
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    call {:si_unique_call 245} $i13 := devirtbounce.12($p12, $p0, $i1);
    call {:si_unique_call 246} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i6 := $i13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const mtd_div_by_ws: ref;

axiom mtd_div_by_ws == $sub.ref(0, 378704);

procedure mtd_div_by_ws($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mtd_div_by_ws($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} {:cexpr "mtd_div_by_ws:arg:sz"} boogie_si_record_i64($i0);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1832)), $mul.ref(40, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 1832)), $mul.ref(20, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    call {:si_unique_call 248} {:cexpr "__base"} boogie_si_record_i32($i12);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i14 := $udiv.i64($i0, $i13);
    call {:si_unique_call 249} {:cexpr "sz"} boogie_si_record_i64($i14);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i10 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 1832)), $mul.ref(40, 1));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i0, $i7);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const mtd_is_bitflip: ref;

axiom mtd_is_bitflip == $sub.ref(0, 379736);

procedure mtd_is_bitflip($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation mtd_is_bitflip($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} {:cexpr "mtd_is_bitflip:arg:err"} boogie_si_record_i32($i0);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, $sub.i32(0, 117));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mtd_is_eccerr: ref;

axiom mtd_is_eccerr == $sub.ref(0, 380768);

procedure mtd_is_eccerr($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation mtd_is_eccerr($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} {:cexpr "mtd_is_eccerr:arg:err"} boogie_si_record_i32($i0);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, $sub.i32(0, 74));
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 381800);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(2012, $i0);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 382832);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 254} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 383864);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 257} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $p2 := ldv_malloc($i0);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 384896);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 259} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 1} true;
    call {:si_unique_call 260} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 261} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 262} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} $p4 := malloc($i0);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 1} true;
    call {:si_unique_call 264} __VERIFIER_assume($i7);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 385928);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 265} $r := $malloc($i0);
    return;
}



const idr_alloc: ref;

axiom idr_alloc == $sub.ref(0, 386960);

procedure idr_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation idr_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 266} {:cexpr "idr_alloc:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 267} {:cexpr "idr_alloc:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 268} {:cexpr "idr_alloc:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 1} true;
    call {:si_unique_call 269} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 270} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const is_power_of_2: ref;

axiom is_power_of_2 == $sub.ref(0, 387992);

procedure is_power_of_2($i0: i64) returns ($r: i1);
  free requires assertsPassed;



implementation is_power_of_2($i0: i64) returns ($r: i1)
{
  var $i1: i1;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} {:cexpr "is_power_of_2:arg:n"} boogie_si_record_i64($i0);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i1 := $ne.i64($i0, 0);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i3 := $sub.i64($i0, 1);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, $i0);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    assume {:verifier.code 0} true;
    $i2 := $i5;
    goto $bb3;
}



const ffs: ref;

axiom ffs == $sub.ref(0, 389024);

procedure ffs($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ffs($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} {:cexpr "ffs:arg:x"} boogie_si_record_i32($i0);
    call {:si_unique_call 273} $i1 := devirtbounce.14(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 274} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mtd_unlock: ref;

axiom mtd_unlock == $sub.ref(0, 390056);

procedure mtd_unlock($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mtd_unlock($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i8: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} {:cexpr "mtd_unlock:arg:ofs"} boogie_si_record_i64($i1);
    call {:si_unique_call 276} {:cexpr "mtd_unlock:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(248, 1));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $slt.i64($i1, 0);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.1, $p9);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i11 := $uge.i64($i1, $i10);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.1, $p12);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64($i13, $i1);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i15 := $ult.i64($i14, $i2);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i2, 0);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(248, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    call {:si_unique_call 277} $i19 := devirtbounce.6($p18, $p0, $i1, $i2);
    call {:si_unique_call 278} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i7 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 95);
    goto $bb3;
}



const dev_set_name: ref;

axiom dev_set_name == $sub.ref(0, 391088);

procedure dev_set_name.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_name.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 1} true;
    call {:si_unique_call 279} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 280} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 392120);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p1);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    return;
}



const device_register: ref;

axiom device_register == $sub.ref(0, 393152);

procedure device_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 1} true;
    call {:si_unique_call 281} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 282} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const device_create: ref;

axiom device_create == $sub.ref(0, 394184);

procedure device_create.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, p.5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation device_create.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, p.5: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} {:cexpr "device_create:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $p5 := external_alloc();
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 395216);

procedure __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);



procedure __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);



const ldv___module_get_5: ref;

axiom ldv___module_get_5 == $sub.ref(0, 396248);

procedure ldv___module_get_5($p0: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv___module_get_5($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} ldv_module_get($p0);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    return;
}



const ldv_module_get: ref;

axiom ldv_module_get == $sub.ref(0, 397280);

procedure ldv_module_get($p0: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_module_get($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i3 := $M.10;
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $M.10 := $i4;
    call {:si_unique_call 286} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i4);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_partition_parser: ref;

axiom get_partition_parser == $sub.ref(0, 398312);

procedure get_partition_parser($p0: ref) returns ($r: ref);



const __request_module: ref;

axiom __request_module == $sub.ref(0, 399344);

procedure __request_module.i1.ref.ref($i0: i1, $p1: ref, p.2: ref) returns ($r: i32);



const ldv_module_put_25: ref;

axiom ldv_module_put_25 == $sub.ref(0, 400376);

procedure ldv_module_put_25($p0: ref);



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 401408);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} _raw_spin_lock($p2);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    return;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0, 402440);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const ldv_try_module_get_24: ref;

axiom ldv_try_module_get_24 == $sub.ref(0, 403472);

procedure ldv_try_module_get_24($p0: ref) returns ($r: i1);



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 404504);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} _raw_spin_unlock($p2);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 405536);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    return;
}



const ldv_try_module_get: ref;

axiom ldv_try_module_get == $sub.ref(0, 406568);

procedure ldv_try_module_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_try_module_get($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $i3 := ldv_undef_int();
    call {:si_unique_call 290} {:cexpr "module_get_succeeded"} boogie_si_record_i32($i3);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i5 := $M.10;
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $M.10 := $i6;
    call {:si_unique_call 291} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb5;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 407600);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 1} true;
    call {:si_unique_call 292} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 293} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 294} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 408632);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    return;
}



const mtd_device_unregister: ref;

axiom mtd_device_unregister == $sub.ref(0, 409664);

procedure mtd_device_unregister($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation mtd_device_unregister($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i9: i32;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(304, 1));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i7 := del_mtd_partitions($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 297} {:cexpr "err"} boogie_si_record_i32($i7);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(400, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i11 := device_is_registered($p10);
    call {:si_unique_call 299} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i13 := del_mtd_device($p0);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 301} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i9 := $i13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb6;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(336, 1));
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} vslice_dummy_var_72 := unregister_reboot_notifier($p5);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const unregister_reboot_notifier: ref;

axiom unregister_reboot_notifier == $sub.ref(0, 410696);

procedure unregister_reboot_notifier($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation unregister_reboot_notifier($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 1} true;
    call {:si_unique_call 302} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 303} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const del_mtd_partitions: ref;

axiom del_mtd_partitions == $sub.ref(0, 411728);

procedure del_mtd_partitions($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation del_mtd_partitions($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i24: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i34: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} mutex_lock_nested(mtd_partitions_mutex, 0);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.1, mtd_partitions);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 1840), 1864));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1840), 1864)), $mul.ref(1848, 1)), $mul.ref(0, 1));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 1840), 1864));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1840), 1864)), $mul.ref(1848, 1));
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, $p2i.ref.i64(mtd_partitions));
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i12 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} mutex_unlock(mtd_partitions_mutex);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i13, $p14, $p15 := 0, $p3, $p8;
    goto $bb4;

  $bb4:
    call $p16, $p17, $i18, $i19, $i20, $p21, $i22, $i23, $p25, $i24, $p27, $p28, $p29, $p30, $p31, $i32, $i33, $i13, $p14, $p15, $i34 := del_mtd_partitions_loop_$bb4($p0, $p16, $p17, $i18, $i19, $i20, $p21, $i22, $i23, $p25, $i24, $p27, $p28, $p29, $p30, $p31, $i32, $i33, $i13, $p14, $p15, $i34);
    goto $bb4_last;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p14, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i18, $i19);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i24 := $i13;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 1864)), $mul.ref(1848, 1)), $mul.ref(0, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref($sub.ref(0, 1840), 1864));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p15, $mul.ref(0, 1864)), $mul.ref(1848, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, $p2i.ref.i64(mtd_partitions));
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i34 := $i24;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i12 := $i34;
    goto $bb3;

  $bb13:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i13, $p14, $p15 := $i24, $p15, $p30;
    goto $bb13_dummy;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p14, $mul.ref(0, 1864)), $mul.ref(0, 1));
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i22 := del_mtd_device($p21);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 306} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 0);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p14, $mul.ref(0, 1864)), $mul.ref(1848, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} list_del($p25);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} free_partition($p14);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb10;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1768;
}



const device_is_registered: ref;

axiom device_is_registered == $sub.ref(0, 412760);

procedure device_is_registered($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_is_registered($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i8;
  var $i5: i8;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1)), $mul.ref(288, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.1, $p2);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i8($i3, 1);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i5 := $and.i8($i4, 1);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 413792);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    return;
}



const free_partition: ref;

axiom free_partition == $sub.ref(0, 414824);

procedure free_partition($p0: ref);
  free requires assertsPassed;



implementation free_partition($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} kfree($p3);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} kfree($p4);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    return;
}



const register_mtd_user: ref;

axiom register_mtd_user == $sub.ref(0, 415856);

procedure register_mtd_user($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.1, $CurrAddr, assertsPassed;



implementation register_mtd_user($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} mutex_lock_nested(mtd_table_mutex, 0);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} list_add($p1, mtd_notifiers);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} ldv___module_get_7(__this_module);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $p2 := __mtd_next_device(0);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} mutex_unlock(mtd_table_mutex);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p5 := $p2;
    goto $bb4;

  $bb4:
    call $p6, $p7, $p8, $i9, $i10, $p11, $i12, $i13, $p5 := register_mtd_user_loop_$bb4($p0, $p6, $p7, $p8, $i9, $i10, $p11, $i12, $i13, $p5);
    goto $bb4_last;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    call {:si_unique_call 316} devirtbounce.1($p7, $p5);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 1832)), $mul.ref(64, 1));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 1);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $p11 := __mtd_next_device($i10);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $p5 := $p11;
    goto $bb6_dummy;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1827;
}



const ldv___module_get_7: ref;

axiom ldv___module_get_7 == $sub.ref(0, 416888);

procedure ldv___module_get_7($p0: ref);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv___module_get_7($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} ldv_module_get($p0);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    return;
}



const unregister_mtd_user: ref;

axiom unregister_mtd_user == $sub.ref(0, 417920);

procedure unregister_mtd_user($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.1, $CurrAddr, assertsPassed;



implementation unregister_mtd_user($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p4: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} mutex_lock_nested(mtd_table_mutex, 0);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} ldv_module_put_8(__this_module);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $p1 := __mtd_next_device(0);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} list_del($p13);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} mutex_unlock(mtd_table_mutex);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p4 := $p1;
    goto $bb4;

  $bb4:
    call $p5, $p6, $p7, $i8, $i9, $p10, $i11, $i12, $p4 := unregister_mtd_user_loop_$bb4($p0, $p5, $p6, $p7, $i8, $i9, $p10, $i11, $i12, $p4);
    goto $bb4_last;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    call {:si_unique_call 323} devirtbounce.1($p6, $p4);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(64, 1));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 1);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $p10 := __mtd_next_device($i9);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $p4 := $p10;
    goto $bb6_dummy;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1854;
}



const ldv_module_put_8: ref;

axiom ldv_module_put_8 == $sub.ref(0, 418952);

procedure ldv_module_put_8($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_module_put_8($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} ldv_module_put($p0);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const get_mtd_device: ref;

axiom get_mtd_device == $sub.ref(0, 419984);

procedure get_mtd_device($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $CurrAddr, $M.10, assertsPassed;



implementation get_mtd_device($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p6: ref;
  var $p10: ref;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p17: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i64;
  var $p31: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i64;
  var $p37: ref;
  var $p39: ref;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} {:cexpr "get_mtd_device:arg:num"} boogie_si_record_i32($i1);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} mutex_lock_nested(mtd_table_mutex, 0);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i18 := $sge.i32($i1, 0);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $p27 := $0.ref;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p17 := $p27;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p17);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $i34 := __get_mtd_device($p17);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 336} {:cexpr "err"} boogie_si_record_i32($i34);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $p39 := $p17;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p33 := $p39;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} mutex_unlock(mtd_table_mutex);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $r := $p33;
    return;

  $bb29:
    assume $i35 == 1;
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i34);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $p37 := ERR_PTR($i36);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p39 := $p37;
    goto $bb31;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i29 == 1;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($sub.i32(0, 19));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $p31 := ERR_PTR($i30);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p33 := $p31;
    goto $bb27;

  $bb16:
    assume $i18 == 1;
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $p19 := idr_find(mtd_idr, $i1);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p26 := $p19;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p27 := $p26;
    goto $bb24;

  $bb18:
    assume $i22 == 1;
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p20);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i23, $i24);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb20;

  $bb21:
    assume $i25 == 1;
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p26 := $0.ref;
    goto $bb23;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $p3 := __mtd_next_device(0);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p10 := $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p17 := $p10;
    goto $bb15;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p6 := $p3;
    goto $bb6;

  $bb6:
    call $i7, $i8, $i9, $p11, $i12, $i13, $p14, $i15, $i16, $p6 := get_mtd_device_loop_$bb6($p0, $i7, $i8, $i9, $p11, $i12, $i13, $p14, $i15, $i16, $p6);
    goto $bb6_last;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i7, $i8);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 1832)), $mul.ref(64, 1));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 1);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $p14 := __mtd_next_device($i13);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $p6 := $p14;
    goto $bb12_dummy;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p10 := $p0;
    goto $bb10;

  $bb12_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1888;
}



const __get_mtd_device: ref;

axiom __get_mtd_device == $sub.ref(0, 421016);

procedure __get_mtd_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.10, $M.0, $CurrAddr, assertsPassed;



implementation __get_mtd_device($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(392, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $i3 := ldv_try_module_get_9($p2);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 339} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(312, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(1824, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 1);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(1824, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p22, $i21);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(312, 1));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    call {:si_unique_call 340} $i15 := devirtbounce.10($p14, $p0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 341} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(392, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} ldv_module_put_10($p18);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i8 := $i15;
    goto $bb6;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const ldv_try_module_get_9: ref;

axiom ldv_try_module_get_9 == $sub.ref(0, 422048);

procedure ldv_try_module_get_9($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.10;



implementation ldv_try_module_get_9($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 344} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_module_put_10: ref;

axiom ldv_module_put_10 == $sub.ref(0, 423080);

procedure ldv_module_put_10($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_module_put_10($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} ldv_module_put($p0);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const get_mtd_device_nm: ref;

axiom get_mtd_device_nm == $sub.ref(0, 424112);

procedure get_mtd_device_nm($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation get_mtd_device_nm($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p4: ref;
  var $p10: ref;
  var $i17: i64;
  var $i18: i1;
  var $i20: i32;
  var $i21: i1;
  var $i19: i32;
  var $i23: i64;
  var $p24: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} mutex_lock_nested(mtd_table_mutex, 0);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $p1 := __mtd_next_device(0);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p10 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p10);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $i20 := __get_mtd_device($p10);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 354} {:cexpr "err"} boogie_si_record_i32($i20);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} mutex_unlock(mtd_table_mutex);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p22 := $p10;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $r := $p22;
    return;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i19 := $i20;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} mutex_unlock(mtd_table_mutex);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i19);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $p24 := ERR_PTR($i23);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p22 := $p24;
    goto $bb20;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i18 == 1;
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 19);
    goto $bb15;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p4 := $p1;
    goto $bb4;

  $bb4:
    call $p5, $p6, $i7, $i8, $p9, $p11, $i12, $i13, $p14, $i15, $i16, $p4 := get_mtd_device_nm_loop_$bb4($p0, $p5, $p6, $i7, $i8, $p9, $p11, $i12, $i13, $p14, $i15, $i16, $p4);
    goto $bb4_last;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(56, 1));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} $i7 := strcmp($p0, $p6);
    call {:si_unique_call 349} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p9 := $p4;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(64, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 1);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $p14 := __mtd_next_device($i13);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $p4 := $p14;
    goto $bb10_dummy;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p10 := $p9;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1996;
}



const put_mtd_device: ref;

axiom put_mtd_device == $sub.ref(0, 425144);

procedure put_mtd_device($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.10, $CurrAddr, assertsPassed;



implementation put_mtd_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} mutex_lock_nested(mtd_table_mutex, 0);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} __put_mtd_device($p0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} mutex_unlock(mtd_table_mutex);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const __put_mtd_device: ref;

axiom __put_mtd_device == $sub.ref(0, 426176);

procedure __put_mtd_device($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.10, $CurrAddr, assertsPassed;



implementation __put_mtd_device($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(1824, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(1824, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p4, $i3);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(1824, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.1, $p5);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 360} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(320, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(392, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} ldv_module_put_11($p19);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(320, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    call {:si_unique_call 362} devirtbounce.1($p17, $p0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 361} devirtbounce.2(0, .str.2, 795, 12);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call __put_mtd_device_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv_module_put_11: ref;

axiom ldv_module_put_11 == $sub.ref(0, 427208);

procedure ldv_module_put_11($p0: ref);
  free requires assertsPassed;
  modifies $M.10, assertsPassed;



implementation ldv_module_put_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} ldv_module_put($p0);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const mtd_erase: ref;

axiom mtd_erase == $sub.ref(0, 428240);

procedure mtd_erase($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.10, $CurrAddr, assertsPassed;



implementation mtd_erase($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.1, $p2);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.1, $p4);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i6 := $uge.i64($i3, $i5);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.1, $p7);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.1, $p9);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.1, $p11);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64($i10, $i12);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i64($i8, $i13);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(4, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.1, $p16);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 1024);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p20, $sub.i64(0, 1));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.1, $p21);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(104, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    call {:si_unique_call 366} $i27 := devirtbounce.13($p26, $p0, $p1);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 367} {:cexpr "tmp"} boogie_si_record_i32($i27);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i15 := $i27;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p24, 8);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} mtd_erase_callback($p1);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 30);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const mtd_erase_callback: ref;

axiom mtd_erase_callback == $sub.ref(0, 429272);

procedure mtd_erase_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.10, $CurrAddr, assertsPassed;



implementation mtd_erase_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1832)), $mul.ref(104, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, $p2i.ref.i64(part_erase));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    call {:si_unique_call 368} devirtbounce.15($p30, $p0);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.1, $p10);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, $sub.i64(0, 1));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.1, $p19);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p9, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.1, $p21);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i23 := $sub.i64($i20, $i22);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p24, $i23);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.1, $p13);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.1, $p15);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i17 := $sub.i64($i14, $i16);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p18, $i17);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const mtd_point: ref;

axiom mtd_point == $sub.ref(0, 430304);

procedure mtd_point($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref, $p5: ref) returns ($r: i32);



const mtd_unpoint: ref;

axiom mtd_unpoint == $sub.ref(0, 431336);

procedure mtd_unpoint($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mtd_unpoint($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i8: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} {:cexpr "mtd_unpoint:arg:from"} boogie_si_record_i64($i1);
    call {:si_unique_call 370} {:cexpr "mtd_unpoint:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(112, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $slt.i64($i1, 0);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.1, $p9);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i11 := $uge.i64($i1, $i10);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.1, $p12);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64($i13, $i1);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i15 := $ult.i64($i14, $i2);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i2, 0);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(120, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    call {:si_unique_call 371} $i19 := devirtbounce.6($p18, $p0, $i1, $i2);
    call {:si_unique_call 372} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i7 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 95);
    goto $bb3;
}



const mtd_get_unmapped_area: ref;

axiom mtd_get_unmapped_area == $sub.ref(0, 432368);

procedure mtd_get_unmapped_area($p0: ref, $i1: i64, $i2: i64, $i3: i64) returns ($r: i64);



const mtd_read: ref;

axiom mtd_read == $sub.ref(0, 433400);

procedure mtd_read($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.1, $CurrAddr;



implementation mtd_read($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} {:cexpr "mtd_read:arg:from"} boogie_si_record_i64($i1);
    call {:si_unique_call 374} {:cexpr "mtd_read:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p3, 0);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i5 := $slt.i64($i1, 0);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.1, $p6);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i1, $i7);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.1, $p9);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64($i10, $i1);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i12 := $ult.i64($i11, $i2);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i2, 0);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(136, 1));
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    call {:si_unique_call 375} $i17 := devirtbounce.4($p16, $p0, $i1, $i2, $p3, $p4);
    call {:si_unique_call 376} {:cexpr "ret_code"} boogie_si_record_i32($i17);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 378} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(84, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(52, 1));
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i28 := $uge.i32($i17, $i27);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i29 := (if $i28 == 1 then $sub.i32(0, 117) else 0);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i13 := $i29;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb16:
    assume $i25 == 1;
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb8;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i13 := $i17;
    goto $bb8;

  $bb10:
    assume $i14 == 1;
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb8;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const mtd_write: ref;

axiom mtd_write == $sub.ref(0, 434432);

procedure mtd_write($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.1, $CurrAddr;



implementation mtd_write($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} {:cexpr "mtd_write:arg:to"} boogie_si_record_i64($i1);
    call {:si_unique_call 380} {:cexpr "mtd_write:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p3, 0);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i5 := $slt.i64($i1, 0);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.1, $p6);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i1, $i7);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.1, $p9);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64($i10, $i1);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i12 := $ult.i64($i11, $i2);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(144, 1));
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i17 == 1);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(4, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 1024);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i2, 0);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(144, 1));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    call {:si_unique_call 381} $i25 := devirtbounce.4($p24, $p0, $i1, $i2, $p3, $p4);
    call {:si_unique_call 382} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i13 := $i25;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb16:
    assume $i22 == 1;
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb8;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 30);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb11;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const mtd_panic_write: ref;

axiom mtd_panic_write == $sub.ref(0, 435464);

procedure mtd_panic_write($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.1, $CurrAddr;



implementation mtd_panic_write($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} {:cexpr "mtd_panic_write:arg:to"} boogie_si_record_i64($i1);
    call {:si_unique_call 384} {:cexpr "mtd_panic_write:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p3, 0);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(152, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $slt.i64($i1, 0);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i10 == 1);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.1, $p11);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i13 := $uge.i64($i1, $i12);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.1, $p14);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i16 := $sub.i64($i15, $i1);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i17 := $ult.i64($i16, $i2);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(4, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 1024);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i2, 0);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(152, 1));
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    call {:si_unique_call 385} $i25 := devirtbounce.4($p24, $p0, $i1, $i2, $p3, $p4);
    call {:si_unique_call 386} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i9 := $i25;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb16:
    assume $i22 == 1;
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 30);
    goto $bb3;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 95);
    goto $bb3;
}



const mtd_read_oob: ref;

axiom mtd_read_oob == $sub.ref(0, 436496);

procedure mtd_read_oob($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.0, $M.10, $CurrAddr, assertsPassed;



implementation mtd_read_oob($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} {:cexpr "mtd_read_oob:arg:from"} boogie_si_record_i64($i1);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p3, 0);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p4, 0);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(160, 1));
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(160, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    call {:si_unique_call 388} $i12 := devirtbounce.8($p11, $p0, $i1, $p2);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 389} {:cexpr "ret_code"} boogie_si_record_i32($i12);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 391} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(84, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(52, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i23 := $uge.i32($i12, $i22);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i24 := (if $i23 == 1 then $sub.i32(0, 117) else 0);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i9 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb3;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 95);
    goto $bb3;
}



const mtd_get_fact_prot_info: ref;

axiom mtd_get_fact_prot_info == $sub.ref(0, 437528);

procedure mtd_get_fact_prot_info($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mtd_get_fact_prot_info($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} {:cexpr "mtd_get_fact_prot_info:arg:len"} boogie_si_record_i64($i1);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(176, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i1, 0);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(176, 1));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    call {:si_unique_call 393} $i12 := devirtbounce.9($p11, $p0, $i1, $p2, $p3);
    call {:si_unique_call 394} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i8 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 95);
    goto $bb3;
}



const mtd_read_fact_prot_reg: ref;

axiom mtd_read_fact_prot_reg == $sub.ref(0, 438560);

procedure mtd_read_fact_prot_reg($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.1, $CurrAddr;



implementation mtd_read_fact_prot_reg($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} {:cexpr "mtd_read_fact_prot_reg:arg:from"} boogie_si_record_i64($i1);
    call {:si_unique_call 396} {:cexpr "mtd_read_fact_prot_reg:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p3, 0);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(184, 1));
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i2, 0);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(184, 1));
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    call {:si_unique_call 397} $i13 := devirtbounce.4($p12, $p0, $i1, $i2, $p3, $p4);
    call {:si_unique_call 398} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i9 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 95);
    goto $bb3;
}



const mtd_get_user_prot_info: ref;

axiom mtd_get_user_prot_info == $sub.ref(0, 439592);

procedure mtd_get_user_prot_info($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mtd_get_user_prot_info($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} {:cexpr "mtd_get_user_prot_info:arg:len"} boogie_si_record_i64($i1);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(192, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i1, 0);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(192, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    call {:si_unique_call 400} $i12 := devirtbounce.9($p11, $p0, $i1, $p2, $p3);
    call {:si_unique_call 401} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i8 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 95);
    goto $bb3;
}



const mtd_read_user_prot_reg: ref;

axiom mtd_read_user_prot_reg == $sub.ref(0, 440624);

procedure mtd_read_user_prot_reg($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.1, $CurrAddr;



implementation mtd_read_user_prot_reg($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} {:cexpr "mtd_read_user_prot_reg:arg:from"} boogie_si_record_i64($i1);
    call {:si_unique_call 403} {:cexpr "mtd_read_user_prot_reg:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p3, 0);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(200, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i2, 0);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(200, 1));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    call {:si_unique_call 404} $i13 := devirtbounce.4($p12, $p0, $i1, $i2, $p3, $p4);
    call {:si_unique_call 405} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i9 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 95);
    goto $bb3;
}



const mtd_write_user_prot_reg: ref;

axiom mtd_write_user_prot_reg == $sub.ref(0, 441656);

procedure mtd_write_user_prot_reg($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.1, $CurrAddr;



implementation mtd_write_user_prot_reg($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} {:cexpr "mtd_write_user_prot_reg:arg:to"} boogie_si_record_i64($i1);
    call {:si_unique_call 407} {:cexpr "mtd_write_user_prot_reg:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p3, 0);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(208, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i2, 0);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(208, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    call {:si_unique_call 408} $i13 := devirtbounce.4($p12, $p0, $i1, $i2, $p3, $p4);
    call {:si_unique_call 409} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.20, $p3);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i17 := (if $i16 == 1 then 0 else $sub.i32(0, 28));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i9 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i9 := $i13;
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 95);
    goto $bb3;
}



const mtd_lock_user_prot_reg: ref;

axiom mtd_lock_user_prot_reg == $sub.ref(0, 442688);

procedure mtd_lock_user_prot_reg($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mtd_lock_user_prot_reg($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} {:cexpr "mtd_lock_user_prot_reg:arg:from"} boogie_si_record_i64($i1);
    call {:si_unique_call 411} {:cexpr "mtd_lock_user_prot_reg:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(216, 1));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i2, 0);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(216, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    call {:si_unique_call 412} $i11 := devirtbounce.6($p10, $p0, $i1, $i2);
    call {:si_unique_call 413} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i7 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 95);
    goto $bb3;
}



const mtd_lock: ref;

axiom mtd_lock == $sub.ref(0, 443720);

procedure mtd_lock($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mtd_lock($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i8: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} {:cexpr "mtd_lock:arg:ofs"} boogie_si_record_i64($i1);
    call {:si_unique_call 415} {:cexpr "mtd_lock:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(240, 1));
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $slt.i64($i1, 0);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.1, $p9);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i11 := $uge.i64($i1, $i10);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.1, $p12);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64($i13, $i1);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i15 := $ult.i64($i14, $i2);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i2, 0);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(240, 1));
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    call {:si_unique_call 416} $i19 := devirtbounce.6($p18, $p0, $i1, $i2);
    call {:si_unique_call 417} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i7 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 95);
    goto $bb3;
}



const mtd_is_locked: ref;

axiom mtd_is_locked == $sub.ref(0, 444752);

procedure mtd_is_locked($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mtd_is_locked($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i8: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} {:cexpr "mtd_is_locked:arg:ofs"} boogie_si_record_i64($i1);
    call {:si_unique_call 419} {:cexpr "mtd_is_locked:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(256, 1));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $slt.i64($i1, 0);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.1, $p9);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i11 := $uge.i64($i1, $i10);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.1, $p12);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64($i13, $i1);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i15 := $ult.i64($i14, $i2);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i2, 0);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(256, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    call {:si_unique_call 420} $i19 := devirtbounce.6($p18, $p0, $i1, $i2);
    call {:si_unique_call 421} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i7 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 95);
    goto $bb3;
}



const mtd_block_markbad: ref;

axiom mtd_block_markbad == $sub.ref(0, 445784);

procedure mtd_block_markbad($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation mtd_block_markbad($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} {:cexpr "mtd_block_markbad:arg:ofs"} boogie_si_record_i64($i1);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(280, 1));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $slt.i64($i1, 0);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i7 == 1);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.1, $p8);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i10 := $uge.i64($i1, $i9);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(4, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 1024);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(280, 1));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    call {:si_unique_call 423} $i17 := devirtbounce.12($p16, $p0, $i1);
    call {:si_unique_call 424} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i6 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb11:
    assume $i14 == 1;
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 30);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 95);
    goto $bb3;
}



const mtd_writev: ref;

axiom mtd_writev == $sub.ref(0, 446816);

procedure mtd_writev($p0: ref, $p1: ref, $i2: i64, $i3: i64, $p4: ref) returns ($r: i32);



const default_mtd_writev: ref;

axiom default_mtd_writev == $sub.ref(0, 447848);

procedure default_mtd_writev($p0: ref, $p1: ref, $i2: i64, $i3: i64, $p4: ref) returns ($r: i32);



const mtd_kmalloc_up_to: ref;

axiom mtd_kmalloc_up_to == $sub.ref(0, 448880);

procedure mtd_kmalloc_up_to($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.22, $CurrAddr;



implementation mtd_kmalloc_up_to($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i33: i64;
  var $p34: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(20, 1));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    call {:si_unique_call 425} {:cexpr "__max1"} boogie_si_record_i64($i4);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i64($i4, 4096);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i6 := 4096;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.22, $p1);
    call {:si_unique_call 426} {:cexpr "__min1"} boogie_si_record_i64($i7);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i8 := $ult.i64($i7, 8388608);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i9 := 8388608;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $M.22 := $store.i64($M.22, $p1, $i9);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.22, $p1);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i64($i10, $i6);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.22, $p1);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $p34 := kmalloc($i33, 208);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p17 := $p34;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i12, $p13, $i14, $i15, $p16, $i18, $i19, $i20, $p21, $i22, $i23, $i24, $i25, $p26, $i27, $i28, $i29, $i30, $i31, $i32 := mtd_kmalloc_up_to_loop_$bb10($p0, $p1, $i6, $i12, $p13, $i14, $i15, $p16, $i18, $i19, $i20, $p21, $i22, $i23, $i24, $i25, $p26, $i27, $i28, $i29, $i30, $i31, $i32);
    goto $bb10_last;

  $bb11:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.22, $p1);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $p13 := kmalloc($i12, 4198928);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p16 := $p13;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.22, $p1);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i64($i18, 1);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $M.22 := $store.i64($M.22, $p1, $i19);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.22, $p1);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(20, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i20, $i23);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64($i24, 1);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(20, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i29 := $sub.i64(0, $i28);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i25, $i29);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $M.22 := $store.i64($M.22, $p1, $i30);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.22, $p1);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i32 := $ugt.i64($i31, $i6);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i32 == 1);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb16_dummy;

  $bb12:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p17 := $p16;
    goto $bb14;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const mount_mtd: ref;

axiom mount_mtd == $sub.ref(0, 449912);

procedure mount_mtd($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);



const mount_mtd_aux: ref;

axiom mount_mtd_aux == $sub.ref(0, 450944);

procedure mount_mtd_aux($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref, $p5: ref) returns ($r: ref);



const simple_strtoul: ref;

axiom simple_strtoul == $sub.ref(0, 451976);

procedure simple_strtoul($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const mount_mtd_nr: ref;

axiom mount_mtd_nr == $sub.ref(0, 453008);

procedure mount_mtd_nr($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i32, $p5: ref) returns ($r: ref);



const lookup_bdev: ref;

axiom lookup_bdev == $sub.ref(0, 454040);

procedure lookup_bdev($p0: ref) returns ($r: ref);



const bdput: ref;

axiom bdput == $sub.ref(0, 455072);

procedure bdput($p0: ref);



const ERR_CAST: ref;

axiom ERR_CAST == $sub.ref(0, 456104);

procedure ERR_CAST($p0: ref) returns ($r: ref);



const get_sb_mtd_compare: ref;

axiom get_sb_mtd_compare == $sub.ref(0, 457136);

procedure get_sb_mtd_compare($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr;



implementation get_sb_mtd_compare($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i24;
  var $i38: i24;
  var $i39: i24;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2048)), $mul.ref(352, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p4);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i7, $i8);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p31, .str.6);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p32, .str.68);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p33, .str.11);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p34, .str.70);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i37 := $load.i24($M.8, $p36);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i38 := $and.i24($i37, $sub.i24(0, 262144));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i39 := $or.i24($i38, 37);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p36, $i39);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p40, 0);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.9, $p41);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i64($i42);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i44 := $and.i64($i43, 1);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 435} {:cexpr "tmp___0"} boogie_si_record_i64($i45);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb8:
    assume $i46 == 1;
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 2048)), $mul.ref(352, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.1, $p47);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 1832)), $mul.ref(64, 1));
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.1, $p49);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 2048)), $mul.ref(352, 1));
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 1832)), $mul.ref(56, 1));
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.1, $p53);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(64, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.1, $p55);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(56, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} __dynamic_pr_debug.ref.ref.i32.ref.i32.ref($p3, .str.70, $i50, $p54, $i56, $p58);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p10, .str.6);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p11, .str.68);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p12, .str.11);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p13, .str.69);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.8, $p15);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 32);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p15, $i18);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p19, 0);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.9, $p20);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 432} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i30 := 1;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(64, 1));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(56, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} __dynamic_pr_debug.ref.ref.i32.ref($p2, .str.69, $i27, $p29);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const get_sb_mtd_set: ref;

axiom get_sb_mtd_set == $sub.ref(0, 458168);

procedure get_sb_mtd_set($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation get_sb_mtd_set($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2048)), $mul.ref(352, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $p1);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 1832)), $mul.ref(64, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 32505856);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2048)), $mul.ref(16, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, $i6);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 1832)), $mul.ref(328, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2048)), $mul.ref(344, 1));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, $p9);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const sget: ref;

axiom sget == $sub.ref(0, 459200);

procedure sget($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);



const deactivate_locked_super: ref;

axiom deactivate_locked_super == $sub.ref(0, 460232);

procedure deactivate_locked_super($p0: ref);



const dget: ref;

axiom dget == $sub.ref(0, 461264);

procedure dget($p0: ref) returns ($r: ref);



const lockref_get: ref;

axiom lockref_get == $sub.ref(0, 462296);

procedure lockref_get($p0: ref);



const kill_mtd_super: ref;

axiom kill_mtd_super == $sub.ref(0, 463328);

procedure kill_mtd_super($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.10, $CurrAddr, assertsPassed;



implementation kill_mtd_super($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} generic_shutdown_super($p0);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2048)), $mul.ref(352, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} put_mtd_device($p2);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2048)), $mul.ref(352, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $0.ref);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const generic_shutdown_super: ref;

axiom generic_shutdown_super == $sub.ref(0, 464360);

procedure generic_shutdown_super($p0: ref);
  free requires assertsPassed;



implementation generic_shutdown_super($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    return;
}



const mtd_concat_create: ref;

axiom mtd_concat_create == $sub.ref(0, 465392);

procedure mtd_concat_create($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);



const concat_writev: ref;

axiom concat_writev == $sub.ref(0, 466424);

procedure concat_writev($p0: ref, $p1: ref, $i2: i64, $i3: i64, $p4: ref) returns ($r: i32);



const concat_read_oob: ref;

axiom concat_read_oob == $sub.ref(0, 467456);

procedure concat_read_oob($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.1, $CurrAddr, $M.0, $M.10, assertsPassed;



implementation concat_read_oob($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $i51: i1;
  var $i52: i32;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $p63: ref;
  var $i65: i32;
  var $i66: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $p73: ref;
  var $i74: i1;
  var $i75: i32;
  var $i67: i32;
  var $i64: i32;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $i83: i64;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $i103: i64;
  var $p104: ref;
  var $i105: i64;
  var $i106: i64;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i1;
  var $i111: i32;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i64;
  var $p116: ref;
  var $p117: ref;
  var $i26: i64;
  var $i27: i32;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i32;
  var $i76: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $p3 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    call {:si_unique_call 440} {:cexpr "concat_read_oob:arg:from"} boogie_si_record_i64($i1);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.15;
    cmdloc_dummy_var_7 := $M.15;
    call {:si_unique_call 441} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p5, $p6, 64, $zext.i32.i64(8), 0 == 1);
    $M.15 := cmdloc_dummy_var_8;
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p7, 0);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p8, 0);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 1848)), $mul.ref(1832, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 0);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i76 := $sub.i32(0, 22);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $r := $i76;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i12, $i13, $i14 := 0, $i1, 0;
    goto $bb4;

  $bb4:
    call $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $p23, $i24, $i25, $p28, $i29, $i30, $p31, $i32, $i33, $p34, $i35, $i36, $p37, $i38, $p39, $i40, $p41, $i42, $i43, $p44, $p45, $i46, $p47, $i48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $p59, $i60, $i61, $p63, $i65, $i66, $p69, $i70, $i71, $p73, $i74, $i75, $i67, $i64, $i77, $p78, $p79, $i80, $i81, $p82, $i83, $p84, $i85, $i86, $p87, $p88, $i89, $i90, $i91, $p92, $p93, $p94, $i95, $p96, $p97, $p98, $p99, $i100, $i101, $p102, $i103, $p104, $i105, $i106, $p107, $p108, $i109, $i110, $i111, $p112, $p113, $p114, $i115, $p116, $p117, $i26, $i27, $i118, $i119, $i120, $i12, $i13, $i14 := concat_read_oob_loop_$bb4($p0, $p2, $p3, $p4, $p9, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $p23, $i24, $i25, $p28, $i29, $i30, $p31, $i32, $i33, $p34, $i35, $i36, $p37, $i38, $p39, $i40, $p41, $i42, $i43, $p44, $p45, $i46, $p47, $i48, $i49, $p50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $p59, $i60, $i61, $p63, $i65, $i66, $p69, $i70, $i71, $p73, $i74, $i75, $i67, $i64, $i77, $p78, $p79, $i80, $i81, $p82, $i83, $p84, $i85, $i86, $p87, $p88, $i89, $i90, $i91, $p92, $p93, $p94, $i95, $p96, $p97, $p98, $p99, $i100, $i101, $p102, $i103, $p104, $i105, $i106, $p107, $p108, $i109, $i110, $i111, $p112, $p113, $p114, $i115, $p116, $p117, $i26, $i27, $i118, $i119, $i120, $i12, $i13, $i14);
    goto $bb4_last;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i14);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p16, $mul.ref($i17, 8));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.1, $p20);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i22 := $uge.i64($i13, $i21);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.15, $p28);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, $i13);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p19, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.1, $p31);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i33 := $ugt.i64($i30, $i32);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i38 := mtd_read_oob($p19, $i13, $p3);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 445} {:cexpr "err"} boogie_si_record_i32($i38);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.15, $p39);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.15, $p41);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i43 := $add.i64($i40, $i42);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p44, $i43);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.15, $p45);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.15, $p47);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i46, $i48);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p50, $i49);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i38, 0);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i52);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 447} {:cexpr "tmp___2"} boogie_si_record_i64($i54);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i77 := $i12;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.15, $p78);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.15, $p98);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i26, $i27 := 0, $i77;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i118 := $add.i32($i14, 1);
    call {:si_unique_call 443} {:cexpr "i"} boogie_si_record_i32($i118);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.1, $p9);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i120 := $sgt.i32($i119, $i118);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i120 == 1);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb38:
    assume $i120 == 1;
    assume {:verifier.code 0} true;
    $i12, $i13, $i14 := $i27, $i26, $i118;
    goto $bb38_dummy;

  $bb32:
    assume $i101 == 1;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i103 := $load.i64($M.15, $p102);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i105 := $load.i64($M.15, $p104);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i106 := $sub.i64($i103, $i105);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p107, $i106);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i109 := $load.i64($M.15, $p108);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i110 := $eq.i64($i109, 0);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i111 := $i77;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.15, $p112);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i115 := $load.i64($M.15, $p114);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p113, $mul.ref($i115, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p117, $p116);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i76 := $i111;
    goto $bb24;

  $bb26:
    assume $i81 == 1;
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.15, $p82);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.15, $p84);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i86 := $sub.i64($i83, $i85);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p87, $i86);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.15, $p88);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i90 := $eq.i64($i89, 0);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i91 := $i77;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.15, $p92);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i95 := $load.i64($M.15, $p94);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p93, $mul.ref($i95, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p97, $p96);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i76 := $i91;
    goto $bb24;

  $bb13:
    assume $i55 == 1;
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $i56 := mtd_is_eccerr($i38);
    call {:si_unique_call 449} {:cexpr "tmp___1"} boogie_si_record_i32($i56);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i57 == 1);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $i65 := mtd_is_bitflip($i38);
    call {:si_unique_call 451} {:cexpr "tmp___0"} boogie_si_record_i32($i65);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i67 := $i38;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i76 := $i67;
    goto $bb24;

  $bb18:
    assume $i66 == 1;
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.1, $p69);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i70, 1);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p73, $i71);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i12, 0);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := $i12;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i64 := $i75;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i77 := $i64;
    goto $bb25;

  $bb20:
    assume $i74 == 1;
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i75 := $i38;
    goto $bb22;

  $bb15:
    assume $i57 == 1;
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(4, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.1, $p59);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, 1);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(4, 1));
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p63, $i61);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i64 := $i38;
    goto $bb17;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i33 == 1;
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p19, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.1, $p34);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i36 := $sub.i64($i35, $i13);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p37, $i36);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p19, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.1, $p23);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64($i13, $i24);
    call {:si_unique_call 442} {:cexpr "from"} boogie_si_record_i64($i25);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i26, $i27 := $i25, $i12;
    goto $bb8;

  $bb38_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2708;
}



const concat_write_oob: ref;

axiom concat_write_oob == $sub.ref(0, 468488);

procedure concat_write_oob($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $CurrAddr, $M.1, $M.0, $M.10, assertsPassed;



implementation concat_write_oob($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $i54: i1;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $i80: i64;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $p92: ref;
  var $p93: ref;
  var $i30: i64;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i17: i32;
  var $i18: i64;
  var $i11: i32;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $p3 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    call {:si_unique_call 453} {:cexpr "concat_write_oob:arg:to"} boogie_si_record_i64($i1);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.15;
    cmdloc_dummy_var_10 := $M.15;
    call {:si_unique_call 454} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p5, $p6, 64, $zext.i32.i64(8), 0 == 1);
    $M.15 := cmdloc_dummy_var_11;
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(4, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1024);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p12, 0);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p13, 0);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 1848)), $mul.ref(1832, 1));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i15, 0);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i17, $i18 := 0, $i1;
    goto $bb8;

  $bb8:
    call $p19, $p20, $i21, $p22, $p23, $p24, $i25, $i26, $p27, $i28, $i29, $p31, $i32, $i33, $p34, $i35, $i36, $p37, $i38, $i39, $p40, $i41, $p42, $i43, $p44, $i45, $i46, $p47, $p48, $i49, $p50, $i51, $i52, $p53, $i54, $i55, $p56, $p57, $i58, $i59, $p60, $i61, $p62, $i63, $i64, $p65, $p66, $i67, $i68, $p69, $p70, $p71, $i72, $p73, $p74, $p75, $p76, $i77, $i78, $p79, $i80, $p81, $i82, $i83, $p84, $p85, $i86, $i87, $p88, $p89, $p90, $i91, $p92, $p93, $i30, $i94, $i95, $i96, $i17, $i18 := concat_write_oob_loop_$bb8($p2, $p3, $p4, $p14, $p19, $p20, $i21, $p22, $p23, $p24, $i25, $i26, $p27, $i28, $i29, $p31, $i32, $i33, $p34, $i35, $i36, $p37, $i38, $i39, $p40, $i41, $p42, $i43, $p44, $i45, $i46, $p47, $p48, $i49, $p50, $i51, $i52, $p53, $i54, $i55, $p56, $p57, $i58, $i59, $p60, $i61, $p62, $i63, $i64, $p65, $p66, $i67, $i68, $p69, $p70, $p71, $i72, $p73, $p74, $p75, $p76, $i77, $i78, $p79, $i80, $p81, $i82, $i83, $p84, $p85, $i86, $i87, $p88, $p89, $p90, $i91, $p92, $p93, $i30, $i94, $i95, $i96, $i17, $i18);
    goto $bb8_last;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i17);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p20, $mul.ref($i21, 8));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.1, $p24);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i26 := $uge.i64($i18, $i25);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.15, $p31);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, $i18);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p23, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.1, $p34);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i36 := $ugt.i64($i33, $i35);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $i41 := mtd_write_oob($p23, $i18, $p3);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 458} {:cexpr "err"} boogie_si_record_i32($i41);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.15, $p42);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.15, $p44);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i43, $i45);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p47, $i46);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.15, $p48);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.15, $p50);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i49, $i51);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p53, $i52);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i41, 0);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i55 := $i41;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.15, $p56);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.15, $p75);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i17, 1);
    call {:si_unique_call 456} {:cexpr "i"} boogie_si_record_i32($i94);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.1, $p14);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i96 := $sgt.i32($i95, $i94);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i96 == 1);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb32:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i17, $i18 := $i94, $i30;
    goto $bb32_dummy;

  $bb26:
    assume $i78 == 1;
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i80 := $load.i64($M.15, $p79);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i82 := $load.i64($M.15, $p81);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i83 := $sub.i64($i80, $i82);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p84, $i83);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.15, $p85);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i87 := $eq.i64($i86, 0);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.15, $p88);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $i91 := $load.i64($M.15, $p90);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p89, $mul.ref($i91, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p93, $p92);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i87 == 1;
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb20:
    assume $i59 == 1;
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.15, $p60);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.15, $p62);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i64 := $sub.i64($i61, $i63);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p65, $i64);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.15, $p66);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i68 := $eq.i64($i67, 0);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.15, $p69);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.15, $p71);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p70, $mul.ref($i72, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p74, $p73);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i68 == 1;
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb17:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i11 := $i55;
    goto $bb3;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p23, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.1, $p37);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i39 := $sub.i64($i38, $i18);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p40, $i39);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p23, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.1, $p27);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i29 := $sub.i64($i18, $i28);
    call {:si_unique_call 455} {:cexpr "to"} boogie_si_record_i64($i29);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb12;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 30);
    goto $bb3;

  $bb32_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2878;
}



const concat_block_isbad: ref;

axiom concat_block_isbad == $sub.ref(0, 469520);

procedure concat_block_isbad($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation concat_block_isbad($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i22: i64;
  var $p23: ref;
  var $i27: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i12: i64;
  var $i13: i32;
  var $i28: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} {:cexpr "concat_block_isbad:arg:ofs"} boogie_si_record_i64($i1);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $i6 := mtd_can_have_bb($p5);
    call {:si_unique_call 461} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(1832, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 0);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i8 := $i28;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i12, $i13 := $i1, 0;
    goto $bb8;

  $bb8:
    call $p14, $p15, $i16, $p17, $p18, $p19, $i20, $i21, $p24, $i25, $i26, $i22, $p23, $i29, $i30, $i31, $i12, $i13 := concat_block_isbad_loop_$bb8($p2, $p9, $p14, $p15, $i16, $p17, $p18, $p19, $i20, $i21, $p24, $i25, $i26, $i22, $p23, $i29, $i30, $i31, $i12, $i13);
    goto $bb8_last;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i13);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p15, $mul.ref($i16, 8));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.1, $p19);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i21 := $uge.i64($i12, $i20);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i22, $p23 := $i12, $p18;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $i27 := mtd_block_isbad($p23, $i22);
    call {:si_unique_call 465} {:cexpr "res"} boogie_si_record_i32($i27);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb14;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p18, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.1, $p24);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i26 := $sub.i64($i12, $i25);
    call {:si_unique_call 462} {:cexpr "ofs"} boogie_si_record_i64($i26);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i13, 1);
    call {:si_unique_call 463} {:cexpr "i"} boogie_si_record_i32($i29);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.1, $p9);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i30, $i29);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i31 == 1);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb15:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i12, $i13 := $i26, $i29;
    goto $bb15_dummy;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb15_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3006;
}



const concat_block_markbad: ref;

axiom concat_block_markbad == $sub.ref(0, 470552);

procedure concat_block_markbad($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation concat_block_markbad($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i16: i64;
  var $p17: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p28: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i6: i64;
  var $i7: i32;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} {:cexpr "concat_block_markbad:arg:ofs"} boogie_si_record_i64($i1);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(1832, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 0);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i6, $i7 := $i1, 0;
    goto $bb4;

  $bb4:
    call $p8, $p9, $i10, $p11, $p12, $p13, $i14, $i15, $p18, $i19, $i20, $i16, $p17, $i30, $i31, $i32, $i6, $i7 := concat_block_markbad_loop_$bb4($p2, $p3, $p8, $p9, $i10, $p11, $p12, $p13, $i14, $i15, $p18, $i19, $i20, $i16, $p17, $i30, $i31, $i32, $i6, $i7);
    goto $bb4_last;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i7);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p9, $mul.ref($i10, 8));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.1, $p13);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i15 := $uge.i64($i6, $i14);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i16, $p17 := $i6, $p12;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $i21 := mtd_block_markbad($p17, $i16);
    call {:si_unique_call 470} {:cexpr "err"} boogie_si_record_i32($i21);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i29 := $i21;
    goto $bb13;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 1);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p28, $i26);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.1, $p18);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i20 := $sub.i64($i6, $i19);
    call {:si_unique_call 467} {:cexpr "ofs"} boogie_si_record_i64($i20);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i7, 1);
    call {:si_unique_call 468} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p3);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i31, $i30);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i6, $i7 := $i20, $i30;
    goto $bb14_dummy;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3040;
}



const concat_erase: ref;

axiom concat_erase == $sub.ref(0, 471584);

procedure concat_erase($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $CurrAddr, assertsPassed;



implementation concat_erase($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $i18: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i35: i32;
  var $i40: i64;
  var $i41: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $i46: i32;
  var $i39: i32;
  var $i34: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i64;
  var $i51: i64;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i65: i32;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $i79: i32;
  var $i69: i32;
  var $i64: i32;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i64;
  var $p84: ref;
  var $i85: i64;
  var $i86: i64;
  var $i87: i64;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $i92: i64;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i64;
  var $p117: ref;
  var $i118: i64;
  var $i119: i1;
  var $p122: ref;
  var $i123: i64;
  var $p124: ref;
  var $i125: i64;
  var $i126: i64;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $i130: i64;
  var $i120: i32;
  var $i121: i64;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $i108: i64;
  var $i109: i32;
  var $i136: i32;
  var $i137: i64;
  var $i106: i32;
  var $i107: i64;
  var $i131: i32;
  var $i132: i64;
  var $p138: ref;
  var $i139: i32;
  var $i140: i1;
  var $i141: i32;
  var $i142: i64;
  var $i143: i64;
  var $i144: i1;
  var $i145: i1;
  var $p150: ref;
  var $p151: ref;
  var $i152: i64;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $i157: i64;
  var $p158: ref;
  var $i159: i64;
  var $i160: i1;
  var $p161: ref;
  var $i162: i64;
  var $p163: ref;
  var $i164: i64;
  var $i165: i64;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $i169: i64;
  var $i170: i64;
  var $i171: i32;
  var $i172: i1;
  var $i173: i64;
  var $i174: i32;
  var $i175: i1;
  var $i176: i32;
  var $i177: i64;
  var $i178: i64;
  var $i179: i1;
  var $p180: ref;
  var $i181: i64;
  var $i182: i1;
  var $p183: ref;
  var $i184: i64;
  var $i185: i64;
  var $p186: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i64;
  var $i191: i64;
  var $i192: i32;
  var $i193: i1;
  var $i147: i64;
  var $i148: i64;
  var $i149: i32;
  var $i194: i32;
  var $i146: i32;
  var $i187: i32;
  var $p195: ref;
  var $i196: i8;
  var $p197: ref;
  var $p198: ref;
  var $i199: i1;
  var $p200: ref;
  var $p201: ref;
  var $i202: i64;
  var $i203: i1;
  var $p204: ref;
  var $p205: ref;
  var $i16: i32;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.1, $p31);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i33 := $sgt.i32($i32, 0);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i34 := 0;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32($i34, 1);
    call {:si_unique_call 473} {:cexpr "i"} boogie_si_record_i32($i47);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 0);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i48 == 1);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.1, $p49);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i47);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p28, $mul.ref($i51, 24)), $mul.ref(8, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.1, $p53);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32($i54, 1);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i56 := $zext.i32.i64($i55);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i57 := $and.i64($i50, $i56);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.1, $p61);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i63 := $sgt.i32($i62, $i47);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i64 := $i47;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i80 := $sub.i32($i64, 1);
    call {:si_unique_call 475} {:cexpr "i"} boogie_si_record_i32($i80);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i80, 0);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb39;

  $bb39:
    assume !($i81 == 1);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.1, $p82);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.1, $p84);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i83, $i85);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i80);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p28, $mul.ref($i87, 24)), $mul.ref(8, 1));
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.1, $p89);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i91 := $sub.i32($i90, 1);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i92 := $zext.i32.i64($i91);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i93 := $and.i64($i86, $i92);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $p95 := kmalloc(88, 208);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p96);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i98 := $eq.i64($i97, 0);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p96);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p1);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.1;
    cmdloc_dummy_var_13 := $M.1;
    call {:si_unique_call 476} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p99, $p100, 88, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_14;
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i102 := $load.i64($M.1, $p101);
    call {:si_unique_call 477} {:cexpr "length"} boogie_si_record_i64($i102);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(1832, 1));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.1, $p103);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i105 := $sgt.i32($i104, 0);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i106, $i107 := 0, 0;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i131, $i132 := $i106, $i107;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(1832, 1));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.1, $p138);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i140 := $sle.i32($i139, $i131);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i141 := $zext.i1.i32($i140);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i142 := $sext.i32.i64($i141);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i143 := ldv__builtin_expect($i142, 0);
    call {:si_unique_call 481} {:cexpr "tmp___0"} boogie_si_record_i64($i143);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i144 := $ne.i64($i143, 0);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i145 := $ne.i64($i102, 0);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i146 := 0;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i145 == 1);
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i187 := $i146;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p96, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i196 := $load.i8($M.1, $p195);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p197, $i196);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p96);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} kfree($p198);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i199 := $ne.i32($i187, 0);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.1, $p200);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i202 := $p2i.ref.i64($p201);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i203 := $ne.i64($i202, 0);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb87:
    assume $i203 == 1;
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.1, $p204);
    call {:si_unique_call 492} devirtbounce.15($p205, $p1);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    goto $bb89;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb84:
    assume $i199 == 1;
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i16 := $i187;
    goto $bb5;

  $bb62:
    assume $i145 == 1;
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i147, $i148, $i149 := $i132, $i102, $i131;
    goto $bb65;

  $bb65:
    call $p150, $p151, $i152, $p153, $p154, $p155, $i156, $i157, $p158, $i159, $i160, $p161, $i162, $p163, $i164, $i165, $p166, $p167, $p168, $i169, $i170, $i171, $i172, $i173, $i174, $p188, $p189, $i190, $i191, $i192, $i193, $i147, $i148, $i149, $i194 := concat_erase_loop_$bb65($p2, $p96, $p150, $p151, $i152, $p153, $p154, $p155, $i156, $i157, $p158, $i159, $i160, $p161, $i162, $p163, $i164, $i165, $p166, $p167, $p168, $i169, $i170, $i171, $i172, $i173, $i174, $p188, $p189, $i190, $i191, $i192, $i193, $i147, $i148, $i149, $i194);
    goto $bb65_last;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.1, $p150);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i152 := $sext.i32.i64($i149);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($p151, $mul.ref($i152, 8));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.1, $p153);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p96, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i156 := $load.i64($M.1, $p155);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i157 := $add.i64($i156, $i148);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p154, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i159 := $load.i64($M.1, $p158);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i160 := $ugt.i64($i157, $i159);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i160 == 1);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p96, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p167, $i148);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p96, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i169 := $load.i64($M.1, $p168);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i170 := $sub.i64($i148, $i169);
    call {:si_unique_call 483} {:cexpr "length"} boogie_si_record_i64($i170);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $i171 := concat_dev_erase($p154, $p96);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    call {:si_unique_call 485} {:cexpr "err"} boogie_si_record_i32($i171);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i171, 0);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i173, $i174 := $i147, $i171;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p96, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p188, 0);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p154, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i190 := $load.i64($M.1, $p189);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i191 := $add.i64($i190, $i147);
    call {:si_unique_call 490} {:cexpr "offset"} boogie_si_record_i64($i191);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i192 := $add.i32($i149, 1);
    call {:si_unique_call 491} {:cexpr "i"} boogie_si_record_i32($i192);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i193 := $ne.i64($i170, 0);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i194 := $i171;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i146 := $i194;
    goto $bb64;

  $bb81:
    assume $i193 == 1;
    assume {:verifier.code 0} true;
    $i147, $i148, $i149 := $i191, $i170, $i192;
    goto $bb81_dummy;

  $bb70:
    assume $i172 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i174, $sub.i32(0, 22));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i176 := $zext.i1.i32($i175);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i177 := $sext.i32.i64($i176);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $i178 := ldv__builtin_expect($i177, 0);
    call {:si_unique_call 487} {:cexpr "tmp___1"} boogie_si_record_i64($i178);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i179 := $ne.i64($i178, 0);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p96, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i181 := $load.i64($M.1, $p180);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i182 := $ne.i64($i181, $sub.i64(0, 1));
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i187 := $i174;
    goto $bb79;

  $bb76:
    assume $i182 == 1;
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p96, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i184 := $load.i64($M.1, $p183);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i185 := $add.i64($i184, $i173);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p186, $i185);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb72:
    assume $i179 == 1;
    call {:si_unique_call 488} devirtbounce.2(0, .str.73, 472, 12);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    call concat_erase_loop_$bb74();
    goto $bb74_last;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb67:
    assume $i160 == 1;
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p154, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i162 := $load.i64($M.1, $p161);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p96, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i164 := $load.i64($M.1, $p163);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i165 := $sub.i64($i162, $i164);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p96, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p166, $i165);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb58:
    assume $i144 == 1;
    call {:si_unique_call 482} devirtbounce.2(0, .str.73, 454, 12);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    call concat_erase_loop_$bb60();
    goto $bb60_last;

  $bb46:
    assume $i105 == 1;
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i108, $i109 := 0, 0;
    goto $bb49;

  $bb49:
    call $p110, $p111, $i112, $p113, $p114, $p115, $i116, $p117, $i118, $i119, $p122, $i123, $p124, $i125, $i126, $p127, $p128, $i129, $i130, $i120, $i121, $i133, $i134, $i135, $i108, $i109, $i136, $i137 := concat_erase_loop_$bb49($p2, $p96, $p103, $p110, $p111, $i112, $p113, $p114, $p115, $i116, $p117, $i118, $i119, $p122, $i123, $p124, $i125, $i126, $p127, $p128, $i129, $i130, $i120, $i121, $i133, $i134, $i135, $i108, $i109, $i136, $i137);
    goto $bb49_last;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.1, $p110);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i112 := $sext.i32.i64($i109);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p111, $mul.ref($i112, 8));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.1, $p113);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i116 := $load.i64($M.1, $p115);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p96, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i118 := $load.i64($M.1, $p117);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i119 := $ule.i64($i116, $i118);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i120, $i121 := $i109, $i108;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i131, $i132 := $i120, $i121;
    goto $bb54;

  $bb51:
    assume $i119 == 1;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p96, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i123 := $load.i64($M.1, $p122);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p114, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i125 := $load.i64($M.1, $p124);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i126 := $sub.i64($i123, $i125);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p96, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p127, $i126);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p114, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i129 := $load.i64($M.1, $p128);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i130 := $add.i64($i129, $i108);
    call {:si_unique_call 478} {:cexpr "offset"} boogie_si_record_i64($i130);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i133 := $add.i32($i109, 1);
    call {:si_unique_call 479} {:cexpr "i"} boogie_si_record_i32($i133);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.1, $p103);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i135 := $sgt.i32($i134, $i133);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i136, $i137 := $i133, $i130;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i106, $i107 := $i136, $i137;
    goto $bb48;

  $bb55:
    assume $i135 == 1;
    assume {:verifier.code 0} true;
    $i108, $i109 := $i130, $i133;
    goto $bb55_dummy;

  $bb43:
    assume $i98 == 1;
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb5;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb5;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i81 == 1;
    goto $bb38;

  $bb27:
    assume $i63 == 1;
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i65 := $i47;
    goto $bb30;

  $bb30:
    call $i66, $i67, $i68, $i65, $i70, $p71, $i72, $i73, $i74, $p76, $i77, $i78, $i79, $i69 := concat_erase_loop_$bb30($p1, $p28, $p59, $p61, $i66, $i67, $i68, $i65, $i70, $p71, $i72, $i73, $i74, $p76, $i77, $i78, $i79, $i69);
    goto $bb30_last;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.1, $p59);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.1, $p71);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i73 := $add.i64($i70, $i72);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i65);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p28, $mul.ref($i74, 24)), $mul.ref(0, 1));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.1, $p76);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i78 := $uge.i64($i73, $i77);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i79 := $i65;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i64 := $i79;
    goto $bb29;

  $bb34:
    assume $i78 == 1;
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i65, 1);
    call {:si_unique_call 474} {:cexpr "i"} boogie_si_record_i32($i66);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.1, $p61);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i68 := $sgt.i32($i67, $i66);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i69 := $i66;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i64 := $i69;
    goto $bb29;

  $bb32:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i65 := $i66;
    goto $bb32_dummy;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb5;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb22;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb14;

  $bb14:
    call $i36, $i37, $i38, $i35, $i40, $i41, $p43, $i44, $i45, $i46, $i39 := concat_erase_loop_$bb14($p28, $p29, $p31, $i36, $i37, $i38, $i35, $i40, $i41, $p43, $i44, $i45, $i46, $i39);
    goto $bb14_last;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.1, $p29);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i35);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p28, $mul.ref($i41, 24)), $mul.ref(0, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.1, $p43);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i45 := $uge.i64($i40, $i44);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i46 := $i35;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i34 := $i46;
    goto $bb13;

  $bb18:
    assume $i45 == 1;
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 1);
    call {:si_unique_call 472} {:cexpr "i"} boogie_si_record_i32($i36);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.1, $p31);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i38 := $sgt.i32($i37, $i36);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i39 := $i36;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i34 := $i39;
    goto $bb13;

  $bb16:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i35 := $i36;
    goto $bb16_dummy;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.1, $p7);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i11, 1);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i14 := $and.i64($i8, $i13);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.1, $p17);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i21, 1);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i18, $i23);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb5;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb5;

  $bb74_dummy:
    assume false;
    return;

  $bb74_last:
    assume {:verifier.code 0} true;
    goto $bb74_dummy;

  $bb81_dummy:
    assume false;
    return;

  $bb65_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3260;

  $bb60_dummy:
    assume false;
    return;

  $bb60_last:
    assume {:verifier.code 0} true;
    goto $bb60_dummy;

  $bb55_dummy:
    assume false;
    return;

  $bb49_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3212;

  $bb32_dummy:
    assume false;
    return;

  $bb30_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3160;

  $bb16_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3120;
}



const concat_read: ref;

axiom concat_read == $sub.ref(0, 472616);

procedure concat_read($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.1, $CurrAddr;



implementation concat_read($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $p51: ref;
  var $i53: i32;
  var $i54: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $p61: ref;
  var $i62: i1;
  var $i63: i32;
  var $i55: i32;
  var $i52: i32;
  var $i65: i32;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $i71: i32;
  var $p72: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i10: i64;
  var $i11: i64;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 494} {:cexpr "concat_read:arg:from"} boogie_si_record_i64($i1);
    call {:si_unique_call 495} {:cexpr "concat_read:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1848)), $mul.ref(1832, 1));
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32(0, 22);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $r := $i64;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i10, $i11, $i12, $p13, $i14 := $i1, $i2, 0, $p4, 0;
    goto $bb4;

  $bb4:
    call $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $p23, $i24, $i25, $i30, $p31, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p47, $i48, $i49, $p51, $i53, $i54, $p57, $i58, $i59, $p61, $i62, $i63, $i55, $i52, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $p72, $i26, $p27, $i28, $i29, $i73, $i74, $i75, $i10, $i11, $i12, $p13, $i14 := concat_read_loop_$bb4($p0, $p3, $p5, $p6, $p7, $p15, $p16, $i17, $p18, $p19, $p20, $i21, $i22, $p23, $i24, $i25, $i30, $p31, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $p47, $i48, $i49, $p51, $i53, $i54, $p57, $i58, $i59, $p61, $i62, $i63, $i55, $i52, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $p72, $i26, $p27, $i28, $i29, $i73, $i74, $i75, $i10, $i11, $i12, $p13, $i14);
    goto $bb4_last;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i12);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p16, $mul.ref($i17, 8));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.1, $p20);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i22 := $uge.i64($i10, $i21);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i10, $i11);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p19, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.1, $p31);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i33 := $ugt.i64($i30, $i32);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i37 := $i11;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i38 := mtd_read($p19, $i10, $i37, $p5, $p13);
    call {:si_unique_call 500} {:cexpr "err"} boogie_si_record_i32($i38);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 502} {:cexpr "tmp___1"} boogie_si_record_i64($i42);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i65 := $i14;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.20, $p3);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.20, $p5);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i66, $i67);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p3, $i68);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i69 := $sub.i64($i11, $i37);
    call {:si_unique_call 507} {:cexpr "len"} boogie_si_record_i64($i69);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, 0);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i71 := $i65;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p13, $mul.ref($i37, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i26, $p27, $i28, $i29 := $i65, $p72, $i69, 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i12, 1);
    call {:si_unique_call 497} {:cexpr "i"} boogie_si_record_i32($i73);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.1, $p7);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i75 := $sgt.i32($i74, $i73);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i75 == 1);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb29:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i10, $i11, $i12, $p13, $i14 := $i29, $i28, $i73, $p27, $i26;
    goto $bb29_dummy;

  $bb26:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i64 := $i71;
    goto $bb24;

  $bb13:
    assume $i43 == 1;
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i44 := mtd_is_eccerr($i38);
    call {:si_unique_call 504} {:cexpr "tmp___0"} boogie_si_record_i32($i44);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i45 == 1);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $i53 := mtd_is_bitflip($i38);
    call {:si_unique_call 506} {:cexpr "tmp"} boogie_si_record_i32($i53);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i55 := $i38;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i64 := $i55;
    goto $bb24;

  $bb18:
    assume $i54 == 1;
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.1, $p57);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, 1);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p61, $i59);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i14, 0);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $i14;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i52 := $i63;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i65 := $i52;
    goto $bb25;

  $bb20:
    assume $i62 == 1;
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i63 := $i38;
    goto $bb22;

  $bb15:
    assume $i45 == 1;
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(4, 1));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.1, $p47);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, 1);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(4, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p51, $i49);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i52 := $i38;
    goto $bb17;

  $bb10:
    assume $i33 == 1;
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p19, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.1, $p34);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i36 := $sub.i64($i35, $i10);
    call {:si_unique_call 498} {:cexpr "size"} boogie_si_record_i64($i36);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb12;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p19, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.1, $p23);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64($i10, $i24);
    call {:si_unique_call 496} {:cexpr "from"} boogie_si_record_i64($i25);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i26, $p27, $i28, $i29 := $i14, $p13, $i11, $i25;
    goto $bb8;

  $bb29_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3350;
}



const concat_write: ref;

axiom concat_write == $sub.ref(0, 473648);

procedure concat_write($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.1, $CurrAddr;



implementation concat_write($p0: ref, $i1: i64, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $i48: i32;
  var $p49: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i11: i64;
  var $i12: i64;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i53: i32;
  var $i10: i32;
  var $i42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 509} {:cexpr "concat_write:arg:to"} boogie_si_record_i64($i1);
    call {:si_unique_call 510} {:cexpr "concat_write:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1848)), $mul.ref(1832, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i42 := $i10;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i11, $i12, $i13, $p14, $i15 := $i1, $i2, 0, $p4, $sub.i32(0, 22);
    goto $bb4;

  $bb4:
    call $p16, $p17, $i18, $p19, $p20, $p21, $i22, $i23, $p24, $i25, $i26, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $i38, $i39, $i40, $i41, $i43, $i44, $i45, $i46, $i47, $i48, $p49, $i27, $p28, $i29, $i30, $i50, $i51, $i52, $i11, $i12, $i13, $p14, $i15, $i53 := concat_write_loop_$bb4($p3, $p5, $p6, $p7, $p16, $p17, $i18, $p19, $p20, $p21, $i22, $i23, $p24, $i25, $i26, $i31, $p32, $i33, $i34, $p35, $i36, $i37, $i38, $i39, $i40, $i41, $i43, $i44, $i45, $i46, $i47, $i48, $p49, $i27, $p28, $i29, $i30, $i50, $i51, $i52, $i11, $i12, $i13, $p14, $i15, $i53);
    goto $bb4_last;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i13);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p17, $mul.ref($i18, 8));
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.1, $p21);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i23 := $uge.i64($i11, $i22);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i31 := $add.i64($i11, $i12);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p20, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.1, $p32);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i34 := $ugt.i64($i31, $i33);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i38 := $i12;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $i39 := mtd_write($p20, $i11, $i38, $p5, $p14);
    call {:si_unique_call 515} {:cexpr "err"} boogie_si_record_i32($i39);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i41 := $i39;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.20, $p3);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.20, $p5);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i43, $i44);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p3, $i45);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i46 := $sub.i64($i12, $i38);
    call {:si_unique_call 516} {:cexpr "len"} boogie_si_record_i64($i46);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i48 := $i39;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p14, $mul.ref($i38, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i27, $p28, $i29, $i30 := $sub.i32(0, 22), $p49, $i46, 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i13, 1);
    call {:si_unique_call 512} {:cexpr "i"} boogie_si_record_i32($i50);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.1, $p7);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i52 := $sgt.i32($i51, $i50);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i53 := $i27;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i10 := $i53;
    goto $bb3;

  $bb20:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i11, $i12, $i13, $p14, $i15 := $i30, $i29, $i50, $p28, $i27;
    goto $bb20_dummy;

  $bb17:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i42 := $i48;
    goto $bb15;

  $bb13:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb15;

  $bb10:
    assume $i34 == 1;
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p20, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.1, $p35);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i37 := $sub.i64($i36, $i11);
    call {:si_unique_call 513} {:cexpr "size"} boogie_si_record_i64($i37);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb12;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p20, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.1, $p24);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i26 := $sub.i64($i11, $i25);
    call {:si_unique_call 511} {:cexpr "to"} boogie_si_record_i64($i26);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i27, $p28, $i29, $i30 := $i15, $p14, $i12, $i26;
    goto $bb8;

  $bb20_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3444;
}



const concat_sync: ref;

axiom concat_sync == $sub.ref(0, 474680);

procedure concat_sync($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation concat_sync($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1848)), $mul.ref(1832, 1));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $p7, $i8, $p9, $p10, $i11, $i12, $i13, $i5 := concat_sync_loop_$bb4($p1, $p2, $p6, $p7, $i8, $p9, $p10, $i11, $i12, $i13, $i5);
    goto $bb4_last;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p7, $mul.ref($i8, 8));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} mtd_sync($p10);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i5, 1);
    call {:si_unique_call 518} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p2);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, $i11);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i11;
    goto $bb6_dummy;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3504;
}



const concat_lock: ref;

axiom concat_lock == $sub.ref(0, 475712);

procedure concat_lock($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation concat_lock($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i38: i64;
  var $i39: i1;
  var $i40: i32;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i8: i64;
  var $i9: i64;
  var $i10: i32;
  var $i11: i32;
  var $i44: i32;
  var $i7: i32;
  var $i37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} {:cexpr "concat_lock:arg:ofs"} boogie_si_record_i64($i1);
    call {:si_unique_call 520} {:cexpr "concat_lock:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1848)), $mul.ref(1832, 1));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i37 := $i7;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i8, $i9, $i10, $i11 := $i1, $i2, $sub.i32(0, 22), 0;
    goto $bb4;

  $bb4:
    call $p12, $p13, $i14, $p15, $p16, $p17, $i18, $i19, $p20, $i21, $i22, $i26, $p27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $i38, $i39, $i40, $i23, $i24, $i25, $i41, $i42, $i43, $i8, $i9, $i10, $i11, $i44 := concat_lock_loop_$bb4($p3, $p4, $p12, $p13, $i14, $p15, $p16, $p17, $i18, $i19, $p20, $i21, $i22, $i26, $p27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $i38, $i39, $i40, $i23, $i24, $i25, $i41, $i42, $i43, $i8, $i9, $i10, $i11, $i44);
    goto $bb4_last;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i11);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p13, $mul.ref($i14, 8));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.1, $p17);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i19 := $uge.i64($i8, $i18);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i8, $i9);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p16, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.1, $p27);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i29 := $ugt.i64($i26, $i28);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i33 := $i9;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i34 := mtd_lock($p16, $i8, $i33);
    call {:si_unique_call 525} {:cexpr "err"} boogie_si_record_i32($i34);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i36 := $i34;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i38 := $sub.i64($i9, $i33);
    call {:si_unique_call 526} {:cexpr "len"} boogie_si_record_i64($i38);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i40 := $i34;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i23, $i24, $i25 := $sub.i32(0, 22), $i38, 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i11, 1);
    call {:si_unique_call 522} {:cexpr "i"} boogie_si_record_i32($i41);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.1, $p4);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i42, $i41);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i44 := $i23;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i7 := $i44;
    goto $bb3;

  $bb20:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i8, $i9, $i10, $i11 := $i25, $i24, $i23, $i41;
    goto $bb20_dummy;

  $bb17:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i37 := $i40;
    goto $bb15;

  $bb13:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb15;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p16, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.1, $p30);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i32 := $sub.i64($i31, $i8);
    call {:si_unique_call 523} {:cexpr "size"} boogie_si_record_i64($i32);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb12;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p16, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.1, $p20);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64($i8, $i21);
    call {:si_unique_call 521} {:cexpr "ofs"} boogie_si_record_i64($i22);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i23, $i24, $i25 := $i10, $i9, $i22;
    goto $bb8;

  $bb20_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3526;
}



const concat_unlock: ref;

axiom concat_unlock == $sub.ref(0, 476744);

procedure concat_unlock($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation concat_unlock($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i38: i64;
  var $i39: i1;
  var $i40: i32;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i8: i64;
  var $i9: i64;
  var $i10: i32;
  var $i11: i32;
  var $i44: i32;
  var $i7: i32;
  var $i37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} {:cexpr "concat_unlock:arg:ofs"} boogie_si_record_i64($i1);
    call {:si_unique_call 528} {:cexpr "concat_unlock:arg:len"} boogie_si_record_i64($i2);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1848)), $mul.ref(1832, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i37 := $i7;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i8, $i9, $i10, $i11 := $i1, $i2, 0, 0;
    goto $bb4;

  $bb4:
    call $p12, $p13, $i14, $p15, $p16, $p17, $i18, $i19, $p20, $i21, $i22, $i26, $p27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $i38, $i39, $i40, $i23, $i24, $i25, $i41, $i42, $i43, $i8, $i9, $i10, $i11, $i44 := concat_unlock_loop_$bb4($p3, $p4, $p12, $p13, $i14, $p15, $p16, $p17, $i18, $i19, $p20, $i21, $i22, $i26, $p27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i35, $i36, $i38, $i39, $i40, $i23, $i24, $i25, $i41, $i42, $i43, $i8, $i9, $i10, $i11, $i44);
    goto $bb4_last;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i11);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p13, $mul.ref($i14, 8));
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.1, $p17);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i19 := $uge.i64($i8, $i18);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i8, $i9);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p16, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.1, $p27);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i29 := $ugt.i64($i26, $i28);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i33 := $i9;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $i34 := mtd_unlock($p16, $i8, $i33);
    call {:si_unique_call 533} {:cexpr "err"} boogie_si_record_i32($i34);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i36 := $i34;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i38 := $sub.i64($i9, $i33);
    call {:si_unique_call 534} {:cexpr "len"} boogie_si_record_i64($i38);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i40 := $i34;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i23, $i24, $i25 := $sub.i32(0, 22), $i38, 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i11, 1);
    call {:si_unique_call 530} {:cexpr "i"} boogie_si_record_i32($i41);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.1, $p4);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i42, $i41);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i44 := $i23;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i7 := $i44;
    goto $bb3;

  $bb20:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i8, $i9, $i10, $i11 := $i25, $i24, $i23, $i41;
    goto $bb20_dummy;

  $bb17:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i37 := $i40;
    goto $bb15;

  $bb13:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb15;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p16, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.1, $p30);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i32 := $sub.i64($i31, $i8);
    call {:si_unique_call 531} {:cexpr "size"} boogie_si_record_i64($i32);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb12;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p16, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.1, $p20);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64($i8, $i21);
    call {:si_unique_call 529} {:cexpr "ofs"} boogie_si_record_i64($i22);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i23, $i24, $i25 := $i10, $i9, $i22;
    goto $bb8;

  $bb20_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3580;
}



const concat_suspend: ref;

axiom concat_suspend == $sub.ref(0, 477776);

procedure concat_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation concat_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i6: i32;
  var $i19: i32;
  var $i5: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1848)), $mul.ref(1832, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i15 := $i5;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $p7, $p8, $i9, $p10, $p11, $i12, $i13, $i14, $i16, $i17, $i18, $i6, $i19 := concat_suspend_loop_$bb4($p1, $p2, $p7, $p8, $i9, $p10, $p11, $i12, $i13, $i14, $i16, $i17, $i18, $i6, $i19);
    goto $bb4_last;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i6);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 8));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $i12 := mtd_suspend($p11);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 536} {:cexpr "rc"} boogie_si_record_i32($i12);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i6, 1);
    call {:si_unique_call 537} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.1, $p2);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, $i16);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i19 := $i12;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i5 := $i19;
    goto $bb3;

  $bb10:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i16;
    goto $bb10_dummy;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb8;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3634;
}



const concat_resume: ref;

axiom concat_resume == $sub.ref(0, 478808);

procedure concat_resume($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation concat_resume($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1848)), $mul.ref(1832, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $p7, $i8, $p9, $p10, $i11, $i12, $i13, $i5 := concat_resume_loop_$bb4($p1, $p2, $p6, $p7, $i8, $p9, $p10, $i11, $i12, $i13, $i5);
    goto $bb4_last;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p7, $mul.ref($i8, 8));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} mtd_resume($p10);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i5, 1);
    call {:si_unique_call 539} {:cexpr "i"} boogie_si_record_i32($i11);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p2);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, $i11);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i11;
    goto $bb6_dummy;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3662;
}



const concat_get_unmapped_area: ref;

axiom concat_get_unmapped_area == $sub.ref(0, 479840);

procedure concat_get_unmapped_area($p0: ref, $i1: i64, $i2: i64, $i3: i64) returns ($r: i64);



const mtd_resume: ref;

axiom mtd_resume == $sub.ref(0, 480872);

procedure mtd_resume($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation mtd_resume($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(296, 1));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(296, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    call {:si_unique_call 540} devirtbounce.1($p6, $p0);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const mtd_suspend: ref;

axiom mtd_suspend == $sub.ref(0, 481904);

procedure mtd_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation mtd_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(288, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(288, 1));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    call {:si_unique_call 541} $i7 := devirtbounce.10($p6, $p0);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    call {:si_unique_call 542} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;

  SeqInstr_127:
    assume !assertsPassed;
    return;
}



const mtd_sync: ref;

axiom mtd_sync == $sub.ref(0, 482936);

procedure mtd_sync($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation mtd_sync($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(232, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(232, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    call {:si_unique_call 543} devirtbounce.1($p6, $p0);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_130:
    assume !assertsPassed;
    return;
}



const concat_dev_erase: ref;

axiom concat_dev_erase == $sub.ref(0, 483968);

procedure concat_dev_erase($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.29, $M.30, $M.31, $M.32, $M.1, $M.33, $M.34, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.10, assertsPassed;



implementation concat_dev_erase($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $p2 := $alloc($mul.ref(88, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $p7 := get_current();
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p8, 0);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, $p10, $p7);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, $p11, default_wake_function);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, $p13, $0.ref);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p15, $0.ref);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} __init_waitqueue_head($p2, .str.74, $p4);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p16, $p0);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, concat_erase_callback);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p2);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p19, $i18);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $i20 := mtd_erase($p0, $p1);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    call {:si_unique_call 552} {:cexpr "err"} boogie_si_record_i32($i20);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i47 := $i20;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $r := $i47;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $p22 := get_current();
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p23, 0);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $M.33 := $store.i64($M.33, $p5, 2);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $p24 := get_current();
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.33, $p5);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p24, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 555} $i27 := devirtbounce.17(0, $p26, $i25, $p26);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $M.33 := $store.i64($M.33, $p5, $i27);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} add_wait_queue($p2, $p3);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.1, $p28);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 8);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} remove_wait_queue($p2, $p3);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $p36 := get_current();
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p37, 0);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $M.34 := $store.i64($M.34, $p6, 0);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $p38 := get_current();
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.34, $p6);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p38, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 561} $i41 := devirtbounce.17(0, $p40, $i39, $p40);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $M.34 := $store.i64($M.34, $p6, $i41);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.1, $p42);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 16);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i46 := (if $i45 == 1 then $sub.i32(0, 5) else 0);
    call {:si_unique_call 562} {:cexpr "err"} boogie_si_record_i32($i46);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb11;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i31 == 1;
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p32);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 16);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb6;

  $bb7:
    assume $i35 == 1;
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} schedule();
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 485000);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $p0 := devirtbounce.18(0, current_task);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const default_wake_function: ref;

axiom default_wake_function == $sub.ref(0, 486032);

procedure default_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 487064);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    return;
}



const concat_erase_callback: ref;

axiom concat_erase_callback == $sub.ref(0, 488096);

procedure concat_erase_callback($p0: ref);
  free requires assertsPassed;



implementation concat_erase_callback($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.1, $p1);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} __wake_up($p3, 3, 1, $0.ref);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    return;
}



const add_wait_queue: ref;

axiom add_wait_queue == $sub.ref(0, 489128);

procedure add_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation add_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 490160);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    return;
}



const remove_wait_queue: ref;

axiom remove_wait_queue == $sub.ref(0, 491192);

procedure remove_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 492224);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 566} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    return;
}



const mtd_can_have_bb: ref;

axiom mtd_can_have_bb == $sub.ref(0, 493256);

procedure mtd_can_have_bb($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mtd_can_have_bb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(272, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const mtd_write_oob: ref;

axiom mtd_write_oob == $sub.ref(0, 494288);

procedure mtd_write_oob($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.0, $M.10, $CurrAddr, assertsPassed;



implementation mtd_write_oob($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} {:cexpr "mtd_write_oob:arg:to"} boogie_si_record_i64($i1);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p3, 0);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p4, 0);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(168, 1));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(4, 1));
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1024);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(168, 1));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    call {:si_unique_call 568} $i16 := devirtbounce.8($p15, $p0, $i1, $p2);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    call {:si_unique_call 569} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i9 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 30);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 95);
    goto $bb3;
}



const mtd_concat_destroy: ref;

axiom mtd_concat_destroy == $sub.ref(0, 495320);

procedure mtd_concat_destroy($p0: ref);
  free requires assertsPassed;



implementation mtd_concat_destroy($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} kfree($p10);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1848)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} kfree($p9);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mtd_add_partition: ref;

axiom mtd_add_partition == $sub.ref(0, 496352);

procedure mtd_add_partition($p0: ref, $p1: ref, $i2: i64, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.10, assertsPassed;



implementation mtd_add_partition($p0: ref, $p1: ref, $i2: i64, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;
  var $i8: i1;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i1;
  var $i22: i8;
  var $i23: i1;
  var $p24: ref;
  var $i25: i64;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i7: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 573} {:cexpr "mtd_add_partition:arg:offset"} boogie_si_record_i64($i2);
    call {:si_unique_call 574} {:cexpr "mtd_add_partition:arg:length"} boogie_si_record_i64($i3);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i2, $sub.i64(0, 1));
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i2, $sub.i64(0, 2));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i3, 0);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i12 := $i3;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i13 := $sle.i64($i12, 0);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p14, $p1);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p15, $i12);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p16, $i2);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p17, 0);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p18, $0.ref);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $p19 := allocate_partition($p0, $p4, $sub.i32(0, 1), $i2);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $i21 := IS_ERR($p20);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i8($i21);
    call {:si_unique_call 578} {:cexpr "tmp___0"} boogie_si_record_i8($i22);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} mutex_lock_nested(mtd_partitions_mutex, 0);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p19, $mul.ref(0, 1864)), $mul.ref(1848, 1));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} list_add($p27, mtd_partitions);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} mutex_unlock(mtd_partitions_mutex);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p19, $mul.ref(0, 1864)), $mul.ref(0, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} vslice_dummy_var_73 := add_mtd_device($p28);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} vslice_dummy_var_74 := mtd_add_partition_attrs($p19);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i23 == 1;
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p19);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i25 := PTR_ERR($p24);
    call {:si_unique_call 580} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i64.i32($i25);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i7 := $i26;
    goto $bb6;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.1, $p9);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64($i10, $i2);
    call {:si_unique_call 575} {:cexpr "length"} boogie_si_record_i64($i11);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const mtd_del_partition: ref;

axiom mtd_del_partition == $sub.ref(0, 497384);

procedure mtd_del_partition($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation mtd_del_partition($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p13: ref;
  var $p14: ref;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} {:cexpr "mtd_del_partition:arg:partno"} boogie_si_record_i32($i1);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} mutex_lock_nested(mtd_partitions_mutex, 0);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, mtd_partitions);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 1840), 1864));
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 1840), 1864)), $mul.ref(1848, 1)), $mul.ref(0, 1));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($sub.ref(0, 1840), 1864));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 1840), 1864)), $mul.ref(1848, 1));
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, $p2i.ref.i64(mtd_partitions));
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 22);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} mutex_unlock(mtd_partitions_mutex);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p13, $p14 := $p9, $p4;
    goto $bb4;

  $bb4:
    call $p15, $p16, $i17, $i18, $i19, $p21, $i22, $i23, $p24, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $p13, $p14 := mtd_del_partition_loop_$bb4($p0, $i1, $p15, $p16, $i17, $i18, $i19, $p21, $i22, $i23, $p24, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $p13, $p14);
    goto $bb4_last;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p0);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i17, $i18);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 1864)), $mul.ref(1848, 1)), $mul.ref(0, 1));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p36, $mul.ref($sub.ref(0, 1840), 1864));
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p13, $mul.ref(0, 1864)), $mul.ref(1848, 1));
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, $p2i.ref.i64(mtd_partitions));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i40 == 1);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $p13, $p14 := $p37, $p13;
    goto $bb16_dummy;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, $i1);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p24 := $p14;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb8;

  $bb9:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p24, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(400, 1)), $mul.ref(16, 1));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} sysfs_remove_files($p27, mtd_partition_attrs);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p24, $mul.ref(0, 1864)), $mul.ref(0, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i29 := del_mtd_device($p28);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 590} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 0);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p24, $mul.ref(0, 1864)), $mul.ref(1848, 1));
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} list_del($p32);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} free_partition($p24);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb13;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb13;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb16_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3903;
}



const sysfs_remove_files: ref;

axiom sysfs_remove_files == $sub.ref(0, 498416);

procedure sysfs_remove_files($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation sysfs_remove_files($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    return;
}



const register_mtd_parser: ref;

axiom register_mtd_parser == $sub.ref(0, 499448);

procedure register_mtd_parser($p0: ref);
  free requires assertsPassed;



implementation register_mtd_parser($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} spin_lock(part_parser_lock);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} list_add($p1, part_parsers);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} spin_unlock(part_parser_lock);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    return;
}



const deregister_mtd_parser: ref;

axiom deregister_mtd_parser == $sub.ref(0, 500480);

procedure deregister_mtd_parser($p0: ref);
  free requires assertsPassed;



implementation deregister_mtd_parser($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} spin_lock(part_parser_lock);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} list_del($p1);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} spin_unlock(part_parser_lock);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    return;
}



const mtd_is_partition: ref;

axiom mtd_is_partition == $sub.ref(0, 501512);

procedure mtd_is_partition($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mtd_is_partition($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p7: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} mutex_lock_nested(mtd_partitions_mutex, 0);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.1, mtd_partitions);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 1840), 1864));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1840), 1864)), $mul.ref(1848, 1));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, $p2i.ref.i64(mtd_partitions));
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} mutex_unlock(mtd_partitions_mutex);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p7 := $p3;
    goto $bb4;

  $bb4:
    call $p8, $i9, $i10, $i11, $p14, $p15, $p16, $p17, $p18, $i19, $i20, $p7 := mtd_is_partition_loop_$bb4($p0, $p8, $i9, $i10, $i11, $p14, $p15, $p16, $p17, $p18, $i19, $i20, $p7);
    goto $bb4_last;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1864)), $mul.ref(0, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i9, $i10);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1864)), $mul.ref(1848, 1)), $mul.ref(0, 1));
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref($sub.ref(0, 1840), 1864));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p16, $mul.ref($sub.ref(0, 1840), 1864)), $mul.ref(1848, 1));
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, $p2i.ref.i64(mtd_partitions));
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $p7 := $p17;
    goto $bb10_dummy;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3967;
}



const mtd_get_device_size: ref;

axiom mtd_get_device_size == $sub.ref(0, 502544);

procedure mtd_get_device_size($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation mtd_get_device_size($p0: ref) returns ($r: i64)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i1 := mtd_is_partition($p0);
    call {:si_unique_call 603} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.1, $p9);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.1, $p3);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const mtd_release: ref;

axiom mtd_release == $sub.ref(0, 503576);

procedure mtd_release($p0: ref);
  free requires assertsPassed;



implementation mtd_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1832)), $mul.ref(64, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.1, $p3);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i5 := $mul.i32($i4, 2);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 94371840);
    call {:si_unique_call 605} {:cexpr "index"} boogie_si_record_i32($i6);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} device_destroy(mtd_class, $i7);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 504608);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const device_destroy: ref;

axiom device_destroy == $sub.ref(0, 505640);

procedure device_destroy($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation device_destroy($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} {:cexpr "device_destroy:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    return;
}



const mtd_type_show: ref;

axiom mtd_type_show == $sub.ref(0, 506672);

procedure mtd_type_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation mtd_type_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(0, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.35, $p5);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i7, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i7, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i7, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p18 := .str.63;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $i19 := snprintf.ref.i64.ref.ref($p2, 4096, .str.54, $p18);
    call {:si_unique_call 610} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p18 := .str.62;
    goto $bb23;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p18 := .str.61;
    goto $bb23;

  $bb4:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i7, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i12 == 1);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p18 := .str.60;
    goto $bb23;

  $bb11:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i7, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p18 := .str.59;
    goto $bb23;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i7, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i7, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i15 == 1);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p18 := .str.58;
    goto $bb23;

  $bb17:
    assume $i15 == 1;
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p18 := .str.57;
    goto $bb23;

  $bb15:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i16 == 1);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p18 := .str.56;
    goto $bb23;

  $bb19:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i7, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb21:
    assume $i17 == 1;
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p18 := .str.55;
    goto $bb23;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 507704);

procedure snprintf.ref.i64.ref.i64($p0: ref, $i1: i64, $p2: ref, p.3: i64) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32);



const mtd_flags_show: ref;

axiom mtd_flags_show == $sub.ref(0, 508736);

procedure mtd_flags_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation mtd_flags_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(4, 1));
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.37, $p5);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $i8 := snprintf.ref.i64.ref.i64($p2, 4096, .str.64, $i7);
    call {:si_unique_call 613} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const mtd_size_show: ref;

axiom mtd_size_show == $sub.ref(0, 509768);

procedure mtd_size_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation mtd_size_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.39, $p5);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i7 := snprintf.ref.i64.ref.i64($p2, 4096, .str.50, $i6);
    call {:si_unique_call 616} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const mtd_erasesize_show: ref;

axiom mtd_erasesize_show == $sub.ref(0, 510800);

procedure mtd_erasesize_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation mtd_erasesize_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(16, 1));
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.41, $p5);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $i8 := snprintf.ref.i64.ref.i64($p2, 4096, .str.49, $i7);
    call {:si_unique_call 619} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const mtd_writesize_show: ref;

axiom mtd_writesize_show == $sub.ref(0, 511832);

procedure mtd_writesize_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation mtd_writesize_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(20, 1));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.43, $p5);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $i8 := snprintf.ref.i64.ref.i64($p2, 4096, .str.49, $i7);
    call {:si_unique_call 622} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const mtd_subpagesize_show: ref;

axiom mtd_subpagesize_show == $sub.ref(0, 512864);

procedure mtd_subpagesize_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation mtd_subpagesize_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(20, 1));
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.45, $p5);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(376, 1));
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.46, $p7);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i32($i6, $i8);
    call {:si_unique_call 624} {:cexpr "subpagesize"} boogie_si_record_i32($i9);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i10 := snprintf.ref.i64.ref.i32($p2, 4096, .str.48, $i9);
    call {:si_unique_call 626} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const mtd_oobsize_show: ref;

axiom mtd_oobsize_show == $sub.ref(0, 513896);

procedure mtd_oobsize_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation mtd_oobsize_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(28, 1));
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.48, $p5);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $i8 := snprintf.ref.i64.ref.i64($p2, 4096, .str.49, $i7);
    call {:si_unique_call 629} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const mtd_numeraseregions_show: ref;

axiom mtd_numeraseregions_show == $sub.ref(0, 514928);

procedure mtd_numeraseregions_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation mtd_numeraseregions_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(88, 1));
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.50, $p5);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $i7 := snprintf.ref.i64.ref.i32($p2, 4096, .str.48, $i6);
    call {:si_unique_call 632} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const mtd_name_show: ref;

axiom mtd_name_show == $sub.ref(0, 515960);

procedure mtd_name_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation mtd_name_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(56, 1));
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.52, $p5);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i7 := snprintf.ref.i64.ref.ref($p2, 4096, .str.54, $p6);
    call {:si_unique_call 635} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const mtd_ecc_strength_show: ref;

axiom mtd_ecc_strength_show == $sub.ref(0, 516992);

procedure mtd_ecc_strength_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation mtd_ecc_strength_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(84, 1));
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.54, $p5);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $i7 := snprintf.ref.i64.ref.i32($p2, 4096, .str.48, $i6);
    call {:si_unique_call 638} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const mtd_ecc_step_size_show: ref;

axiom mtd_ecc_step_size_show == $sub.ref(0, 518024);

procedure mtd_ecc_step_size_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation mtd_ecc_step_size_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(80, 1));
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.56, $p5);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $i7 := snprintf.ref.i64.ref.i32($p2, 4096, .str.48, $i6);
    call {:si_unique_call 641} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const mtd_ecc_stats_corrected_show: ref;

axiom mtd_ecc_stats_corrected_show == $sub.ref(0, 519056);

procedure mtd_ecc_stats_corrected_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation mtd_ecc_stats_corrected_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.58, $p6);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $i8 := snprintf.ref.i64.ref.i32($p2, 4096, .str.48, $i7);
    call {:si_unique_call 644} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const mtd_ecc_stats_errors_show: ref;

axiom mtd_ecc_stats_errors_show == $sub.ref(0, 520088);

procedure mtd_ecc_stats_errors_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation mtd_ecc_stats_errors_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(4, 1));
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.60, $p6);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i8 := snprintf.ref.i64.ref.i32($p2, 4096, .str.48, $i7);
    call {:si_unique_call 647} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const mtd_badblocks_show: ref;

axiom mtd_badblocks_show == $sub.ref(0, 521120);

procedure mtd_badblocks_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation mtd_badblocks_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.62, $p6);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $i8 := snprintf.ref.i64.ref.i32($p2, 4096, .str.48, $i7);
    call {:si_unique_call 650} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const mtd_bbtblocks_show: ref;

axiom mtd_bbtblocks_show == $sub.ref(0, 522152);

procedure mtd_bbtblocks_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation mtd_bbtblocks_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(12, 1));
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.64, $p6);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $i8 := snprintf.ref.i64.ref.i32($p2, 4096, .str.48, $i7);
    call {:si_unique_call 653} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const mtd_bitflip_threshold_show: ref;

axiom mtd_bitflip_threshold_show == $sub.ref(0, 523184);

procedure mtd_bitflip_threshold_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation mtd_bitflip_threshold_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1832)), $mul.ref(52, 1));
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.66, $p5);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $i7 := snprintf.ref.i64.ref.i32($p2, 4096, .str.48, $i6);
    call {:si_unique_call 656} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const mtd_bitflip_threshold_store: ref;

axiom mtd_bitflip_threshold_store == $sub.ref(0, 524216);

procedure mtd_bitflip_threshold_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.66, $CurrAddr;



implementation mtd_bitflip_threshold_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $i11: i32;
  var $p12: ref;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 658} {:cexpr "mtd_bitflip_threshold_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $p5 := dev_get_drvdata($p0);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i7 := kstrtouint($p2, 0, $p4);
    call {:si_unique_call 661} {:cexpr "retval"} boogie_si_record_i32($i7);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.67, $p4);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 1832)), $mul.ref(52, 1));
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $M.66 := $store.i32($M.66, $p12, $i11);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i10 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i7);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const kstrtouint: ref;

axiom kstrtouint == $sub.ref(0, 525248);

procedure kstrtouint($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtouint($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 662} {:cexpr "kstrtouint:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 1} true;
    call {:si_unique_call 663} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 664} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const mtd_cls_suspend: ref;

axiom mtd_cls_suspend == $sub.ref(0, 526280);

procedure mtd_cls_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation mtd_cls_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i5 := mtd_suspend($p2);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    call {:si_unique_call 667} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;

  SeqInstr_163:
    assume !assertsPassed;
    return;
}



const mtd_cls_resume: ref;

axiom mtd_cls_resume == $sub.ref(0, 527312);

procedure mtd_cls_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation mtd_cls_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} mtd_resume($p2);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_166:
    assume !assertsPassed;
    return;
}



const seq_lseek: ref;

axiom seq_lseek == $sub.ref(0, 528344);

procedure seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 670} {:cexpr "seq_lseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 671} {:cexpr "seq_lseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 1} true;
    call {:si_unique_call 672} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 673} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_read: ref;

axiom seq_read == $sub.ref(0, 529376);

procedure seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 674} {:cexpr "seq_read:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 1} true;
    call {:si_unique_call 675} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 676} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const mtd_proc_open: ref;

axiom mtd_proc_open == $sub.ref(0, 530408);

procedure mtd_proc_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mtd_proc_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $i2 := single_open($p1, mtd_proc_show, $0.ref);
    call {:si_unique_call 678} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const single_release: ref;

axiom single_release == $sub.ref(0, 531440);

procedure single_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 1} true;
    call {:si_unique_call 679} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 680} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mtd_proc_show: ref;

axiom mtd_proc_show == $sub.ref(0, 532472);

procedure mtd_proc_show($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation mtd_proc_show($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p6: ref;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} vslice_dummy_var_75 := seq_puts($p0, .str.52);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} mutex_lock_nested(mtd_table_mutex, 0);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $p3 := __mtd_next_device(0);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} mutex_unlock(mtd_table_mutex);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $p6 := $p3;
    goto $bb4;

  $bb4:
    call $p7, $i8, $p9, $i10, $p11, $i12, $p13, $p14, $p16, $i17, $i18, $p19, $i20, $i21, $p6, vslice_dummy_var_76 := mtd_proc_show_loop_$bb4($p0, $p7, $i8, $p9, $i10, $p11, $i12, $p13, $p14, $p16, $i17, $i18, $p19, $i20, $i21, $p6, vslice_dummy_var_76);
    goto $bb4_last;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1832)), $mul.ref(64, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.1, $p9);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 1832)), $mul.ref(16, 1));
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 1832)), $mul.ref(56, 1));
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} vslice_dummy_var_76 := seq_printf.ref.ref.i32.i64.i32.ref($p0, .str.53, $i8, $i10, $i12, $p14);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 1832)), $mul.ref(64, 1));
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.1, $p16);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 1);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p19 := __mtd_next_device($i18);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $p6 := $p19;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4233;
}



const single_open: ref;

axiom single_open == $sub.ref(0, 533504);

procedure single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 1} true;
    call {:si_unique_call 687} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 688} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_puts: ref;

axiom seq_puts == $sub.ref(0, 534536);

procedure seq_puts($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_puts($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 1} true;
    call {:si_unique_call 689} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 690} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 535568);

procedure seq_printf.ref.ref.i32.i64.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: i64, p.4: i32, p.5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32.i64.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: i64, p.4: i32, p.5: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 1} true;
    call {:si_unique_call 691} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 692} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mtd_partition_offset_show: ref;

axiom mtd_partition_offset_show == $sub.ref(0, 536600);

procedure mtd_partition_offset_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation mtd_partition_offset_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.69, $p6);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $i8 := snprintf.ref.i64.ref.i64($p2, 4096, .str.91, $i7);
    call {:si_unique_call 695} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const mtdchar_lseek: ref;

axiom mtdchar_lseek == $sub.ref(0, 537632);

procedure mtdchar_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation mtdchar_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} {:cexpr "mtdchar_lseek:arg:offset"} boogie_si_record_i64($i1);
    call {:si_unique_call 697} {:cexpr "mtdchar_lseek:arg:orig"} boogie_si_record_i32($i2);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.70, $p6);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.1, $p8);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $i10 := fixed_size_llseek($p0, $i1, $i2, $i9);
    call {:si_unique_call 699} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const mtdchar_read: ref;

axiom mtdchar_read == $sub.ref(0, 538664);

procedure mtdchar_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.22, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.20, $M.15, $M.1, $CurrAddr, $M.0, $M.10, assertsPassed;



implementation mtdchar_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i44: i1;
  var $i49: i64;
  var $i50: i1;
  var $i51: i64;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i64;
  var $i60: i64;
  var $i61: i32;
  var $i63: i64;
  var $i64: i64;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p70: ref;
  var $i71: i64;
  var $i72: i32;
  var $p73: ref;
  var $i74: i64;
  var $i75: i64;
  var $i76: i64;
  var $i77: i32;
  var $i62: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i82: i64;
  var $i83: i64;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $i87: i1;
  var $i88: i64;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $i92: i64;
  var $p93: ref;
  var $i94: i64;
  var $i95: i1;
  var $i96: i64;
  var $i81: i32;
  var $i97: i64;
  var $i98: i1;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $i99: i64;
  var $i45: i64;
  var $i40: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $p7 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    call {:si_unique_call 704} {:cexpr "mtdchar_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.70, $p11);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $M.22 := $store.i64($M.22, $p5, $i2);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.6);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p14, .str.96);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p15, .str.93);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p16, .str.97);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.8, $p18);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 161);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p18, $i21);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p22, 0);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.9, $p23);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 706} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.1, $p3);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i30 := $add.i64($i29, $i2);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p12, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.1, $p31);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i33 := $ugt.i64($i30, $i32);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i38 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $p41 := mtd_kmalloc_up_to($p12, $p5);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i38, 0);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i45 := 0;
    assume {:branchcond $i44} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} kfree($p41);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i40 := $i45;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $p46, $i47, $i48 := $p1, $i38, 0;
    goto $bb17;

  $bb17:
    call $i49, $i50, $i51, $i52, $p53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i63, $i64, $i65, $p66, $p67, $p68, $i69, $p70, $i71, $i72, $p73, $i74, $i75, $i76, $i77, $i62, $i78, $i79, $i80, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $p93, $i94, $i95, $i96, $i81, $i98, $p46, $i47, $i48, $i99 := mtdchar_read_loop_$bb17($p3, $p4, $p5, $p7, $p10, $p12, $p41, $i49, $i50, $i51, $i52, $p53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i63, $i64, $i65, $p66, $p67, $p68, $i69, $p70, $i71, $i72, $p73, $i74, $i75, $i76, $i77, $i62, $i78, $i79, $i80, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $p93, $i94, $i95, $i96, $i81, $i98, $p46, $i47, $i48, $i99);
    goto $bb17_last;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.22, $p5);
    call {:si_unique_call 710} {:cexpr "__min2"} boogie_si_record_i64($i49);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i50 := $ult.i64($i47, $i49);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i50 == 1);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i51 := $i49;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i51);
    call {:si_unique_call 711} {:cexpr "len"} boogie_si_record_i32($i52);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.71, $p53);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i54, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i54, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i54, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.1, $p3);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i52);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i77 := mtd_read($p12, $i75, $i76, $p4, $p41);
    call {:si_unique_call 719} {:cexpr "ret"} boogie_si_record_i32($i77);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i62 := $i77;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i62, 0);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i78 == 1);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $i79 := mtd_is_bitflip_or_eccerr($i62);
    call {:si_unique_call 721} {:cexpr "tmp___2"} boogie_si_record_i32($i79);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i81 := $i62;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} kfree($p41);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64($i81);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i40 := $i97;
    goto $bb9;

  $bb38:
    assume $i80 == 1;
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i82 := $load.i64($M.1, $p3);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.20, $p4);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i84 := $add.i64($i82, $i83);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p3, $i84);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.20, $p4);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $i86 := copy_to_user($p46, $p41, $i85);
    call {:si_unique_call 723} {:cexpr "tmp___1"} boogie_si_record_i64($i86);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i87 == 1);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.20, $p4);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i89 := $add.i64($i48, $i88);
    call {:si_unique_call 726} {:cexpr "total_retlen"} boogie_si_record_i64($i89);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.20, $p4);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i91 := $sub.i64($i47, $i90);
    call {:si_unique_call 727} {:cexpr "count"} boogie_si_record_i64($i91);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.20, $p4);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p46, $mul.ref($i92, 1));
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i94 := $load.i64($M.20, $p4);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i95 := $eq.i64($i94, 0);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i96 := $i91;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i98 := $ne.i64($i96, 0);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i99 := $i89;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i45 := $i99;
    goto $bb16;

  $bb48:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    $p46, $i47, $i48 := $p93, $i96, $i89;
    goto $bb48_dummy;

  $bb43:
    assume $i95 == 1;
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i96 := 0;
    goto $bb45;

  $bb40:
    assume $i87 == 1;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} kfree($p41);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i40 := $sub.i64(0, 14);
    goto $bb9;

  $bb35:
    assume $i78 == 1;
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb27:
    assume $i57 == 1;
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p66, 2);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p67, $p41);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p68, $0.ref);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i52);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p70, $i69);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.1, $p3);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $i72 := mtd_read_oob($p12, $i71, $p7);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    call {:si_unique_call 715} {:cexpr "ret"} boogie_si_record_i32($i72);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.15, $p73);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p4, $i74);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i62 := $i72;
    goto $bb32;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i56 == 1;
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.1, $p3);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i52);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i65 := mtd_read_user_prot_reg($p12, $i63, $i64, $p4, $p41);
    call {:si_unique_call 713} {:cexpr "ret"} boogie_si_record_i32($i65);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i62 := $i65;
    goto $bb32;

  $bb23:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i54, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb29;

  $bb30:
    assume $i58 == 1;
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.1, $p3);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i52);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $i61 := mtd_read_fact_prot_reg($p12, $i59, $i60, $p4, $p41);
    call {:si_unique_call 717} {:cexpr "ret"} boogie_si_record_i32($i61);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i62 := $i61;
    goto $bb32;

  $bb19:
    assume $i50 == 1;
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i51 := $i47;
    goto $bb21;

  $bb11:
    assume $i43 == 1;
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i40 := $sub.i64(0, 12);
    goto $bb9;

  $bb7:
    assume $i39 == 1;
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb9;

  $bb4:
    assume $i33 == 1;
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p12, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.1, $p34);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.1, $p3);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i37 := $sub.i64($i35, $i36);
    call {:si_unique_call 708} {:cexpr "count"} boogie_si_record_i64($i37);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb6;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} __dynamic_pr_debug.ref.ref($p6, .str.97);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb48_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4345;
}



const mtdchar_write: ref;

axiom mtdchar_write == $sub.ref(0, 539696);

procedure mtdchar_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.22, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.20, $M.15, $M.1, $CurrAddr, $M.0, $M.10, assertsPassed;



implementation mtdchar_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $i48: i1;
  var $i53: i64;
  var $i54: i1;
  var $i55: i64;
  var $i56: i32;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i67: i64;
  var $i68: i64;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $i76: i64;
  var $i77: i32;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $i82: i32;
  var $i66: i32;
  var $i83: i1;
  var $i84: i1;
  var $i85: i64;
  var $i87: i1;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $i92: i64;
  var $i93: i64;
  var $i94: i64;
  var $i95: i64;
  var $i96: i64;
  var $p97: ref;
  var $i88: i32;
  var $i98: i64;
  var $i99: i1;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $i100: i64;
  var $i49: i64;
  var $i86: i64;
  var $i33: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $p7 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    call {:si_unique_call 733} {:cexpr "mtdchar_write:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.70, $p11);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $M.22 := $store.i64($M.22, $p4, $i2);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.6);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p14, .str.92);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p15, .str.93);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p16, .str.94);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.8, $p18);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 247);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p18, $i21);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p22, 0);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.9, $p23);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 735} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.1, $p3);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p12, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.1, $p30);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i29, $i31);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.1, $p3);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i35 := $add.i64($i34, $i2);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p12, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.1, $p36);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i38 := $ugt.i64($i35, $i37);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i43 := $i2;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $p45 := mtd_kmalloc_up_to($p12, $p4);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i43, 0);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i49 := 0;
    assume {:branchcond $i48} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i86 := $i49;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} kfree($p45);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i33 := $i86;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb17:
    assume $i48 == 1;
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p50, $i51, $i52 := $p1, $i43, 0;
    goto $bb20;

  $bb20:
    call $i53, $i54, $i55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $i64, $i65, $i67, $i68, $i69, $p70, $p71, $p72, $p73, $i74, $p75, $i76, $i77, $p78, $i79, $i80, $i81, $i82, $i66, $i83, $i84, $i85, $i87, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $p97, $i88, $i99, $p50, $i51, $i52, $i100 := mtdchar_write_loop_$bb20($p3, $p4, $p5, $p7, $p10, $p12, $p45, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $i64, $i65, $i67, $i68, $i69, $p70, $p71, $p72, $p73, $i74, $p75, $i76, $i77, $p78, $i79, $i80, $i81, $i82, $i66, $i83, $i84, $i85, $i87, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $p97, $i88, $i99, $p50, $i51, $i52, $i100);
    goto $bb20_last;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.22, $p4);
    call {:si_unique_call 739} {:cexpr "__min2"} boogie_si_record_i64($i53);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i54 := $ult.i64($i51, $i53);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i54 == 1);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i55 := $i53;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i64.i32($i55);
    call {:si_unique_call 740} {:cexpr "len"} boogie_si_record_i32($i56);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i56);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $i58 := copy_from_user($p45, $p50, $i57);
    call {:si_unique_call 742} {:cexpr "tmp___1"} boogie_si_record_i64($i58);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.71, $p60);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i61, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i61, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i61, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i80 := $load.i64($M.1, $p3);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i56);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $i82 := mtd_write($p12, $i80, $i81, $p5, $p45);
    call {:si_unique_call 749} {:cexpr "ret"} boogie_si_record_i32($i82);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i66 := $i82;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i66, $sub.i32(0, 28));
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i66, 0);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i88 := $i66;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} kfree($p45);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i88);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i33 := $i98;
    goto $bb6;

  $bb48:
    assume $i87 == 1;
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.1, $p3);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.20, $p5);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i91 := $add.i64($i89, $i90);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p3, $i91);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.20, $p5);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i93 := $add.i64($i52, $i92);
    call {:si_unique_call 751} {:cexpr "total_retlen"} boogie_si_record_i64($i93);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i94 := $load.i64($M.20, $p5);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i95 := $sub.i64($i51, $i94);
    call {:si_unique_call 752} {:cexpr "count"} boogie_si_record_i64($i95);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i96 := $load.i64($M.20, $p5);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p50, $mul.ref($i96, 1));
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i95, 0);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i100 := $i93;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i49 := $i100;
    goto $bb19;

  $bb51:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    $p50, $i51, $i52 := $p97, $i95, $i93;
    goto $bb51_dummy;

  $bb41:
    assume $i83 == 1;
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i52, 0);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i85 := $i52;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb43;

  $bb44:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i86 := $i85;
    goto $bb46;

  $bb33:
    assume $i64 == 1;
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p70, 2);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p71, $p45);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p72, $0.ref);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p73, 0);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i56);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p75, $i74);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.1, $p3);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $i77 := mtd_write_oob($p12, $i76, $p7);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    call {:si_unique_call 747} {:cexpr "ret"} boogie_si_record_i32($i77);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.15, $p78);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p5, $i79);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i66 := $i77;
    goto $bb38;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i63 == 1;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.1, $p3);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i56);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $i69 := mtd_write_user_prot_reg($p12, $i67, $i68, $p5, $p45);
    call {:si_unique_call 745} {:cexpr "ret"} boogie_si_record_i32($i69);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i66 := $i69;
    goto $bb38;

  $bb29:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i61, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb35;

  $bb36:
    assume $i65 == 1;
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i66 := $sub.i32(0, 30);
    goto $bb38;

  $bb25:
    assume $i59 == 1;
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} kfree($p45);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i33 := $sub.i64(0, 14);
    goto $bb6;

  $bb22:
    assume $i54 == 1;
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i55 := $i51;
    goto $bb24;

  $bb14:
    assume $i47 == 1;
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i33 := $sub.i64(0, 12);
    goto $bb6;

  $bb11:
    assume $i44 == 1;
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb6;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p12, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.1, $p39);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.1, $p3);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i42 := $sub.i64($i40, $i41);
    call {:si_unique_call 737} {:cexpr "count"} boogie_si_record_i64($i42);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i43 := $i42;
    goto $bb10;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i33 := $sub.i64(0, 28);
    goto $bb6;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} __dynamic_pr_debug.ref.ref($p6, .str.94);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb51_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4503;
}



const mtdchar_unlocked_ioctl: ref;

axiom mtdchar_unlocked_ioctl == $sub.ref(0, 540728);

procedure mtdchar_unlocked_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.71, $M.1, $M.28, $M.29, $M.30, $M.31, $M.32, $M.72, $M.73, $M.15, $M.0, $M.20, $CurrAddr, $M.10, $M.33, $M.34, assertsPassed;



implementation mtdchar_unlocked_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} {:cexpr "mtdchar_unlocked_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 755} {:cexpr "mtdchar_unlocked_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} mutex_lock_nested(mtd_mutex, 0);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $i3 := mtdchar_ioctl($p0, $i1, $i2);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    call {:si_unique_call 758} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} mutex_unlock(mtd_mutex);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const mtdchar_compat_ioctl: ref;

axiom mtdchar_compat_ioctl == $sub.ref(0, 541760);

procedure mtdchar_compat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.15, $M.1, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.71, $M.28, $M.29, $M.30, $M.31, $M.32, $M.72, $M.73, $CurrAddr, $M.0, $M.20, $M.10, $M.33, $M.34, assertsPassed;



implementation mtdchar_compat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i19: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i64;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i35: i32;
  var $i46: i64;
  var $i47: i32;
  var $i30: i32;
  var $i48: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $p3 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $p4 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    call {:si_unique_call 762} {:cexpr "mtdchar_compat_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 763} {:cexpr "mtdchar_compat_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.70, $p8);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i2);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $p11 := compat_ptr($i10);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} mutex_lock_nested(mtd_mutex, 0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i1, $sub.i32(0, 1072935676));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i1, $sub.i32(0, 1072935676));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p11);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i47 := mtdchar_ioctl($p0, $i1, $i46);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    call {:si_unique_call 778} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i30 := $i47;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} mutex_unlock(mtd_mutex);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i30);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $r := $i48;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p11);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p4);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i33 := copy_from_user($p32, $p11, 12);
    call {:si_unique_call 767} {:cexpr "tmp___3"} boogie_si_record_i64($i33);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.1, $p36);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $p38 := compat_ptr($i37);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.1, $p39);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i40);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.1, $p42);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p31, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i45 := mtdchar_readoob($p0, $p9, $i41, $i43, $p38, $p44);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    call {:si_unique_call 776} {:cexpr "ret"} boogie_si_record_i32($i45);
    assume {:verifier.code 0} true;
    $i35 := $i45;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i30 := $i35;
    goto $bb12;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i34 == 1;
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 14);
    goto $bb15;

  $bb2:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i1, $sub.i32(0, 1072935677));
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p11);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p3);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $i17 := copy_from_user($p16, $p11, 12);
    call {:si_unique_call 769} {:cexpr "tmp___1"} boogie_si_record_i64($i17);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $p22 := compat_ptr($i21);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.1, $p26);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p15, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $i29 := mtdchar_writeoob($p0, $p9, $i25, $i27, $p22, $p28);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    call {:si_unique_call 772} {:cexpr "ret"} boogie_si_record_i32($i29);
    assume {:verifier.code 0} true;
    $i19 := $i29;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i30 := $i19;
    goto $bb12;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 14);
    goto $bb11;
}



const mtdchar_mmap: ref;

axiom mtdchar_mmap == $sub.ref(0, 542792);

procedure mtdchar_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation mtdchar_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $i24: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i32;
  var $i42: i32;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 1832)), $mul.ref(384, 1));
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(0 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 19);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb1:
    assume 0 == 1;
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 4096);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.14, high_memory);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i17 := __phys_addr($i16);
    call {:si_unique_call 781} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p10, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.1, $p18);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i20 := $uge.i64($i19, $i17);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p10, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.1, $p37);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p10, $mul.ref(0, 144)), $mul.ref(8, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.1, $p39);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $i41 := vm_iomap_memory($p1, $i38, $i40);
    call {:si_unique_call 787} {:cexpr "tmp___1"} boogie_si_record_i32($i41);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb13;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.14, boot_cpu_data);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i22, 3);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p33);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p34);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.1;
    cmdloc_dummy_var_19 := $M.1;
    call {:si_unique_call 785} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p35, $p36, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_20;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $i24 := cachemode2protval(2);
    call {:si_unique_call 783} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(72, 1)), $mul.ref(0, 1));
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.1, $p26);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i28 := $or.i64($i27, $i24);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p29, $i28);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p2);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.1;
    cmdloc_dummy_var_16 := $M.1;
    call {:si_unique_call 784} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p31, $p32, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_17;
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const mtdchar_open: ref;

axiom mtdchar_open == $sub.ref(0, 543824);

procedure mtdchar_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.1, $CurrAddr, $M.10, assertsPassed;



implementation mtdchar_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i1;
  var $i31: i8;
  var $i32: i1;
  var $p33: ref;
  var $i34: i64;
  var $i35: i32;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p56: ref;
  var $i41: i32;
  var $i36: i32;
  var $i27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $i3 := iminor($p0);
    call {:si_unique_call 790} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i4 := $ashr.i32($i3, 1);
    call {:si_unique_call 791} {:cexpr "devnum"} boogie_si_record_i32($i4);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p5, .str.6);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p6, .str.102);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p7, .str.93);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p8, .str.103);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.8, $p10);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 69);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p10, $i13);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p14, 0);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.9, $p15);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 793} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(132, 1));
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.1, $p21);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 2);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} mutex_lock_nested(mtd_mutex, 0);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $p28 := get_mtd_device($0.ref, $i4);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $i30 := IS_ERR($p29);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i8($i30);
    call {:si_unique_call 798} {:cexpr "tmp___2"} boogie_si_record_i8($i31);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p28, $mul.ref(0, 1832)), $mul.ref(0, 1));
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.1, $p37);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(132, 1));
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.1, $p42);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 2);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $p50 := kzalloc(16, 208);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p51, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p54, $p28);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p56, $p50);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} mutex_unlock(mtd_mutex);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb25:
    assume $i53 == 1;
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 12);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} put_mtd_device($p28);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i36 := $i41;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} mutex_unlock(mtd_mutex);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i27 := $i36;
    goto $bb9;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i45 == 1;
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p28, $mul.ref(0, 1832)), $mul.ref(4, 1));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.1, $p46);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 1024);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb21;

  $bb22:
    assume $i49 == 1;
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 13);
    goto $bb17;

  $bb15:
    assume $i40 == 1;
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 19);
    goto $bb17;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p28);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $i34 := PTR_ERR($p33);
    call {:si_unique_call 800} {:cexpr "tmp___1"} boogie_si_record_i64($i34);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i34);
    call {:si_unique_call 801} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb13;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i3, 1);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb6;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 13);
    goto $bb9;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} __dynamic_pr_debug.ref.ref($p2, .str.103);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mtdchar_close: ref;

axiom mtdchar_close == $sub.ref(0, 544856);

procedure mtdchar_close($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.1, $M.0, $CurrAddr, $M.10, assertsPassed;



implementation mtdchar_close($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.6);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p9, .str.104);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p10, .str.93);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p11, .str.105);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.8, $p13);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 118);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p13, $i16);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p17, 0);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.9, $p18);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 808} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(132, 1));
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 2);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} put_mtd_device($p7);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p28, $0.ref);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p5);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} kfree($p29);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} mtd_sync($p7);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} __dynamic_pr_debug.ref.ref($p2, .str.105);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const iminor: ref;

axiom iminor == $sub.ref(0, 545888);

procedure iminor($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iminor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(76, 1));
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.1, $p1);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1048575);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 546920);

procedure __phys_addr($i0: i64) returns ($r: i64);



const cachemode2protval: ref;

axiom cachemode2protval == $sub.ref(0, 547952);

procedure cachemode2protval($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation cachemode2protval($i0: i32) returns ($r: i64)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $i9: i16;
  var $i10: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} {:cexpr "cachemode2protval:arg:pcm"} boogie_si_record_i32($i0);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i4 := ldv__builtin_expect($i3, 1);
    call {:si_unique_call 815} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i0);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(__cachemode2pte_tbl, $mul.ref(0, 16)), $mul.ref($i7, 2));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.14, $p8);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i64($i9);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i6 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const vm_iomap_memory: ref;

axiom vm_iomap_memory == $sub.ref(0, 548984);

procedure vm_iomap_memory($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);



const compat_ptr: ref;

axiom compat_ptr == $sub.ref(0, 550016);

procedure compat_ptr($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation compat_ptr($i0: i32) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} {:cexpr "compat_ptr:arg:uptr"} boogie_si_record_i32($i0);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 551048);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 819} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 820} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} __might_fault(.str.95, 697);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 823} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $i15 := _copy_from_user($p0, $p1, $i14);
    call {:si_unique_call 825} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const mtdchar_writeoob: ref;

axiom mtdchar_writeoob == $sub.ref(0, 552080);

procedure mtdchar_writeoob($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.1, $CurrAddr, $M.0, $M.10, assertsPassed;



implementation mtdchar_writeoob($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $i29: i8;
  var $i30: i1;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $i35: i32;
  var $i21: i32;
  var $i36: i1;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i64;
  var $i62: i1;
  var $i63: i64;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i1;
  var $i69: i8;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $i80: i32;
  var $p81: ref;
  var $i82: i64;
  var $i83: i1;
  var $i84: i32;
  var $p85: ref;
  var $i86: i64;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $p6 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 829} {:cexpr "mtdchar_writeoob:arg:start"} boogie_si_record_i64($i2);
    call {:si_unique_call 830} {:cexpr "mtdchar_writeoob:arg:length"} boogie_si_record_i32($i3);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(132, 1));
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 2);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i32($i3, 4096);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 1832)), $mul.ref(168, 1));
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $p22 := current_thread_info();
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p4);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i3);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.14, $p26);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} $i28 := __chk_range_not_ok($i23, $i24, $i27);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i8($i28);
    call {:si_unique_call 833} {:cexpr "tmp___0"} boogie_si_record_i8($i29);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($i29);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $i33 := ldv__builtin_expect($i32, 1);
    call {:si_unique_call 835} {:cexpr "tmp___2"} boogie_si_record_i64($i33);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i35 := (if $i34 == 1 then 0 else $sub.i32(0, 14));
    call {:si_unique_call 836} {:cexpr "ret"} boogie_si_record_i32($i35);
    assume {:verifier.code 0} true;
    $i21 := $i35;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i21, 0);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i3);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p38, $i37);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 1832)), $mul.ref(20, 1));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.1, $p39);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i40, 1);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i64.i32($i2);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i41, $i42);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p44, $i43);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p45, $0.ref);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.71, $p46);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 3);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i49 := (if $i48 == 1 then 2 else 0);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p50, $i49);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.15, $p51);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i63 := $zext.i32.i64($i3);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $p64 := memdup_user($p4, $i63);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p65, $p64);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.15, $p66);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $i68 := IS_ERR($p67);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i8($i68);
    call {:si_unique_call 839} {:cexpr "tmp___5"} boogie_si_record_i8($i69);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i8.i1($i69);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 1832)), $mul.ref(20, 1));
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.1, $p75);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i77 := $zext.i32.i64($i76);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i78 := $sub.i64(0, $i77);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i79 := $and.i64($i78, $i2);
    call {:si_unique_call 842} {:cexpr "start"} boogie_si_record_i64($i79);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $i80 := mtd_write_oob($p1, $i79, $p6);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    call {:si_unique_call 844} {:cexpr "ret"} boogie_si_record_i32($i80);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i82 := $load.i64($M.15, $p81);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i83 := $ugt.i64($i82, 4294967295);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $i80;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.15, $p85);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i64.i32($i86);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, $i87);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p5);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p7);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $i90 := copy_to_user($p88, $p89, 4);
    call {:si_unique_call 846} {:cexpr "tmp___6"} boogie_si_record_i64($i90);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i92 := $i84;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.15, $p93);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} kfree($p94);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i15 := $i92;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb29:
    assume $i91 == 1;
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32(0, 14);
    goto $bb31;

  $bb26:
    assume $i83 == 1;
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i84 := $sub.i32(0, 75);
    goto $bb28;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i70 == 1;
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.15, $p71);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $i73 := PTR_ERR($p72);
    call {:si_unique_call 841} {:cexpr "tmp___4"} boogie_si_record_i64($i73);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i64.i32($i73);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i15 := $i74;
    goto $bb3;

  $bb17:
    assume $i53 == 1;
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.15, $p54);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 1832)), $mul.ref(28, 1));
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.1, $p56);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.15, $p58);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32($i57, $i59);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i61 := $zext.i32.i64($i60);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i62 := $ugt.i64($i55, $i61);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb19;

  $bb20:
    assume $i62 == 1;
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i15 := $i21;
    goto $bb3;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb13;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 95);
    goto $bb10;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 1);
    goto $bb3;
}



const mtdchar_readoob: ref;

axiom mtdchar_readoob == $sub.ref(0, 553112);

procedure mtdchar_readoob($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.1, $CurrAddr, $M.0, $M.10, assertsPassed;



implementation mtdchar_readoob($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i8;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i64;
  var $i50: i1;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $i63: i32;
  var $p64: ref;
  var $i65: i64;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $i79: i32;
  var $i80: i32;
  var $i69: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $p6 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    call {:si_unique_call 849} {:cexpr "mtdchar_readoob:arg:start"} boogie_si_record_i64($i2);
    call {:si_unique_call 850} {:cexpr "mtdchar_readoob:arg:length"} boogie_si_record_i32($i3);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i32($i3, 4096);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $p12 := current_thread_info();
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p4);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i3);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.14, $p16);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $i18 := __chk_range_not_ok($i13, $i14, $i17);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i8($i18);
    call {:si_unique_call 853} {:cexpr "tmp___0"} boogie_si_record_i8($i19);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $i23 := ldv__builtin_expect($i22, 1);
    call {:si_unique_call 855} {:cexpr "tmp___2"} boogie_si_record_i64($i23);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i3);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p26, $i25);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 1832)), $mul.ref(20, 1));
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.1, $p27);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i28, 1);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i2);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i29, $i30);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p32, $i31);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p33, $0.ref);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.71, $p34);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 3);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i37 := (if $i36 == 1 then 2 else 0);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p38, $i37);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.15, $p39);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i51 := $zext.i32.i64($i3);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $p52 := kmalloc($i51, 208);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p53, $p52);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.15, $p54);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i56, 0);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 1832)), $mul.ref(20, 1));
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.1, $p58);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i60 := $zext.i32.i64($i59);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i61 := $sub.i64(0, $i60);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i62 := $and.i64($i61, $i2);
    call {:si_unique_call 857} {:cexpr "start"} boogie_si_record_i64($i62);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $i63 := mtd_read_oob($p1, $i62, $p6);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    call {:si_unique_call 859} {:cexpr "ret"} boogie_si_record_i32($i63);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} __might_fault(.str.93, 441);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.15, $p64);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i64.i32($i65);
    call {:si_unique_call 861} {:cexpr "__pu_val"} boogie_si_record_i32($i66);
    call {:si_unique_call 862} $i67 := devirtbounce.19(0, $i66, $p5);
    call {:si_unique_call 863} {:cexpr "__ret_pu"} boogie_si_record_i32($i67);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i68 == 1);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.15, $p70);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i80 := $i63;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i69 := $i80;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.15, $p81);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} kfree($p82);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $i83 := mtd_is_bitflip_or_eccerr($i69);
    call {:si_unique_call 866} {:cexpr "tmp___5"} boogie_si_record_i32($i83);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i11 := $i69;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb30:
    assume $i84 == 1;
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb24:
    assume $i72 == 1;
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.15, $p73);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.15, $p75);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $i77 := copy_to_user($p4, $p74, $i76);
    call {:si_unique_call 868} {:cexpr "tmp___4"} boogie_si_record_i64($i77);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i79 := $i63;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i80 := $i79;
    goto $bb29;

  $bb26:
    assume $i78 == 1;
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i79 := $sub.i32(0, 14);
    goto $bb28;

  $bb21:
    assume $i68 == 1;
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i69 := $sub.i32(0, 14);
    goto $bb23;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i57 == 1;
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 12);
    goto $bb3;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.15, $p42);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 1832)), $mul.ref(28, 1));
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.1, $p44);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.15, $p46);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32($i45, $i47);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i48);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i50 := $ugt.i64($i43, $i49);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb13;

  $bb14:
    assume $i50 == 1;
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 14);
    goto $bb3;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;
}



const mtdchar_ioctl: ref;

axiom mtdchar_ioctl == $sub.ref(0, 554144);

procedure mtdchar_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.71, $M.1, $M.28, $M.29, $M.30, $M.31, $M.32, $M.72, $M.73, $M.15, $M.0, $M.20, $CurrAddr, $M.10, $M.33, $M.34, assertsPassed;



implementation mtdchar_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i24;
  var $i39: i24;
  var $i40: i24;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i64;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i64;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $i59: i8;
  var $i60: i1;
  var $i61: i32;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $i66: i1;
  var $p67: ref;
  var $i68: i64;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $i73: i8;
  var $i74: i1;
  var $i75: i32;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $i126: i64;
  var $i127: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i64;
  var $i134: i64;
  var $i135: i32;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $i143: i64;
  var $p145: ref;
  var $i146: i64;
  var $i147: i32;
  var $p148: ref;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $i152: i32;
  var $p153: ref;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i157: i32;
  var $p158: ref;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $p162: ref;
  var $i163: i8;
  var $p164: ref;
  var $p165: ref;
  var $i166: i32;
  var $p167: ref;
  var $p168: ref;
  var $i169: i64;
  var $i170: i32;
  var $p171: ref;
  var $p172: ref;
  var $i173: i32;
  var $p174: ref;
  var $p175: ref;
  var $i176: i32;
  var $p177: ref;
  var $p178: ref;
  var $i179: i32;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $i183: i64;
  var $i184: i1;
  var $p185: ref;
  var $i186: i32;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $i191: i64;
  var $i192: i1;
  var $p194: ref;
  var $p195: ref;
  var $p197: ref;
  var $p198: ref;
  var $p200: ref;
  var $p202: ref;
  var $i203: i1;
  var $p204: ref;
  var $i205: i64;
  var $i206: i1;
  var $p207: ref;
  var $p208: ref;
  var $i209: i64;
  var $p210: ref;
  var $p211: ref;
  var $i212: i64;
  var $p213: ref;
  var $p214: ref;
  var $i215: i64;
  var $i216: i1;
  var $p217: ref;
  var $p218: ref;
  var $i219: i32;
  var $i220: i64;
  var $p221: ref;
  var $p222: ref;
  var $i223: i32;
  var $i224: i64;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $i228: i64;
  var $p229: ref;
  var $i230: i32;
  var $i231: i1;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $i235: i64;
  var $p236: ref;
  var $i237: i64;
  var $p238: ref;
  var $i239: i8;
  var $i240: i32;
  var $i241: i1;
  var $p242: ref;
  var $i243: i8;
  var $i244: i32;
  var $i245: i1;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $i249: i64;
  var $p250: ref;
  var $i251: i64;
  var $p252: ref;
  var $i253: i8;
  var $i254: i32;
  var $i255: i1;
  var $i256: i32;
  var $i257: i32;
  var $p258: ref;
  var $i193: i32;
  var $p259: ref;
  var $p260: ref;
  var $i261: i64;
  var $i262: i1;
  var $p264: ref;
  var $i265: i32;
  var $i266: i64;
  var $p267: ref;
  var $i268: i32;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $i272: i32;
  var $i263: i32;
  var $p273: ref;
  var $p274: ref;
  var $i275: i64;
  var $i276: i1;
  var $p278: ref;
  var $i279: i32;
  var $i280: i64;
  var $p281: ref;
  var $i282: i32;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $i286: i32;
  var $i277: i32;
  var $p287: ref;
  var $p288: ref;
  var $i289: i64;
  var $i290: i1;
  var $p292: ref;
  var $i293: i64;
  var $p294: ref;
  var $i295: i32;
  var $p296: ref;
  var $i297: i64;
  var $p298: ref;
  var $p299: ref;
  var $i300: i32;
  var $i291: i32;
  var $p301: ref;
  var $p302: ref;
  var $i303: i64;
  var $i304: i1;
  var $p306: ref;
  var $i307: i64;
  var $p308: ref;
  var $i309: i32;
  var $p310: ref;
  var $i311: i64;
  var $p312: ref;
  var $p313: ref;
  var $i314: i32;
  var $i305: i32;
  var $p315: ref;
  var $i316: i32;
  var $p317: ref;
  var $i318: i64;
  var $i319: i1;
  var $p320: ref;
  var $i321: i32;
  var $i322: i64;
  var $p323: ref;
  var $i324: i32;
  var $i325: i64;
  var $i326: i32;
  var $p327: ref;
  var $i328: i64;
  var $i329: i1;
  var $p330: ref;
  var $i331: i32;
  var $i332: i64;
  var $p333: ref;
  var $i334: i32;
  var $i335: i64;
  var $i336: i32;
  var $p337: ref;
  var $i338: i64;
  var $i339: i1;
  var $p340: ref;
  var $i341: i32;
  var $i342: i64;
  var $p343: ref;
  var $i344: i32;
  var $i345: i64;
  var $i346: i32;
  var $p347: ref;
  var $p348: ref;
  var $i349: i64;
  var $i350: i1;
  var $p351: ref;
  var $p352: ref;
  var $p353: ref;
  var $i354: i32;
  var $i355: i1;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $p359: ref;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $p363: ref;
  var $p364: ref;
  var $p365: ref;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $p370: ref;
  var $p371: ref;
  var $i372: i32;
  var $p373: ref;
  var $p374: ref;
  var $i375: i64;
  var $i376: i1;
  var $p377: ref;
  var $i378: i64;
  var $i379: i1;
  var $i380: i64;
  var $i381: i32;
  var $p382: ref;
  var $i383: i64;
  var $i384: i1;
  var $i385: i64;
  var $i386: i32;
  var $p387: ref;
  var $i388: i64;
  var $i389: i1;
  var $p390: ref;
  var $i391: i32;
  var $i392: i32;
  var $p393: ref;
  var $p394: ref;
  var $p395: ref;
  var $i396: i64;
  var $i397: i1;
  var $p398: ref;
  var $i399: i32;
  var $i400: i1;
  var $i401: i1;
  var $i402: i1;
  var $i403: i32;
  var $i405: i32;
  var $i404: i32;
  var $i406: i1;
  var $i407: i1;
  var $i408: i64;
  var $i409: i64;
  var $i410: i32;
  var $p411: ref;
  var $i412: i64;
  var $i413: i32;
  var $p415: ref;
  var $i416: i64;
  var $i417: i64;
  var $i418: i32;
  var $i414: i32;
  var $i419: i1;
  var $i420: i32;
  var $i421: i32;
  var $p422: ref;
  var $p423: ref;
  var $i424: i32;
  var $i425: i1;
  var $p426: ref;
  var $i427: i64;
  var $i428: i1;
  var $p429: ref;
  var $i430: i32;
  var $i431: i64;
  var $p432: ref;
  var $i433: i32;
  var $i434: i64;
  var $i435: i32;
  var $p436: ref;
  var $p437: ref;
  var $i438: i64;
  var $i439: i1;
  var $p440: ref;
  var $p441: ref;
  var $i442: i64;
  var $i443: i1;
  var $p444: ref;
  var $p445: ref;
  var $p447: ref;
  var $i448: i64;
  var $i449: i1;
  var $i450: i32;
  var $p451: ref;
  var $p452: ref;
  var $p453: ref;
  var $i454: i64;
  var $i455: i1;
  var $p456: ref;
  var $i457: i1;
  var $i458: i1;
  var $i459: i1;
  var $i460: i1;
  var $i461: i1;
  var $i462: i32;
  var $i463: i32;
  var $i465: i32;
  var $i466: i1;
  var $i467: i32;
  var $p468: ref;
  var $i464: i32;
  var $p469: ref;
  var $p470: ref;
  var $i471: i32;
  var $i128: i32;
  var $i65: i32;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $p5 := $alloc($mul.ref(88, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $p8 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $p11 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $p12 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $p13 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $p14 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $p15 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $p16 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $p17 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $p18 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $p19 := $alloc($mul.ref(200, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $p20 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $p21 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} $p22 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} $p23 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $p24 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $p25 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    call {:si_unique_call 892} {:cexpr "mtdchar_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 893} {:cexpr "mtdchar_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.70, $p29);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p31 := $i2p.i64.ref($i2);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p32, .str.6);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p33, .str.100);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p34, .str.93);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p35, .str.101);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i38 := $load.i24($M.8, $p37);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i39 := $and.i24($i38, $sub.i24(0, 262144));
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i40 := $or.i24($i39, 599);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p37, $i40);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p41, 0);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.9, $p42);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i64($i43);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i45 := $and.i64($i44, 1);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $i46 := ldv__builtin_expect($i45, 0);
    call {:si_unique_call 895} {:cexpr "tmp"} boogie_si_record_i64($i46);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i1, 1073676288);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i49 := $lshr.i32($i48, 16);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i50 := $zext.i32.i64($i49);
    call {:si_unique_call 897} {:cexpr "size"} boogie_si_record_i64($i50);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i1, 1073741824);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i1, 0);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i1, $sub.i32(0, 1072149226));
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i1, 1074285826);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i1, 1074285835);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i1, 1074547983);
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i1, 1074810132);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i1, 1074810132);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $i128 := $sub.i32(0, 25);
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i65 := $i128;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $r := $i65;
    return;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(132, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.1, $p185);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i187 := $and.i32($i186, 2);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 0);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} $p189 := kzalloc(88, 208);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $p190 := $bitcast.ref.ref($p189);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i191 := $p2i.ref.i64($p190);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i192 := $eq.i64($i191, 0);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i192 == 1);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $p194 := get_current();
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p195, 0);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, $p197, $p194);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, $p198, default_wake_function);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, $p200, $0.ref);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p202, $0.ref);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} __init_waitqueue_head($p5, .str.74, $p7);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i1, 1074810132);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i203 == 1);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p214 := $bitcast.ref.ref($p9);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $i215 := copy_from_user($p214, $p31, 8);
    call {:si_unique_call 962} {:cexpr "tmp___13"} boogie_si_record_i64($i215);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i216 := $ne.i64($i215, 0);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p9, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i219 := $load.i32($M.1, $p218);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i220 := $zext.i32.i64($i219);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p190, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p221, $i220);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p9, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i223 := $load.i32($M.1, $p222);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i224 := $zext.i32.i64($i223);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p190, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p225, $i224);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p190, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p226, $p30);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p190, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p227, mtdchar_erase_callback);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i228 := $p2i.ref.i64($p5);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p190, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p229, $i228);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $i230 := mtd_erase($p30, $p190);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    call {:si_unique_call 965} {:cexpr "ret"} boogie_si_record_i32($i230);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i230, 0);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    $i257 := $i230;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p258 := $bitcast.ref.ref($p190);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} kfree($p258);
    assume {:verifier.code 0} true;
    $i193 := $i257;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i128 := $i193;
    goto $bb120;

  $bb157:
    assume $i231 == 1;
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $p232 := get_current();
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p232, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p233, 0);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $M.72 := $store.i64($M.72, $p10, 2);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $p234 := get_current();
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $i235 := $load.i64($M.72, $p10);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p234, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 969} $i237 := devirtbounce.17(0, $p236, $i235, $p236);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $M.72 := $store.i64($M.72, $p10, $i237);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} add_wait_queue($p5, $p6);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p190, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i239 := $load.i8($M.1, $p238);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i240 := $zext.i8.i32($i239);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i241 := $ne.i32($i240, 8);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    assume !($i241 == 1);
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} remove_wait_queue($p5, $p6);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $p246 := get_current();
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p246, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p247, 0);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $M.73 := $store.i64($M.73, $p11, 0);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $p248 := get_current();
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i249 := $load.i64($M.73, $p11);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p248, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 975} $i251 := devirtbounce.17(0, $p250, $i249, $p250);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $M.73 := $store.i64($M.73, $p11, $i251);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p190, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i253 := $load.i8($M.1, $p252);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i254 := $zext.i8.i32($i253);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 16);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i256 := (if $i255 == 1 then $sub.i32(0, 5) else 0);
    call {:si_unique_call 976} {:cexpr "ret"} boogie_si_record_i32($i256);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i257 := $i256;
    goto $bb167;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb160:
    assume $i241 == 1;
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p190, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i243 := $load.i8($M.1, $p242);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i244 := $zext.i8.i32($i243);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i245 := $ne.i32($i244, 16);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb163, $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    assume !($i245 == 1);
    goto $bb162;

  $bb163:
    assume $i245 == 1;
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} schedule();
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    goto $bb165;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb154:
    assume $i216 == 1;
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $p217 := $bitcast.ref.ref($p190);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} kfree($p217);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 14);
    goto $bb11;

  $bb148:
    assume $i203 == 1;
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $p204 := $bitcast.ref.ref($p8);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $i205 := copy_from_user($p204, $p31, 16);
    call {:si_unique_call 960} {:cexpr "tmp___12"} boogie_si_record_i64($i205);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i206 := $ne.i64($i205, 0);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i209 := $load.i64($M.1, $p208);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p190, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p210, $i209);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i212 := $load.i64($M.1, $p211);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p190, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p213, $i212);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb150:
    assume $i206 == 1;
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $p207 := $bitcast.ref.ref($p190);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} kfree($p207);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 14);
    goto $bb11;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb145:
    assume $i192 == 1;
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i193 := $sub.i32(0, 12);
    goto $bb147;

  $bb142:
    assume $i188 == 1;
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 1);
    goto $bb11;

  $bb32:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i1, 1074547983);
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb38, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb37;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $p394 := kmalloc(4096, 208);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $p395 := $bitcast.ref.ref($p394);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i396 := $p2i.ref.i64($p395);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i397 := $eq.i64($i396, 0);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i397} true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i399 := $load.i32($M.71, $p398);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $i400 := $slt.i32($i399, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i400 == 1);
    assume {:verifier.code 0} true;
    $i401 := $eq.i32($i399, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    assume !($i401 == 1);
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $i404 := $sub.i32(0, 22);
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i406 := $eq.i32($i404, 0);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i406} true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i406 == 1);
    assume {:verifier.code 0} true;
    $i421 := $i404;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p422 := $bitcast.ref.ref($p395);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} kfree($p422);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i128 := $i421;
    goto $bb120;

  $bb220:
    assume $i406 == 1;
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i407 := $eq.i32($i1, 1074023694);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i407} true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i407 == 1);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p415 := $bitcast.ref.ref($p395);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i416 := $load.i64($M.74, $p23);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $i417 := copy_to_user($p31, $p415, $i416);
    call {:si_unique_call 1010} {:cexpr "tmp___39"} boogie_si_record_i64($i417);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i418 := $trunc.i64.i32($i417);
    call {:si_unique_call 1011} {:cexpr "ret"} boogie_si_record_i32($i418);
    assume {:verifier.code 0} true;
    $i414 := $i418;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i419 := $ne.i32($i414, 0);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i419} true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i419 == 1);
    assume {:verifier.code 0} true;
    $i420 := $i414;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i421 := $i420;
    goto $bb228;

  $bb225:
    assume $i419 == 1;
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i420 := $sub.i32(0, 14);
    goto $bb227;

  $bb222:
    assume $i407 == 1;
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i408 := $load.i64($M.74, $p23);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i409 := $udiv.i64($i408, 12);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i410 := $trunc.i64.i32($i409);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p24, $i410);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $p411 := $bitcast.ref.ref($p24);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} $i412 := copy_to_user($p31, $p411, 4);
    call {:si_unique_call 1007} {:cexpr "tmp___38"} boogie_si_record_i64($i412);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i413 := $trunc.i64.i32($i412);
    call {:si_unique_call 1008} {:cexpr "ret"} boogie_si_record_i32($i413);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i414 := $i413;
    goto $bb224;

  $bb213:
    assume $i401 == 1;
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $i405 := mtd_get_user_prot_info($p30, 4096, $p23, $p395);
    call {:si_unique_call 1003} {:cexpr "ret"} boogie_si_record_i32($i405);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i404 := $i405;
    goto $bb218;

  $bb211:
    assume $i400 == 1;
    assume {:verifier.code 0} true;
    $i402 := $eq.i32($i399, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    assume !($i402 == 1);
    goto $bb215;

  $bb216:
    assume $i402 == 1;
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $i403 := mtd_get_fact_prot_info($p30, 4096, $p23, $p395);
    call {:si_unique_call 1005} {:cexpr "ret"} boogie_si_record_i32($i403);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i404 := $i403;
    goto $bb218;

  $bb207:
    assume $i397 == 1;
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 12);
    goto $bb11;

  $bb30:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i1, 1074285836);
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i1, 1074285836);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb37;

  $bb43:
    assume $i87 == 1;
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p382 := $bitcast.ref.ref($p21);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $i383 := copy_from_user($p382, $p31, 8);
    call {:si_unique_call 912} {:cexpr "tmp___34"} boogie_si_record_i64($i383);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i384 := $ne.i64($i383, 0);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $i385 := $load.i64($M.1, $p21);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} $i386 := mtd_block_markbad($p30, $i385);
    call {:si_unique_call 999} {:cexpr "tmp___35"} boogie_si_record_i32($i386);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i65 := $i386;
    goto $bb11;

  $bb201:
    assume $i384 == 1;
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 14);
    goto $bb11;

  $bb41:
    assume $i86 == 1;
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $p377 := $bitcast.ref.ref($p20);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $i378 := copy_from_user($p377, $p31, 8);
    call {:si_unique_call 910} {:cexpr "tmp___32"} boogie_si_record_i64($i378);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i379 := $ne.i64($i378, 0);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $i380 := $load.i64($M.1, $p20);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} $i381 := mtd_block_isbad($p30, $i380);
    call {:si_unique_call 997} {:cexpr "tmp___33"} boogie_si_record_i32($i381);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i65 := $i381;
    goto $bb11;

  $bb198:
    assume $i379 == 1;
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 14);
    goto $bb11;

  $bb28:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i1, 1074285829);
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i1, 1074285830);
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i1, 1074285830);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb37;

  $bb49:
    assume $i90 == 1;
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $p327 := $bitcast.ref.ref($p17);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i328 := copy_from_user($p327, $p31, 8);
    call {:si_unique_call 916} {:cexpr "tmp___29"} boogie_si_record_i64($i328);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i329 := $ne.i64($i328, 0);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i331 := $load.i32($M.1, $p330);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i332 := $zext.i32.i64($i331);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i334 := $load.i32($M.1, $p333);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i335 := $zext.i32.i64($i334);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $i336 := mtd_unlock($p30, $i332, $i335);
    call {:si_unique_call 989} {:cexpr "ret"} boogie_si_record_i32($i336);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i128 := $i336;
    goto $bb120;

  $bb183:
    assume $i329 == 1;
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 14);
    goto $bb11;

  $bb47:
    assume $i89 == 1;
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p317 := $bitcast.ref.ref($p16);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $i318 := copy_from_user($p317, $p31, 8);
    call {:si_unique_call 914} {:cexpr "tmp___28"} boogie_si_record_i64($i318);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i319 := $ne.i64($i318, 0);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i319} true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p16, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i321 := $load.i32($M.1, $p320);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i322 := $zext.i32.i64($i321);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p16, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i324 := $load.i32($M.1, $p323);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i325 := $zext.i32.i64($i324);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $i326 := mtd_lock($p30, $i322, $i325);
    call {:si_unique_call 987} {:cexpr "ret"} boogie_si_record_i32($i326);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i128 := $i326;
    goto $bb120;

  $bb180:
    assume $i319 == 1;
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 14);
    goto $bb11;

  $bb45:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i1, 1074285826);
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb37;

  $bb51:
    assume $i91 == 1;
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb26:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i1, 4713);
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i1, 19731);
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i1, 1074023694);
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i1, 1074023694);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb37;

  $bb59:
    assume $i95 == 1;
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb57:
    assume $i94 == 1;
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i1, 19731);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i96 == 1);
    goto $bb37;

  $bb61:
    assume $i96 == 1;
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $M.71 := $store.i32($M.71, $p456, 0);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $i457 := $slt.i64($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i457} true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i457 == 1);
    assume {:verifier.code 0} true;
    $i458 := $slt.i64($i2, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i458} true;
    goto $bb250, $bb252;

  $bb252:
    assume !($i458 == 1);
    assume {:verifier.code 0} true;
    $i459 := $eq.i64($i2, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i459} true;
    goto $bb253, $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    assume !($i459 == 1);
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $i464 := $sub.i32(0, 22);
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(296, 1));
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p469, 0);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i128 := $i464;
    goto $bb120;

  $bb253:
    assume $i459 == 1;
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $i465 := mtd_has_oob($p30);
    call {:si_unique_call 1025} {:cexpr "tmp___44"} boogie_si_record_i32($i465);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i466 := $eq.i32($i465, 0);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    assume {:branchcond $i466} true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $i467 := $trunc.i64.i32($i2);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $p468 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $M.71 := $store.i32($M.71, $p468, $i467);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $i464 := 0;
    goto $bb261;

  $bb262:
    assume $i466 == 1;
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 95);
    goto $bb11;

  $bb250:
    assume {:verifier.code 0} true;
    assume $i458 == 1;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $i462 := $trunc.i64.i32($i2);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $i463 := otp_select_filemode($p28, $i462);
    call {:si_unique_call 1023} {:cexpr "ret"} boogie_si_record_i32($i463);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i464 := $i463;
    goto $bb261;

  $bb248:
    assume $i457 == 1;
    assume {:verifier.code 0} true;
    $i460 := $slt.i64($i2, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i460 == 1);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb256:
    assume $i460 == 1;
    assume {:verifier.code 0} true;
    $i461 := $eq.i64($i2, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i461} true;
    goto $bb258, $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    assume !($i461 == 1);
    goto $bb255;

  $bb258:
    assume {:verifier.code 0} true;
    assume $i461 == 1;
    goto $bb259;

  $bb55:
    assume $i93 == 1;
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i1, 4713);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb37;

  $bb63:
    assume $i97 == 1;
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p470 := $i2p.i64.ref($i2);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $i471 := mtdchar_blkpg_ioctl($p30, $p470);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 918} {:cexpr "ret"} boogie_si_record_i32($i471);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i128 := $i471;
    goto $bb120;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb53:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i1, $sub.i32(0, 1070576360));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i1, 4703);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i1, 4703);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb37;

  $bb69:
    assume $i100 == 1;
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i128 := 0;
    goto $bb120;

  $bb67:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i1, $sub.i32(0, 1070576360));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb37;

  $bb71:
    assume $i101 == 1;
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p315 := $i2p.i64.ref($i2);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $i316 := mtdchar_write_ioctl($p30, $p315);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    call {:si_unique_call 920} {:cexpr "ret"} boogie_si_record_i32($i316);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i128 := $i316;
    goto $bb120;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb65:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i1, $sub.i32(0, 1072149226));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb37;

  $bb73:
    assume $i102 == 1;
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $p301 := $bitcast.ref.ref($p31);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $p302 := $bitcast.ref.ref($p15);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $i303 := copy_from_user($p302, $p31, 24);
    call {:si_unique_call 922} {:cexpr "tmp___27"} boogie_si_record_i64($i303);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i304 := $ne.i64($i303, 0);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i304 == 1);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i307 := $load.i64($M.1, $p306);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i309 := $load.i32($M.1, $p308);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i311 := $load.i64($M.1, $p310);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p312 := $i2p.i64.ref($i311);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p301, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $i314 := mtdchar_readoob($p0, $p30, $i307, $i309, $p312, $p313);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    call {:si_unique_call 985} {:cexpr "ret"} boogie_si_record_i32($i314);
    assume {:verifier.code 0} true;
    $i305 := $i314;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i128 := $i305;
    goto $bb120;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb177:
    assume $i304 == 1;
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i305 := $sub.i32(0, 14);
    goto $bb179;

  $bb24:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i1, $sub.i32(0, 2134356726));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i1, $sub.i32(0, 1072673532));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i1, $sub.i32(0, 1072673528));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i1, $sub.i32(0, 1072149227));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i106 == 1);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p287 := $bitcast.ref.ref($p31);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $p288 := $bitcast.ref.ref($p14);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $i289 := copy_from_user($p288, $p31, 24);
    call {:si_unique_call 924} {:cexpr "tmp___26"} boogie_si_record_i64($i289);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i290 := $ne.i64($i289, 0);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i290} true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i290 == 1);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i293 := $load.i64($M.1, $p292);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $i295 := $load.i32($M.1, $p294);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i297 := $load.i64($M.1, $p296);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p298 := $i2p.i64.ref($i297);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p287, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $i300 := mtdchar_writeoob($p0, $p30, $i293, $i295, $p298, $p299);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    call {:si_unique_call 983} {:cexpr "ret"} boogie_si_record_i32($i300);
    assume {:verifier.code 0} true;
    $i291 := $i300;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i128 := $i291;
    goto $bb120;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb174:
    assume $i290 == 1;
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i291 := $sub.i32(0, 14);
    goto $bb176;

  $bb81:
    assume $i106 == 1;
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i1, $sub.i32(0, 1072673528));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb37;

  $bb83:
    assume $i107 == 1;
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p31);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} __might_fault(.str.93, 623);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p129, $mul.ref(0, 16)), $mul.ref(12, 1));
    call {:si_unique_call 926} $p131 := devirtbounce.20(0, $p130, 4);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p132 := $extractvalue($p131, 0);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i133 := $extractvalue($p131, 1);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p132);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i64.i32($i134);
    call {:si_unique_call 927} {:cexpr "__ret_gu"} boogie_si_record_i32($i135);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i64.i32($i133);
    call {:si_unique_call 928} {:cexpr "ur_idx"} boogie_si_record_i32($i136);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i137 := $ne.i32($i135, 0);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p30, $mul.ref(0, 1832)), $mul.ref(88, 1));
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.1, $p138);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i140 := $ule.i32($i139, $i136);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p30, $mul.ref(0, 1832)), $mul.ref(96, 1));
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.1, $p141);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i143 := $zext.i32.i64($i136);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} __might_fault(.str.93, 631);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p142, $mul.ref($i143, 24)), $mul.ref(0, 1));
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i146 := $load.i64($M.1, $p145);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i64.i32($i146);
    call {:si_unique_call 945} {:cexpr "__pu_val"} boogie_si_record_i32($i147);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p129, $mul.ref(0, 16)), $mul.ref(0, 1));
    call {:si_unique_call 946} $i149 := devirtbounce.19(0, $i147, $p148);
    call {:si_unique_call 947} {:cexpr "__ret_pu"} boogie_si_record_i32($i149);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $i150 := $ne.i32($i149, 0);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i150 == 1);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} __might_fault(.str.93, 632);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p142, $mul.ref($i143, 24)), $mul.ref(8, 1));
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.1, $p151);
    call {:si_unique_call 949} {:cexpr "__pu_val___0"} boogie_si_record_i32($i152);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p129, $mul.ref(0, 16)), $mul.ref(4, 1));
    call {:si_unique_call 950} $i154 := devirtbounce.19(0, $i152, $p153);
    call {:si_unique_call 951} {:cexpr "__ret_pu___0"} boogie_si_record_i32($i154);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i155 == 1);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} __might_fault(.str.93, 633);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p142, $mul.ref($i143, 24)), $mul.ref(12, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.1, $p156);
    call {:si_unique_call 953} {:cexpr "__pu_val___1"} boogie_si_record_i32($i157);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p129, $mul.ref(0, 16)), $mul.ref(8, 1));
    call {:si_unique_call 954} $i159 := devirtbounce.19(0, $i157, $p158);
    call {:si_unique_call 955} {:cexpr "__ret_pu___1"} boogie_si_record_i32($i159);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i159, 0);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i128 := 0;
    goto $bb120;

  $bb134:
    assume $i160 == 1;
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 14);
    goto $bb11;

  $bb131:
    assume $i155 == 1;
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 14);
    goto $bb11;

  $bb128:
    assume $i150 == 1;
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 14);
    goto $bb11;

  $bb124:
    assume $i140 == 1;
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 22);
    goto $bb11;

  $bb121:
    assume $i137 == 1;
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 14);
    goto $bb11;

  $bb79:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i1, $sub.i32(0, 1072673532));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb37;

  $bb85:
    assume $i108 == 1;
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p273 := $bitcast.ref.ref($p31);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p274 := $bitcast.ref.ref($p13);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $i275 := copy_from_user($p274, $p31, 16);
    call {:si_unique_call 930} {:cexpr "tmp___25"} boogie_si_record_i64($i275);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i276 := $ne.i64($i275, 0);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i276 == 1);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i279 := $load.i32($M.1, $p278);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i280 := $zext.i32.i64($i279);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i282 := $load.i32($M.1, $p281);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $p284 := $load.ref($M.1, $p283);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p273, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $i286 := mtdchar_readoob($p0, $p30, $i280, $i282, $p284, $p285);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    call {:si_unique_call 981} {:cexpr "ret"} boogie_si_record_i32($i286);
    assume {:verifier.code 0} true;
    $i277 := $i286;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i128 := $i277;
    goto $bb120;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb171:
    assume $i276 == 1;
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i277 := $sub.i32(0, 14);
    goto $bb173;

  $bb77:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i1, $sub.i32(0, 2125968111));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i1, $sub.i32(0, 1072673533));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i110 == 1);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $p259 := $bitcast.ref.ref($p31);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $p260 := $bitcast.ref.ref($p12);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $i261 := copy_from_user($p260, $p31, 16);
    call {:si_unique_call 932} {:cexpr "tmp___24"} boogie_si_record_i64($i261);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i262 := $ne.i64($i261, 0);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i262 == 1);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p12, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i265 := $load.i32($M.1, $p264);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i266 := $zext.i32.i64($i265);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p12, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i268 := $load.i32($M.1, $p267);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p12, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p270 := $load.ref($M.1, $p269);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p259, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} $i272 := mtdchar_writeoob($p0, $p30, $i266, $i268, $p270, $p271);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    call {:si_unique_call 979} {:cexpr "ret"} boogie_si_record_i32($i272);
    assume {:verifier.code 0} true;
    $i263 := $i272;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i128 := $i263;
    goto $bb120;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb168:
    assume $i262 == 1;
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i263 := $sub.i32(0, 14);
    goto $bb170;

  $bb89:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i1, $sub.i32(0, 2125968111));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb37;

  $bb91:
    assume $i111 == 1;
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p30, $mul.ref(0, 1832)), $mul.ref(72, 1));
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p437 := $load.ref($M.1, $p436);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i438 := $p2i.ref.i64($p437);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i439 := $eq.i64($i438, 0);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i439 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $p440 := kmalloc(328, 208);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $p441 := $bitcast.ref.ref($p440);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i442 := $p2i.ref.i64($p441);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i443 := $eq.i64($i442, 0);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    assume {:branchcond $i443} true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i443 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($p30, $mul.ref(0, 1832)), $mul.ref(72, 1));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $p445 := $load.ref($M.1, $p444);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} vslice_dummy_var_77 := shrink_ecclayout($p445, $p441);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $p447 := $bitcast.ref.ref($p441);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $i448 := copy_to_user($p31, $p447, 328);
    call {:si_unique_call 1020} {:cexpr "tmp___42"} boogie_si_record_i64($i448);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i449 := $ne.i64($i448, 0);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i449} true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i449 == 1);
    assume {:verifier.code 0} true;
    $i450 := 0;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p451 := $bitcast.ref.ref($p441);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} kfree($p451);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i128 := $i450;
    goto $bb120;

  $bb241:
    assume $i449 == 1;
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i450 := $sub.i32(0, 14);
    goto $bb243;

  $bb238:
    assume $i443 == 1;
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 12);
    goto $bb11;

  $bb235:
    assume $i439 == 1;
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 95);
    goto $bb11;

  $bb87:
    assume $i109 == 1;
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i1, $sub.i32(0, 2134356726));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb37;

  $bb93:
    assume $i112 == 1;
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p30, $mul.ref(0, 1832)), $mul.ref(72, 1));
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $p348 := $load.ref($M.1, $p347);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i349 := $p2i.ref.i64($p348);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i350 := $eq.i64($i349, 0);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i350} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p30, $mul.ref(0, 1832)), $mul.ref(72, 1));
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $p352 := $load.ref($M.1, $p351);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p352, $mul.ref(0, 2824)), $mul.ref(0, 1));
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i354 := $load.i32($M.1, $p353);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i355 := $ugt.i32($i354, 32);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p19, $mul.ref(0, 200)), $mul.ref(0, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p356, 2);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p19, $mul.ref(0, 200)), $mul.ref(72, 1));
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $p358 := $bitcast.ref.ref($p357);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p30, $mul.ref(0, 1832)), $mul.ref(72, 1));
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $p360 := $load.ref($M.1, $p359);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p360, $mul.ref(0, 2824)), $mul.ref(4, 1));
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $p362 := $bitcast.ref.ref($p361);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.1;
    cmdloc_dummy_var_24 := $M.1;
    call {:si_unique_call 992} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p358, $p362, 128, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_25;
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($p19, $mul.ref(0, 200)), $mul.ref(8, 1));
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p364 := $bitcast.ref.ref($p363);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p30, $mul.ref(0, 1832)), $mul.ref(72, 1));
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $p366 := $load.ref($M.1, $p365);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p366, $mul.ref(0, 2824)), $mul.ref(2568, 1));
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p368 := $bitcast.ref.ref($p367);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.1;
    cmdloc_dummy_var_27 := $M.1;
    call {:si_unique_call 993} cmdloc_dummy_var_28 := $memcpy.i8(cmdloc_dummy_var_26, cmdloc_dummy_var_27, $p364, $p368, 64, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_28;
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p30, $mul.ref(0, 1832)), $mul.ref(72, 1));
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $p370 := $load.ref($M.1, $p369);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p370, $mul.ref(0, 2824)), $mul.ref(0, 1));
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i372 := $load.i32($M.1, $p371);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p19, $mul.ref(0, 200)), $mul.ref(4, 1));
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p373, $i372);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p374 := $bitcast.ref.ref($p19);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $i375 := copy_to_user($p31, $p374, 200);
    call {:si_unique_call 995} {:cexpr "tmp___31"} boogie_si_record_i64($i375);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i376 := $ne.i64($i375, 0);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i376} true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $i128 := 0;
    goto $bb120;

  $bb195:
    assume $i376 == 1;
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 14);
    goto $bb11;

  $bb192:
    assume $i355 == 1;
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 22);
    goto $bb11;

  $bb189:
    assume $i350 == 1;
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 95);
    goto $bb11;

  $bb75:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i1, $sub.i32(0, 2146677488));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    $i114 := $slt.i32($i1, $sub.i32(0, 2146415342));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i1, $sub.i32(0, 2145366783));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i1, $sub.i32(0, 2145366783));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb37;

  $bb101:
    assume $i116 == 1;
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p3);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.1;
    call {:si_unique_call 933} cmdloc_dummy_var_22 := $memset.i8(cmdloc_dummy_var_21, $p161, 0, 32, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_22;
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p30, $mul.ref(0, 1832)), $mul.ref(0, 1));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i163 := $load.i8($M.1, $p162);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p164, $i163);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p30, $mul.ref(0, 1832)), $mul.ref(4, 1));
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.1, $p165);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p167, $i166);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p30, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i169 := $load.i64($M.1, $p168);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i170 := $trunc.i64.i32($i169);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p171, $i170);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p30, $mul.ref(0, 1832)), $mul.ref(16, 1));
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.1, $p172);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p174, $i173);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p30, $mul.ref(0, 1832)), $mul.ref(20, 1));
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i176 := $load.i32($M.1, $p175);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p177, $i176);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p30, $mul.ref(0, 1832)), $mul.ref(28, 1));
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.1, $p178);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p180, $i179);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p181, 0);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $p182 := $bitcast.ref.ref($p3);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $i183 := copy_to_user($p31, $p182, 32);
    call {:si_unique_call 935} {:cexpr "tmp___9"} boogie_si_record_i64($i183);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i184 := $ne.i64($i183, 0);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i128 := 0;
    goto $bb120;

  $bb139:
    assume $i184 == 1;
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 14);
    goto $bb11;

  $bb99:
    assume $i115 == 1;
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i1, $sub.i32(0, 2146415342));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb37;

  $bb103:
    assume $i117 == 1;
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p30, $mul.ref(0, 1832)), $mul.ref(360, 1));
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $p453 := $bitcast.ref.ref($p452);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $i454 := copy_to_user($p31, $p453, 16);
    call {:si_unique_call 937} {:cexpr "tmp___43"} boogie_si_record_i64($i454);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i455 := $ne.i64($i454, 0);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i455} true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i455 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    $i128 := 0;
    goto $bb120;

  $bb244:
    assume $i455 == 1;
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 14);
    goto $bb11;

  $bb97:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i1, $sub.i32(0, 2146677488));
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb105, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb37;

  $bb105:
    assume $i118 == 1;
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i424 := $load.i32($M.71, $p423);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i425 := $ne.i32($i424, 2);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i425} true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i425 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $p426 := $bitcast.ref.ref($p25);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $i427 := copy_from_user($p426, $p31, 12);
    call {:si_unique_call 1014} {:cexpr "tmp___40"} boogie_si_record_i64($i427);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i428 := $ne.i64($i427, 0);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i428} true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i428 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($p25, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i430 := $load.i32($M.1, $p429);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i431 := $zext.i32.i64($i430);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p25, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i433 := $load.i32($M.1, $p432);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i434 := $zext.i32.i64($i433);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} $i435 := mtd_lock_user_prot_reg($p30, $i431, $i434);
    call {:si_unique_call 1016} {:cexpr "ret"} boogie_si_record_i32($i435);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i128 := $i435;
    goto $bb120;

  $bb232:
    assume $i428 == 1;
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 14);
    goto $bb11;

  $bb229:
    assume $i425 == 1;
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 22);
    goto $bb11;

  $bb95:
    assume $i113 == 1;
    assume {:verifier.code 0} true;
    $i119 := $slt.i32($i1, $sub.i32(0, 2147201779));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    $i120 := $slt.i32($i1, $sub.i32(0, 2146939625));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i1, $sub.i32(0, 2146939625));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb37;

  $bb111:
    assume $i121 == 1;
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p337 := $bitcast.ref.ref($p18);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $i338 := copy_from_user($p337, $p31, 8);
    call {:si_unique_call 939} {:cexpr "tmp___30"} boogie_si_record_i64($i338);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i339 := $ne.i64($i338, 0);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i339} true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p18, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i341 := $load.i32($M.1, $p340);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i342 := $zext.i32.i64($i341);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p18, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i344 := $load.i32($M.1, $p343);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i345 := $zext.i32.i64($i344);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $i346 := mtd_is_locked($p30, $i342, $i345);
    call {:si_unique_call 991} {:cexpr "ret"} boogie_si_record_i32($i346);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i128 := $i346;
    goto $bb120;

  $bb186:
    assume $i339 == 1;
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 14);
    goto $bb11;

  $bb109:
    assume $i120 == 1;
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i1, $sub.i32(0, 2147201779));
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i122 == 1);
    goto $bb37;

  $bb113:
    assume $i122 == 1;
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p387 := $bitcast.ref.ref($p22);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $i388 := copy_from_user($p387, $p31, 4);
    call {:si_unique_call 941} {:cexpr "tmp___36"} boogie_si_record_i64($i388);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i389 := $ne.i64($i388, 0);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i389} true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $M.71 := $store.i32($M.71, $p390, 0);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i391 := $load.i32($M.1, $p22);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $i392 := otp_select_filemode($p28, $i391);
    call {:si_unique_call 1001} {:cexpr "ret"} boogie_si_record_i32($i392);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(296, 1));
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p393, 0);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i128 := $i392;
    goto $bb120;

  $bb204:
    assume $i389 == 1;
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 14);
    goto $bb11;

  $bb107:
    assume $i119 == 1;
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i1, $sub.i32(0, 2147201785));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb37;

  $bb115:
    assume $i123 == 1;
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p30, $mul.ref(0, 1832)), $mul.ref(88, 1));
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $i126 := copy_to_user($p31, $p125, 4);
    call {:si_unique_call 943} {:cexpr "tmp___8"} boogie_si_record_i64($i126);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i128 := 0;
    goto $bb120;

  $bb117:
    assume $i127 == 1;
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 14);
    goto $bb11;

  $bb14:
    assume $i66 == 1;
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $p67 := current_thread_info();
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p31);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p67, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.14, $p70);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $i72 := __chk_range_not_ok($i68, $i50, $i71);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i73 := $zext.i1.i8($i72);
    call {:si_unique_call 905} {:cexpr "tmp___5"} boogie_si_record_i8($i73);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i8.i1($i73);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $i77 := ldv__builtin_expect($i76, 1);
    call {:si_unique_call 907} {:cexpr "tmp___7"} boogie_si_record_i64($i77);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i77, 0);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i78 == 1;
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 14);
    goto $bb11;

  $bb16:
    assume $i74 == 1;
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i75 := 0;
    goto $bb18;

  $bb4:
    assume $i52 == 1;
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $p53 := current_thread_info();
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p31);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p53, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.14, $p56);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $i58 := __chk_range_not_ok($i54, $i50, $i57);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i59 := $zext.i1.i8($i58);
    call {:si_unique_call 900} {:cexpr "tmp___1"} boogie_si_record_i8($i59);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i8.i1($i59);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $i63 := ldv__builtin_expect($i62, 1);
    call {:si_unique_call 902} {:cexpr "tmp___3"} boogie_si_record_i64($i63);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i63, 0);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i64 == 1;
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 14);
    goto $bb11;

  $bb6:
    assume $i60 == 1;
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i61 := 0;
    goto $bb8;

  $bb1:
    assume $i47 == 1;
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} __dynamic_pr_debug.ref.ref($p4, .str.101);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 555176);

procedure current_thread_info() returns ($r: ref);
  free requires assertsPassed;



implementation current_thread_info() returns ($r: ref)
{
  var $i0: i64;
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $i0 := current_top_of_stack();
    call {:si_unique_call 1027} {:cexpr "tmp"} boogie_si_record_i64($i0);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 32768);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __chk_range_not_ok: ref;

axiom __chk_range_not_ok == $sub.ref(0, 556208);

procedure __chk_range_not_ok($i0: i64, $i1: i64, $i2: i64) returns ($r: i1);
  free requires assertsPassed;



implementation __chk_range_not_ok($i0: i64, $i1: i64, $i2: i64) returns ($r: i1)
{
  var $i3: i64;
  var $i4: i1;
  var $i6: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} {:cexpr "__chk_range_not_ok:arg:addr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1029} {:cexpr "__chk_range_not_ok:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1030} {:cexpr "__chk_range_not_ok:arg:limit"} boogie_si_record_i64($i2);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i0, $i1);
    call {:si_unique_call 1031} {:cexpr "addr"} boogie_si_record_i64($i3);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i4 := $ult.i64($i3, $i1);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i64($i3, $i2);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 557240);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1034} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1035} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} __might_fault(.str.95, 732);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 1038} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $i15 := _copy_to_user($p0, $p1, $i14);
    call {:si_unique_call 1040} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 558272);

procedure __might_fault($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __might_fault($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 559304);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const mtdchar_erase_callback: ref;

axiom mtdchar_erase_callback == $sub.ref(0, 560336);

procedure mtdchar_erase_callback($p0: ref);
  free requires assertsPassed;



implementation mtdchar_erase_callback($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.1, $p1);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p3 := $i2p.i64.ref($i2);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} __wake_up($p3, 3, 1, $0.ref);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    return;
}



const mtdchar_write_ioctl: ref;

axiom mtdchar_write_ioctl == $sub.ref(0, 561368);

procedure mtdchar_write_ioctl($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15, $M.1, $CurrAddr, $M.0, $M.10, assertsPassed;



implementation mtdchar_write_ioctl($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i23: i8;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i1;
  var $i67: i8;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i32;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i1;
  var $i83: i8;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $p2 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $p3 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $i6 := copy_from_user($p4, $p5, 48);
    call {:si_unique_call 1047} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.1, $p9);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i10);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.1, $p12);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $p15 := current_thread_info();
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p11);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.1, $p17);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.14, $p20);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $i22 := __chk_range_not_ok($i16, $i18, $i21);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i8($i22);
    call {:si_unique_call 1050} {:cexpr "tmp___1"} boogie_si_record_i8($i23);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i27 := ldv__builtin_expect($i26, 1);
    call {:si_unique_call 1052} {:cexpr "tmp___3"} boogie_si_record_i64($i27);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $p29 := current_thread_info();
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p14);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.1, $p31);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.14, $p34);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $i36 := __chk_range_not_ok($i30, $i32, $i35);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 1055} {:cexpr "tmp___5"} boogie_si_record_i8($i37);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $i41 := ldv__builtin_expect($i40, 1);
    call {:si_unique_call 1057} {:cexpr "tmp___7"} boogie_si_record_i64($i41);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(168, 1));
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.1, $p47);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p50, $i49);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.1, $p51);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p53, $i52);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.1, $p54);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, $p56, $i55);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p57, 0);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p11);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i59 == 1);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p73, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p14);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i75 == 1);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p91, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.1, $p92);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $i94 := mtd_write_oob($p0, $i93, $p3);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    call {:si_unique_call 1070} {:cexpr "ret"} boogie_si_record_i32($i94);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.15, $p95);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} kfree($p96);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.15, $p97);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} kfree($p98);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i8 := $i94;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i75 == 1;
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.15, $p76);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} $p78 := memdup_user($p14, $i77);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p79, $p78);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.15, $p80);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $i82 := IS_ERR($p81);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i83 := $zext.i1.i8($i82);
    call {:si_unique_call 1065} {:cexpr "tmp___13"} boogie_si_record_i8($i83);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i8.i1($i83);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i84 == 1;
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.15, $p85);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} kfree($p86);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.15, $p87);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $i89 := PTR_ERR($p88);
    call {:si_unique_call 1068} {:cexpr "tmp___12"} boogie_si_record_i64($i89);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i64.i32($i89);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i8 := $i90;
    goto $bb3;

  $bb20:
    assume $i59 == 1;
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.15, $p60);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $p62 := memdup_user($p11, $i61);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p63, $p62);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.15, $p64);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $i66 := IS_ERR($p65);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i8($i66);
    call {:si_unique_call 1060} {:cexpr "tmp___10"} boogie_si_record_i8($i67);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i8.i1($i67);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i68 == 1;
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.15, $p69);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} $i71 := PTR_ERR($p70);
    call {:si_unique_call 1062} {:cexpr "tmp___9"} boogie_si_record_i64($i71);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i64.i32($i71);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $i8 := $i72;
    goto $bb3;

  $bb17:
    assume $i46 == 1;
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 95);
    goto $bb3;

  $bb13:
    assume $i42 == 1;
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb12;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;
}



const otp_select_filemode: ref;

axiom otp_select_filemode == $sub.ref(0, 562400);

procedure otp_select_filemode($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.71, $M.1, $CurrAddr;



implementation otp_select_filemode($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1074} {:cexpr "otp_select_filemode:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.70, $p3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $i13 := mtd_read_user_prot_reg($p4, $sub.i64(0, 1), 0, $p2, $0.ref);
    call {:si_unique_call 1078} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, $sub.i32(0, 95));
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $M.71 := $store.i32($M.71, $p15, 2);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb13;

  $bb16:
    assume $i14 == 1;
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 95);
    goto $bb13;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $i9 := mtd_read_fact_prot_reg($p4, $sub.i64(0, 1), 0, $p2, $0.ref);
    call {:si_unique_call 1076} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, $sub.i32(0, 95));
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $M.71 := $store.i32($M.71, $p12, 1);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 95);
    goto $bb13;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $M.71 := $store.i32($M.71, $p16, 0);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const shrink_ecclayout: ref;

axiom shrink_ecclayout == $sub.ref(0, 563432);

procedure shrink_ecclayout($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation shrink_ecclayout($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i17: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i16: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i6: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $p70: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i32;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $p94: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i110: i32;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $p116: ref;
  var $p118: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $p130: ref;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i134: i32;
  var $p137: ref;
  var $i138: i32;
  var $i139: i32;
  var $p140: ref;
  var $p142: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p149: ref;
  var $i150: i32;
  var $i151: i1;
  var $p154: ref;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $i158: i32;
  var $p161: ref;
  var $i162: i32;
  var $i163: i32;
  var $p164: ref;
  var $p166: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p173: ref;
  var $i174: i32;
  var $i175: i1;
  var $p178: ref;
  var $i179: i32;
  var $i180: i1;
  var $p181: ref;
  var $i182: i32;
  var $p185: ref;
  var $i186: i32;
  var $i187: i32;
  var $p188: ref;
  var $p190: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p197: ref;
  var $i198: i32;
  var $i199: i1;
  var $p202: ref;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $i206: i32;
  var $p209: ref;
  var $i210: i32;
  var $i211: i32;
  var $p212: ref;
  var $p214: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.1;
    call {:si_unique_call 1079} cmdloc_dummy_var_30 := $memset.i8(cmdloc_dummy_var_29, $p7, 0, 328, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_30;
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(0, 1));
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    call {:si_unique_call 1080} {:cexpr "_min1"} boogie_si_record_i32($i9);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 64);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i11 := 64;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(0, 1));
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p12, $i11);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(0, 1));
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.1, $p13);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i15 := $ult.i32(0, $i14);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.1, $p29);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(260, 1));
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.1, $p37);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.1, $p41);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i38, $i42);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(260, 1));
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p44, $i43);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(264, 1)), $mul.ref(0, 8));
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(0, 8));
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p46);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p48);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_31 := $M.1;
    cmdloc_dummy_var_32 := $M.1;
    call {:si_unique_call 1082} cmdloc_dummy_var_33 := $memcpy.i8(cmdloc_dummy_var_31, cmdloc_dummy_var_32, $p49, $p50, 8, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_33;
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.1, $p53);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(260, 1));
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.1, $p61);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.1, $p65);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i62, $i66);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(260, 1));
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p68, $i67);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(264, 1)), $mul.ref(1, 8));
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(1, 8));
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p70);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p72);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_34 := $M.1;
    cmdloc_dummy_var_35 := $M.1;
    call {:si_unique_call 1083} cmdloc_dummy_var_36 := $memcpy.i8(cmdloc_dummy_var_34, cmdloc_dummy_var_35, $p73, $p74, 8, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_36;
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.1, $p77);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 0);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(260, 1));
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.1, $p85);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.1, $p89);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i86, $i90);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(260, 1));
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p92, $i91);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(264, 1)), $mul.ref(2, 8));
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(2, 8));
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p94);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p96);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_37 := $M.1;
    cmdloc_dummy_var_38 := $M.1;
    call {:si_unique_call 1084} cmdloc_dummy_var_39 := $memcpy.i8(cmdloc_dummy_var_37, cmdloc_dummy_var_38, $p97, $p98, 8, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_39;
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.1, $p101);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 0);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(260, 1));
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.1, $p109);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(3, 8)), $mul.ref(4, 1));
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.1, $p113);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i115 := $add.i32($i110, $i114);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(260, 1));
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p116, $i115);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(264, 1)), $mul.ref(3, 8));
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(3, 8));
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p118);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p120);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_40 := $M.1;
    cmdloc_dummy_var_41 := $M.1;
    call {:si_unique_call 1085} cmdloc_dummy_var_42 := $memcpy.i8(cmdloc_dummy_var_40, cmdloc_dummy_var_41, $p121, $p122, 8, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_42;
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.1, $p125);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 0);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(260, 1));
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.1, $p133);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(4, 8)), $mul.ref(4, 1));
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.1, $p137);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i139 := $add.i32($i134, $i138);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(260, 1));
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p140, $i139);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(264, 1)), $mul.ref(4, 8));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(4, 8));
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p142);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p144);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.1;
    cmdloc_dummy_var_44 := $M.1;
    call {:si_unique_call 1086} cmdloc_dummy_var_45 := $memcpy.i8(cmdloc_dummy_var_43, cmdloc_dummy_var_44, $p145, $p146, 8, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_45;
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(5, 8)), $mul.ref(4, 1));
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.1, $p149);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 0);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(260, 1));
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.1, $p157);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(5, 8)), $mul.ref(4, 1));
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.1, $p161);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i163 := $add.i32($i158, $i162);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(260, 1));
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p164, $i163);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(264, 1)), $mul.ref(5, 8));
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(5, 8));
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p166);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p168);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_46 := $M.1;
    cmdloc_dummy_var_47 := $M.1;
    call {:si_unique_call 1087} cmdloc_dummy_var_48 := $memcpy.i8(cmdloc_dummy_var_46, cmdloc_dummy_var_47, $p169, $p170, 8, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_48;
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(6, 8)), $mul.ref(4, 1));
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.1, $p173);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i174, 0);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i175 == 1);
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(260, 1));
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.1, $p181);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(6, 8)), $mul.ref(4, 1));
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.1, $p185);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i187 := $add.i32($i182, $i186);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(260, 1));
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p188, $i187);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(264, 1)), $mul.ref(6, 8));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(6, 8));
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p190);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p192);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_49 := $M.1;
    cmdloc_dummy_var_50 := $M.1;
    call {:si_unique_call 1088} cmdloc_dummy_var_51 := $memcpy.i8(cmdloc_dummy_var_49, cmdloc_dummy_var_50, $p193, $p194, 8, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_51;
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(7, 8)), $mul.ref(4, 1));
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i198 := $load.i32($M.1, $p197);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, 0);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i199 == 1);
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(260, 1));
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i206 := $load.i32($M.1, $p205);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(7, 8)), $mul.ref(4, 1));
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i210 := $load.i32($M.1, $p209);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i211 := $add.i32($i206, $i210);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(260, 1));
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p212, $i211);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(264, 1)), $mul.ref(7, 8));
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(7, 8));
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p217 := $bitcast.ref.ref($p214);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p218 := $bitcast.ref.ref($p216);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_52 := $M.1;
    cmdloc_dummy_var_53 := $M.1;
    call {:si_unique_call 1089} cmdloc_dummy_var_54 := $memcpy.i8(cmdloc_dummy_var_52, cmdloc_dummy_var_53, $p217, $p218, 8, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_54;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb73:
    assume $i199 == 1;
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(7, 8)), $mul.ref(0, 1));
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.1, $p202);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 0);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i204 == 1);
    goto $bb75;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i204 == 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb66:
    assume $i175 == 1;
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(6, 8)), $mul.ref(0, 1));
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.1, $p178);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 0);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i180 == 1);
    goto $bb68;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i180 == 1;
    goto $bb25;

  $bb59:
    assume $i151 == 1;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(5, 8)), $mul.ref(0, 1));
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.1, $p154);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 0);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i156 == 1);
    goto $bb61;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i156 == 1;
    goto $bb25;

  $bb52:
    assume $i127 == 1;
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(4, 8)), $mul.ref(0, 1));
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.1, $p130);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 0);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i132 == 1);
    goto $bb54;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i132 == 1;
    goto $bb25;

  $bb45:
    assume $i103 == 1;
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(3, 8)), $mul.ref(0, 1));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.1, $p106);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 0);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb47;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb25;

  $bb38:
    assume $i79 == 1;
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(2, 8)), $mul.ref(0, 1));
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.1, $p82);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 0);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb40;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb25;

  $bb31:
    assume $i55 == 1;
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(1, 8)), $mul.ref(0, 1));
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.1, $p58);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb33;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb25;

  $bb21:
    assume $i31 == 1;
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(2568, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb23;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb25;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb14;

  $bb14:
    call $i17, $p19, $i20, $i21, $p23, $i24, $i25, $i26, $i16 := shrink_ecclayout_loop_$bb14($p0, $p1, $p13, $i17, $p19, $i20, $i21, $p23, $i24, $i25, $i26, $i16);
    goto $bb14_last;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2824)), $mul.ref(4, 1)), $mul.ref($i17, 4));
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i16);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref($i21, 4));
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p23, $i20);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i16, 1);
    call {:si_unique_call 1081} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p13);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i26 := $ult.i32($i24, $i25);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i26 == 1);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i24;
    goto $bb16_dummy;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb16_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6023;
}



const mtd_has_oob: ref;

axiom mtd_has_oob == $sub.ref(0, 564464);

procedure mtd_has_oob($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mtd_has_oob($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i5: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(160, 1));
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i5);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1832)), $mul.ref(168, 1));
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;
}



const mtdchar_blkpg_ioctl: ref;

axiom mtdchar_blkpg_ioctl == $sub.ref(0, 565496);

procedure mtdchar_blkpg_ioctl($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.10, assertsPassed;



implementation mtdchar_blkpg_ioctl($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} $p3 := $alloc($mul.ref(152, $zext.i32.i64(1)));
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $i4 := capable(21);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 1093} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} $i12 := copy_from_user($p10, $p11, 24);
    call {:si_unique_call 1095} {:cexpr "tmp___1"} boogie_si_record_i64($i12);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p3);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $i17 := copy_from_user($p14, $p16, 152);
    call {:si_unique_call 1097} {:cexpr "tmp___2"} boogie_si_record_i64($i17);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i20, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb17:
    assume $i22 == 1;
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, $p35);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 0);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.1, $p38);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $i40 := mtd_del_partition($p0, $i39);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    call {:si_unique_call 1103} {:cexpr "tmp___5"} boogie_si_record_i32($i40);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i9 := $i40;
    goto $bb6;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i37 == 1;
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb6;

  $bb15:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i20, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb19;

  $bb20:
    assume $i23 == 1;
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $i24 := mtd_is_partition($p0);
    call {:si_unique_call 1099} {:cexpr "tmp___3"} boogie_si_record_i32($i24);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 152)), $mul.ref(20, 1)), $mul.ref(63, 1));
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p27, 0);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 152)), $mul.ref(20, 1));
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 152)), $mul.ref(0, 1));
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.1, $p30);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 152)), $mul.ref(8, 1));
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.1, $p32);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $i34 := mtd_add_partition($p0, $p29, $i31, $i33);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    call {:si_unique_call 1101} {:cexpr "tmp___4"} boogie_si_record_i32($i34);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $i9 := $i34;
    goto $bb6;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i25 == 1;
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb6;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb6;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb6;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const capable: ref;

axiom capable == $sub.ref(0, 566528);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1104} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1105} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1106} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const memdup_user: ref;

axiom memdup_user == $sub.ref(0, 567560);

procedure memdup_user($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation memdup_user($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} {:cexpr "memdup_user:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $p2 := external_alloc();
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 568592);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 569624);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1109} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1110} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1111} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 570656);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    return;
}



const current_top_of_stack: ref;

axiom current_top_of_stack == $sub.ref(0, 571688);

procedure current_top_of_stack() returns ($r: i64);
  free requires assertsPassed;



implementation current_top_of_stack() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} $i0 := devirtbounce.21(0, $add.ref($add.ref($add.ref(cpu_tss, $mul.ref(0, 8824)), $mul.ref(0, 1)), $mul.ref(8, 1)));
    call {:si_unique_call 1113} {:cexpr "pfo_ret__"} boogie_si_record_i64($i0);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const mtd_is_bitflip_or_eccerr: ref;

axiom mtd_is_bitflip_or_eccerr == $sub.ref(0, 572720);

procedure mtd_is_bitflip_or_eccerr($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation mtd_is_bitflip_or_eccerr($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} {:cexpr "mtd_is_bitflip_or_eccerr:arg:err"} boogie_si_record_i32($i0);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} $i1 := mtd_is_bitflip($i0);
    call {:si_unique_call 1116} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $i4 := mtd_is_eccerr($i0);
    call {:si_unique_call 1118} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 573752);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1119} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1120} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1121} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 574784);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    return;
}



const fixed_size_llseek: ref;

axiom fixed_size_llseek == $sub.ref(0, 575816);

procedure fixed_size_llseek($p0: ref, $i1: i64, $i2: i32, $i3: i64) returns ($r: i64);
  free requires assertsPassed;



implementation fixed_size_llseek($p0: ref, $i1: i64, $i2: i32, $i3: i64) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1122} {:cexpr "fixed_size_llseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1123} {:cexpr "fixed_size_llseek:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1124} {:cexpr "fixed_size_llseek:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1125} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 1126} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 576848);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $p1 := calloc(1, $i0);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1129} __VERIFIER_assume($i4);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 577880);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.75;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1131} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_55 := $M.75;
    call {:si_unique_call 1132} cmdloc_dummy_var_56 := $memset.i8(cmdloc_dummy_var_55, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.75 := cmdloc_dummy_var_56;
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_file_operations_3: ref;

axiom ldv_file_operations_3 == $sub.ref(0, 578912);

procedure ldv_file_operations_3();
  free requires assertsPassed;
  modifies $M.76, $M.77, $M.1, $CurrAddr;



implementation ldv_file_operations_3()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $M.76 := $p0;
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $M.77 := $p2;
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_10: ref;

axiom ldv_initialize_device_attribute_10 == $sub.ref(0, 579944);

procedure ldv_initialize_device_attribute_10();
  free requires assertsPassed;
  modifies $M.78, $M.79, $M.1, $CurrAddr;



implementation ldv_initialize_device_attribute_10()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $M.78 := $p0;
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $M.79 := $p2;
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dev_pm_ops_21: ref;

axiom ldv_dev_pm_ops_21 == $sub.ref(0, 580976);

procedure ldv_dev_pm_ops_21();
  free requires assertsPassed;
  modifies $M.80, $M.1, $CurrAddr;



implementation ldv_dev_pm_ops_21()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $M.80 := $p0;
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 582008);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.75, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.78, $M.79, $M.76, $M.77, $M.80, $M.124, $M.66, $M.1, $M.132, $M.135, $M.164, $M.165, $M.3, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.128, $M.206, $M.207, $M.208, $M.209, $M.210, $M.211, $M.212, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.219, $M.220, $M.221, $M.222, $M.223, $M.224, $M.225, $M.226, $M.227, $M.228, $M.229, $M.230, $M.231, $M.232, $M.233, $M.234, $M.235, $M.236, $M.127, $M.125, $M.126, $M.10, $M.321, $M.322, $M.323, $M.324, $M.325, $M.326, $M.327, $M.328, $CurrAddr, $M.0, $M.22, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.20, $M.15, $M.71, $M.28, $M.29, $M.30, $M.31, $M.32, $M.72, $M.73, assertsPassed, $M.33, $M.34;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p88: ref;
  var $p90: ref;
  var $p92: ref;
  var $i94: i32;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i32;
  var $i119: i1;
  var $i120: i32;
  var $i121: i1;
  var $i122: i32;
  var $i123: i1;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i1;
  var $i133: i1;
  var $i134: i1;
  var $i135: i1;
  var $i136: i1;
  var $i137: i1;
  var $i138: i1;
  var $i139: i1;
  var $i140: i1;
  var $i141: i1;
  var $i142: i1;
  var $i143: i1;
  var $i144: i1;
  var $i145: i1;
  var $i146: i1;
  var $i147: i1;
  var $i148: i1;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $i158: i32;
  var $i159: i32;
  var $i160: i1;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $i164: i32;
  var $i165: i32;
  var $i166: i1;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $i170: i32;
  var $i171: i32;
  var $i172: i1;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $i176: i32;
  var $i177: i32;
  var $i178: i1;
  var $i179: i32;
  var $i180: i1;
  var $p181: ref;
  var $i182: i32;
  var $i183: i32;
  var $i184: i1;
  var $i185: i32;
  var $i186: i1;
  var $i187: i32;
  var $i188: i32;
  var $i189: i1;
  var $i190: i32;
  var $i191: i1;
  var $i192: i32;
  var $i193: i32;
  var $i194: i1;
  var $i195: i32;
  var $i196: i1;
  var $i197: i32;
  var $i198: i32;
  var $i199: i1;
  var $i200: i32;
  var $i201: i1;
  var $i202: i32;
  var $i203: i32;
  var $i204: i1;
  var $i205: i32;
  var $i206: i1;
  var $i207: i32;
  var $i208: i32;
  var $i209: i1;
  var $i210: i32;
  var $i211: i1;
  var $i212: i32;
  var $i213: i32;
  var $i214: i1;
  var $i215: i32;
  var $i216: i1;
  var $i217: i32;
  var $i218: i32;
  var $i219: i1;
  var $i220: i32;
  var $i221: i32;
  var $i222: i32;
  var $i223: i1;
  var $i224: i32;
  var $i225: i32;
  var $i226: i1;
  var $i227: i32;
  var $i228: i1;
  var $i229: i32;
  var $i230: i32;
  var $i231: i1;
  var $i232: i32;
  var $i233: i1;
  var $i234: i32;
  var $i235: i32;
  var $i236: i1;
  var $i237: i32;
  var $i238: i1;
  var $i239: i32;
  var $i240: i32;
  var $i241: i1;
  var $i242: i32;
  var $i243: i1;
  var $i244: i32;
  var $i245: i32;
  var $i246: i1;
  var $i247: i32;
  var $i248: i1;
  var $i249: i32;
  var $i250: i32;
  var $i251: i1;
  var $i252: i32;
  var $i253: i1;
  var $i255: i32;
  var $i256: i32;
  var $i257: i32;
  var $i258: i1;
  var $i259: i32;
  var $i260: i1;
  var $i261: i32;
  var $i262: i1;
  var $i264: i32;
  var $i265: i1;
  var $i266: i32;
  var $i267: i1;
  var $i268: i32;
  var $i269: i1;
  var $i271: i32;
  var $i272: i1;
  var $i273: i32;
  var $i274: i1;
  var $i275: i32;
  var $i276: i1;
  var $i277: i32;
  var $i278: i1;
  var $i279: i32;
  var $i280: i1;
  var $i282: i32;
  var $i283: i1;
  var $i284: i32;
  var $i285: i1;
  var $i286: i1;
  var $i287: i1;
  var $i288: i32;
  var $i289: i1;
  var $i290: i32;
  var $i291: i1;
  var $i292: i32;
  var $i293: i1;
  var $i294: i32;
  var $i295: i32;
  var $i296: i1;
  var $i297: i32;
  var $i298: i1;
  var $i299: i32;
  var $i300: i1;
  var $i301: i32;
  var $i302: i1;
  var $i303: i32;
  var $i304: i1;
  var $i306: i32;
  var $i307: i1;
  var $i308: i32;
  var $i309: i1;
  var $i310: i32;
  var $i311: i1;
  var $i313: i32;
  var $i314: i1;
  var $i315: i32;
  var $i316: i1;
  var $i317: i32;
  var $i318: i1;
  var $i320: i32;
  var $i321: i1;
  var $i322: i32;
  var $i323: i1;
  var $i324: i1;
  var $i325: i1;
  var $i326: i1;
  var $i327: i1;
  var $i328: i32;
  var $i329: i1;
  var $p330: ref;
  var $p331: ref;
  var $i333: i32;
  var $i334: i32;
  var $i335: i32;
  var $i336: i1;
  var $p337: ref;
  var $i338: i64;
  var $i340: i32;
  var $i341: i1;
  var $p342: ref;
  var $i343: i64;
  var $i344: i32;
  var $i346: i32;
  var $i347: i1;
  var $p348: ref;
  var $p349: ref;
  var $i350: i32;
  var $i351: i32;
  var $i352: i1;
  var $i353: i32;
  var $i354: i32;
  var $i355: i32;
  var $i356: i1;
  var $i357: i32;
  var $i358: i1;
  var $i359: i32;
  var $i360: i1;
  var $i362: i32;
  var $i363: i1;
  var $i364: i32;
  var $i365: i1;
  var $i366: i32;
  var $i367: i1;
  var $i369: i32;
  var $i370: i1;
  var $i371: i32;
  var $i372: i1;
  var $i373: i32;
  var $i374: i1;
  var $i376: i32;
  var $i377: i1;
  var $i378: i32;
  var $i379: i1;
  var $i380: i32;
  var $i381: i1;
  var $i383: i32;
  var $i384: i1;
  var $i385: i32;
  var $i386: i1;
  var $i387: i32;
  var $i388: i1;
  var $i390: i32;
  var $i391: i1;
  var $i392: i32;
  var $i393: i1;
  var $i394: i32;
  var $i395: i1;
  var $i397: i32;
  var $i398: i1;
  var $i399: i32;
  var $i400: i1;
  var $i401: i1;
  var $i402: i1;
  var $i403: i32;
  var $i404: i1;
  var $i405: i32;
  var $i406: i32;
  var $i407: i32;
  var $i408: i1;
  var $i410: i32;
  var $i411: i32;
  var $i412: i32;
  var $i413: i1;
  var $i414: i32;
  var $i415: i1;
  var $i416: i32;
  var $i417: i1;
  var $i419: i32;
  var $i420: i1;
  var $i421: i32;
  var $i422: i1;
  var $i423: i1;
  var $i424: i1;
  var $i425: i32;
  var $i426: i1;
  var $p427: ref;
  var $p428: ref;
  var $i429: i64;
  var $i431: i32;
  var $i432: i1;
  var $p433: ref;
  var $p434: ref;
  var $i436: i32;
  var $i437: i1;
  var $i438: i32;
  var $i439: i1;
  var $i440: i32;
  var $i441: i1;
  var vslice_dummy_var_78: ref;
  var vslice_dummy_var_79: ref;
  var vslice_dummy_var_80: ref;
  var vslice_dummy_var_81: ref;
  var vslice_dummy_var_82: i64;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i64;
  var vslice_dummy_var_85: i64;
  var vslice_dummy_var_86: i64;
  var vslice_dummy_var_87: i64;
  var vslice_dummy_var_88: i64;
  var vslice_dummy_var_89: i64;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i64;
  var vslice_dummy_var_92: i64;
  var vslice_dummy_var_93: i64;
  var vslice_dummy_var_94: i64;
  var vslice_dummy_var_95: i64;
  var vslice_dummy_var_96: i64;
  var vslice_dummy_var_97: i64;
  var vslice_dummy_var_98: i64;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i64;
  var vslice_dummy_var_101: i64;
  var vslice_dummy_var_102: i64;
  var vslice_dummy_var_103: i64;

  $bb0:
    call {:si_unique_call 1138} $initialize();
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $p4 := ldv_init_zalloc(1);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $p5 := ldv_init_zalloc(1416);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} $p7 := ldv_init_zalloc(48);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $p9 := ldv_init_zalloc(1);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} $p10 := ldv_init_zalloc(1416);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} $p12 := ldv_init_zalloc(48);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} $p14 := ldv_init_zalloc(48);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} $p16 := ldv_init_zalloc(1);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $p17 := ldv_init_zalloc(1416);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $p19 := ldv_init_zalloc(48);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} $p21 := ldv_init_zalloc(1);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} $p22 := ldv_init_zalloc(1416);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $p24 := ldv_init_zalloc(1);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $p25 := ldv_init_zalloc(1416);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} $p27 := ldv_init_zalloc(48);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} $p29 := ldv_init_zalloc(1);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $p30 := ldv_init_zalloc(1416);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $p32 := ldv_init_zalloc(48);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} $p34 := ldv_init_zalloc(1);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} $p35 := ldv_init_zalloc(48);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $p37 := ldv_init_zalloc(1416);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} $p39 := ldv_init_zalloc(8);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $p41 := ldv_init_zalloc(1);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} $p42 := ldv_init_zalloc(1);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} $p43 := ldv_init_zalloc(1416);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} $p45 := ldv_init_zalloc(48);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $p47 := ldv_init_zalloc(1416);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $p49 := ldv_init_zalloc(48);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $p51 := ldv_init_zalloc(1);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $p52 := ldv_init_zalloc(1416);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} $p54 := ldv_init_zalloc(1);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $p55 := ldv_init_zalloc(48);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $p57 := ldv_init_zalloc(1416);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} $p59 := ldv_init_zalloc(48);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $p61 := ldv_init_zalloc(1);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $p62 := ldv_init_zalloc(1416);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $p64 := ldv_init_zalloc(1);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} $p65 := ldv_init_zalloc(48);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} $p67 := ldv_init_zalloc(1416);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $p69 := ldv_init_zalloc(1);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $p70 := ldv_init_zalloc(48);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $p72 := ldv_init_zalloc(1416);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $p74 := ldv_init_zalloc(48);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $p76 := ldv_init_zalloc(1416);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $p78 := ldv_init_zalloc(1);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $p79 := ldv_init_zalloc(1);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} $p80 := ldv_init_zalloc(1);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} $p81 := ldv_init_zalloc(1416);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} $p83 := ldv_init_zalloc(1);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} $p84 := ldv_init_zalloc(48);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} ldv_initialize();
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p0);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} vslice_dummy_var_78 := ldv_memset($p86, 0, 4);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p1);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} vslice_dummy_var_79 := ldv_memset($p88, 0, 8);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p2);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} vslice_dummy_var_80 := ldv_memset($p90, 0, 8);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p3);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} vslice_dummy_var_81 := ldv_memset($p92, 0, 8);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $M.81 := 0;
    call {:si_unique_call 1199} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $M.82 := 0;
    call {:si_unique_call 1200} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(0);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $M.83 := 0;
    call {:si_unique_call 1201} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $M.84 := 0;
    call {:si_unique_call 1202} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $M.85 := 0;
    call {:si_unique_call 1203} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $M.86 := 0;
    call {:si_unique_call 1204} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $M.87 := 0;
    call {:si_unique_call 1205} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(0);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $M.88 := 0;
    call {:si_unique_call 1206} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1207} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $M.90 := 0;
    call {:si_unique_call 1208} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $M.91 := 0;
    call {:si_unique_call 1209} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $M.92 := 0;
    call {:si_unique_call 1210} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $M.93 := 0;
    call {:si_unique_call 1211} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $M.94 := 0;
    call {:si_unique_call 1212} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $M.95 := 0;
    call {:si_unique_call 1213} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $M.96 := 0;
    call {:si_unique_call 1214} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(0);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $M.97 := 0;
    call {:si_unique_call 1215} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $M.98 := 0;
    call {:si_unique_call 1216} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $M.99 := 0;
    call {:si_unique_call 1217} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $M.100 := 0;
    call {:si_unique_call 1218} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $M.101 := 0;
    call {:si_unique_call 1219} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(0);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $M.102 := 0;
    call {:si_unique_call 1220} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $M.103 := 0;
    call {:si_unique_call 1221} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $p151, $i152, $i153, $i154, $i155, $i156, $p157, $i158, $i159, $i160, $i161, $i162, $p163, $i164, $i165, $i166, $i167, $i168, $p169, $i170, $i171, $i172, $i173, $i174, $p175, $i176, $i177, $i178, $i179, $i180, $p181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i264, $i265, $i266, $i267, $i268, $i269, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i306, $i307, $i308, $i309, $i310, $i311, $i313, $i314, $i315, $i316, $i317, $i318, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $p330, $p331, $i333, $i334, $i335, $i336, $p337, $i338, $i340, $i341, $p342, $i343, $i344, $i346, $i347, $p348, $p349, $i350, $i351, $i352, $i353, $i354, $i355, $i356, $i357, $i358, $i359, $i360, $i362, $i363, $i364, $i365, $i366, $i367, $i369, $i370, $i371, $i372, $i373, $i374, $i376, $i377, $i378, $i379, $i380, $i381, $i383, $i384, $i385, $i386, $i387, $i388, $i390, $i391, $i392, $i393, $i394, $i395, $i397, $i398, $i399, $i400, $i401, $i402, $i403, $i404, $i405, $i406, $i407, $i408, $i410, $i411, $i412, $i413, $i414, $i415, $i416, $i417, $i419, $i420, $i421, $i422, $i423, $i424, $i425, $i426, $p427, $p428, $i429, $i431, $i432, $p433, $p434, $i436, $i437, $i438, $i439, $i440, $i441, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p6, $p8, $p9, $p11, $p13, $p15, $p16, $p18, $p20, $p21, $p23, $p24, $p26, $p28, $p29, $p31, $p33, $p34, $p36, $p38, $p40, $p41, $p42, $p44, $p46, $p48, $p50, $p51, $p53, $p54, $p56, $p58, $p60, $p61, $p63, $p64, $p66, $p68, $p69, $p71, $p73, $p75, $p77, $p78, $p79, $p80, $p82, $p83, $p85, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $p151, $i152, $i153, $i154, $i155, $i156, $p157, $i158, $i159, $i160, $i161, $i162, $p163, $i164, $i165, $i166, $i167, $i168, $p169, $i170, $i171, $i172, $i173, $i174, $p175, $i176, $i177, $i178, $i179, $i180, $p181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $i253, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i264, $i265, $i266, $i267, $i268, $i269, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i306, $i307, $i308, $i309, $i310, $i311, $i313, $i314, $i315, $i316, $i317, $i318, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $p330, $p331, $i333, $i334, $i335, $i336, $p337, $i338, $i340, $i341, $p342, $i343, $i344, $i346, $i347, $p348, $p349, $i350, $i351, $i352, $i353, $i354, $i355, $i356, $i357, $i358, $i359, $i360, $i362, $i363, $i364, $i365, $i366, $i367, $i369, $i370, $i371, $i372, $i373, $i374, $i376, $i377, $i378, $i379, $i380, $i381, $i383, $i384, $i385, $i386, $i387, $i388, $i390, $i391, $i392, $i393, $i394, $i395, $i397, $i398, $i399, $i400, $i401, $i402, $i403, $i404, $i405, $i406, $i407, $i408, $i410, $i411, $i412, $i413, $i414, $i415, $i416, $i417, $i419, $i420, $i421, $i422, $i423, $i424, $i425, $i426, $p427, $p428, $i429, $i431, $i432, $p433, $p434, $i436, $i437, $i438, $i439, $i440, $i441, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i94, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i94, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i94, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i94, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i94, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i94, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} ldv_stop();
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb62_dummy;

  $bb13:
    assume $i100 == 1;
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i436 := $M.103;
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i437 := $ne.i32($i436, 0);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb495, $bb496;

  $bb496:
    assume !($i437 == 1);
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb495:
    assume $i437 == 1;
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1445} $i438 := __VERIFIER_nondet_int();
    call {:si_unique_call 1446} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i438);
    call {:si_unique_call 1447} {:cexpr "tmp___69"} boogie_si_record_i32($i438);
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    $i439 := $eq.i32($i438, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb498, $bb499;

  $bb499:
    assume !($i439 == 1);
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} ldv_stop();
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb498:
    assume $i439 == 1;
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $i440 := $M.103;
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i441 := $eq.i32($i440, 1);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb500, $bb501;

  $bb501:
    assume !($i441 == 1);
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb500:
    assume $i441 == 1;
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} vslice_dummy_var_103 := mtd_bbtblocks_show($p82, $p85, $p83);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $M.103 := 1;
    call {:si_unique_call 1449} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb11:
    assume $i99 == 1;
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i419 := $M.102;
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i420 := $ne.i32($i419, 0);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb475, $bb476;

  $bb476:
    assume !($i420 == 1);
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb475:
    assume $i420 == 1;
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1437} $i421 := __VERIFIER_nondet_int();
    call {:si_unique_call 1438} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i421);
    call {:si_unique_call 1439} {:cexpr "tmp___68"} boogie_si_record_i32($i421);
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb477:
    assume {:verifier.code 0} true;
    $i422 := $slt.i32($i421, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb478, $bb479;

  $bb479:
    assume !($i422 == 1);
    assume {:verifier.code 0} true;
    $i423 := $eq.i32($i421, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480, $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    assume !($i423 == 1);
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    goto $bb492;

  $bb492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} ldv_stop();
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb480:
    assume $i423 == 1;
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i431 := $M.102;
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $i432 := $eq.i32($i431, 1);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb489, $bb490;

  $bb490:
    assume !($i432 == 1);
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb489:
    assume $i432 == 1;
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $p433 := $M.79;
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $p434 := $M.78;
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} vslice_dummy_var_102 := mtd_bitflip_threshold_show($p433, $p434, $p80);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 1443} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb478:
    assume $i422 == 1;
    assume {:verifier.code 0} true;
    $i424 := $eq.i32($i421, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb483, $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    assume !($i424 == 1);
    goto $bb482;

  $bb483:
    assume $i424 == 1;
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $i425 := $M.102;
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $i426 := $eq.i32($i425, 1);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb485, $bb486;

  $bb486:
    assume !($i426 == 1);
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb485:
    assume $i426 == 1;
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $p427 := $M.79;
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $p428 := $M.78;
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i429 := $load.i64($M.75, $p3);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} vslice_dummy_var_101 := mtd_bitflip_threshold_store($p427, $p428, $p79, $i429);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 1441} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb9:
    assume $i98 == 1;
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i412 := $M.101;
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i413 := $ne.i32($i412, 0);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb463, $bb464;

  $bb464:
    assume !($i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb463:
    assume $i413 == 1;
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1431} $i414 := __VERIFIER_nondet_int();
    call {:si_unique_call 1432} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i414);
    call {:si_unique_call 1433} {:cexpr "tmp___67"} boogie_si_record_i32($i414);
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    $i415 := $eq.i32($i414, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb466, $bb467;

  $bb467:
    assume !($i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} ldv_stop();
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb473:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb466:
    assume $i415 == 1;
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $i416 := $M.101;
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $i417 := $eq.i32($i416, 1);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb468, $bb469;

  $bb469:
    assume !($i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb468:
    assume $i417 == 1;
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} vslice_dummy_var_100 := mtd_flags_show($p77, $p75, $p78);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $M.101 := 1;
    call {:si_unique_call 1435} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb7:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i94, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i94, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i102 == 1);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i397 := $M.100;
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $i398 := $ne.i32($i397, 0);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb443, $bb444;

  $bb444:
    assume !($i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb443:
    assume $i398 == 1;
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1421} $i399 := __VERIFIER_nondet_int();
    call {:si_unique_call 1422} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i399);
    call {:si_unique_call 1423} {:cexpr "tmp___66"} boogie_si_record_i32($i399);
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    $i400 := $slt.i32($i399, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb446, $bb447;

  $bb447:
    assume !($i400 == 1);
    assume {:verifier.code 0} true;
    $i401 := $eq.i32($i399, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb448, $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    assume !($i401 == 1);
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} ldv_stop();
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb448:
    assume $i401 == 1;
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i407 := $M.100;
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i408 := $eq.i32($i407, 1);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb457, $bb458;

  $bb458:
    assume !($i408 == 1);
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb457:
    assume $i408 == 1;
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} vslice_dummy_var_99 := ldv_probe_4();
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $M.100 := 2;
    call {:si_unique_call 1428} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $i410 := $M.88;
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i411 := $add.i32($i410, 1);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $M.88 := $i411;
    call {:si_unique_call 1429} {:cexpr "ref_cnt"} boogie_si_record_i32($i411);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb446:
    assume $i400 == 1;
    assume {:verifier.code 0} true;
    $i402 := $eq.i32($i399, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb451, $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    assume !($i402 == 1);
    goto $bb450;

  $bb451:
    assume $i402 == 1;
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i403 := $M.100;
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i404 := $eq.i32($i403, 2);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  $bb454:
    assume !($i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb453:
    assume $i404 == 1;
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} mtd_release($p73);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $M.100 := 1;
    call {:si_unique_call 1425} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i405 := $M.88;
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i406 := $sub.i32($i405, 1);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $M.88 := $i406;
    call {:si_unique_call 1426} {:cexpr "ref_cnt"} boogie_si_record_i32($i406);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb18:
    assume $i102 == 1;
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $i390 := $M.99;
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i391 := $ne.i32($i390, 0);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb431, $bb432;

  $bb432:
    assume !($i391 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb431:
    assume $i391 == 1;
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1415} $i392 := __VERIFIER_nondet_int();
    call {:si_unique_call 1416} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i392);
    call {:si_unique_call 1417} {:cexpr "tmp___65"} boogie_si_record_i32($i392);
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    $i393 := $eq.i32($i392, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb434, $bb435;

  $bb435:
    assume !($i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} ldv_stop();
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb434:
    assume $i393 == 1;
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i394 := $M.99;
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $i395 := $eq.i32($i394, 1);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb436, $bb437;

  $bb437:
    assume !($i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb436:
    assume $i395 == 1;
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} vslice_dummy_var_98 := mtd_ecc_stats_corrected_show($p68, $p71, $p69);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $M.99 := 1;
    call {:si_unique_call 1419} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb16:
    assume $i101 == 1;
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i383 := $M.98;
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $i384 := $ne.i32($i383, 0);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb419, $bb420;

  $bb420:
    assume !($i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb419:
    assume $i384 == 1;
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1409} $i385 := __VERIFIER_nondet_int();
    call {:si_unique_call 1410} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i385);
    call {:si_unique_call 1411} {:cexpr "tmp___64"} boogie_si_record_i32($i385);
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    $i386 := $eq.i32($i385, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb422, $bb423;

  $bb423:
    assume !($i386 == 1);
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} ldv_stop();
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb422:
    assume $i386 == 1;
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i387 := $M.98;
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i388 := $eq.i32($i387, 1);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb424, $bb425;

  $bb425:
    assume !($i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb424:
    assume $i388 == 1;
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} vslice_dummy_var_97 := mtd_subpagesize_show($p63, $p66, $p64);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $M.98 := 1;
    call {:si_unique_call 1413} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb5:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i94, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i94, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i94, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i105 == 1);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i376 := $M.97;
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i377 := $ne.i32($i376, 0);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb407, $bb408;

  $bb408:
    assume !($i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb407:
    assume $i377 == 1;
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1403} $i378 := __VERIFIER_nondet_int();
    call {:si_unique_call 1404} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i378);
    call {:si_unique_call 1405} {:cexpr "tmp___63"} boogie_si_record_i32($i378);
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    $i379 := $eq.i32($i378, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb410, $bb411;

  $bb411:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} ldv_stop();
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb410:
    assume $i379 == 1;
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i380 := $M.97;
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i381 := $eq.i32($i380, 1);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb412, $bb413;

  $bb413:
    assume !($i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb412:
    assume $i381 == 1;
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} vslice_dummy_var_96 := mtd_oobsize_show($p58, $p60, $p61);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1407} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb24:
    assume $i105 == 1;
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $i369 := $M.96;
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $i370 := $ne.i32($i369, 0);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb395, $bb396;

  $bb396:
    assume !($i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb395:
    assume $i370 == 1;
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1397} $i371 := __VERIFIER_nondet_int();
    call {:si_unique_call 1398} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i371);
    call {:si_unique_call 1399} {:cexpr "tmp___62"} boogie_si_record_i32($i371);
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    $i372 := $eq.i32($i371, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb398, $bb399;

  $bb399:
    assume !($i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} ldv_stop();
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb398:
    assume $i372 == 1;
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $i373 := $M.96;
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $i374 := $eq.i32($i373, 1);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb400, $bb401;

  $bb401:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb400:
    assume $i374 == 1;
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} vslice_dummy_var_95 := mtd_type_show($p53, $p56, $p54);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1401} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb22:
    assume $i104 == 1;
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i362 := $M.95;
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $i363 := $ne.i32($i362, 0);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  $bb384:
    assume !($i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb383:
    assume $i363 == 1;
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1391} $i364 := __VERIFIER_nondet_int();
    call {:si_unique_call 1392} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i364);
    call {:si_unique_call 1393} {:cexpr "tmp___61"} boogie_si_record_i32($i364);
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    $i365 := $eq.i32($i364, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  $bb387:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} ldv_stop();
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb386:
    assume $i365 == 1;
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i366 := $M.95;
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $i367 := $eq.i32($i366, 1);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb388, $bb389;

  $bb389:
    assume !($i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb388:
    assume $i367 == 1;
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} vslice_dummy_var_94 := mtd_name_show($p48, $p50, $p51);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1395} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb20:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i94, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i106 == 1);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i355 := $M.94;
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i356 := $ne.i32($i355, 0);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  $bb372:
    assume !($i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb371:
    assume $i356 == 1;
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1385} $i357 := __VERIFIER_nondet_int();
    call {:si_unique_call 1386} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i357);
    call {:si_unique_call 1387} {:cexpr "tmp___60"} boogie_si_record_i32($i357);
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    $i358 := $eq.i32($i357, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb374, $bb375;

  $bb375:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} ldv_stop();
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb374:
    assume $i358 == 1;
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i359 := $M.94;
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i360 := $eq.i32($i359, 1);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  $bb377:
    assume !($i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb376:
    assume $i360 == 1;
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} vslice_dummy_var_93 := mtd_ecc_step_size_show($p44, $p46, $p42);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1389} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb26:
    assume $i106 == 1;
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i320 := $M.93;
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i321 := $ne.i32($i320, 0);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  $bb339:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb338:
    assume $i321 == 1;
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1370} $i322 := __VERIFIER_nondet_int();
    call {:si_unique_call 1371} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i322);
    call {:si_unique_call 1372} {:cexpr "tmp___59"} boogie_si_record_i32($i322);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    $i323 := $slt.i32($i322, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  $bb342:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    $i324 := $slt.i32($i322, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb343, $bb344;

  $bb344:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    $i325 := $eq.i32($i322, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb345, $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    assume !($i325 == 1);
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} ldv_stop();
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb345:
    assume $i325 == 1;
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $i346 := $M.93;
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i347 := $eq.i32($i346, 1);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  $bb363:
    assume !($i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb362:
    assume $i347 == 1;
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $p348 := $M.76;
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $p349 := $M.77;
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} $i350 := mtd_proc_open($p348, $p349);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $M.124 := $i350;
    call {:si_unique_call 1381} {:cexpr "ldv_retval_21"} boogie_si_record_i32($i350);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $i351 := $M.124;
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i352 := $eq.i32($i351, 0);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  $bb365:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb364:
    assume $i352 == 1;
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $M.93 := 2;
    call {:si_unique_call 1382} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i353 := $M.88;
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i354 := $add.i32($i353, 1);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $M.88 := $i354;
    call {:si_unique_call 1383} {:cexpr "ref_cnt"} boogie_si_record_i32($i354);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb343:
    assume $i324 == 1;
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i340 := $M.93;
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $i341 := $eq.i32($i340, 2);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  $bb360:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb359:
    assume $i341 == 1;
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $p342 := $M.77;
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $i343 := $load.i64($M.75, $p2);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i344 := $load.i32($M.75, $p0);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} vslice_dummy_var_92 := seq_lseek($p342, $i343, $i344);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $M.93 := 2;
    call {:si_unique_call 1379} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb341:
    assume $i323 == 1;
    assume {:verifier.code 0} true;
    $i326 := $slt.i32($i322, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  $bb349:
    assume !($i326 == 1);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i335 := $M.93;
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i336 := $eq.i32($i335, 2);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb356:
    assume $i336 == 1;
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $p337 := $M.77;
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i338 := $load.i64($M.75, $p1);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} vslice_dummy_var_91 := seq_read($p337, $p41, $i338, $p40);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $M.93 := 2;
    call {:si_unique_call 1377} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb348:
    assume $i326 == 1;
    assume {:verifier.code 0} true;
    $i327 := $eq.i32($i322, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    assume !($i327 == 1);
    goto $bb347;

  $bb350:
    assume $i327 == 1;
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $i328 := $M.93;
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i329 := $eq.i32($i328, 2);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  $bb353:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb352:
    assume $i329 == 1;
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $p330 := $M.76;
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $p331 := $M.77;
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} vslice_dummy_var_90 := single_release($p330, $p331);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 1374} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $i333 := $M.88;
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i334 := $sub.i32($i333, 1);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $M.88 := $i334;
    call {:si_unique_call 1375} {:cexpr "ref_cnt"} boogie_si_record_i32($i334);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb3:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i94, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i94, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i94, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i94, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i110 == 1);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i313 := $M.92;
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i314 := $ne.i32($i313, 0);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb327:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb326:
    assume $i314 == 1;
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1364} $i315 := __VERIFIER_nondet_int();
    call {:si_unique_call 1365} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i315);
    call {:si_unique_call 1366} {:cexpr "tmp___58"} boogie_si_record_i32($i315);
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    $i316 := $eq.i32($i315, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  $bb330:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} ldv_stop();
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb329:
    assume $i316 == 1;
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i317 := $M.92;
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i318 := $eq.i32($i317, 1);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  $bb332:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb331:
    assume $i318 == 1;
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} vslice_dummy_var_89 := mtd_badblocks_show($p38, $p36, $p34);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1368} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb34:
    assume $i110 == 1;
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i306 := $M.91;
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i307 := $ne.i32($i306, 0);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb314:
    assume $i307 == 1;
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1358} $i308 := __VERIFIER_nondet_int();
    call {:si_unique_call 1359} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i308);
    call {:si_unique_call 1360} {:cexpr "tmp___57"} boogie_si_record_i32($i308);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    $i309 := $eq.i32($i308, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} ldv_stop();
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb317:
    assume $i309 == 1;
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i310 := $M.91;
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i310, 1);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb319:
    assume $i311 == 1;
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} vslice_dummy_var_88 := mtd_numeraseregions_show($p31, $p33, $p29);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1362} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb32:
    assume $i109 == 1;
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i299 := $M.90;
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i300 := $ne.i32($i299, 0);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb302:
    assume $i300 == 1;
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1352} $i301 := __VERIFIER_nondet_int();
    call {:si_unique_call 1353} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i301);
    call {:si_unique_call 1354} {:cexpr "tmp___56"} boogie_si_record_i32($i301);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i301, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} ldv_stop();
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb305:
    assume $i302 == 1;
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i303 := $M.90;
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i304 := $eq.i32($i303, 1);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb307:
    assume $i304 == 1;
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} vslice_dummy_var_87 := mtd_writesize_show($p26, $p28, $p24);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1356} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb30:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    $i111 := $slt.i32($i94, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i112 := $slt.i32($i94, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i112 == 1);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $i282 := $M.89;
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i283 := $ne.i32($i282, 0);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb272:
    assume $i283 == 1;
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1316} $i284 := __VERIFIER_nondet_int();
    call {:si_unique_call 1317} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i284);
    call {:si_unique_call 1318} {:cexpr "tmp___55"} boogie_si_record_i32($i284);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    $i285 := $slt.i32($i284, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    $i286 := $eq.i32($i284, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    assume !($i286 == 1);
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} ldv_stop();
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb277:
    assume $i286 == 1;
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i292 := $M.89;
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i293 := $eq.i32($i292, 1);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb290:
    assume $i293 == 1;
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $i294 := init_mtd();
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $M.123 := $i294;
    call {:si_unique_call 1323} {:cexpr "ldv_retval_20"} boogie_si_record_i32($i294);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i295 := $M.123;
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i296 := $ne.i32($i295, 0);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    $i297 := $M.123;
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $i298 := $eq.i32($i297, 0);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb295:
    assume $i298 == 1;
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $M.89 := 2;
    call {:si_unique_call 1325} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $M.103 := 1;
    call {:si_unique_call 1326} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 1327} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} ldv_initialize_device_attribute_10();
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $M.101 := 1;
    call {:si_unique_call 1329} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $M.100 := 1;
    call {:si_unique_call 1330} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $M.99 := 1;
    call {:si_unique_call 1331} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $M.98 := 1;
    call {:si_unique_call 1332} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1333} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1334} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1335} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1336} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 1337} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} ldv_file_operations_3();
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1339} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1340} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1341} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1342} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1343} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} ldv_file_operations_1();
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1345} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1346} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1347} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1348} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} ldv_dev_pm_ops_21();
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1350} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb292:
    assume $i296 == 1;
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $M.89 := 3;
    call {:si_unique_call 1324} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} ldv_check_final_state();
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb275:
    assume $i285 == 1;
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i284, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    assume !($i287 == 1);
    goto $bb279;

  $bb280:
    assume $i287 == 1;
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $i288 := $M.89;
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i289 := $eq.i32($i288, 2);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    assume !($i289 == 1);
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb282:
    assume $i289 == 1;
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $i290 := $M.88;
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $i291 := $eq.i32($i290, 0);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb285, $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    assume !($i291 == 1);
    goto $bb284;

  $bb285:
    assume $i291 == 1;
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} cleanup_mtd();
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $M.89 := 3;
    call {:si_unique_call 1320} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb38:
    assume $i112 == 1;
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i275 := $M.87;
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i276 := $ne.i32($i275, 0);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb260:
    assume $i276 == 1;
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1310} $i277 := __VERIFIER_nondet_int();
    call {:si_unique_call 1311} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i277);
    call {:si_unique_call 1312} {:cexpr "tmp___54"} boogie_si_record_i32($i277);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i277, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} ldv_stop();
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb263:
    assume $i278 == 1;
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i279 := $M.87;
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i280 := $eq.i32($i279, 1);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  $bb266:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb265:
    assume $i280 == 1;
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} vslice_dummy_var_86 := mtd_size_show($p23, $p20, $p21);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1314} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb36:
    assume $i111 == 1;
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i273 := $M.86;
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $i274 := $ne.i32($i273, 0);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb257:
    assume $i274 == 1;
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} ldv_main_exported_1();
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    goto $bb259;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i107 == 1;
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i94, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    $i114 := $slt.i32($i94, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i94, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i115 == 1);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i271 := $M.85;
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i272 := $ne.i32($i271, 0);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb254:
    assume $i272 == 1;
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} ldv_main_exported_2();
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb44:
    assume $i115 == 1;
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i264 := $M.84;
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i265 := $ne.i32($i264, 0);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb242:
    assume $i265 == 1;
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1302} $i266 := __VERIFIER_nondet_int();
    call {:si_unique_call 1303} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i266);
    call {:si_unique_call 1304} {:cexpr "tmp___53"} boogie_si_record_i32($i266);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i266, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} ldv_stop();
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb245:
    assume $i267 == 1;
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $i268 := $M.84;
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i268, 1);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb247:
    assume $i269 == 1;
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} vslice_dummy_var_85 := mtd_erasesize_show($p18, $p15, $p16);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1306} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb42:
    assume $i114 == 1;
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i257 := $M.83;
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $i258 := $ne.i32($i257, 0);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb230:
    assume $i258 == 1;
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1296} $i259 := __VERIFIER_nondet_int();
    call {:si_unique_call 1297} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i259);
    call {:si_unique_call 1298} {:cexpr "tmp___52"} boogie_si_record_i32($i259);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} ldv_stop();
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb233:
    assume $i260 == 1;
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $i261 := $M.83;
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $i262 := $eq.i32($i261, 1);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb235:
    assume $i262 == 1;
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} vslice_dummy_var_84 := mtd_ecc_stats_errors_show($p11, $p13, $p9);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1300} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb40:
    assume $i113 == 1;
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i94, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i116 == 1);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i125 := $M.82;
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb63:
    assume $i126 == 1;
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1231} $i127 := __VERIFIER_nondet_int();
    call {:si_unique_call 1232} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i127);
    call {:si_unique_call 1233} {:cexpr "tmp___51"} boogie_si_record_i32($i127);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i127, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i127, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    $i130 := $slt.i32($i127, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i127, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    $i132 := $slt.i32($i127, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i127, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i133 == 1);
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} ldv_stop();
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb76:
    assume $i133 == 1;
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i252 := $M.82;
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i252, 15);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb224:
    assume $i253 == 1;
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} vslice_dummy_var_83 := ldv_complete_21();
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1293} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i255 := $M.88;
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i256 := $sub.i32($i255, 1);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $M.88 := $i256;
    call {:si_unique_call 1294} {:cexpr "ref_cnt"} boogie_si_record_i32($i256);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb74:
    assume $i132 == 1;
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i247 := $M.82;
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i247, 5);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb218:
    assume $i248 == 1;
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $i249 := ldv_suspend_noirq_21();
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $M.122 := $i249;
    call {:si_unique_call 1290} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i249);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i250 := $M.122;
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i250, 0);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb220:
    assume $i251 == 1;
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $M.82 := 11;
    call {:si_unique_call 1291} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(11);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb72:
    assume $i131 == 1;
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i242 := $M.82;
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i242, 6);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb212:
    assume $i243 == 1;
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $i244 := ldv_restore_noirq_21();
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $M.121 := $i244;
    call {:si_unique_call 1287} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i244);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i245 := $M.121;
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i245, 0);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb214:
    assume $i246 == 1;
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $M.82 := 12;
    call {:si_unique_call 1288} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(12);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb70:
    assume $i130 == 1;
    assume {:verifier.code 0} true;
    $i134 := $slt.i32($i127, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i134 == 1);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i237 := $M.82;
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 3);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb206:
    assume $i238 == 1;
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} $i239 := ldv_poweroff_late_21();
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $M.120 := $i239;
    call {:si_unique_call 1284} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i239);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $i240 := $M.120;
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i240, 0);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb208:
    assume $i241 == 1;
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $M.82 := 7;
    call {:si_unique_call 1285} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(7);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb79:
    assume $i134 == 1;
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i232 := $M.82;
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i233 := $eq.i32($i232, 3);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb200:
    assume $i233 == 1;
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $i234 := ldv_poweroff_noirq_21();
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $M.119 := $i234;
    call {:si_unique_call 1281} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i234);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i235 := $M.119;
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i235, 0);
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb202:
    assume $i236 == 1;
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $M.82 := 6;
    call {:si_unique_call 1282} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(6);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb68:
    assume $i129 == 1;
    assume {:verifier.code 0} true;
    $i135 := $slt.i32($i127, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    $i136 := $slt.i32($i127, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    $i137 := $slt.i32($i127, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i137 == 1);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i227 := $M.82;
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 8);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb194:
    assume $i228 == 1;
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} $i229 := ldv_thaw_noirq_21();
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $M.118 := $i229;
    call {:si_unique_call 1278} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i229);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i230 := $M.118;
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i230, 0);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb196:
    assume $i231 == 1;
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $M.82 := 13;
    call {:si_unique_call 1279} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(13);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb85:
    assume $i137 == 1;
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i222 := $M.82;
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 4);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb188:
    assume $i223 == 1;
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $i224 := ldv_freeze_late_21();
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $M.117 := $i224;
    call {:si_unique_call 1275} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i224);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i225 := $M.117;
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i225, 0);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb190:
    assume $i226 == 1;
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $M.82 := 9;
    call {:si_unique_call 1276} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(9);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb83:
    assume $i136 == 1;
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i215 := $M.82;
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 1);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb182:
    assume $i216 == 1;
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} $i217 := ldv_prepare_21();
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $M.116 := $i217;
    call {:si_unique_call 1271} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i217);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $i218 := $M.116;
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 0);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb184:
    assume $i219 == 1;
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1272} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(2);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i220 := $M.88;
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i221 := $add.i32($i220, 1);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $M.88 := $i221;
    call {:si_unique_call 1273} {:cexpr "ref_cnt"} boogie_si_record_i32($i221);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb81:
    assume $i135 == 1;
    assume {:verifier.code 0} true;
    $i138 := $slt.i32($i127, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i138 == 1);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i210 := $M.82;
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 4);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb176:
    assume $i211 == 1;
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $i212 := ldv_freeze_noirq_21();
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $M.115 := $i212;
    call {:si_unique_call 1268} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i212);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $i213 := $M.115;
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i214 := $eq.i32($i213, 0);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb178:
    assume $i214 == 1;
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $M.82 := 8;
    call {:si_unique_call 1269} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(8);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb87:
    assume $i138 == 1;
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $i205 := $M.82;
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i205, 11);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb170:
    assume $i206 == 1;
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $i207 := ldv_resume_noirq_21();
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $M.114 := $i207;
    call {:si_unique_call 1265} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i207);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i208 := $M.114;
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i208, 0);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb172:
    assume $i209 == 1;
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $M.82 := 14;
    call {:si_unique_call 1266} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(14);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb66:
    assume $i128 == 1;
    assume {:verifier.code 0} true;
    $i139 := $slt.i32($i127, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    $i140 := $slt.i32($i127, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    $i141 := $slt.i32($i127, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    $i142 := $slt.i32($i127, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i142 == 1);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i200 := $M.82;
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i200, 9);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb164:
    assume $i201 == 1;
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $i202 := ldv_thaw_early_21();
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $M.113 := $i202;
    call {:si_unique_call 1262} {:cexpr "ldv_retval_9"} boogie_si_record_i32($i202);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i203 := $M.113;
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 0);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb166:
    assume $i204 == 1;
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $M.82 := 13;
    call {:si_unique_call 1263} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(13);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb95:
    assume $i142 == 1;
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i195 := $M.82;
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i195, 10);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb158:
    assume $i196 == 1;
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} $i197 := ldv_resume_early_21();
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $M.112 := $i197;
    call {:si_unique_call 1259} {:cexpr "ldv_retval_10"} boogie_si_record_i32($i197);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i198 := $M.112;
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, 0);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb160:
    assume $i199 == 1;
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $M.82 := 14;
    call {:si_unique_call 1260} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(14);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb93:
    assume $i141 == 1;
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i190 := $M.82;
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 7);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb152:
    assume $i191 == 1;
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $i192 := ldv_restore_early_21();
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $M.111 := $i192;
    call {:si_unique_call 1256} {:cexpr "ldv_retval_11"} boogie_si_record_i32($i192);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i193 := $M.111;
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i193, 0);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb154:
    assume $i194 == 1;
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $M.82 := 12;
    call {:si_unique_call 1257} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(12);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb91:
    assume $i140 == 1;
    assume {:verifier.code 0} true;
    $i143 := $slt.i32($i127, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i143 == 1);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $i185 := $M.82;
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 5);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb146:
    assume $i186 == 1;
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} $i187 := ldv_suspend_late_21();
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $M.110 := $i187;
    call {:si_unique_call 1253} {:cexpr "ldv_retval_12"} boogie_si_record_i32($i187);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $i188 := $M.110;
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i188, 0);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb148:
    assume $i189 == 1;
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $M.82 := 10;
    call {:si_unique_call 1254} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(10);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb97:
    assume $i143 == 1;
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i179 := $M.82;
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 14);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb140:
    assume $i180 == 1;
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $p181 := $M.80;
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $i182 := mtd_cls_resume($p181);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $M.109 := $i182;
    call {:si_unique_call 1250} {:cexpr "ldv_retval_13"} boogie_si_record_i32($i182);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i183 := $M.109;
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, 0);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb142:
    assume $i184 == 1;
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $M.82 := 15;
    call {:si_unique_call 1251} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(15);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    goto $bb144;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb89:
    assume $i139 == 1;
    assume {:verifier.code 0} true;
    $i144 := $slt.i32($i127, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    $i145 := $slt.i32($i127, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    $i146 := $slt.i32($i127, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i146 == 1);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i173 := $M.82;
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 2);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb134:
    assume $i174 == 1;
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $p175 := $M.80;
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} $i176 := mtd_cls_suspend($p175);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $M.108 := $i176;
    call {:si_unique_call 1247} {:cexpr "ldv_retval_14"} boogie_si_record_i32($i176);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $i177 := $M.108;
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, 0);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb136:
    assume $i178 == 1;
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $M.82 := 5;
    call {:si_unique_call 1248} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(5);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    goto $bb138;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb103:
    assume $i146 == 1;
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $i167 := $M.82;
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 2);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb128:
    assume $i168 == 1;
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $p169 := $M.80;
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $i170 := mtd_cls_suspend($p169);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $M.107 := $i170;
    call {:si_unique_call 1244} {:cexpr "ldv_retval_15"} boogie_si_record_i32($i170);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i171 := $M.107;
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i171, 0);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb130:
    assume $i172 == 1;
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $M.82 := 4;
    call {:si_unique_call 1245} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(4);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    goto $bb132;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb101:
    assume $i145 == 1;
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i161 := $M.82;
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 2);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb122:
    assume $i162 == 1;
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $p163 := $M.80;
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} $i164 := mtd_cls_suspend($p163);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $M.106 := $i164;
    call {:si_unique_call 1241} {:cexpr "ldv_retval_16"} boogie_si_record_i32($i164);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i165 := $M.106;
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 0);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb124:
    assume $i166 == 1;
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $M.82 := 3;
    call {:si_unique_call 1242} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(3);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    goto $bb126;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb99:
    assume $i144 == 1;
    assume {:verifier.code 0} true;
    $i147 := $slt.i32($i127, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i147 == 1);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i155 := $M.82;
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 13);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb116:
    assume $i156 == 1;
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $p157 := $M.80;
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} $i158 := mtd_cls_resume($p157);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $M.105 := $i158;
    call {:si_unique_call 1238} {:cexpr "ldv_retval_17"} boogie_si_record_i32($i158);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $i159 := $M.105;
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i159, 0);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb118:
    assume $i160 == 1;
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $M.82 := 15;
    call {:si_unique_call 1239} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(15);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    goto $bb120;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb105:
    assume $i147 == 1;
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i127, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i148 == 1);
    goto $bb78;

  $bb107:
    assume $i148 == 1;
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $i149 := $M.82;
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 12);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb109:
    assume $i150 == 1;
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p151 := $M.80;
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} $i152 := mtd_cls_resume($p151);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $M.104 := $i152;
    call {:si_unique_call 1235} {:cexpr "ldv_retval_18"} boogie_si_record_i32($i152);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $i153 := $M.104;
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 0);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb111:
    assume $i154 == 1;
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $M.82 := 15;
    call {:si_unique_call 1236} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(15);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    goto $bb113;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i116 == 1;
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i94, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb15;

  $bb48:
    assume $i117 == 1;
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i118 := $M.81;
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb50:
    assume $i119 == 1;
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1225} $i120 := __VERIFIER_nondet_int();
    call {:si_unique_call 1226} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i120);
    call {:si_unique_call 1227} {:cexpr "tmp___50"} boogie_si_record_i32($i120);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} ldv_stop();
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb53:
    assume $i121 == 1;
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $i122 := $M.81;
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 1);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb55:
    assume $i123 == 1;
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} vslice_dummy_var_82 := mtd_ecc_strength_show($p6, $p8, $p4);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1229} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb62_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1222} $i94 := __VERIFIER_nondet_int();
    call {:si_unique_call 1223} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i94);
    call {:si_unique_call 1224} {:cexpr "tmp___49"} boogie_si_record_i32($i94);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 583040);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 584072);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_suspend_late_21: ref;

axiom ldv_suspend_late_21 == $sub.ref(0, 585104);

procedure ldv_suspend_late_21() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_late_21() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1452} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1453} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_early_21: ref;

axiom ldv_restore_early_21 == $sub.ref(0, 586136);

procedure ldv_restore_early_21() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_early_21() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1454} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1455} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_early_21: ref;

axiom ldv_resume_early_21 == $sub.ref(0, 587168);

procedure ldv_resume_early_21() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_early_21() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1456} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1457} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_early_21: ref;

axiom ldv_thaw_early_21 == $sub.ref(0, 588200);

procedure ldv_thaw_early_21() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_early_21() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1458} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1459} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_noirq_21: ref;

axiom ldv_resume_noirq_21 == $sub.ref(0, 589232);

procedure ldv_resume_noirq_21() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_noirq_21() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1460} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1461} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_noirq_21: ref;

axiom ldv_freeze_noirq_21 == $sub.ref(0, 590264);

procedure ldv_freeze_noirq_21() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_noirq_21() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1462} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1463} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_prepare_21: ref;

axiom ldv_prepare_21 == $sub.ref(0, 591296);

procedure ldv_prepare_21() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_prepare_21() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1464} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1465} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_late_21: ref;

axiom ldv_freeze_late_21 == $sub.ref(0, 592328);

procedure ldv_freeze_late_21() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_late_21() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1466} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1467} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_noirq_21: ref;

axiom ldv_thaw_noirq_21 == $sub.ref(0, 593360);

procedure ldv_thaw_noirq_21() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_noirq_21() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1468} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1469} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_noirq_21: ref;

axiom ldv_poweroff_noirq_21 == $sub.ref(0, 594392);

procedure ldv_poweroff_noirq_21() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_noirq_21() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1470} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1471} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_late_21: ref;

axiom ldv_poweroff_late_21 == $sub.ref(0, 595424);

procedure ldv_poweroff_late_21() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_late_21() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1472} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1473} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_noirq_21: ref;

axiom ldv_restore_noirq_21 == $sub.ref(0, 596456);

procedure ldv_restore_noirq_21() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_noirq_21() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1474} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1475} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_suspend_noirq_21: ref;

axiom ldv_suspend_noirq_21 == $sub.ref(0, 597488);

procedure ldv_suspend_noirq_21() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_noirq_21() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1476} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1477} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_complete_21: ref;

axiom ldv_complete_21 == $sub.ref(0, 598520);

procedure ldv_complete_21() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_complete_21() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1478} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1479} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_main_exported_2: ref;

axiom ldv_main_exported_2 == $sub.ref(0, 599552);

procedure ldv_main_exported_2();
  free requires assertsPassed;
  modifies $M.85, $M.1, $CurrAddr;



implementation ldv_main_exported_2()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_104: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} $p2 := ldv_init_zalloc(1);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} $p3 := ldv_init_zalloc(48);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1483} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1484} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1485} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} ldv_stop();
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $i7 := $M.85;
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} vslice_dummy_var_104 := mtd_partition_offset_show($p1, $p4, $p2);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1487} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_main_exported_1: ref;

axiom ldv_main_exported_1 == $sub.ref(0, 600584);

procedure ldv_main_exported_1();
  free requires assertsPassed;
  modifies $M.75, $M.22, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.20, $M.15, $M.1, $M.86, $M.0, $M.127, $M.88, $M.71, $M.28, $M.29, $M.30, $M.31, $M.32, $M.72, $M.73, $CurrAddr, $M.10, $M.33, $M.34, assertsPassed;



implementation ldv_main_exported_1()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i64;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i64;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i64;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i64;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i90: i64;
  var $i91: i32;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i64;
  var vslice_dummy_var_105: ref;
  var vslice_dummy_var_106: ref;
  var vslice_dummy_var_107: ref;
  var vslice_dummy_var_108: ref;
  var vslice_dummy_var_109: ref;
  var vslice_dummy_var_110: ref;
  var vslice_dummy_var_111: ref;
  var vslice_dummy_var_112: ref;
  var vslice_dummy_var_113: i64;
  var vslice_dummy_var_114: i64;
  var vslice_dummy_var_115: i64;
  var vslice_dummy_var_116: i64;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i64;
  var vslice_dummy_var_121: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} $p8 := ldv_init_zalloc(8);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} $p10 := ldv_init_zalloc(8);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} $p12 := ldv_init_zalloc(1);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $p13 := ldv_init_zalloc(184);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} $p15 := ldv_init_zalloc(1);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p0);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} vslice_dummy_var_105 := ldv_memset($p16, 0, 4);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} vslice_dummy_var_106 := ldv_memset($p18, 0, 8);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p2);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} vslice_dummy_var_107 := ldv_memset($p20, 0, 4);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} vslice_dummy_var_108 := ldv_memset($p22, 0, 8);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p4);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} vslice_dummy_var_109 := ldv_memset($p24, 0, 8);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p5);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} vslice_dummy_var_110 := ldv_memset($p26, 0, 8);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p6);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} vslice_dummy_var_111 := ldv_memset($p28, 0, 8);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p7);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} vslice_dummy_var_112 := ldv_memset($p30, 0, 4);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1510} $i32 := __VERIFIER_nondet_int();
    call {:si_unique_call 1511} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i32);
    call {:si_unique_call 1512} {:cexpr "tmp___4"} boogie_si_record_i32($i32);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i32, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i32, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i32, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} ldv_stop();
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i93 := $M.86;
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 2);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb52:
    assume $i94 == 1;
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $p95 := $M.125;
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.75, $p0);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $i97 := $load.i64($M.75, $p4);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} vslice_dummy_var_121 := mtdchar_unlocked_ioctl($p95, $i96, $i97);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $M.86 := 2;
    call {:si_unique_call 1535} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i35 == 1;
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i87 := $M.86;
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 2);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb49:
    assume $i88 == 1;
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $p89 := $M.125;
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.75, $p3);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.75, $p2);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} vslice_dummy_var_120 := mtdchar_lseek($p89, $i90, $i91);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $M.86 := 2;
    call {:si_unique_call 1533} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb4:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i32, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i80 := $M.86;
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 2);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb46:
    assume $i81 == 1;
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $p82 := $M.126;
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $p83 := $M.125;
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} vslice_dummy_var_119 := mtdchar_close($p82, $p83);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1530} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $i85 := $M.88;
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32($i85, 1);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $M.88 := $i86;
    call {:si_unique_call 1531} {:cexpr "ref_cnt"} boogie_si_record_i32($i86);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    goto $bb48;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i72 := $M.86;
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 2);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i76 := $M.86;
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 1);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb43:
    assume $i77 == 1;
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $p78 := $M.125;
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} vslice_dummy_var_118 := mtdchar_mmap($p78, $p14);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1528} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i73 == 1;
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $p74 := $M.125;
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} vslice_dummy_var_117 := mtdchar_mmap($p74, $p14);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $M.86 := 2;
    call {:si_unique_call 1526} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb2:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i32, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i32, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i39 == 1);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i63 := $M.86;
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 1);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb34:
    assume $i64 == 1;
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $p65 := $M.126;
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $p66 := $M.125;
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} $i67 := mtdchar_open($p65, $p66);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $M.127 := $i67;
    call {:si_unique_call 1522} {:cexpr "ldv_retval_19"} boogie_si_record_i32($i67);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i68 := $M.127;
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i69 == 1;
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $M.86 := 2;
    call {:si_unique_call 1523} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i70 := $M.88;
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i70, 1);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $M.88 := $i71;
    call {:si_unique_call 1524} {:cexpr "ref_cnt"} boogie_si_record_i32($i71);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i39 == 1;
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i57 := $M.86;
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 2);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb31:
    assume $i58 == 1;
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $p59 := $M.125;
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.75, $p7);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.75, $p1);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} vslice_dummy_var_116 := mtdchar_compat_ioctl($p59, $i60, $i61);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $M.86 := 2;
    call {:si_unique_call 1520} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i32, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i52 := $M.86;
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 2);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb28:
    assume $i53 == 1;
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $p54 := $M.125;
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.75, $p6);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} vslice_dummy_var_115 := mtdchar_read($p54, $p12, $i55, $p9);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $M.86 := 2;
    call {:si_unique_call 1518} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i32, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb10;

  $bb19:
    assume $i41 == 1;
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i42 := $M.86;
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 2);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i47 := $M.86;
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 1);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i48 == 1;
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $p49 := $M.125;
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.75, $p5);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} vslice_dummy_var_114 := mtdchar_write($p49, $p15, $i50, $p11);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1516} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i43 == 1;
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $p44 := $M.125;
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.75, $p5);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} vslice_dummy_var_113 := mtdchar_write($p44, $p15, $i45, $p11);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $M.86 := 2;
    call {:si_unique_call 1514} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_274:
    assume !assertsPassed;
    return;
}



const cleanup_mtd: ref;

axiom cleanup_mtd == $sub.ref(0, 601616);

procedure cleanup_mtd();
  free requires assertsPassed;



implementation cleanup_mtd()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} cleanup_mtdchar();
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $p0 := $M.128;
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} class_unregister(mtd_class);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} bdi_destroy(mtd_bdi);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} remove_proc_entry(.str.6, $0.ref);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const init_mtd: ref;

axiom init_mtd == $sub.ref(0, 602648);

procedure init_mtd() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.128, $CurrAddr;



implementation init_mtd() returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i6: i32;
  var $i3: i32;
  var $i10: i32;
  var vslice_dummy_var_122: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} $i1 := __class_register(mtd_class, $p0);
    call {:si_unique_call 1543} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} $i4 := mtd_bdi_init(mtd_bdi, .str.6);
    call {:si_unique_call 1546} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} $p7 := proc_create(.str.6, 0, $0.ref, mtd_proc_ops);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $M.128 := $p7;
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} $i8 := init_mtdchar();
    call {:si_unique_call 1550} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p11 := $M.128;
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i6 := $i8;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} class_unregister(mtd_class);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $i3 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} vslice_dummy_var_122 := printk.ref.i32(.str.51, $i3);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i10 := $i3;
    goto $bb13;

  $bb14:
    assume $i13 == 1;
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} remove_proc_entry(.str.6, $0.ref);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const ldv_file_operations_1: ref;

axiom ldv_file_operations_1 == $sub.ref(0, 603680);

procedure ldv_file_operations_1();
  free requires assertsPassed;
  modifies $M.126, $M.125, $M.1, $CurrAddr;



implementation ldv_file_operations_1()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $M.126 := $p0;
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $M.125 := $p2;
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    return;
}



const ldv_probe_4: ref;

axiom ldv_probe_4 == $sub.ref(0, 604712);

procedure ldv_probe_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1554} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1555} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 605744);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $i0 := $M.10;
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} ldv_error();
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_295:
    assume !assertsPassed;
    return;
}



const __class_register: ref;

axiom __class_register == $sub.ref(0, 606776);

procedure __class_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __class_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1557} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1558} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mtd_bdi_init: ref;

axiom mtd_bdi_init == $sub.ref(0, 607808);

procedure mtd_bdi_init($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mtd_bdi_init($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} $i2 := bdi_init($p0);
    call {:si_unique_call 1560} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} bdi_destroy($p0);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} $i4 := bdi_register.ref.ref.ref.ref($p0, $0.ref, .str.28, $p1);
    call {:si_unique_call 1562} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const proc_create: ref;

axiom proc_create == $sub.ref(0, 608840);

procedure proc_create($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_create($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $i4: i32;
  var $i5: i16;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} {:cexpr "proc_create:arg:mode"} boogie_si_record_i16($i1);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i1);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} $p6 := proc_create_data($p0, $i5, $p2, $p3, $0.ref);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const init_mtdchar: ref;

axiom init_mtdchar == $sub.ref(0, 609872);

procedure init_mtdchar() returns ($r: i32);
  free requires assertsPassed;



implementation init_mtdchar() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var vslice_dummy_var_123: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} $i0 := __register_chrdev(90, 0, 1048576, .str.6, mtd_fops);
    call {:si_unique_call 1567} {:cexpr "ret"} boogie_si_record_i32($i0);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 0);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} vslice_dummy_var_123 := printk.ref.i32(.str.30, 90);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const remove_proc_entry: ref;

axiom remove_proc_entry == $sub.ref(0, 610904);

procedure remove_proc_entry($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_proc_entry($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    return;
}



const class_unregister: ref;

axiom class_unregister == $sub.ref(0, 611936);

procedure class_unregister($p0: ref);
  free requires assertsPassed;



implementation class_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    return;
}



const __register_chrdev: ref;

axiom __register_chrdev == $sub.ref(0, 612968);

procedure __register_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __register_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1569} {:cexpr "__register_chrdev:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1570} {:cexpr "__register_chrdev:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1571} {:cexpr "__register_chrdev:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1572} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1573} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const proc_create_data: ref;

axiom proc_create_data == $sub.ref(0, 614000);

procedure proc_create_data($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_create_data($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} {:cexpr "proc_create_data:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} $p5 := external_alloc();
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const bdi_init: ref;

axiom bdi_init == $sub.ref(0, 615032);

procedure bdi_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bdi_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1576} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1577} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const bdi_register: ref;

axiom bdi_register == $sub.ref(0, 616064);

procedure bdi_register.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bdi_register.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1578} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1579} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const bdi_destroy: ref;

axiom bdi_destroy == $sub.ref(0, 617096);

procedure bdi_destroy($p0: ref);
  free requires assertsPassed;



implementation bdi_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    return;
}



const cleanup_mtdchar: ref;

axiom cleanup_mtdchar == $sub.ref(0, 618128);

procedure cleanup_mtdchar();
  free requires assertsPassed;



implementation cleanup_mtdchar()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} __unregister_chrdev(90, 0, 1048576, .str.6);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    return;
}



const __unregister_chrdev: ref;

axiom __unregister_chrdev == $sub.ref(0, 619160);

procedure __unregister_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __unregister_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} {:cexpr "__unregister_chrdev:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1582} {:cexpr "__unregister_chrdev:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1583} {:cexpr "__unregister_chrdev:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 620192);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1584} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 1} true;
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 621224);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 622256);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 623288);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 624320);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 625352);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 626384);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 627416);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 628448);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 629480);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 630512);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 631544);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 632576);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 633608);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1585} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1586} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1587} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1588} __VERIFIER_assume($i4);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 634640);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 635672);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 636704);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 637736);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 638768);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1589} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1590} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1591} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1592} __VERIFIER_assume($i4);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 639800);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 640832);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 641864);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 642896);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 643928);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1593} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1594} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1595} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1596} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1597} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1598} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1599} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1600} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1601} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1602} __VERIFIER_assume($i7);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1603} __VERIFIER_assume($i11);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 644960);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 645992);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 647024);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 648056);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 649088);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 650120);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 651152);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 652184);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 653216);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1604} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1605} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1606} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1607} __VERIFIER_assume($i10);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 654248);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1608} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1609} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1610} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 655280);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1611} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1612} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 656312);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 657344);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1613} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1614} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 658376);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 659408);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 660440);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1615} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1616} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1617} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1618} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} $p6 := malloc($i5);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_57 := $M.1;
    call {:si_unique_call 1620} cmdloc_dummy_var_58 := $memset.i8(cmdloc_dummy_var_57, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_58;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 661472);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 662504);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.1, $M.132, $M.135, $M.164, $M.165, $M.3, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.128, $M.206, $M.207, $M.208, $M.209, $M.210, $M.211, $M.212, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.219, $M.220, $M.221, $M.222, $M.223, $M.224, $M.225, $M.226, $M.227, $M.228, $M.229, $M.230, $M.231, $M.232, $M.233, $M.234, $M.235, $M.236, $M.127, $M.119, $M.118, $M.112, $M.113, $M.109, $M.124, $M.116, $M.110, $M.105, $M.108, $M.115, $M.114, $M.106, $M.107, $M.121, $M.111, $M.122, $M.117, $M.120, $M.104, $M.123, $M.100, $M.83, $M.86, $M.88, $M.76, $M.79, $M.93, $M.94, $M.101, $M.78, $M.77, $M.87, $M.84, $M.81, $M.97, $M.80, $M.95, $M.85, $M.91, $M.90, $M.103, $M.82, $M.125, $M.89, $M.92, $M.102, $M.96, $M.98, $M.126, $M.99, $M.10, $M.321, $M.322, $M.323, $M.324, $M.325, $M.326, $M.327, $M.328;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1621} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.1 := $store.i32($M.1, mtd_table_mutex, 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_table_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_table_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_table_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_table_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_table_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_table_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_table_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_table_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_table_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_table_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtd_table_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(mtd_table_mutex, $mul.ref(80, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtd_table_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(mtd_table_mutex, $mul.ref(80, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_table_mutex, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_table_mutex, $mul.ref(0, 160)), $mul.ref(104, 1)), mtd_table_mutex);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtd_table_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_table_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_table_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtd_table_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mtd_table_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mtd_table_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.132 := $store.i8($M.132, __kstrtab_mtd_table_mutex, 109);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_mtd_table_mutex, $mul.ref(0, 16)), $mul.ref(1, 1)), 116);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_mtd_table_mutex, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_mtd_table_mutex, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_mtd_table_mutex, $mul.ref(0, 16)), $mul.ref(4, 1)), 116);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_mtd_table_mutex, $mul.ref(0, 16)), $mul.ref(5, 1)), 97);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_mtd_table_mutex, $mul.ref(0, 16)), $mul.ref(6, 1)), 98);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_mtd_table_mutex, $mul.ref(0, 16)), $mul.ref(7, 1)), 108);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_mtd_table_mutex, $mul.ref(0, 16)), $mul.ref(8, 1)), 101);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_mtd_table_mutex, $mul.ref(0, 16)), $mul.ref(9, 1)), 95);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_mtd_table_mutex, $mul.ref(0, 16)), $mul.ref(10, 1)), 109);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_mtd_table_mutex, $mul.ref(0, 16)), $mul.ref(11, 1)), 117);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_mtd_table_mutex, $mul.ref(0, 16)), $mul.ref(12, 1)), 116);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_mtd_table_mutex, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_mtd_table_mutex, $mul.ref(0, 16)), $mul.ref(14, 1)), 120);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_mtd_table_mutex, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.135 := $store.i8($M.135, __kstrtab___mtd_next_device, 95);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab___mtd_next_device, $mul.ref(0, 18)), $mul.ref(1, 1)), 95);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab___mtd_next_device, $mul.ref(0, 18)), $mul.ref(2, 1)), 109);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab___mtd_next_device, $mul.ref(0, 18)), $mul.ref(3, 1)), 116);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab___mtd_next_device, $mul.ref(0, 18)), $mul.ref(4, 1)), 100);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab___mtd_next_device, $mul.ref(0, 18)), $mul.ref(5, 1)), 95);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab___mtd_next_device, $mul.ref(0, 18)), $mul.ref(6, 1)), 110);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab___mtd_next_device, $mul.ref(0, 18)), $mul.ref(7, 1)), 101);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab___mtd_next_device, $mul.ref(0, 18)), $mul.ref(8, 1)), 120);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab___mtd_next_device, $mul.ref(0, 18)), $mul.ref(9, 1)), 116);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab___mtd_next_device, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab___mtd_next_device, $mul.ref(0, 18)), $mul.ref(11, 1)), 100);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab___mtd_next_device, $mul.ref(0, 18)), $mul.ref(12, 1)), 101);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab___mtd_next_device, $mul.ref(0, 18)), $mul.ref(13, 1)), 118);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab___mtd_next_device, $mul.ref(0, 18)), $mul.ref(14, 1)), 105);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab___mtd_next_device, $mul.ref(0, 18)), $mul.ref(15, 1)), 99);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab___mtd_next_device, $mul.ref(0, 18)), $mul.ref(16, 1)), 101);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab___mtd_next_device, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.1 := $store.i32($M.1, mtd_mutex, 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.98);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtd_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(mtd_mutex, $mul.ref(80, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtd_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(mtd_mutex, $mul.ref(80, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_mutex, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_mutex, $mul.ref(0, 160)), $mul.ref(104, 1)), mtd_mutex);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtd_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtd_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.99);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mtd_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mtd_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.164 := $store.i8($M.164, __kstrtab_mtd_get_device_size, 109);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_mtd_get_device_size, $mul.ref(0, 20)), $mul.ref(1, 1)), 116);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_mtd_get_device_size, $mul.ref(0, 20)), $mul.ref(2, 1)), 100);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_mtd_get_device_size, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_mtd_get_device_size, $mul.ref(0, 20)), $mul.ref(4, 1)), 103);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_mtd_get_device_size, $mul.ref(0, 20)), $mul.ref(5, 1)), 101);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_mtd_get_device_size, $mul.ref(0, 20)), $mul.ref(6, 1)), 116);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_mtd_get_device_size, $mul.ref(0, 20)), $mul.ref(7, 1)), 95);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_mtd_get_device_size, $mul.ref(0, 20)), $mul.ref(8, 1)), 100);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_mtd_get_device_size, $mul.ref(0, 20)), $mul.ref(9, 1)), 101);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_mtd_get_device_size, $mul.ref(0, 20)), $mul.ref(10, 1)), 118);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_mtd_get_device_size, $mul.ref(0, 20)), $mul.ref(11, 1)), 105);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_mtd_get_device_size, $mul.ref(0, 20)), $mul.ref(12, 1)), 99);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_mtd_get_device_size, $mul.ref(0, 20)), $mul.ref(13, 1)), 101);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_mtd_get_device_size, $mul.ref(0, 20)), $mul.ref(14, 1)), 95);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_mtd_get_device_size, $mul.ref(0, 20)), $mul.ref(15, 1)), 115);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_mtd_get_device_size, $mul.ref(0, 20)), $mul.ref(16, 1)), 105);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_mtd_get_device_size, $mul.ref(0, 20)), $mul.ref(17, 1)), 122);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_mtd_get_device_size, $mul.ref(0, 20)), $mul.ref(18, 1)), 101);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_mtd_get_device_size, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.165 := $store.i8($M.165, __kstrtab_mtd_is_partition, 109);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_mtd_is_partition, $mul.ref(0, 17)), $mul.ref(1, 1)), 116);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_mtd_is_partition, $mul.ref(0, 17)), $mul.ref(2, 1)), 100);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_mtd_is_partition, $mul.ref(0, 17)), $mul.ref(3, 1)), 95);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_mtd_is_partition, $mul.ref(0, 17)), $mul.ref(4, 1)), 105);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_mtd_is_partition, $mul.ref(0, 17)), $mul.ref(5, 1)), 115);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_mtd_is_partition, $mul.ref(0, 17)), $mul.ref(6, 1)), 95);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_mtd_is_partition, $mul.ref(0, 17)), $mul.ref(7, 1)), 112);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_mtd_is_partition, $mul.ref(0, 17)), $mul.ref(8, 1)), 97);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_mtd_is_partition, $mul.ref(0, 17)), $mul.ref(9, 1)), 114);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_mtd_is_partition, $mul.ref(0, 17)), $mul.ref(10, 1)), 116);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_mtd_is_partition, $mul.ref(0, 17)), $mul.ref(11, 1)), 105);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_mtd_is_partition, $mul.ref(0, 17)), $mul.ref(12, 1)), 116);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_mtd_is_partition, $mul.ref(0, 17)), $mul.ref(13, 1)), 105);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_mtd_is_partition, $mul.ref(0, 17)), $mul.ref(14, 1)), 111);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_mtd_is_partition, $mul.ref(0, 17)), $mul.ref(15, 1)), 110);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_mtd_is_partition, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.3 := $store.ref($M.3, default_mtd_part_types, .str.89);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(default_mtd_part_types, $mul.ref(0, 24)), $mul.ref(1, 8)), .str.90);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(default_mtd_part_types, $mul.ref(0, 24)), $mul.ref(2, 8)), $0.ref);
    $M.166 := $store.i8($M.166, __kstrtab_deregister_mtd_parser, 100);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_deregister_mtd_parser, $mul.ref(0, 22)), $mul.ref(1, 1)), 101);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_deregister_mtd_parser, $mul.ref(0, 22)), $mul.ref(2, 1)), 114);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_deregister_mtd_parser, $mul.ref(0, 22)), $mul.ref(3, 1)), 101);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_deregister_mtd_parser, $mul.ref(0, 22)), $mul.ref(4, 1)), 103);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_deregister_mtd_parser, $mul.ref(0, 22)), $mul.ref(5, 1)), 105);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_deregister_mtd_parser, $mul.ref(0, 22)), $mul.ref(6, 1)), 115);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_deregister_mtd_parser, $mul.ref(0, 22)), $mul.ref(7, 1)), 116);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_deregister_mtd_parser, $mul.ref(0, 22)), $mul.ref(8, 1)), 101);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_deregister_mtd_parser, $mul.ref(0, 22)), $mul.ref(9, 1)), 114);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_deregister_mtd_parser, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_deregister_mtd_parser, $mul.ref(0, 22)), $mul.ref(11, 1)), 109);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_deregister_mtd_parser, $mul.ref(0, 22)), $mul.ref(12, 1)), 116);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_deregister_mtd_parser, $mul.ref(0, 22)), $mul.ref(13, 1)), 100);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_deregister_mtd_parser, $mul.ref(0, 22)), $mul.ref(14, 1)), 95);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_deregister_mtd_parser, $mul.ref(0, 22)), $mul.ref(15, 1)), 112);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_deregister_mtd_parser, $mul.ref(0, 22)), $mul.ref(16, 1)), 97);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_deregister_mtd_parser, $mul.ref(0, 22)), $mul.ref(17, 1)), 114);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_deregister_mtd_parser, $mul.ref(0, 22)), $mul.ref(18, 1)), 115);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_deregister_mtd_parser, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_deregister_mtd_parser, $mul.ref(0, 22)), $mul.ref(20, 1)), 114);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_deregister_mtd_parser, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.167 := $store.i8($M.167, __kstrtab_register_mtd_parser, 114);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_register_mtd_parser, $mul.ref(0, 20)), $mul.ref(1, 1)), 101);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_register_mtd_parser, $mul.ref(0, 20)), $mul.ref(2, 1)), 103);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_register_mtd_parser, $mul.ref(0, 20)), $mul.ref(3, 1)), 105);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_register_mtd_parser, $mul.ref(0, 20)), $mul.ref(4, 1)), 115);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_register_mtd_parser, $mul.ref(0, 20)), $mul.ref(5, 1)), 116);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_register_mtd_parser, $mul.ref(0, 20)), $mul.ref(6, 1)), 101);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_register_mtd_parser, $mul.ref(0, 20)), $mul.ref(7, 1)), 114);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_register_mtd_parser, $mul.ref(0, 20)), $mul.ref(8, 1)), 95);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_register_mtd_parser, $mul.ref(0, 20)), $mul.ref(9, 1)), 109);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_register_mtd_parser, $mul.ref(0, 20)), $mul.ref(10, 1)), 116);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_register_mtd_parser, $mul.ref(0, 20)), $mul.ref(11, 1)), 100);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_register_mtd_parser, $mul.ref(0, 20)), $mul.ref(12, 1)), 95);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_register_mtd_parser, $mul.ref(0, 20)), $mul.ref(13, 1)), 112);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_register_mtd_parser, $mul.ref(0, 20)), $mul.ref(14, 1)), 97);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_register_mtd_parser, $mul.ref(0, 20)), $mul.ref(15, 1)), 114);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_register_mtd_parser, $mul.ref(0, 20)), $mul.ref(16, 1)), 115);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_register_mtd_parser, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_register_mtd_parser, $mul.ref(0, 20)), $mul.ref(18, 1)), 114);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_register_mtd_parser, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.1 := $store.ref($M.1, part_parsers, part_parsers);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(part_parsers, $mul.ref(0, 16)), $mul.ref(8, 1)), part_parsers);
    $M.168 := $store.i32($M.168, part_parser_lock, 0);
    $M.168 := $store.i32($M.168, $add.ref($add.ref($add.ref($add.ref(part_parser_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.168 := $store.i32($M.168, $add.ref($add.ref($add.ref($add.ref(part_parser_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.168 := $store.ref($M.168, $add.ref($add.ref($add.ref($add.ref(part_parser_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.168 := $store.ref($M.168, $add.ref($add.ref($add.ref($add.ref($add.ref(part_parser_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.168 := $store.ref($M.168, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(part_parser_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.168 := $store.ref($M.168, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(part_parser_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.168 := $store.ref($M.168, $add.ref($add.ref($add.ref($add.ref($add.ref(part_parser_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.88);
    $M.168 := $store.i32($M.168, $add.ref($add.ref($add.ref($add.ref($add.ref(part_parser_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.168 := $store.i64($M.168, $add.ref($add.ref($add.ref($add.ref($add.ref(part_parser_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.169 := $store.i8($M.169, __kstrtab_mtd_del_partition, 109);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_mtd_del_partition, $mul.ref(0, 18)), $mul.ref(1, 1)), 116);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_mtd_del_partition, $mul.ref(0, 18)), $mul.ref(2, 1)), 100);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_mtd_del_partition, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_mtd_del_partition, $mul.ref(0, 18)), $mul.ref(4, 1)), 100);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_mtd_del_partition, $mul.ref(0, 18)), $mul.ref(5, 1)), 101);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_mtd_del_partition, $mul.ref(0, 18)), $mul.ref(6, 1)), 108);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_mtd_del_partition, $mul.ref(0, 18)), $mul.ref(7, 1)), 95);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_mtd_del_partition, $mul.ref(0, 18)), $mul.ref(8, 1)), 112);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_mtd_del_partition, $mul.ref(0, 18)), $mul.ref(9, 1)), 97);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_mtd_del_partition, $mul.ref(0, 18)), $mul.ref(10, 1)), 114);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_mtd_del_partition, $mul.ref(0, 18)), $mul.ref(11, 1)), 116);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_mtd_del_partition, $mul.ref(0, 18)), $mul.ref(12, 1)), 105);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_mtd_del_partition, $mul.ref(0, 18)), $mul.ref(13, 1)), 116);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_mtd_del_partition, $mul.ref(0, 18)), $mul.ref(14, 1)), 105);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_mtd_del_partition, $mul.ref(0, 18)), $mul.ref(15, 1)), 111);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_mtd_del_partition, $mul.ref(0, 18)), $mul.ref(16, 1)), 110);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_mtd_del_partition, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.170 := $store.ref($M.170, dev_attr_offset, .str.87);
    $M.170 := $store.i16($M.170, $add.ref($add.ref($add.ref(dev_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref(dev_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.170 := $store.ref($M.170, $add.ref($add.ref($add.ref(dev_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.170 := $store.i8($M.170, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_offset, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.170 := $store.ref($M.170, $add.ref($add.ref(dev_attr_offset, $mul.ref(0, 48)), $mul.ref(32, 1)), mtd_partition_offset_show);
    $M.170 := $store.ref($M.170, $add.ref($add.ref(dev_attr_offset, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.171 := $store.ref($M.171, mtd_partition_attrs, dev_attr_offset);
    $M.171 := $store.ref($M.171, $add.ref($add.ref(mtd_partition_attrs, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.172 := $store.i8($M.172, __kstrtab_mtd_add_partition, 109);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_mtd_add_partition, $mul.ref(0, 18)), $mul.ref(1, 1)), 116);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_mtd_add_partition, $mul.ref(0, 18)), $mul.ref(2, 1)), 100);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_mtd_add_partition, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_mtd_add_partition, $mul.ref(0, 18)), $mul.ref(4, 1)), 97);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_mtd_add_partition, $mul.ref(0, 18)), $mul.ref(5, 1)), 100);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_mtd_add_partition, $mul.ref(0, 18)), $mul.ref(6, 1)), 100);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_mtd_add_partition, $mul.ref(0, 18)), $mul.ref(7, 1)), 95);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_mtd_add_partition, $mul.ref(0, 18)), $mul.ref(8, 1)), 112);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_mtd_add_partition, $mul.ref(0, 18)), $mul.ref(9, 1)), 97);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_mtd_add_partition, $mul.ref(0, 18)), $mul.ref(10, 1)), 114);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_mtd_add_partition, $mul.ref(0, 18)), $mul.ref(11, 1)), 116);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_mtd_add_partition, $mul.ref(0, 18)), $mul.ref(12, 1)), 105);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_mtd_add_partition, $mul.ref(0, 18)), $mul.ref(13, 1)), 116);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_mtd_add_partition, $mul.ref(0, 18)), $mul.ref(14, 1)), 105);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_mtd_add_partition, $mul.ref(0, 18)), $mul.ref(15, 1)), 111);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_mtd_add_partition, $mul.ref(0, 18)), $mul.ref(16, 1)), 110);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_mtd_add_partition, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.1 := $store.ref($M.1, mtd_partitions, mtd_partitions);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_partitions, $mul.ref(0, 16)), $mul.ref(8, 1)), mtd_partitions);
    $M.1 := $store.i32($M.1, mtd_partitions_mutex, 1);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_partitions_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_partitions_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_partitions_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_partitions_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_partitions_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_partitions_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_partitions_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_partitions_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.75);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_partitions_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_partitions_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtd_partitions_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(mtd_partitions_mutex, $mul.ref(80, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtd_partitions_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(mtd_partitions_mutex, $mul.ref(80, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_partitions_mutex, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_partitions_mutex, $mul.ref(0, 160)), $mul.ref(104, 1)), mtd_partitions_mutex);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtd_partitions_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_partitions_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_partitions_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtd_partitions_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.76);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mtd_partitions_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mtd_partitions_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.173 := $store.i8($M.173, __kstrtab_mtd_erase_callback, 109);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_mtd_erase_callback, $mul.ref(0, 19)), $mul.ref(1, 1)), 116);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_mtd_erase_callback, $mul.ref(0, 19)), $mul.ref(2, 1)), 100);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_mtd_erase_callback, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_mtd_erase_callback, $mul.ref(0, 19)), $mul.ref(4, 1)), 101);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_mtd_erase_callback, $mul.ref(0, 19)), $mul.ref(5, 1)), 114);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_mtd_erase_callback, $mul.ref(0, 19)), $mul.ref(6, 1)), 97);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_mtd_erase_callback, $mul.ref(0, 19)), $mul.ref(7, 1)), 115);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_mtd_erase_callback, $mul.ref(0, 19)), $mul.ref(8, 1)), 101);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_mtd_erase_callback, $mul.ref(0, 19)), $mul.ref(9, 1)), 95);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_mtd_erase_callback, $mul.ref(0, 19)), $mul.ref(10, 1)), 99);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_mtd_erase_callback, $mul.ref(0, 19)), $mul.ref(11, 1)), 97);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_mtd_erase_callback, $mul.ref(0, 19)), $mul.ref(12, 1)), 108);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_mtd_erase_callback, $mul.ref(0, 19)), $mul.ref(13, 1)), 108);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_mtd_erase_callback, $mul.ref(0, 19)), $mul.ref(14, 1)), 98);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_mtd_erase_callback, $mul.ref(0, 19)), $mul.ref(15, 1)), 97);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_mtd_erase_callback, $mul.ref(0, 19)), $mul.ref(16, 1)), 99);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_mtd_erase_callback, $mul.ref(0, 19)), $mul.ref(17, 1)), 107);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_mtd_erase_callback, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.174 := $store.i8($M.174, __kstrtab_mtd_concat_destroy, 109);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_mtd_concat_destroy, $mul.ref(0, 19)), $mul.ref(1, 1)), 116);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_mtd_concat_destroy, $mul.ref(0, 19)), $mul.ref(2, 1)), 100);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_mtd_concat_destroy, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_mtd_concat_destroy, $mul.ref(0, 19)), $mul.ref(4, 1)), 99);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_mtd_concat_destroy, $mul.ref(0, 19)), $mul.ref(5, 1)), 111);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_mtd_concat_destroy, $mul.ref(0, 19)), $mul.ref(6, 1)), 110);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_mtd_concat_destroy, $mul.ref(0, 19)), $mul.ref(7, 1)), 99);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_mtd_concat_destroy, $mul.ref(0, 19)), $mul.ref(8, 1)), 97);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_mtd_concat_destroy, $mul.ref(0, 19)), $mul.ref(9, 1)), 116);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_mtd_concat_destroy, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_mtd_concat_destroy, $mul.ref(0, 19)), $mul.ref(11, 1)), 100);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_mtd_concat_destroy, $mul.ref(0, 19)), $mul.ref(12, 1)), 101);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_mtd_concat_destroy, $mul.ref(0, 19)), $mul.ref(13, 1)), 115);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_mtd_concat_destroy, $mul.ref(0, 19)), $mul.ref(14, 1)), 116);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_mtd_concat_destroy, $mul.ref(0, 19)), $mul.ref(15, 1)), 114);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_mtd_concat_destroy, $mul.ref(0, 19)), $mul.ref(16, 1)), 111);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_mtd_concat_destroy, $mul.ref(0, 19)), $mul.ref(17, 1)), 121);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_mtd_concat_destroy, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.175 := $store.i8($M.175, __kstrtab_mtd_concat_create, 109);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_mtd_concat_create, $mul.ref(0, 18)), $mul.ref(1, 1)), 116);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_mtd_concat_create, $mul.ref(0, 18)), $mul.ref(2, 1)), 100);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_mtd_concat_create, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_mtd_concat_create, $mul.ref(0, 18)), $mul.ref(4, 1)), 99);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_mtd_concat_create, $mul.ref(0, 18)), $mul.ref(5, 1)), 111);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_mtd_concat_create, $mul.ref(0, 18)), $mul.ref(6, 1)), 110);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_mtd_concat_create, $mul.ref(0, 18)), $mul.ref(7, 1)), 99);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_mtd_concat_create, $mul.ref(0, 18)), $mul.ref(8, 1)), 97);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_mtd_concat_create, $mul.ref(0, 18)), $mul.ref(9, 1)), 116);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_mtd_concat_create, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_mtd_concat_create, $mul.ref(0, 18)), $mul.ref(11, 1)), 99);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_mtd_concat_create, $mul.ref(0, 18)), $mul.ref(12, 1)), 114);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_mtd_concat_create, $mul.ref(0, 18)), $mul.ref(13, 1)), 101);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_mtd_concat_create, $mul.ref(0, 18)), $mul.ref(14, 1)), 97);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_mtd_concat_create, $mul.ref(0, 18)), $mul.ref(15, 1)), 116);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_mtd_concat_create, $mul.ref(0, 18)), $mul.ref(16, 1)), 101);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_mtd_concat_create, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.176 := $store.i8($M.176, __kstrtab_kill_mtd_super, 107);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_kill_mtd_super, $mul.ref(0, 15)), $mul.ref(1, 1)), 105);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_kill_mtd_super, $mul.ref(0, 15)), $mul.ref(2, 1)), 108);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_kill_mtd_super, $mul.ref(0, 15)), $mul.ref(3, 1)), 108);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_kill_mtd_super, $mul.ref(0, 15)), $mul.ref(4, 1)), 95);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_kill_mtd_super, $mul.ref(0, 15)), $mul.ref(5, 1)), 109);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_kill_mtd_super, $mul.ref(0, 15)), $mul.ref(6, 1)), 116);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_kill_mtd_super, $mul.ref(0, 15)), $mul.ref(7, 1)), 100);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_kill_mtd_super, $mul.ref(0, 15)), $mul.ref(8, 1)), 95);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_kill_mtd_super, $mul.ref(0, 15)), $mul.ref(9, 1)), 115);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_kill_mtd_super, $mul.ref(0, 15)), $mul.ref(10, 1)), 117);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_kill_mtd_super, $mul.ref(0, 15)), $mul.ref(11, 1)), 112);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_kill_mtd_super, $mul.ref(0, 15)), $mul.ref(12, 1)), 101);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_kill_mtd_super, $mul.ref(0, 15)), $mul.ref(13, 1)), 114);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_kill_mtd_super, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.177 := $store.i8($M.177, __kstrtab_mount_mtd, 109);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_mount_mtd, $mul.ref(0, 10)), $mul.ref(1, 1)), 111);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_mount_mtd, $mul.ref(0, 10)), $mul.ref(2, 1)), 117);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_mount_mtd, $mul.ref(0, 10)), $mul.ref(3, 1)), 110);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_mount_mtd, $mul.ref(0, 10)), $mul.ref(4, 1)), 116);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_mount_mtd, $mul.ref(0, 10)), $mul.ref(5, 1)), 95);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_mount_mtd, $mul.ref(0, 10)), $mul.ref(6, 1)), 109);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_mount_mtd, $mul.ref(0, 10)), $mul.ref(7, 1)), 116);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_mount_mtd, $mul.ref(0, 10)), $mul.ref(8, 1)), 100);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_mount_mtd, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.128 := $0.ref;
    $M.206 := $store.i8($M.206, __kstrtab_mtd_kmalloc_up_to, 109);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_mtd_kmalloc_up_to, $mul.ref(0, 18)), $mul.ref(1, 1)), 116);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_mtd_kmalloc_up_to, $mul.ref(0, 18)), $mul.ref(2, 1)), 100);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_mtd_kmalloc_up_to, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_mtd_kmalloc_up_to, $mul.ref(0, 18)), $mul.ref(4, 1)), 107);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_mtd_kmalloc_up_to, $mul.ref(0, 18)), $mul.ref(5, 1)), 109);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_mtd_kmalloc_up_to, $mul.ref(0, 18)), $mul.ref(6, 1)), 97);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_mtd_kmalloc_up_to, $mul.ref(0, 18)), $mul.ref(7, 1)), 108);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_mtd_kmalloc_up_to, $mul.ref(0, 18)), $mul.ref(8, 1)), 108);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_mtd_kmalloc_up_to, $mul.ref(0, 18)), $mul.ref(9, 1)), 111);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_mtd_kmalloc_up_to, $mul.ref(0, 18)), $mul.ref(10, 1)), 99);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_mtd_kmalloc_up_to, $mul.ref(0, 18)), $mul.ref(11, 1)), 95);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_mtd_kmalloc_up_to, $mul.ref(0, 18)), $mul.ref(12, 1)), 117);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_mtd_kmalloc_up_to, $mul.ref(0, 18)), $mul.ref(13, 1)), 112);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_mtd_kmalloc_up_to, $mul.ref(0, 18)), $mul.ref(14, 1)), 95);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_mtd_kmalloc_up_to, $mul.ref(0, 18)), $mul.ref(15, 1)), 116);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_mtd_kmalloc_up_to, $mul.ref(0, 18)), $mul.ref(16, 1)), 111);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(__kstrtab_mtd_kmalloc_up_to, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.207 := $store.i8($M.207, __kstrtab_mtd_writev, 109);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_mtd_writev, $mul.ref(0, 11)), $mul.ref(1, 1)), 116);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_mtd_writev, $mul.ref(0, 11)), $mul.ref(2, 1)), 100);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_mtd_writev, $mul.ref(0, 11)), $mul.ref(3, 1)), 95);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_mtd_writev, $mul.ref(0, 11)), $mul.ref(4, 1)), 119);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_mtd_writev, $mul.ref(0, 11)), $mul.ref(5, 1)), 114);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_mtd_writev, $mul.ref(0, 11)), $mul.ref(6, 1)), 105);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_mtd_writev, $mul.ref(0, 11)), $mul.ref(7, 1)), 116);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_mtd_writev, $mul.ref(0, 11)), $mul.ref(8, 1)), 101);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_mtd_writev, $mul.ref(0, 11)), $mul.ref(9, 1)), 118);
    $M.207 := $store.i8($M.207, $add.ref($add.ref(__kstrtab_mtd_writev, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.208 := $store.i8($M.208, __kstrtab_mtd_block_markbad, 109);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_mtd_block_markbad, $mul.ref(0, 18)), $mul.ref(1, 1)), 116);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_mtd_block_markbad, $mul.ref(0, 18)), $mul.ref(2, 1)), 100);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_mtd_block_markbad, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_mtd_block_markbad, $mul.ref(0, 18)), $mul.ref(4, 1)), 98);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_mtd_block_markbad, $mul.ref(0, 18)), $mul.ref(5, 1)), 108);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_mtd_block_markbad, $mul.ref(0, 18)), $mul.ref(6, 1)), 111);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_mtd_block_markbad, $mul.ref(0, 18)), $mul.ref(7, 1)), 99);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_mtd_block_markbad, $mul.ref(0, 18)), $mul.ref(8, 1)), 107);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_mtd_block_markbad, $mul.ref(0, 18)), $mul.ref(9, 1)), 95);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_mtd_block_markbad, $mul.ref(0, 18)), $mul.ref(10, 1)), 109);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_mtd_block_markbad, $mul.ref(0, 18)), $mul.ref(11, 1)), 97);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_mtd_block_markbad, $mul.ref(0, 18)), $mul.ref(12, 1)), 114);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_mtd_block_markbad, $mul.ref(0, 18)), $mul.ref(13, 1)), 107);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_mtd_block_markbad, $mul.ref(0, 18)), $mul.ref(14, 1)), 98);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_mtd_block_markbad, $mul.ref(0, 18)), $mul.ref(15, 1)), 97);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_mtd_block_markbad, $mul.ref(0, 18)), $mul.ref(16, 1)), 100);
    $M.208 := $store.i8($M.208, $add.ref($add.ref(__kstrtab_mtd_block_markbad, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.209 := $store.i8($M.209, __kstrtab_mtd_block_isbad, 109);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_mtd_block_isbad, $mul.ref(0, 16)), $mul.ref(1, 1)), 116);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_mtd_block_isbad, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_mtd_block_isbad, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_mtd_block_isbad, $mul.ref(0, 16)), $mul.ref(4, 1)), 98);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_mtd_block_isbad, $mul.ref(0, 16)), $mul.ref(5, 1)), 108);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_mtd_block_isbad, $mul.ref(0, 16)), $mul.ref(6, 1)), 111);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_mtd_block_isbad, $mul.ref(0, 16)), $mul.ref(7, 1)), 99);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_mtd_block_isbad, $mul.ref(0, 16)), $mul.ref(8, 1)), 107);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_mtd_block_isbad, $mul.ref(0, 16)), $mul.ref(9, 1)), 95);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_mtd_block_isbad, $mul.ref(0, 16)), $mul.ref(10, 1)), 105);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_mtd_block_isbad, $mul.ref(0, 16)), $mul.ref(11, 1)), 115);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_mtd_block_isbad, $mul.ref(0, 16)), $mul.ref(12, 1)), 98);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_mtd_block_isbad, $mul.ref(0, 16)), $mul.ref(13, 1)), 97);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_mtd_block_isbad, $mul.ref(0, 16)), $mul.ref(14, 1)), 100);
    $M.209 := $store.i8($M.209, $add.ref($add.ref(__kstrtab_mtd_block_isbad, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.210 := $store.i8($M.210, __kstrtab_mtd_block_isreserved, 109);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_mtd_block_isreserved, $mul.ref(0, 21)), $mul.ref(1, 1)), 116);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_mtd_block_isreserved, $mul.ref(0, 21)), $mul.ref(2, 1)), 100);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_mtd_block_isreserved, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_mtd_block_isreserved, $mul.ref(0, 21)), $mul.ref(4, 1)), 98);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_mtd_block_isreserved, $mul.ref(0, 21)), $mul.ref(5, 1)), 108);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_mtd_block_isreserved, $mul.ref(0, 21)), $mul.ref(6, 1)), 111);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_mtd_block_isreserved, $mul.ref(0, 21)), $mul.ref(7, 1)), 99);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_mtd_block_isreserved, $mul.ref(0, 21)), $mul.ref(8, 1)), 107);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_mtd_block_isreserved, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_mtd_block_isreserved, $mul.ref(0, 21)), $mul.ref(10, 1)), 105);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_mtd_block_isreserved, $mul.ref(0, 21)), $mul.ref(11, 1)), 115);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_mtd_block_isreserved, $mul.ref(0, 21)), $mul.ref(12, 1)), 114);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_mtd_block_isreserved, $mul.ref(0, 21)), $mul.ref(13, 1)), 101);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_mtd_block_isreserved, $mul.ref(0, 21)), $mul.ref(14, 1)), 115);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_mtd_block_isreserved, $mul.ref(0, 21)), $mul.ref(15, 1)), 101);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_mtd_block_isreserved, $mul.ref(0, 21)), $mul.ref(16, 1)), 114);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_mtd_block_isreserved, $mul.ref(0, 21)), $mul.ref(17, 1)), 118);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_mtd_block_isreserved, $mul.ref(0, 21)), $mul.ref(18, 1)), 101);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_mtd_block_isreserved, $mul.ref(0, 21)), $mul.ref(19, 1)), 100);
    $M.210 := $store.i8($M.210, $add.ref($add.ref(__kstrtab_mtd_block_isreserved, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.211 := $store.i8($M.211, __kstrtab_mtd_is_locked, 109);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_mtd_is_locked, $mul.ref(0, 14)), $mul.ref(1, 1)), 116);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_mtd_is_locked, $mul.ref(0, 14)), $mul.ref(2, 1)), 100);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_mtd_is_locked, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_mtd_is_locked, $mul.ref(0, 14)), $mul.ref(4, 1)), 105);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_mtd_is_locked, $mul.ref(0, 14)), $mul.ref(5, 1)), 115);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_mtd_is_locked, $mul.ref(0, 14)), $mul.ref(6, 1)), 95);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_mtd_is_locked, $mul.ref(0, 14)), $mul.ref(7, 1)), 108);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_mtd_is_locked, $mul.ref(0, 14)), $mul.ref(8, 1)), 111);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_mtd_is_locked, $mul.ref(0, 14)), $mul.ref(9, 1)), 99);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_mtd_is_locked, $mul.ref(0, 14)), $mul.ref(10, 1)), 107);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_mtd_is_locked, $mul.ref(0, 14)), $mul.ref(11, 1)), 101);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_mtd_is_locked, $mul.ref(0, 14)), $mul.ref(12, 1)), 100);
    $M.211 := $store.i8($M.211, $add.ref($add.ref(__kstrtab_mtd_is_locked, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.212 := $store.i8($M.212, __kstrtab_mtd_unlock, 109);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_mtd_unlock, $mul.ref(0, 11)), $mul.ref(1, 1)), 116);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_mtd_unlock, $mul.ref(0, 11)), $mul.ref(2, 1)), 100);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_mtd_unlock, $mul.ref(0, 11)), $mul.ref(3, 1)), 95);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_mtd_unlock, $mul.ref(0, 11)), $mul.ref(4, 1)), 117);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_mtd_unlock, $mul.ref(0, 11)), $mul.ref(5, 1)), 110);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_mtd_unlock, $mul.ref(0, 11)), $mul.ref(6, 1)), 108);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_mtd_unlock, $mul.ref(0, 11)), $mul.ref(7, 1)), 111);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_mtd_unlock, $mul.ref(0, 11)), $mul.ref(8, 1)), 99);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_mtd_unlock, $mul.ref(0, 11)), $mul.ref(9, 1)), 107);
    $M.212 := $store.i8($M.212, $add.ref($add.ref(__kstrtab_mtd_unlock, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.213 := $store.i8($M.213, __kstrtab_mtd_lock, 109);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(__kstrtab_mtd_lock, $mul.ref(0, 9)), $mul.ref(1, 1)), 116);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(__kstrtab_mtd_lock, $mul.ref(0, 9)), $mul.ref(2, 1)), 100);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(__kstrtab_mtd_lock, $mul.ref(0, 9)), $mul.ref(3, 1)), 95);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(__kstrtab_mtd_lock, $mul.ref(0, 9)), $mul.ref(4, 1)), 108);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(__kstrtab_mtd_lock, $mul.ref(0, 9)), $mul.ref(5, 1)), 111);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(__kstrtab_mtd_lock, $mul.ref(0, 9)), $mul.ref(6, 1)), 99);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(__kstrtab_mtd_lock, $mul.ref(0, 9)), $mul.ref(7, 1)), 107);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(__kstrtab_mtd_lock, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.214 := $store.i8($M.214, __kstrtab_mtd_lock_user_prot_reg, 109);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(1, 1)), 116);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(2, 1)), 100);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(4, 1)), 108);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(5, 1)), 111);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(6, 1)), 99);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(7, 1)), 107);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(8, 1)), 95);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(9, 1)), 117);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(10, 1)), 115);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(11, 1)), 101);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(12, 1)), 114);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(13, 1)), 95);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(14, 1)), 112);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(15, 1)), 114);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(16, 1)), 111);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(17, 1)), 116);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(18, 1)), 95);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(19, 1)), 114);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(21, 1)), 103);
    $M.214 := $store.i8($M.214, $add.ref($add.ref(__kstrtab_mtd_lock_user_prot_reg, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.215 := $store.i8($M.215, __kstrtab_mtd_write_user_prot_reg, 109);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(1, 1)), 116);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(2, 1)), 100);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(3, 1)), 95);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(4, 1)), 119);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(5, 1)), 114);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(6, 1)), 105);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(7, 1)), 116);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(8, 1)), 101);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(9, 1)), 95);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(10, 1)), 117);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(11, 1)), 115);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(12, 1)), 101);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(13, 1)), 114);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(14, 1)), 95);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(15, 1)), 112);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(16, 1)), 114);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(17, 1)), 111);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(18, 1)), 116);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(19, 1)), 95);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(20, 1)), 114);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(21, 1)), 101);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(22, 1)), 103);
    $M.215 := $store.i8($M.215, $add.ref($add.ref(__kstrtab_mtd_write_user_prot_reg, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.216 := $store.i8($M.216, __kstrtab_mtd_read_user_prot_reg, 109);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(1, 1)), 116);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(2, 1)), 100);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(4, 1)), 114);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(5, 1)), 101);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(6, 1)), 97);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(7, 1)), 100);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(8, 1)), 95);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(9, 1)), 117);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(10, 1)), 115);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(11, 1)), 101);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(12, 1)), 114);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(13, 1)), 95);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(14, 1)), 112);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(15, 1)), 114);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(16, 1)), 111);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(17, 1)), 116);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(18, 1)), 95);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(19, 1)), 114);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(21, 1)), 103);
    $M.216 := $store.i8($M.216, $add.ref($add.ref(__kstrtab_mtd_read_user_prot_reg, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.217 := $store.i8($M.217, __kstrtab_mtd_get_user_prot_info, 109);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(1, 1)), 116);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(2, 1)), 100);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(4, 1)), 103);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(5, 1)), 101);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(6, 1)), 116);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(8, 1)), 117);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(9, 1)), 115);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(10, 1)), 101);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(11, 1)), 114);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(12, 1)), 95);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(13, 1)), 112);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(14, 1)), 114);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(15, 1)), 111);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(16, 1)), 116);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(18, 1)), 105);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(19, 1)), 110);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(20, 1)), 102);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(21, 1)), 111);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(__kstrtab_mtd_get_user_prot_info, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.218 := $store.i8($M.218, __kstrtab_mtd_read_fact_prot_reg, 109);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(1, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(2, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(4, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(5, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(6, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(7, 1)), 100);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(8, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(9, 1)), 102);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(10, 1)), 97);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(11, 1)), 99);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(12, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(13, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(14, 1)), 112);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(15, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(16, 1)), 111);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(17, 1)), 116);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(18, 1)), 95);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(19, 1)), 114);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(21, 1)), 103);
    $M.218 := $store.i8($M.218, $add.ref($add.ref(__kstrtab_mtd_read_fact_prot_reg, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.219 := $store.i8($M.219, __kstrtab_mtd_get_fact_prot_info, 109);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(1, 1)), 116);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(2, 1)), 100);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(4, 1)), 103);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(5, 1)), 101);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(6, 1)), 116);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(8, 1)), 102);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(9, 1)), 97);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(10, 1)), 99);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(11, 1)), 116);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(12, 1)), 95);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(13, 1)), 112);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(14, 1)), 114);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(15, 1)), 111);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(16, 1)), 116);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(18, 1)), 105);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(19, 1)), 110);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(20, 1)), 102);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(21, 1)), 111);
    $M.219 := $store.i8($M.219, $add.ref($add.ref(__kstrtab_mtd_get_fact_prot_info, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.220 := $store.i8($M.220, __kstrtab_mtd_read_oob, 109);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(__kstrtab_mtd_read_oob, $mul.ref(0, 13)), $mul.ref(1, 1)), 116);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(__kstrtab_mtd_read_oob, $mul.ref(0, 13)), $mul.ref(2, 1)), 100);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(__kstrtab_mtd_read_oob, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(__kstrtab_mtd_read_oob, $mul.ref(0, 13)), $mul.ref(4, 1)), 114);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(__kstrtab_mtd_read_oob, $mul.ref(0, 13)), $mul.ref(5, 1)), 101);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(__kstrtab_mtd_read_oob, $mul.ref(0, 13)), $mul.ref(6, 1)), 97);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(__kstrtab_mtd_read_oob, $mul.ref(0, 13)), $mul.ref(7, 1)), 100);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(__kstrtab_mtd_read_oob, $mul.ref(0, 13)), $mul.ref(8, 1)), 95);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(__kstrtab_mtd_read_oob, $mul.ref(0, 13)), $mul.ref(9, 1)), 111);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(__kstrtab_mtd_read_oob, $mul.ref(0, 13)), $mul.ref(10, 1)), 111);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(__kstrtab_mtd_read_oob, $mul.ref(0, 13)), $mul.ref(11, 1)), 98);
    $M.220 := $store.i8($M.220, $add.ref($add.ref(__kstrtab_mtd_read_oob, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.221 := $store.i8($M.221, __kstrtab_mtd_panic_write, 109);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(__kstrtab_mtd_panic_write, $mul.ref(0, 16)), $mul.ref(1, 1)), 116);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(__kstrtab_mtd_panic_write, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(__kstrtab_mtd_panic_write, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(__kstrtab_mtd_panic_write, $mul.ref(0, 16)), $mul.ref(4, 1)), 112);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(__kstrtab_mtd_panic_write, $mul.ref(0, 16)), $mul.ref(5, 1)), 97);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(__kstrtab_mtd_panic_write, $mul.ref(0, 16)), $mul.ref(6, 1)), 110);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(__kstrtab_mtd_panic_write, $mul.ref(0, 16)), $mul.ref(7, 1)), 105);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(__kstrtab_mtd_panic_write, $mul.ref(0, 16)), $mul.ref(8, 1)), 99);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(__kstrtab_mtd_panic_write, $mul.ref(0, 16)), $mul.ref(9, 1)), 95);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(__kstrtab_mtd_panic_write, $mul.ref(0, 16)), $mul.ref(10, 1)), 119);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(__kstrtab_mtd_panic_write, $mul.ref(0, 16)), $mul.ref(11, 1)), 114);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(__kstrtab_mtd_panic_write, $mul.ref(0, 16)), $mul.ref(12, 1)), 105);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(__kstrtab_mtd_panic_write, $mul.ref(0, 16)), $mul.ref(13, 1)), 116);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(__kstrtab_mtd_panic_write, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(__kstrtab_mtd_panic_write, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.222 := $store.i8($M.222, __kstrtab_mtd_write, 109);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(__kstrtab_mtd_write, $mul.ref(0, 10)), $mul.ref(1, 1)), 116);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(__kstrtab_mtd_write, $mul.ref(0, 10)), $mul.ref(2, 1)), 100);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(__kstrtab_mtd_write, $mul.ref(0, 10)), $mul.ref(3, 1)), 95);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(__kstrtab_mtd_write, $mul.ref(0, 10)), $mul.ref(4, 1)), 119);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(__kstrtab_mtd_write, $mul.ref(0, 10)), $mul.ref(5, 1)), 114);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(__kstrtab_mtd_write, $mul.ref(0, 10)), $mul.ref(6, 1)), 105);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(__kstrtab_mtd_write, $mul.ref(0, 10)), $mul.ref(7, 1)), 116);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(__kstrtab_mtd_write, $mul.ref(0, 10)), $mul.ref(8, 1)), 101);
    $M.222 := $store.i8($M.222, $add.ref($add.ref(__kstrtab_mtd_write, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.223 := $store.i8($M.223, __kstrtab_mtd_read, 109);
    $M.223 := $store.i8($M.223, $add.ref($add.ref(__kstrtab_mtd_read, $mul.ref(0, 9)), $mul.ref(1, 1)), 116);
    $M.223 := $store.i8($M.223, $add.ref($add.ref(__kstrtab_mtd_read, $mul.ref(0, 9)), $mul.ref(2, 1)), 100);
    $M.223 := $store.i8($M.223, $add.ref($add.ref(__kstrtab_mtd_read, $mul.ref(0, 9)), $mul.ref(3, 1)), 95);
    $M.223 := $store.i8($M.223, $add.ref($add.ref(__kstrtab_mtd_read, $mul.ref(0, 9)), $mul.ref(4, 1)), 114);
    $M.223 := $store.i8($M.223, $add.ref($add.ref(__kstrtab_mtd_read, $mul.ref(0, 9)), $mul.ref(5, 1)), 101);
    $M.223 := $store.i8($M.223, $add.ref($add.ref(__kstrtab_mtd_read, $mul.ref(0, 9)), $mul.ref(6, 1)), 97);
    $M.223 := $store.i8($M.223, $add.ref($add.ref(__kstrtab_mtd_read, $mul.ref(0, 9)), $mul.ref(7, 1)), 100);
    $M.223 := $store.i8($M.223, $add.ref($add.ref(__kstrtab_mtd_read, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.224 := $store.i8($M.224, __kstrtab_mtd_get_unmapped_area, 109);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(__kstrtab_mtd_get_unmapped_area, $mul.ref(0, 22)), $mul.ref(1, 1)), 116);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(__kstrtab_mtd_get_unmapped_area, $mul.ref(0, 22)), $mul.ref(2, 1)), 100);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(__kstrtab_mtd_get_unmapped_area, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(__kstrtab_mtd_get_unmapped_area, $mul.ref(0, 22)), $mul.ref(4, 1)), 103);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(__kstrtab_mtd_get_unmapped_area, $mul.ref(0, 22)), $mul.ref(5, 1)), 101);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(__kstrtab_mtd_get_unmapped_area, $mul.ref(0, 22)), $mul.ref(6, 1)), 116);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(__kstrtab_mtd_get_unmapped_area, $mul.ref(0, 22)), $mul.ref(7, 1)), 95);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(__kstrtab_mtd_get_unmapped_area, $mul.ref(0, 22)), $mul.ref(8, 1)), 117);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(__kstrtab_mtd_get_unmapped_area, $mul.ref(0, 22)), $mul.ref(9, 1)), 110);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(__kstrtab_mtd_get_unmapped_area, $mul.ref(0, 22)), $mul.ref(10, 1)), 109);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(__kstrtab_mtd_get_unmapped_area, $mul.ref(0, 22)), $mul.ref(11, 1)), 97);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(__kstrtab_mtd_get_unmapped_area, $mul.ref(0, 22)), $mul.ref(12, 1)), 112);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(__kstrtab_mtd_get_unmapped_area, $mul.ref(0, 22)), $mul.ref(13, 1)), 112);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(__kstrtab_mtd_get_unmapped_area, $mul.ref(0, 22)), $mul.ref(14, 1)), 101);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(__kstrtab_mtd_get_unmapped_area, $mul.ref(0, 22)), $mul.ref(15, 1)), 100);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(__kstrtab_mtd_get_unmapped_area, $mul.ref(0, 22)), $mul.ref(16, 1)), 95);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(__kstrtab_mtd_get_unmapped_area, $mul.ref(0, 22)), $mul.ref(17, 1)), 97);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(__kstrtab_mtd_get_unmapped_area, $mul.ref(0, 22)), $mul.ref(18, 1)), 114);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(__kstrtab_mtd_get_unmapped_area, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(__kstrtab_mtd_get_unmapped_area, $mul.ref(0, 22)), $mul.ref(20, 1)), 97);
    $M.224 := $store.i8($M.224, $add.ref($add.ref(__kstrtab_mtd_get_unmapped_area, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.225 := $store.i8($M.225, __kstrtab_mtd_unpoint, 109);
    $M.225 := $store.i8($M.225, $add.ref($add.ref(__kstrtab_mtd_unpoint, $mul.ref(0, 12)), $mul.ref(1, 1)), 116);
    $M.225 := $store.i8($M.225, $add.ref($add.ref(__kstrtab_mtd_unpoint, $mul.ref(0, 12)), $mul.ref(2, 1)), 100);
    $M.225 := $store.i8($M.225, $add.ref($add.ref(__kstrtab_mtd_unpoint, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.225 := $store.i8($M.225, $add.ref($add.ref(__kstrtab_mtd_unpoint, $mul.ref(0, 12)), $mul.ref(4, 1)), 117);
    $M.225 := $store.i8($M.225, $add.ref($add.ref(__kstrtab_mtd_unpoint, $mul.ref(0, 12)), $mul.ref(5, 1)), 110);
    $M.225 := $store.i8($M.225, $add.ref($add.ref(__kstrtab_mtd_unpoint, $mul.ref(0, 12)), $mul.ref(6, 1)), 112);
    $M.225 := $store.i8($M.225, $add.ref($add.ref(__kstrtab_mtd_unpoint, $mul.ref(0, 12)), $mul.ref(7, 1)), 111);
    $M.225 := $store.i8($M.225, $add.ref($add.ref(__kstrtab_mtd_unpoint, $mul.ref(0, 12)), $mul.ref(8, 1)), 105);
    $M.225 := $store.i8($M.225, $add.ref($add.ref(__kstrtab_mtd_unpoint, $mul.ref(0, 12)), $mul.ref(9, 1)), 110);
    $M.225 := $store.i8($M.225, $add.ref($add.ref(__kstrtab_mtd_unpoint, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
    $M.225 := $store.i8($M.225, $add.ref($add.ref(__kstrtab_mtd_unpoint, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.226 := $store.i8($M.226, __kstrtab_mtd_point, 109);
    $M.226 := $store.i8($M.226, $add.ref($add.ref(__kstrtab_mtd_point, $mul.ref(0, 10)), $mul.ref(1, 1)), 116);
    $M.226 := $store.i8($M.226, $add.ref($add.ref(__kstrtab_mtd_point, $mul.ref(0, 10)), $mul.ref(2, 1)), 100);
    $M.226 := $store.i8($M.226, $add.ref($add.ref(__kstrtab_mtd_point, $mul.ref(0, 10)), $mul.ref(3, 1)), 95);
    $M.226 := $store.i8($M.226, $add.ref($add.ref(__kstrtab_mtd_point, $mul.ref(0, 10)), $mul.ref(4, 1)), 112);
    $M.226 := $store.i8($M.226, $add.ref($add.ref(__kstrtab_mtd_point, $mul.ref(0, 10)), $mul.ref(5, 1)), 111);
    $M.226 := $store.i8($M.226, $add.ref($add.ref(__kstrtab_mtd_point, $mul.ref(0, 10)), $mul.ref(6, 1)), 105);
    $M.226 := $store.i8($M.226, $add.ref($add.ref(__kstrtab_mtd_point, $mul.ref(0, 10)), $mul.ref(7, 1)), 110);
    $M.226 := $store.i8($M.226, $add.ref($add.ref(__kstrtab_mtd_point, $mul.ref(0, 10)), $mul.ref(8, 1)), 116);
    $M.226 := $store.i8($M.226, $add.ref($add.ref(__kstrtab_mtd_point, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.227 := $store.i8($M.227, __kstrtab_mtd_erase, 109);
    $M.227 := $store.i8($M.227, $add.ref($add.ref(__kstrtab_mtd_erase, $mul.ref(0, 10)), $mul.ref(1, 1)), 116);
    $M.227 := $store.i8($M.227, $add.ref($add.ref(__kstrtab_mtd_erase, $mul.ref(0, 10)), $mul.ref(2, 1)), 100);
    $M.227 := $store.i8($M.227, $add.ref($add.ref(__kstrtab_mtd_erase, $mul.ref(0, 10)), $mul.ref(3, 1)), 95);
    $M.227 := $store.i8($M.227, $add.ref($add.ref(__kstrtab_mtd_erase, $mul.ref(0, 10)), $mul.ref(4, 1)), 101);
    $M.227 := $store.i8($M.227, $add.ref($add.ref(__kstrtab_mtd_erase, $mul.ref(0, 10)), $mul.ref(5, 1)), 114);
    $M.227 := $store.i8($M.227, $add.ref($add.ref(__kstrtab_mtd_erase, $mul.ref(0, 10)), $mul.ref(6, 1)), 97);
    $M.227 := $store.i8($M.227, $add.ref($add.ref(__kstrtab_mtd_erase, $mul.ref(0, 10)), $mul.ref(7, 1)), 115);
    $M.227 := $store.i8($M.227, $add.ref($add.ref(__kstrtab_mtd_erase, $mul.ref(0, 10)), $mul.ref(8, 1)), 101);
    $M.227 := $store.i8($M.227, $add.ref($add.ref(__kstrtab_mtd_erase, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.228 := $store.i8($M.228, __kstrtab___put_mtd_device, 95);
    $M.228 := $store.i8($M.228, $add.ref($add.ref(__kstrtab___put_mtd_device, $mul.ref(0, 17)), $mul.ref(1, 1)), 95);
    $M.228 := $store.i8($M.228, $add.ref($add.ref(__kstrtab___put_mtd_device, $mul.ref(0, 17)), $mul.ref(2, 1)), 112);
    $M.228 := $store.i8($M.228, $add.ref($add.ref(__kstrtab___put_mtd_device, $mul.ref(0, 17)), $mul.ref(3, 1)), 117);
    $M.228 := $store.i8($M.228, $add.ref($add.ref(__kstrtab___put_mtd_device, $mul.ref(0, 17)), $mul.ref(4, 1)), 116);
    $M.228 := $store.i8($M.228, $add.ref($add.ref(__kstrtab___put_mtd_device, $mul.ref(0, 17)), $mul.ref(5, 1)), 95);
    $M.228 := $store.i8($M.228, $add.ref($add.ref(__kstrtab___put_mtd_device, $mul.ref(0, 17)), $mul.ref(6, 1)), 109);
    $M.228 := $store.i8($M.228, $add.ref($add.ref(__kstrtab___put_mtd_device, $mul.ref(0, 17)), $mul.ref(7, 1)), 116);
    $M.228 := $store.i8($M.228, $add.ref($add.ref(__kstrtab___put_mtd_device, $mul.ref(0, 17)), $mul.ref(8, 1)), 100);
    $M.228 := $store.i8($M.228, $add.ref($add.ref(__kstrtab___put_mtd_device, $mul.ref(0, 17)), $mul.ref(9, 1)), 95);
    $M.228 := $store.i8($M.228, $add.ref($add.ref(__kstrtab___put_mtd_device, $mul.ref(0, 17)), $mul.ref(10, 1)), 100);
    $M.228 := $store.i8($M.228, $add.ref($add.ref(__kstrtab___put_mtd_device, $mul.ref(0, 17)), $mul.ref(11, 1)), 101);
    $M.228 := $store.i8($M.228, $add.ref($add.ref(__kstrtab___put_mtd_device, $mul.ref(0, 17)), $mul.ref(12, 1)), 118);
    $M.228 := $store.i8($M.228, $add.ref($add.ref(__kstrtab___put_mtd_device, $mul.ref(0, 17)), $mul.ref(13, 1)), 105);
    $M.228 := $store.i8($M.228, $add.ref($add.ref(__kstrtab___put_mtd_device, $mul.ref(0, 17)), $mul.ref(14, 1)), 99);
    $M.228 := $store.i8($M.228, $add.ref($add.ref(__kstrtab___put_mtd_device, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.228 := $store.i8($M.228, $add.ref($add.ref(__kstrtab___put_mtd_device, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.229 := $store.i8($M.229, __kstrtab_put_mtd_device, 112);
    $M.229 := $store.i8($M.229, $add.ref($add.ref(__kstrtab_put_mtd_device, $mul.ref(0, 15)), $mul.ref(1, 1)), 117);
    $M.229 := $store.i8($M.229, $add.ref($add.ref(__kstrtab_put_mtd_device, $mul.ref(0, 15)), $mul.ref(2, 1)), 116);
    $M.229 := $store.i8($M.229, $add.ref($add.ref(__kstrtab_put_mtd_device, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.229 := $store.i8($M.229, $add.ref($add.ref(__kstrtab_put_mtd_device, $mul.ref(0, 15)), $mul.ref(4, 1)), 109);
    $M.229 := $store.i8($M.229, $add.ref($add.ref(__kstrtab_put_mtd_device, $mul.ref(0, 15)), $mul.ref(5, 1)), 116);
    $M.229 := $store.i8($M.229, $add.ref($add.ref(__kstrtab_put_mtd_device, $mul.ref(0, 15)), $mul.ref(6, 1)), 100);
    $M.229 := $store.i8($M.229, $add.ref($add.ref(__kstrtab_put_mtd_device, $mul.ref(0, 15)), $mul.ref(7, 1)), 95);
    $M.229 := $store.i8($M.229, $add.ref($add.ref(__kstrtab_put_mtd_device, $mul.ref(0, 15)), $mul.ref(8, 1)), 100);
    $M.229 := $store.i8($M.229, $add.ref($add.ref(__kstrtab_put_mtd_device, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
    $M.229 := $store.i8($M.229, $add.ref($add.ref(__kstrtab_put_mtd_device, $mul.ref(0, 15)), $mul.ref(10, 1)), 118);
    $M.229 := $store.i8($M.229, $add.ref($add.ref(__kstrtab_put_mtd_device, $mul.ref(0, 15)), $mul.ref(11, 1)), 105);
    $M.229 := $store.i8($M.229, $add.ref($add.ref(__kstrtab_put_mtd_device, $mul.ref(0, 15)), $mul.ref(12, 1)), 99);
    $M.229 := $store.i8($M.229, $add.ref($add.ref(__kstrtab_put_mtd_device, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
    $M.229 := $store.i8($M.229, $add.ref($add.ref(__kstrtab_put_mtd_device, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.230 := $store.i8($M.230, __kstrtab_get_mtd_device_nm, 103);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(__kstrtab_get_mtd_device_nm, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(__kstrtab_get_mtd_device_nm, $mul.ref(0, 18)), $mul.ref(2, 1)), 116);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(__kstrtab_get_mtd_device_nm, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(__kstrtab_get_mtd_device_nm, $mul.ref(0, 18)), $mul.ref(4, 1)), 109);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(__kstrtab_get_mtd_device_nm, $mul.ref(0, 18)), $mul.ref(5, 1)), 116);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(__kstrtab_get_mtd_device_nm, $mul.ref(0, 18)), $mul.ref(6, 1)), 100);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(__kstrtab_get_mtd_device_nm, $mul.ref(0, 18)), $mul.ref(7, 1)), 95);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(__kstrtab_get_mtd_device_nm, $mul.ref(0, 18)), $mul.ref(8, 1)), 100);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(__kstrtab_get_mtd_device_nm, $mul.ref(0, 18)), $mul.ref(9, 1)), 101);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(__kstrtab_get_mtd_device_nm, $mul.ref(0, 18)), $mul.ref(10, 1)), 118);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(__kstrtab_get_mtd_device_nm, $mul.ref(0, 18)), $mul.ref(11, 1)), 105);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(__kstrtab_get_mtd_device_nm, $mul.ref(0, 18)), $mul.ref(12, 1)), 99);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(__kstrtab_get_mtd_device_nm, $mul.ref(0, 18)), $mul.ref(13, 1)), 101);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(__kstrtab_get_mtd_device_nm, $mul.ref(0, 18)), $mul.ref(14, 1)), 95);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(__kstrtab_get_mtd_device_nm, $mul.ref(0, 18)), $mul.ref(15, 1)), 110);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(__kstrtab_get_mtd_device_nm, $mul.ref(0, 18)), $mul.ref(16, 1)), 109);
    $M.230 := $store.i8($M.230, $add.ref($add.ref(__kstrtab_get_mtd_device_nm, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.231 := $store.i8($M.231, __kstrtab___get_mtd_device, 95);
    $M.231 := $store.i8($M.231, $add.ref($add.ref(__kstrtab___get_mtd_device, $mul.ref(0, 17)), $mul.ref(1, 1)), 95);
    $M.231 := $store.i8($M.231, $add.ref($add.ref(__kstrtab___get_mtd_device, $mul.ref(0, 17)), $mul.ref(2, 1)), 103);
    $M.231 := $store.i8($M.231, $add.ref($add.ref(__kstrtab___get_mtd_device, $mul.ref(0, 17)), $mul.ref(3, 1)), 101);
    $M.231 := $store.i8($M.231, $add.ref($add.ref(__kstrtab___get_mtd_device, $mul.ref(0, 17)), $mul.ref(4, 1)), 116);
    $M.231 := $store.i8($M.231, $add.ref($add.ref(__kstrtab___get_mtd_device, $mul.ref(0, 17)), $mul.ref(5, 1)), 95);
    $M.231 := $store.i8($M.231, $add.ref($add.ref(__kstrtab___get_mtd_device, $mul.ref(0, 17)), $mul.ref(6, 1)), 109);
    $M.231 := $store.i8($M.231, $add.ref($add.ref(__kstrtab___get_mtd_device, $mul.ref(0, 17)), $mul.ref(7, 1)), 116);
    $M.231 := $store.i8($M.231, $add.ref($add.ref(__kstrtab___get_mtd_device, $mul.ref(0, 17)), $mul.ref(8, 1)), 100);
    $M.231 := $store.i8($M.231, $add.ref($add.ref(__kstrtab___get_mtd_device, $mul.ref(0, 17)), $mul.ref(9, 1)), 95);
    $M.231 := $store.i8($M.231, $add.ref($add.ref(__kstrtab___get_mtd_device, $mul.ref(0, 17)), $mul.ref(10, 1)), 100);
    $M.231 := $store.i8($M.231, $add.ref($add.ref(__kstrtab___get_mtd_device, $mul.ref(0, 17)), $mul.ref(11, 1)), 101);
    $M.231 := $store.i8($M.231, $add.ref($add.ref(__kstrtab___get_mtd_device, $mul.ref(0, 17)), $mul.ref(12, 1)), 118);
    $M.231 := $store.i8($M.231, $add.ref($add.ref(__kstrtab___get_mtd_device, $mul.ref(0, 17)), $mul.ref(13, 1)), 105);
    $M.231 := $store.i8($M.231, $add.ref($add.ref(__kstrtab___get_mtd_device, $mul.ref(0, 17)), $mul.ref(14, 1)), 99);
    $M.231 := $store.i8($M.231, $add.ref($add.ref(__kstrtab___get_mtd_device, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.231 := $store.i8($M.231, $add.ref($add.ref(__kstrtab___get_mtd_device, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.232 := $store.i8($M.232, __kstrtab_get_mtd_device, 103);
    $M.232 := $store.i8($M.232, $add.ref($add.ref(__kstrtab_get_mtd_device, $mul.ref(0, 15)), $mul.ref(1, 1)), 101);
    $M.232 := $store.i8($M.232, $add.ref($add.ref(__kstrtab_get_mtd_device, $mul.ref(0, 15)), $mul.ref(2, 1)), 116);
    $M.232 := $store.i8($M.232, $add.ref($add.ref(__kstrtab_get_mtd_device, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.232 := $store.i8($M.232, $add.ref($add.ref(__kstrtab_get_mtd_device, $mul.ref(0, 15)), $mul.ref(4, 1)), 109);
    $M.232 := $store.i8($M.232, $add.ref($add.ref(__kstrtab_get_mtd_device, $mul.ref(0, 15)), $mul.ref(5, 1)), 116);
    $M.232 := $store.i8($M.232, $add.ref($add.ref(__kstrtab_get_mtd_device, $mul.ref(0, 15)), $mul.ref(6, 1)), 100);
    $M.232 := $store.i8($M.232, $add.ref($add.ref(__kstrtab_get_mtd_device, $mul.ref(0, 15)), $mul.ref(7, 1)), 95);
    $M.232 := $store.i8($M.232, $add.ref($add.ref(__kstrtab_get_mtd_device, $mul.ref(0, 15)), $mul.ref(8, 1)), 100);
    $M.232 := $store.i8($M.232, $add.ref($add.ref(__kstrtab_get_mtd_device, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
    $M.232 := $store.i8($M.232, $add.ref($add.ref(__kstrtab_get_mtd_device, $mul.ref(0, 15)), $mul.ref(10, 1)), 118);
    $M.232 := $store.i8($M.232, $add.ref($add.ref(__kstrtab_get_mtd_device, $mul.ref(0, 15)), $mul.ref(11, 1)), 105);
    $M.232 := $store.i8($M.232, $add.ref($add.ref(__kstrtab_get_mtd_device, $mul.ref(0, 15)), $mul.ref(12, 1)), 99);
    $M.232 := $store.i8($M.232, $add.ref($add.ref(__kstrtab_get_mtd_device, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
    $M.232 := $store.i8($M.232, $add.ref($add.ref(__kstrtab_get_mtd_device, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.233 := $store.i8($M.233, __kstrtab_unregister_mtd_user, 117);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_unregister_mtd_user, $mul.ref(0, 20)), $mul.ref(1, 1)), 110);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_unregister_mtd_user, $mul.ref(0, 20)), $mul.ref(2, 1)), 114);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_unregister_mtd_user, $mul.ref(0, 20)), $mul.ref(3, 1)), 101);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_unregister_mtd_user, $mul.ref(0, 20)), $mul.ref(4, 1)), 103);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_unregister_mtd_user, $mul.ref(0, 20)), $mul.ref(5, 1)), 105);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_unregister_mtd_user, $mul.ref(0, 20)), $mul.ref(6, 1)), 115);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_unregister_mtd_user, $mul.ref(0, 20)), $mul.ref(7, 1)), 116);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_unregister_mtd_user, $mul.ref(0, 20)), $mul.ref(8, 1)), 101);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_unregister_mtd_user, $mul.ref(0, 20)), $mul.ref(9, 1)), 114);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_unregister_mtd_user, $mul.ref(0, 20)), $mul.ref(10, 1)), 95);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_unregister_mtd_user, $mul.ref(0, 20)), $mul.ref(11, 1)), 109);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_unregister_mtd_user, $mul.ref(0, 20)), $mul.ref(12, 1)), 116);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_unregister_mtd_user, $mul.ref(0, 20)), $mul.ref(13, 1)), 100);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_unregister_mtd_user, $mul.ref(0, 20)), $mul.ref(14, 1)), 95);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_unregister_mtd_user, $mul.ref(0, 20)), $mul.ref(15, 1)), 117);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_unregister_mtd_user, $mul.ref(0, 20)), $mul.ref(16, 1)), 115);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_unregister_mtd_user, $mul.ref(0, 20)), $mul.ref(17, 1)), 101);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_unregister_mtd_user, $mul.ref(0, 20)), $mul.ref(18, 1)), 114);
    $M.233 := $store.i8($M.233, $add.ref($add.ref(__kstrtab_unregister_mtd_user, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.234 := $store.i8($M.234, __kstrtab_register_mtd_user, 114);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_register_mtd_user, $mul.ref(0, 18)), $mul.ref(1, 1)), 101);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_register_mtd_user, $mul.ref(0, 18)), $mul.ref(2, 1)), 103);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_register_mtd_user, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_register_mtd_user, $mul.ref(0, 18)), $mul.ref(4, 1)), 115);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_register_mtd_user, $mul.ref(0, 18)), $mul.ref(5, 1)), 116);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_register_mtd_user, $mul.ref(0, 18)), $mul.ref(6, 1)), 101);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_register_mtd_user, $mul.ref(0, 18)), $mul.ref(7, 1)), 114);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_register_mtd_user, $mul.ref(0, 18)), $mul.ref(8, 1)), 95);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_register_mtd_user, $mul.ref(0, 18)), $mul.ref(9, 1)), 109);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_register_mtd_user, $mul.ref(0, 18)), $mul.ref(10, 1)), 116);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_register_mtd_user, $mul.ref(0, 18)), $mul.ref(11, 1)), 100);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_register_mtd_user, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_register_mtd_user, $mul.ref(0, 18)), $mul.ref(13, 1)), 117);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_register_mtd_user, $mul.ref(0, 18)), $mul.ref(14, 1)), 115);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_register_mtd_user, $mul.ref(0, 18)), $mul.ref(15, 1)), 101);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_register_mtd_user, $mul.ref(0, 18)), $mul.ref(16, 1)), 114);
    $M.234 := $store.i8($M.234, $add.ref($add.ref(__kstrtab_register_mtd_user, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.235 := $store.i8($M.235, __kstrtab_mtd_device_unregister, 109);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_mtd_device_unregister, $mul.ref(0, 22)), $mul.ref(1, 1)), 116);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_mtd_device_unregister, $mul.ref(0, 22)), $mul.ref(2, 1)), 100);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_mtd_device_unregister, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_mtd_device_unregister, $mul.ref(0, 22)), $mul.ref(4, 1)), 100);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_mtd_device_unregister, $mul.ref(0, 22)), $mul.ref(5, 1)), 101);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_mtd_device_unregister, $mul.ref(0, 22)), $mul.ref(6, 1)), 118);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_mtd_device_unregister, $mul.ref(0, 22)), $mul.ref(7, 1)), 105);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_mtd_device_unregister, $mul.ref(0, 22)), $mul.ref(8, 1)), 99);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_mtd_device_unregister, $mul.ref(0, 22)), $mul.ref(9, 1)), 101);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_mtd_device_unregister, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_mtd_device_unregister, $mul.ref(0, 22)), $mul.ref(11, 1)), 117);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_mtd_device_unregister, $mul.ref(0, 22)), $mul.ref(12, 1)), 110);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_mtd_device_unregister, $mul.ref(0, 22)), $mul.ref(13, 1)), 114);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_mtd_device_unregister, $mul.ref(0, 22)), $mul.ref(14, 1)), 101);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_mtd_device_unregister, $mul.ref(0, 22)), $mul.ref(15, 1)), 103);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_mtd_device_unregister, $mul.ref(0, 22)), $mul.ref(16, 1)), 105);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_mtd_device_unregister, $mul.ref(0, 22)), $mul.ref(17, 1)), 115);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_mtd_device_unregister, $mul.ref(0, 22)), $mul.ref(18, 1)), 116);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_mtd_device_unregister, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_mtd_device_unregister, $mul.ref(0, 22)), $mul.ref(20, 1)), 114);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(__kstrtab_mtd_device_unregister, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.236 := $store.i8($M.236, __kstrtab_mtd_device_parse_register, 109);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(1, 1)), 116);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(2, 1)), 100);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(4, 1)), 100);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(5, 1)), 101);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(6, 1)), 118);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(7, 1)), 105);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(8, 1)), 99);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(9, 1)), 101);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(10, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(11, 1)), 112);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(12, 1)), 97);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(13, 1)), 114);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(14, 1)), 115);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(15, 1)), 101);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(16, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(17, 1)), 114);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(18, 1)), 101);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(19, 1)), 103);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(20, 1)), 105);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(21, 1)), 115);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(22, 1)), 116);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(23, 1)), 101);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(24, 1)), 114);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(__kstrtab_mtd_device_parse_register, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.1 := $store.ref($M.1, mtd_notifiers, mtd_notifiers);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_notifiers, $mul.ref(0, 16)), $mul.ref(8, 1)), mtd_notifiers);
    $M.1 := $store.ref($M.1, mtd_cls_pm_ops, $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(16, 1)), mtd_cls_suspend);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(24, 1)), mtd_cls_resume);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(32, 1)), mtd_cls_suspend);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(40, 1)), mtd_cls_resume);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(48, 1)), mtd_cls_suspend);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(56, 1)), mtd_cls_resume);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(64, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(72, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(80, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(88, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(104, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(112, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(120, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(128, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(136, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(144, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(152, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(160, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(168, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_cls_pm_ops, $mul.ref(0, 184)), $mul.ref(176, 1)), $0.ref);
    $M.1 := $store.ref($M.1, mtd_class, .str.6);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_class, $mul.ref(0, 120)), $mul.ref(8, 1)), __this_module);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_class, $mul.ref(0, 120)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_class, $mul.ref(0, 120)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_class, $mul.ref(0, 120)), $mul.ref(32, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_class, $mul.ref(0, 120)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_class, $mul.ref(0, 120)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_class, $mul.ref(0, 120)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_class, $mul.ref(0, 120)), $mul.ref(64, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_class, $mul.ref(0, 120)), $mul.ref(72, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_class, $mul.ref(0, 120)), $mul.ref(80, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_class, $mul.ref(0, 120)), $mul.ref(88, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_class, $mul.ref(0, 120)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_class, $mul.ref(0, 120)), $mul.ref(104, 1)), mtd_cls_pm_ops);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_class, $mul.ref(0, 120)), $mul.ref(112, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_bitflip_threshold, .str.47);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_bitflip_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_bitflip_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_bitflip_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bitflip_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bitflip_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bitflip_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bitflip_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bitflip_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bitflip_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bitflip_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bitflip_threshold, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_bitflip_threshold, $mul.ref(0, 48)), $mul.ref(32, 1)), mtd_bitflip_threshold_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_bitflip_threshold, $mul.ref(0, 48)), $mul.ref(40, 1)), mtd_bitflip_threshold_store);
    $M.1 := $store.ref($M.1, dev_attr_bbt_blocks, .str.46);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_bbt_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_bbt_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_bbt_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bbt_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bbt_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bbt_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bbt_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bbt_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bbt_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bbt_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bbt_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_bbt_blocks, $mul.ref(0, 48)), $mul.ref(32, 1)), mtd_bbtblocks_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_bbt_blocks, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_bad_blocks, .str.45);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_bad_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_bad_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_bad_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bad_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bad_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bad_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bad_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bad_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bad_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bad_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bad_blocks, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_bad_blocks, $mul.ref(0, 48)), $mul.ref(32, 1)), mtd_badblocks_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_bad_blocks, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_ecc_failures, .str.44);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_ecc_failures, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_ecc_failures, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_ecc_failures, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_failures, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_failures, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_failures, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_failures, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_failures, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_failures, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_failures, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_failures, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_ecc_failures, $mul.ref(0, 48)), $mul.ref(32, 1)), mtd_ecc_stats_errors_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_ecc_failures, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_corrected_bits, .str.43);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_corrected_bits, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_corrected_bits, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_corrected_bits, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_corrected_bits, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_corrected_bits, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_corrected_bits, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_corrected_bits, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_corrected_bits, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_corrected_bits, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_corrected_bits, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_corrected_bits, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_corrected_bits, $mul.ref(0, 48)), $mul.ref(32, 1)), mtd_ecc_stats_corrected_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_corrected_bits, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_ecc_step_size, .str.42);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_ecc_step_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_ecc_step_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_ecc_step_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_step_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_step_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_step_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_step_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_step_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_step_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_step_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_step_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_ecc_step_size, $mul.ref(0, 48)), $mul.ref(32, 1)), mtd_ecc_step_size_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_ecc_step_size, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_ecc_strength, .str.41);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_ecc_strength, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_ecc_strength, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_ecc_strength, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_strength, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_strength, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_strength, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_strength, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_strength, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_strength, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_strength, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ecc_strength, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_ecc_strength, $mul.ref(0, 48)), $mul.ref(32, 1)), mtd_ecc_strength_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_ecc_strength, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_name, .str.40);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(32, 1)), mtd_name_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_name, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_numeraseregions, .str.39);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_numeraseregions, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_numeraseregions, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_numeraseregions, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_numeraseregions, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_numeraseregions, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_numeraseregions, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_numeraseregions, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_numeraseregions, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_numeraseregions, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_numeraseregions, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_numeraseregions, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_numeraseregions, $mul.ref(0, 48)), $mul.ref(32, 1)), mtd_numeraseregions_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_numeraseregions, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_oobsize, .str.38);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_oobsize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_oobsize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_oobsize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_oobsize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_oobsize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_oobsize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_oobsize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_oobsize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_oobsize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_oobsize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_oobsize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_oobsize, $mul.ref(0, 48)), $mul.ref(32, 1)), mtd_oobsize_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_oobsize, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_subpagesize, .str.37);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_subpagesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_subpagesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_subpagesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_subpagesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_subpagesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_subpagesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_subpagesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_subpagesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_subpagesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_subpagesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_subpagesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_subpagesize, $mul.ref(0, 48)), $mul.ref(32, 1)), mtd_subpagesize_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_subpagesize, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_writesize, .str.36);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_writesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_writesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_writesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_writesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_writesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_writesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_writesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_writesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_writesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_writesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_writesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_writesize, $mul.ref(0, 48)), $mul.ref(32, 1)), mtd_writesize_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_writesize, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_erasesize, .str.35);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_erasesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_erasesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_erasesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_erasesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_erasesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_erasesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_erasesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_erasesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_erasesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_erasesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_erasesize, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_erasesize, $mul.ref(0, 48)), $mul.ref(32, 1)), mtd_erasesize_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_erasesize, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_size, .str.34);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(32, 1)), mtd_size_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_size, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_flags, .str.33);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_flags, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_flags, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_flags, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_flags, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_flags, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_flags, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_flags, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_flags, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_flags, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_flags, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_flags, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_flags, $mul.ref(0, 48)), $mul.ref(32, 1)), mtd_flags_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_flags, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, dev_attr_type, .str.32);
    $M.1 := $store.i16($M.1, $add.ref($add.ref($add.ref(dev_attr_type, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(dev_attr_type, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(dev_attr_type, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_type, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_type, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_type, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_type, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_type, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_type, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_type, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_type, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_type, $mul.ref(0, 48)), $mul.ref(32, 1)), mtd_type_show);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(dev_attr_type, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, mtd_attrs, dev_attr_type);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_attrs, $mul.ref(0, 136)), $mul.ref(1, 8)), dev_attr_flags);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_attrs, $mul.ref(0, 136)), $mul.ref(2, 8)), dev_attr_size);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_attrs, $mul.ref(0, 136)), $mul.ref(3, 8)), dev_attr_erasesize);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_attrs, $mul.ref(0, 136)), $mul.ref(4, 8)), dev_attr_writesize);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_attrs, $mul.ref(0, 136)), $mul.ref(5, 8)), dev_attr_subpagesize);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_attrs, $mul.ref(0, 136)), $mul.ref(6, 8)), dev_attr_oobsize);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_attrs, $mul.ref(0, 136)), $mul.ref(7, 8)), dev_attr_numeraseregions);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_attrs, $mul.ref(0, 136)), $mul.ref(8, 8)), dev_attr_name);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_attrs, $mul.ref(0, 136)), $mul.ref(9, 8)), dev_attr_ecc_strength);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_attrs, $mul.ref(0, 136)), $mul.ref(10, 8)), dev_attr_ecc_step_size);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_attrs, $mul.ref(0, 136)), $mul.ref(11, 8)), dev_attr_corrected_bits);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_attrs, $mul.ref(0, 136)), $mul.ref(12, 8)), dev_attr_ecc_failures);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_attrs, $mul.ref(0, 136)), $mul.ref(13, 8)), dev_attr_bad_blocks);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_attrs, $mul.ref(0, 136)), $mul.ref(14, 8)), dev_attr_bbt_blocks);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_attrs, $mul.ref(0, 136)), $mul.ref(15, 8)), dev_attr_bitflip_threshold);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_attrs, $mul.ref(0, 136)), $mul.ref(16, 8)), $0.ref);
    $M.1 := $store.ref($M.1, mtd_group, $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_group, $mul.ref(0, 32)), $mul.ref(16, 1)), mtd_attrs);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, mtd_groups, mtd_group);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_groups, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, mtd_devtype, .str.6);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_devtype, $mul.ref(0, 48)), $mul.ref(8, 1)), mtd_groups);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_devtype, $mul.ref(0, 48)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_devtype, $mul.ref(0, 48)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_devtype, $mul.ref(0, 48)), $mul.ref(32, 1)), mtd_release);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_devtype, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, mtd_bdi, $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(24, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(32, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(56, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(60, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(64, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(72, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(56, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(88, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(0, 104)), $mul.ref(72, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(0, 104)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(0, 104)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(0, 104)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(1, 104)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(1, 104)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(1, 104)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(1, 104)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(1, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(1, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(1, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(1, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(1, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(1, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(1, 104)), $mul.ref(72, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(1, 104)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(1, 104)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(1, 104)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(2, 104)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(2, 104)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(2, 104)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(2, 104)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(2, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(2, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(2, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(2, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(2, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(2, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(2, 104)), $mul.ref(72, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(2, 104)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(2, 104)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(2, 104)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(3, 104)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(3, 104)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(3, 104)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(3, 104)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(3, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(3, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(3, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(3, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(3, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(3, 104)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(3, 104)), $mul.ref(72, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(3, 104)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(3, 104)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(160, 1)), $mul.ref(3, 104)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(576, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(584, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(592, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(600, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(608, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(616, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(624, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(632, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(104, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(112, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(112, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(640, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(824, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(832, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(832, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(832, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(832, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(832, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(832, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(832, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(832, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(832, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(832, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(904, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(904, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(44, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(208, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(920, 1)), $mul.ref(216, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1144, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1144, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1144, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1144, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1144, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1144, 1)), $mul.ref(40, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1144, 1)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(104, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(112, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(112, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(112, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(112, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1200, 1)), $mul.ref(112, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1384, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1392, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1400, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1400, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1416, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1416, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1432, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1432, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1432, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1432, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1432, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1432, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1432, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1432, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1432, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(80, 1)), $mul.ref(1432, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1592, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1592, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1592, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1608, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1616, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1624, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1624, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1624, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1624, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1624, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1624, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1624, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1624, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1624, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1624, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1624, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1624, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1712, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(16, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(44, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(48, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1720, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1848, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_bdi, $mul.ref(0, 1864)), $mul.ref(1856, 1)), $0.ref);
    $M.1 := $store.ref($M.1, mtd_idr, $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_idr, $mul.ref(0, 112)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(mtd_idr, $mul.ref(0, 112)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(mtd_idr, $mul.ref(0, 112)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(mtd_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.31);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mtd_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref(mtd_idr, $mul.ref(0, 112)), $mul.ref(96, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(mtd_idr, $mul.ref(0, 112)), $mul.ref(104, 1)), $0.ref);
    $M.127 := 0;
    call {:si_unique_call 1622} {:cexpr "ldv_retval_19"} boogie_si_record_i32(0);
    $M.119 := 0;
    call {:si_unique_call 1623} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.118 := 0;
    call {:si_unique_call 1624} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.112 := 0;
    call {:si_unique_call 1625} {:cexpr "ldv_retval_10"} boogie_si_record_i32(0);
    $M.113 := 0;
    call {:si_unique_call 1626} {:cexpr "ldv_retval_9"} boogie_si_record_i32(0);
    $M.109 := 0;
    call {:si_unique_call 1627} {:cexpr "ldv_retval_13"} boogie_si_record_i32(0);
    $M.124 := 0;
    call {:si_unique_call 1628} {:cexpr "ldv_retval_21"} boogie_si_record_i32(0);
    $M.116 := 0;
    call {:si_unique_call 1629} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.110 := 0;
    call {:si_unique_call 1630} {:cexpr "ldv_retval_12"} boogie_si_record_i32(0);
    $M.105 := 0;
    call {:si_unique_call 1631} {:cexpr "ldv_retval_17"} boogie_si_record_i32(0);
    $M.108 := 0;
    call {:si_unique_call 1632} {:cexpr "ldv_retval_14"} boogie_si_record_i32(0);
    $M.115 := 0;
    call {:si_unique_call 1633} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.114 := 0;
    call {:si_unique_call 1634} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.106 := 0;
    call {:si_unique_call 1635} {:cexpr "ldv_retval_16"} boogie_si_record_i32(0);
    $M.107 := 0;
    call {:si_unique_call 1636} {:cexpr "ldv_retval_15"} boogie_si_record_i32(0);
    $M.121 := 0;
    call {:si_unique_call 1637} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.111 := 0;
    call {:si_unique_call 1638} {:cexpr "ldv_retval_11"} boogie_si_record_i32(0);
    $M.122 := 0;
    call {:si_unique_call 1639} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.117 := 0;
    call {:si_unique_call 1640} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.120 := 0;
    call {:si_unique_call 1641} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.104 := 0;
    call {:si_unique_call 1642} {:cexpr "ldv_retval_18"} boogie_si_record_i32(0);
    $M.123 := 0;
    call {:si_unique_call 1643} {:cexpr "ldv_retval_20"} boogie_si_record_i32(0);
    $M.100 := 0;
    call {:si_unique_call 1644} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.83 := 0;
    call {:si_unique_call 1645} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.86 := 0;
    call {:si_unique_call 1646} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.88 := 0;
    call {:si_unique_call 1647} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.76 := $0.ref;
    $M.79 := $0.ref;
    $M.93 := 0;
    call {:si_unique_call 1648} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.94 := 0;
    call {:si_unique_call 1649} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.101 := 0;
    call {:si_unique_call 1650} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(0);
    $M.78 := $0.ref;
    $M.77 := $0.ref;
    $M.87 := 0;
    call {:si_unique_call 1651} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(0);
    $M.84 := 0;
    call {:si_unique_call 1652} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 1653} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(0);
    $M.97 := 0;
    call {:si_unique_call 1654} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(0);
    $M.80 := $0.ref;
    $M.95 := 0;
    call {:si_unique_call 1655} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(0);
    $M.85 := 0;
    call {:si_unique_call 1656} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.91 := 0;
    call {:si_unique_call 1657} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(0);
    $M.90 := 0;
    call {:si_unique_call 1658} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(0);
    $M.103 := 0;
    call {:si_unique_call 1659} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.82 := 0;
    call {:si_unique_call 1660} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(0);
    $M.125 := $0.ref;
    $M.89 := 0;
    call {:si_unique_call 1661} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.92 := 0;
    call {:si_unique_call 1662} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.102 := 0;
    call {:si_unique_call 1663} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.96 := 0;
    call {:si_unique_call 1664} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(0);
    $M.98 := 0;
    call {:si_unique_call 1665} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(0);
    $M.126 := $0.ref;
    $M.99 := 0;
    call {:si_unique_call 1666} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.10 := 1;
    call {:si_unique_call 1667} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32(1);
    $M.1 := $store.i8($M.1, .str.6, 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.6, $mul.ref(0, 4)), $mul.ref(1, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.6, $mul.ref(0, 4)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.6, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.1 := $store.i8($M.1, .str.31, 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 13)), $mul.ref(1, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 13)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 13)), $mul.ref(4, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 13)), $mul.ref(5, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 13)), $mul.ref(6, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 13)), $mul.ref(7, 1)), 46);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 13)), $mul.ref(8, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 13)), $mul.ref(9, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 13)), $mul.ref(10, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 13)), $mul.ref(11, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.31, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, .str.32, 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 5)), $mul.ref(1, 1)), 121);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 5)), $mul.ref(2, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 5)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.32, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.321 := $store.i8($M.321, .str.55, 97);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.55, $mul.ref(0, 7)), $mul.ref(1, 1)), 98);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.55, $mul.ref(0, 7)), $mul.ref(2, 1)), 115);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.55, $mul.ref(0, 7)), $mul.ref(3, 1)), 101);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.55, $mul.ref(0, 7)), $mul.ref(4, 1)), 110);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.55, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.55, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.321 := $store.i8($M.321, .str.56, 114);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.56, $mul.ref(0, 4)), $mul.ref(1, 1)), 97);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.56, $mul.ref(0, 4)), $mul.ref(2, 1)), 109);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.56, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.321 := $store.i8($M.321, .str.57, 114);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.57, $mul.ref(0, 4)), $mul.ref(1, 1)), 111);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.57, $mul.ref(0, 4)), $mul.ref(2, 1)), 109);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.57, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.321 := $store.i8($M.321, .str.58, 110);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.58, $mul.ref(0, 4)), $mul.ref(1, 1)), 111);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.58, $mul.ref(0, 4)), $mul.ref(2, 1)), 114);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.58, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.321 := $store.i8($M.321, .str.59, 110);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.59, $mul.ref(0, 5)), $mul.ref(1, 1)), 97);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.59, $mul.ref(0, 5)), $mul.ref(2, 1)), 110);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.59, $mul.ref(0, 5)), $mul.ref(3, 1)), 100);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.59, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.321 := $store.i8($M.321, .str.60, 100);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.60, $mul.ref(0, 10)), $mul.ref(1, 1)), 97);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.60, $mul.ref(0, 10)), $mul.ref(2, 1)), 116);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.60, $mul.ref(0, 10)), $mul.ref(3, 1)), 97);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.60, $mul.ref(0, 10)), $mul.ref(4, 1)), 102);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.60, $mul.ref(0, 10)), $mul.ref(5, 1)), 108);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.60, $mul.ref(0, 10)), $mul.ref(6, 1)), 97);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.60, $mul.ref(0, 10)), $mul.ref(7, 1)), 115);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.60, $mul.ref(0, 10)), $mul.ref(8, 1)), 104);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.60, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.321 := $store.i8($M.321, .str.61, 117);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.61, $mul.ref(0, 4)), $mul.ref(1, 1)), 98);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.61, $mul.ref(0, 4)), $mul.ref(2, 1)), 105);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.61, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.321 := $store.i8($M.321, .str.62, 109);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.62, $mul.ref(0, 9)), $mul.ref(1, 1)), 108);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.62, $mul.ref(0, 9)), $mul.ref(2, 1)), 99);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.62, $mul.ref(0, 9)), $mul.ref(3, 1)), 45);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.62, $mul.ref(0, 9)), $mul.ref(4, 1)), 110);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.62, $mul.ref(0, 9)), $mul.ref(5, 1)), 97);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.62, $mul.ref(0, 9)), $mul.ref(6, 1)), 110);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.62, $mul.ref(0, 9)), $mul.ref(7, 1)), 100);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.62, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.321 := $store.i8($M.321, .str.63, 117);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(1, 1)), 110);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(2, 1)), 107);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(3, 1)), 110);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(5, 1)), 119);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(6, 1)), 110);
    $M.321 := $store.i8($M.321, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.322 := $store.i8($M.322, .str.54, 37);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.54, $mul.ref(0, 4)), $mul.ref(1, 1)), 115);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.54, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.322 := $store.i8($M.322, $add.ref($add.ref(.str.54, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.1 := $store.i8($M.1, .str.33, 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.33, $mul.ref(0, 6)), $mul.ref(1, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.33, $mul.ref(0, 6)), $mul.ref(2, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.33, $mul.ref(0, 6)), $mul.ref(3, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.33, $mul.ref(0, 6)), $mul.ref(4, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.33, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.323 := $store.i8($M.323, .str.64, 48);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.64, $mul.ref(0, 7)), $mul.ref(1, 1)), 120);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.64, $mul.ref(0, 7)), $mul.ref(2, 1)), 37);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.64, $mul.ref(0, 7)), $mul.ref(3, 1)), 108);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.64, $mul.ref(0, 7)), $mul.ref(4, 1)), 120);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.64, $mul.ref(0, 7)), $mul.ref(5, 1)), 10);
    $M.323 := $store.i8($M.323, $add.ref($add.ref(.str.64, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.34, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.34, $mul.ref(0, 5)), $mul.ref(1, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.34, $mul.ref(0, 5)), $mul.ref(2, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.34, $mul.ref(0, 5)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.34, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.324 := $store.i8($M.324, .str.50, 37);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.50, $mul.ref(0, 6)), $mul.ref(1, 1)), 108);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.50, $mul.ref(0, 6)), $mul.ref(2, 1)), 108);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.50, $mul.ref(0, 6)), $mul.ref(3, 1)), 117);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.50, $mul.ref(0, 6)), $mul.ref(4, 1)), 10);
    $M.324 := $store.i8($M.324, $add.ref($add.ref(.str.50, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.35, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 10)), $mul.ref(1, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 10)), $mul.ref(2, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 10)), $mul.ref(3, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 10)), $mul.ref(4, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 10)), $mul.ref(5, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 10)), $mul.ref(6, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 10)), $mul.ref(7, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 10)), $mul.ref(8, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.35, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.325 := $store.i8($M.325, .str.49, 37);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.49, $mul.ref(0, 5)), $mul.ref(1, 1)), 108);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.49, $mul.ref(0, 5)), $mul.ref(2, 1)), 117);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.49, $mul.ref(0, 5)), $mul.ref(3, 1)), 10);
    $M.325 := $store.i8($M.325, $add.ref($add.ref(.str.49, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, .str.36, 119);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 10)), $mul.ref(1, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 10)), $mul.ref(2, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 10)), $mul.ref(3, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 10)), $mul.ref(4, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 10)), $mul.ref(5, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 10)), $mul.ref(6, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 10)), $mul.ref(7, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 10)), $mul.ref(8, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.36, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.1 := $store.i8($M.1, .str.37, 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.37, $mul.ref(0, 12)), $mul.ref(1, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.37, $mul.ref(0, 12)), $mul.ref(2, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.37, $mul.ref(0, 12)), $mul.ref(3, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.37, $mul.ref(0, 12)), $mul.ref(4, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.37, $mul.ref(0, 12)), $mul.ref(5, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.37, $mul.ref(0, 12)), $mul.ref(6, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.37, $mul.ref(0, 12)), $mul.ref(7, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.37, $mul.ref(0, 12)), $mul.ref(8, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.37, $mul.ref(0, 12)), $mul.ref(9, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.37, $mul.ref(0, 12)), $mul.ref(10, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.37, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.326 := $store.i8($M.326, .str.48, 37);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.48, $mul.ref(0, 4)), $mul.ref(1, 1)), 117);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.48, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.326 := $store.i8($M.326, $add.ref($add.ref(.str.48, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.1 := $store.i8($M.1, .str.38, 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.38, $mul.ref(0, 8)), $mul.ref(1, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.38, $mul.ref(0, 8)), $mul.ref(2, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.38, $mul.ref(0, 8)), $mul.ref(3, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.38, $mul.ref(0, 8)), $mul.ref(4, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.38, $mul.ref(0, 8)), $mul.ref(5, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.38, $mul.ref(0, 8)), $mul.ref(6, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.38, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.39, 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(1, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(2, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(4, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(5, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(6, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(7, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(8, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(9, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(10, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(11, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(12, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(13, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(14, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.1 := $store.i8($M.1, .str.40, 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 5)), $mul.ref(1, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 5)), $mul.ref(2, 1)), 109);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 5)), $mul.ref(3, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i8($M.1, .str.41, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.41, $mul.ref(0, 13)), $mul.ref(1, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.41, $mul.ref(0, 13)), $mul.ref(2, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.41, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.41, $mul.ref(0, 13)), $mul.ref(4, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.41, $mul.ref(0, 13)), $mul.ref(5, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.41, $mul.ref(0, 13)), $mul.ref(6, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.41, $mul.ref(0, 13)), $mul.ref(7, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.41, $mul.ref(0, 13)), $mul.ref(8, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.41, $mul.ref(0, 13)), $mul.ref(9, 1)), 103);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.41, $mul.ref(0, 13)), $mul.ref(10, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.41, $mul.ref(0, 13)), $mul.ref(11, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.41, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, .str.42, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(1, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(2, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(4, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(5, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(6, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(7, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(9, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(10, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(11, 1)), 122);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.1 := $store.i8($M.1, .str.43, 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 15)), $mul.ref(1, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 15)), $mul.ref(2, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 15)), $mul.ref(3, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 15)), $mul.ref(4, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 15)), $mul.ref(5, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 15)), $mul.ref(6, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 15)), $mul.ref(7, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 15)), $mul.ref(8, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 15)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 15)), $mul.ref(10, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 15)), $mul.ref(11, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 15)), $mul.ref(12, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 15)), $mul.ref(13, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.1 := $store.i8($M.1, .str.44, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 13)), $mul.ref(1, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 13)), $mul.ref(2, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 13)), $mul.ref(4, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 13)), $mul.ref(5, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 13)), $mul.ref(6, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 13)), $mul.ref(7, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 13)), $mul.ref(8, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 13)), $mul.ref(9, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 13)), $mul.ref(10, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 13)), $mul.ref(11, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i8($M.1, .str.45, 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 11)), $mul.ref(1, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 11)), $mul.ref(2, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 11)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 11)), $mul.ref(4, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 11)), $mul.ref(5, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 11)), $mul.ref(6, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 11)), $mul.ref(7, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 11)), $mul.ref(8, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 11)), $mul.ref(9, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, .str.46, 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 11)), $mul.ref(1, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 11)), $mul.ref(2, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 11)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 11)), $mul.ref(4, 1)), 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 11)), $mul.ref(5, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 11)), $mul.ref(6, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 11)), $mul.ref(7, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 11)), $mul.ref(8, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 11)), $mul.ref(9, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.1 := $store.i8($M.1, .str.47, 98);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 18)), $mul.ref(1, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 18)), $mul.ref(2, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 18)), $mul.ref(3, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 18)), $mul.ref(4, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 18)), $mul.ref(5, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 18)), $mul.ref(6, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 18)), $mul.ref(7, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 18)), $mul.ref(8, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 18)), $mul.ref(9, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 18)), $mul.ref(10, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 18)), $mul.ref(11, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 18)), $mul.ref(12, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 18)), $mul.ref(13, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 18)), $mul.ref(14, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 18)), $mul.ref(15, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 18)), $mul.ref(16, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.327 := $store.i8($M.327, .str.91, 37);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.91, $mul.ref(0, 6)), $mul.ref(1, 1)), 108);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.91, $mul.ref(0, 6)), $mul.ref(2, 1)), 108);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.91, $mul.ref(0, 6)), $mul.ref(3, 1)), 100);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.91, $mul.ref(0, 6)), $mul.ref(4, 1)), 10);
    $M.327 := $store.i8($M.327, $add.ref($add.ref(.str.91, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.328 := $store.i8($M.328, .str.89, 99);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.89, $mul.ref(0, 12)), $mul.ref(1, 1)), 109);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.89, $mul.ref(0, 12)), $mul.ref(2, 1)), 100);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.89, $mul.ref(0, 12)), $mul.ref(3, 1)), 108);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.89, $mul.ref(0, 12)), $mul.ref(4, 1)), 105);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.89, $mul.ref(0, 12)), $mul.ref(5, 1)), 110);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.89, $mul.ref(0, 12)), $mul.ref(6, 1)), 101);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.89, $mul.ref(0, 12)), $mul.ref(7, 1)), 112);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.89, $mul.ref(0, 12)), $mul.ref(8, 1)), 97);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.89, $mul.ref(0, 12)), $mul.ref(9, 1)), 114);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.89, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.89, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.328 := $store.i8($M.328, .str.90, 111);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.90, $mul.ref(0, 7)), $mul.ref(1, 1)), 102);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.90, $mul.ref(0, 7)), $mul.ref(2, 1)), 112);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.90, $mul.ref(0, 7)), $mul.ref(3, 1)), 97);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.90, $mul.ref(0, 7)), $mul.ref(4, 1)), 114);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.90, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.328 := $store.i8($M.328, $add.ref($add.ref(.str.90, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    call {:si_unique_call 1668} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 663536);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32);



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 664568);

procedure devirtbounce.1(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i23 := $eq.ref(mtdchar_erase_callback, $p0);
    assume true;
    goto $bb16, $bb31;

  $bb31:
    assume !($i23 == 1);
    $i22 := $eq.ref(mtd_release, $p0);
    assume true;
    goto $bb15, $bb30;

  $bb30:
    assume !($i22 == 1);
    $i21 := $eq.ref(deregister_mtd_parser, $p0);
    assume true;
    goto $bb14, $bb29;

  $bb29:
    assume !($i21 == 1);
    $i20 := $eq.ref(register_mtd_parser, $p0);
    assume true;
    goto $bb13, $bb28;

  $bb28:
    assume !($i20 == 1);
    $i19 := $eq.ref(mtd_concat_destroy, $p0);
    assume true;
    goto $bb12, $bb27;

  $bb27:
    assume !($i19 == 1);
    $i18 := $eq.ref(concat_erase_callback, $p0);
    assume true;
    goto $bb11, $bb26;

  $bb26:
    assume !($i18 == 1);
    $i17 := $eq.ref(concat_resume, $p0);
    assume {:branchcond $i17} true;
    goto $bb10, $bb25;

  $bb25:
    assume !($i17 == 1);
    $i16 := $eq.ref(concat_sync, $p0);
    assume true;
    goto $bb9, $bb24;

  $bb24:
    assume !($i16 == 1);
    $i15 := $eq.ref(kill_mtd_super, $p0);
    assume true;
    goto $bb8, $bb23;

  $bb23:
    assume !($i15 == 1);
    $i14 := $eq.ref(mtd_erase_callback, $p0);
    assume {:branchcond $i14} true;
    goto $bb7, $bb22;

  $bb22:
    assume !($i14 == 1);
    $i13 := $eq.ref(__put_mtd_device, $p0);
    assume true;
    goto $bb6, $bb21;

  $bb21:
    assume !($i13 == 1);
    $i12 := $eq.ref(put_mtd_device, $p0);
    assume true;
    goto $bb5, $bb20;

  $bb20:
    assume !($i12 == 1);
    $i11 := $eq.ref(register_mtd_user, $p0);
    assume true;
    goto $bb4, $bb19;

  $bb19:
    assume !($i11 == 1);
    $i10 := $eq.ref(part_resume, $p0);
    assume {:branchcond $i10} true;
    goto $bb3, $bb18;

  $bb18:
    assume !($i10 == 1);
    $i9 := $eq.ref(part_sync, $p0);
    assume true;
    goto $bb2, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    call {:si_unique_call 1669} part_sync(arg);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i10 == 1;
    call {:si_unique_call 1670} part_resume(arg);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1671} register_mtd_user($p1);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    call {:si_unique_call 1672} put_mtd_device(arg);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i13 == 1;
    call {:si_unique_call 1673} __put_mtd_device(arg);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i14 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1674} mtd_erase_callback($p2);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i15 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1675} kill_mtd_super($p3);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i16 == 1;
    call {:si_unique_call 1676} concat_sync(arg);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i17 == 1;
    call {:si_unique_call 1677} concat_resume(arg);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i18 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1678} concat_erase_callback($p4);
    return;

  $bb12:
    assume $i19 == 1;
    call {:si_unique_call 1679} mtd_concat_destroy(arg);
    return;

  $bb13:
    assume $i20 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1680} register_mtd_parser($p5);
    return;

  $bb14:
    assume $i21 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1681} deregister_mtd_parser($p6);
    return;

  $bb15:
    assume $i22 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1682} mtd_release($p7);
    return;

  $bb16:
    assume $i23 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1683} mtdchar_erase_callback($p8);
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 665600);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 666632);

procedure devirtbounce.3(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 667664);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: ref, arg4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.20, $CurrAddr;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: ref, arg4: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i30 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i30} true;
    goto $bb16, $bb31;

  $bb31:
    assume !($i30 == 1);
    $i29 := $eq.ref(concat_write, $p0);
    assume true;
    goto $bb15, $bb30;

  $bb30:
    assume !($i29 == 1);
    $i28 := $eq.ref(concat_read, $p0);
    assume {:branchcond $i28} true;
    goto $bb14, $bb29;

  $bb29:
    assume !($i28 == 1);
    $i27 := $eq.ref(mtd_write_user_prot_reg, $p0);
    assume {:branchcond $i27} true;
    goto $bb13, $bb28;

  $bb28:
    assume !($i27 == 1);
    $i26 := $eq.ref(mtd_read_user_prot_reg, $p0);
    assume true;
    goto $bb12, $bb27;

  $bb27:
    assume !($i26 == 1);
    $i25 := $eq.ref(mtd_read_fact_prot_reg, $p0);
    assume true;
    goto $bb11, $bb26;

  $bb26:
    assume !($i25 == 1);
    $i24 := $eq.ref(mtd_panic_write, $p0);
    assume {:branchcond $i24} true;
    goto $bb10, $bb25;

  $bb25:
    assume !($i24 == 1);
    $i23 := $eq.ref(mtd_write, $p0);
    assume true;
    goto $bb9, $bb24;

  $bb24:
    assume !($i23 == 1);
    $i22 := $eq.ref(mtd_read, $p0);
    assume true;
    goto $bb8, $bb23;

  $bb23:
    assume !($i22 == 1);
    $i21 := $eq.ref(part_write_user_prot_reg, $p0);
    assume true;
    goto $bb7, $bb22;

  $bb22:
    assume !($i21 == 1);
    $i20 := $eq.ref(part_read_fact_prot_reg, $p0);
    assume true;
    goto $bb6, $bb21;

  $bb21:
    assume !($i20 == 1);
    $i19 := $eq.ref(part_read_user_prot_reg, $p0);
    assume true;
    goto $bb5, $bb20;

  $bb20:
    assume !($i19 == 1);
    $i18 := $eq.ref(part_panic_write, $p0);
    assume true;
    goto $bb4, $bb19;

  $bb19:
    assume !($i18 == 1);
    $i17 := $eq.ref(part_write, $p0);
    assume {:branchcond $i17} true;
    goto $bb3, $bb18;

  $bb18:
    assume !($i17 == 1);
    $i16 := $eq.ref(part_read, $p0);
    assume true;
    goto $bb2, $bb17;

  $bb17:
    assume !($i16 == 1);
    assume false;
    return;

  $bb2:
    assume $i16 == 1;
    call {:si_unique_call 1684} $i1 := part_read(arg, arg1, arg2, arg3, arg4);
    $r := $i1;
    return;

  $bb3:
    assume $i17 == 1;
    call {:si_unique_call 1685} $i2 := part_write(arg, arg1, arg2, arg3, arg4);
    $r := $i2;
    return;

  $bb4:
    assume $i18 == 1;
    call {:si_unique_call 1686} $i3 := part_panic_write(arg, arg1, arg2, arg3, arg4);
    $r := $i3;
    return;

  $bb5:
    assume $i19 == 1;
    call {:si_unique_call 1687} $i4 := part_read_user_prot_reg(arg, arg1, arg2, arg3, arg4);
    $r := $i4;
    return;

  $bb6:
    assume $i20 == 1;
    call {:si_unique_call 1688} $i5 := part_read_fact_prot_reg(arg, arg1, arg2, arg3, arg4);
    $r := $i5;
    return;

  $bb7:
    assume $i21 == 1;
    call {:si_unique_call 1689} $i6 := part_write_user_prot_reg(arg, arg1, arg2, arg3, arg4);
    $r := $i6;
    return;

  $bb8:
    assume $i22 == 1;
    call {:si_unique_call 1690} $i7 := mtd_read(arg, arg1, arg2, arg3, arg4);
    $r := $i7;
    return;

  $bb9:
    assume $i23 == 1;
    call {:si_unique_call 1691} $i8 := mtd_write(arg, arg1, arg2, arg3, arg4);
    $r := $i8;
    return;

  $bb10:
    assume $i24 == 1;
    call {:si_unique_call 1692} $i9 := mtd_panic_write(arg, arg1, arg2, arg3, arg4);
    $r := $i9;
    return;

  $bb11:
    assume $i25 == 1;
    call {:si_unique_call 1693} $i10 := mtd_read_fact_prot_reg(arg, arg1, arg2, arg3, arg4);
    $r := $i10;
    return;

  $bb12:
    assume $i26 == 1;
    call {:si_unique_call 1694} $i11 := mtd_read_user_prot_reg(arg, arg1, arg2, arg3, arg4);
    $r := $i11;
    return;

  $bb13:
    assume $i27 == 1;
    call {:si_unique_call 1695} $i12 := mtd_write_user_prot_reg(arg, arg1, arg2, arg3, arg4);
    $r := $i12;
    return;

  $bb14:
    assume $i28 == 1;
    call {:si_unique_call 1696} $i13 := concat_read(arg, arg1, arg2, arg3, arg4);
    $r := $i13;
    return;

  $bb15:
    assume $i29 == 1;
    call {:si_unique_call 1697} $i14 := concat_write(arg, arg1, arg2, arg3, arg4);
    $r := $i14;
    return;

  $bb16:
    assume $i30 == 1;
    call {:si_unique_call 1698} $i15 := __builtinx_object_size();
    $r := $i15;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 668696);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: ref, arg4: ref, arg5: ref) returns ($r: i32);



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 669728);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i26 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb14, $bb27;

  $bb27:
    assume !($i26 == 1);
    $i25 := $eq.ref(concat_unlock, $p0);
    assume true;
    goto $bb13, $bb26;

  $bb26:
    assume !($i25 == 1);
    $i24 := $eq.ref(concat_lock, $p0);
    assume {:branchcond $i24} true;
    goto $bb12, $bb25;

  $bb25:
    assume !($i24 == 1);
    $i23 := $eq.ref(mtd_is_locked, $p0);
    assume true;
    goto $bb11, $bb24;

  $bb24:
    assume !($i23 == 1);
    $i22 := $eq.ref(mtd_lock, $p0);
    assume true;
    goto $bb10, $bb23;

  $bb23:
    assume !($i22 == 1);
    $i21 := $eq.ref(mtd_lock_user_prot_reg, $p0);
    assume true;
    goto $bb9, $bb22;

  $bb22:
    assume !($i21 == 1);
    $i20 := $eq.ref(mtd_unpoint, $p0);
    assume true;
    goto $bb8, $bb21;

  $bb21:
    assume !($i20 == 1);
    $i19 := $eq.ref(mtd_unlock, $p0);
    assume true;
    goto $bb7, $bb20;

  $bb20:
    assume !($i19 == 1);
    $i18 := $eq.ref(part_is_locked, $p0);
    assume true;
    goto $bb6, $bb19;

  $bb19:
    assume !($i18 == 1);
    $i17 := $eq.ref(part_unlock, $p0);
    assume {:branchcond $i17} true;
    goto $bb5, $bb18;

  $bb18:
    assume !($i17 == 1);
    $i16 := $eq.ref(part_lock, $p0);
    assume true;
    goto $bb4, $bb17;

  $bb17:
    assume !($i16 == 1);
    $i15 := $eq.ref(part_lock_user_prot_reg, $p0);
    assume true;
    goto $bb3, $bb16;

  $bb16:
    assume !($i15 == 1);
    $i14 := $eq.ref(part_unpoint, $p0);
    assume {:branchcond $i14} true;
    goto $bb2, $bb15;

  $bb15:
    assume !($i14 == 1);
    assume false;
    return;

  $bb2:
    assume $i14 == 1;
    call {:si_unique_call 1699} $i1 := part_unpoint(arg, arg1, arg2);
    $r := $i1;
    return;

  $bb3:
    assume $i15 == 1;
    call {:si_unique_call 1700} $i2 := part_lock_user_prot_reg(arg, arg1, arg2);
    $r := $i2;
    return;

  $bb4:
    assume $i16 == 1;
    call {:si_unique_call 1701} $i3 := part_lock(arg, arg1, arg2);
    $r := $i3;
    return;

  $bb5:
    assume $i17 == 1;
    call {:si_unique_call 1702} $i4 := part_unlock(arg, arg1, arg2);
    $r := $i4;
    return;

  $bb6:
    assume $i18 == 1;
    call {:si_unique_call 1703} $i5 := part_is_locked(arg, arg1, arg2);
    $r := $i5;
    return;

  $bb7:
    assume $i19 == 1;
    call {:si_unique_call 1704} $i6 := mtd_unlock(arg, arg1, arg2);
    $r := $i6;
    return;

  $bb8:
    assume $i20 == 1;
    call {:si_unique_call 1705} $i7 := mtd_unpoint(arg, arg1, arg2);
    $r := $i7;
    return;

  $bb9:
    assume $i21 == 1;
    call {:si_unique_call 1706} $i8 := mtd_lock_user_prot_reg(arg, arg1, arg2);
    $r := $i8;
    return;

  $bb10:
    assume $i22 == 1;
    call {:si_unique_call 1707} $i9 := mtd_lock(arg, arg1, arg2);
    $r := $i9;
    return;

  $bb11:
    assume $i23 == 1;
    call {:si_unique_call 1708} $i10 := mtd_is_locked(arg, arg1, arg2);
    $r := $i10;
    return;

  $bb12:
    assume $i24 == 1;
    call {:si_unique_call 1709} $i11 := concat_lock(arg, arg1, arg2);
    $r := $i11;
    return;

  $bb13:
    assume $i25 == 1;
    call {:si_unique_call 1710} $i12 := concat_unlock(arg, arg1, arg2);
    $r := $i12;
    return;

  $bb14:
    assume $i26 == 1;
    call {:si_unique_call 1711} $i13 := __builtinx_object_size();
    $r := $i13;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 670760);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i64) returns ($r: i64);



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 671792);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.15, $M.0, $M.10, $CurrAddr, assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb8, $bb15;

  $bb15:
    assume !($i16 == 1);
    $i15 := $eq.ref(concat_write_oob, $p0);
    assume true;
    goto $bb7, $bb14;

  $bb14:
    assume !($i15 == 1);
    $i14 := $eq.ref(concat_read_oob, $p0);
    assume {:branchcond $i14} true;
    goto $bb6, $bb13;

  $bb13:
    assume !($i14 == 1);
    $i13 := $eq.ref(mtd_read_oob, $p0);
    assume true;
    goto $bb5, $bb12;

  $bb12:
    assume !($i13 == 1);
    $i12 := $eq.ref(part_write_oob, $p0);
    assume true;
    goto $bb4, $bb11;

  $bb11:
    assume !($i12 == 1);
    $i11 := $eq.ref(part_read_oob, $p0);
    assume true;
    goto $bb3, $bb10;

  $bb10:
    assume !($i11 == 1);
    $i10 := $eq.ref(mtd_reboot_notifier, $p0);
    assume {:branchcond $i10} true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume false;
    return;

  $bb2:
    assume $i10 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 1712} $i3 := mtd_reboot_notifier($p1, arg1, $p2);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    $r := $i3;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i11 == 1;
    call {:si_unique_call 1713} $i4 := part_read_oob(arg, arg1, arg2);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    $r := $i4;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i12 == 1;
    call {:si_unique_call 1714} $i5 := part_write_oob(arg, arg1, arg2);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    $r := $i5;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    call {:si_unique_call 1715} $i6 := mtd_read_oob(arg, arg1, arg2);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    $r := $i6;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i14 == 1;
    call {:si_unique_call 1716} $i7 := concat_read_oob(arg, arg1, arg2);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    $r := $i7;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i15 == 1;
    call {:si_unique_call 1717} $i8 := concat_write_oob(arg, arg1, arg2);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    $r := $i8;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    call {:si_unique_call 1718} $i9 := __builtinx_object_size();
    $r := $i9;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 672824);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i10} true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(mtd_get_user_prot_info, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(mtd_get_fact_prot_info, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i8 == 1);
    $i7 := $eq.ref(part_get_fact_prot_info, $p0);
    assume {:branchcond $i7} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i7 == 1);
    $i6 := $eq.ref(part_get_user_prot_info, $p0);
    assume {:branchcond $i6} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume false;
    return;

  $bb2:
    assume $i6 == 1;
    call {:si_unique_call 1719} $i1 := part_get_user_prot_info(arg, arg1, arg2, arg3);
    $r := $i1;
    return;

  $bb3:
    assume $i7 == 1;
    call {:si_unique_call 1720} $i2 := part_get_fact_prot_info(arg, arg1, arg2, arg3);
    $r := $i2;
    return;

  $bb4:
    assume $i8 == 1;
    call {:si_unique_call 1721} $i3 := mtd_get_fact_prot_info(arg, arg1, arg2, arg3);
    $r := $i3;
    return;

  $bb5:
    assume $i9 == 1;
    call {:si_unique_call 1722} $i4 := mtd_get_user_prot_info(arg, arg1, arg2, arg3);
    $r := $i4;
    return;

  $bb6:
    assume $i10 == 1;
    call {:si_unique_call 1723} $i5 := __builtinx_object_size();
    $r := $i5;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 673856);

procedure devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i21 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i21 == 1);
    $i20 := $eq.ref(mtd_cls_resume, $p0);
    assume true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i20 == 1);
    $i19 := $eq.ref(mtd_cls_suspend, $p0);
    assume true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i19 == 1);
    $i18 := $eq.ref(mtd_is_partition, $p0);
    assume true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i18 == 1);
    $i17 := $eq.ref(concat_suspend, $p0);
    assume {:branchcond $i17} true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i17 == 1);
    $i16 := $eq.ref(__get_mtd_device, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i16 == 1);
    $i15 := $eq.ref(unregister_mtd_user, $p0);
    assume true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i15 == 1);
    $i14 := $eq.ref(mtd_device_unregister, $p0);
    assume {:branchcond $i14} true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i14 == 1);
    $i13 := $eq.ref(part_suspend, $p0);
    assume true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    call {:si_unique_call 1724} $i1 := part_suspend(arg);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    $r := $i1;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i14 == 1;
    call {:si_unique_call 1725} $i2 := mtd_device_unregister(arg);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    $r := $i2;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1726} $i4 := unregister_mtd_user($p3);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    $r := $i4;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    call {:si_unique_call 1727} $i5 := __get_mtd_device(arg);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    $r := $i5;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i17 == 1;
    call {:si_unique_call 1728} $i6 := concat_suspend(arg);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    $r := $i6;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i18 == 1;
    call {:si_unique_call 1729} $i7 := mtd_is_partition(arg);
    $r := $i7;
    return;

  $bb8:
    assume $i19 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1730} $i9 := mtd_cls_suspend($p8);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    $r := $i9;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i20 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1731} $i11 := mtd_cls_resume($p10);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    $r := $i11;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i21 == 1;
    call {:si_unique_call 1732} $i12 := __builtinx_object_size();
    $r := $i12;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 674888);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: ref) returns ($r: i32);



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 675920);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i18 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i18 == 1);
    $i17 := $eq.ref(concat_block_markbad, $p0);
    assume {:branchcond $i17} true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i17 == 1);
    $i16 := $eq.ref(concat_block_isbad, $p0);
    assume true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i16 == 1);
    $i15 := $eq.ref(mtd_block_markbad, $p0);
    assume true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i15 == 1);
    $i14 := $eq.ref(mtd_block_isbad, $p0);
    assume {:branchcond $i14} true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i14 == 1);
    $i13 := $eq.ref(mtd_block_isreserved, $p0);
    assume true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i13 == 1);
    $i12 := $eq.ref(part_block_markbad, $p0);
    assume true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i12 == 1);
    $i11 := $eq.ref(part_block_isbad, $p0);
    assume true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i11 == 1);
    $i10 := $eq.ref(part_block_isreserved, $p0);
    assume {:branchcond $i10} true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i10 == 1);
    assume false;
    return;

  $bb2:
    assume $i10 == 1;
    call {:si_unique_call 1733} $i1 := part_block_isreserved(arg, arg1);
    $r := $i1;
    return;

  $bb3:
    assume $i11 == 1;
    call {:si_unique_call 1734} $i2 := part_block_isbad(arg, arg1);
    $r := $i2;
    return;

  $bb4:
    assume $i12 == 1;
    call {:si_unique_call 1735} $i3 := part_block_markbad(arg, arg1);
    $r := $i3;
    return;

  $bb5:
    assume $i13 == 1;
    call {:si_unique_call 1736} $i4 := mtd_block_isreserved(arg, arg1);
    $r := $i4;
    return;

  $bb6:
    assume $i14 == 1;
    call {:si_unique_call 1737} $i5 := mtd_block_isbad(arg, arg1);
    $r := $i5;
    return;

  $bb7:
    assume $i15 == 1;
    call {:si_unique_call 1738} $i6 := mtd_block_markbad(arg, arg1);
    $r := $i6;
    return;

  $bb8:
    assume $i16 == 1;
    call {:si_unique_call 1739} $i7 := concat_block_isbad(arg, arg1);
    $r := $i7;
    return;

  $bb9:
    assume $i17 == 1;
    call {:si_unique_call 1740} $i8 := concat_block_markbad(arg, arg1);
    $r := $i8;
    return;

  $bb10:
    assume $i18 == 1;
    call {:si_unique_call 1741} $i9 := __builtinx_object_size();
    $r := $i9;
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 676952);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $CurrAddr, $M.10, assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i40 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb13, $bb25;

  $bb25:
    assume !($i40 == 1);
    $i39 := $eq.ref(mtdchar_close, $p0);
    assume true;
    goto $bb12, $bb24;

  $bb24:
    assume !($i39 == 1);
    $i38 := $eq.ref(mtdchar_open, $p0);
    assume true;
    goto $bb11, $bb23;

  $bb23:
    assume !($i38 == 1);
    $i37 := $eq.ref(mtdchar_mmap, $p0);
    assume {:branchcond $i37} true;
    goto $bb10, $bb22;

  $bb22:
    assume !($i37 == 1);
    $i36 := $eq.ref(mtd_proc_show, $p0);
    assume true;
    goto $bb9, $bb21;

  $bb21:
    assume !($i36 == 1);
    $i35 := $eq.ref(single_release, $p0);
    assume true;
    goto $bb8, $bb20;

  $bb20:
    assume !($i35 == 1);
    $i34 := $eq.ref(mtd_proc_open, $p0);
    assume true;
    goto $bb7, $bb19;

  $bb19:
    assume !($i34 == 1);
    $i33 := $eq.ref(concat_erase, $p0);
    assume true;
    goto $bb6, $bb18;

  $bb18:
    assume !($i33 == 1);
    $i32 := $eq.ref(get_sb_mtd_set, $p0);
    assume true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i32 == 1);
    $i31 := $eq.ref(get_sb_mtd_compare, $p0);
    assume true;
    goto $bb4, $bb16;

  $bb16:
    assume !($i31 == 1);
    $i30 := $eq.ref(mtd_erase, $p0);
    assume {:branchcond $i30} true;
    goto $bb3, $bb15;

  $bb15:
    assume !($i30 == 1);
    $i29 := $eq.ref(part_erase, $p0);
    assume true;
    goto $bb2, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume false;
    return;

  $bb2:
    assume $i29 == 1;
    call {:si_unique_call 1742} $i1 := part_erase(arg, arg1);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    $r := $i1;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i30 == 1;
    call {:si_unique_call 1743} $i2 := mtd_erase(arg, arg1);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    $r := $i2;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i31 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1744} $i5 := get_sb_mtd_compare($p3, $p4);
    $r := $i5;
    return;

  $bb5:
    assume $i32 == 1;
    $p6 := $bitcast.ref.ref(arg);
    $p7 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1745} $i8 := get_sb_mtd_set($p6, $p7);
    $r := $i8;
    return;

  $bb6:
    assume $i33 == 1;
    call {:si_unique_call 1746} $i9 := concat_erase(arg, arg1);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    $r := $i9;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i34 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1747} $i12 := mtd_proc_open($p10, $p11);
    $r := $i12;
    return;

  $bb8:
    assume $i35 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1748} $i15 := single_release($p13, $p14);
    $r := $i15;
    return;

  $bb9:
    assume $i36 == 1;
    $p16 := $bitcast.ref.ref(arg);
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1749} $i18 := mtd_proc_show($p16, $p17);
    $r := $i18;
    return;

  $bb10:
    assume $i37 == 1;
    $p19 := $bitcast.ref.ref(arg);
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1750} $i21 := mtdchar_mmap($p19, $p20);
    $r := $i21;
    return;

  $bb11:
    assume $i38 == 1;
    $p22 := $bitcast.ref.ref(arg);
    $p23 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1751} $i24 := mtdchar_open($p22, $p23);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    $r := $i24;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i39 == 1;
    $p25 := $bitcast.ref.ref(arg);
    $p26 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1752} $i27 := mtdchar_close($p25, $p26);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    $r := $i27;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i40 == 1;
    call {:si_unique_call 1753} $i28 := __builtinx_object_size();
    $r := $i28;
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 677984);

procedure devirtbounce.14(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1754} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 679016);

procedure devirtbounce.15(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i27 := $eq.ref(mtdchar_erase_callback, $p0);
    assume {:branchcond $i27} true;
    goto $bb16, $bb31;

  $bb31:
    assume !($i27 == 1);
    $i26 := $eq.ref(mtd_release, $p0);
    assume true;
    goto $bb15, $bb30;

  $bb30:
    assume !($i26 == 1);
    $i25 := $eq.ref(deregister_mtd_parser, $p0);
    assume true;
    goto $bb14, $bb29;

  $bb29:
    assume !($i25 == 1);
    $i24 := $eq.ref(register_mtd_parser, $p0);
    assume {:branchcond $i24} true;
    goto $bb13, $bb28;

  $bb28:
    assume !($i24 == 1);
    $i23 := $eq.ref(mtd_concat_destroy, $p0);
    assume true;
    goto $bb12, $bb27;

  $bb27:
    assume !($i23 == 1);
    $i22 := $eq.ref(concat_erase_callback, $p0);
    assume true;
    goto $bb11, $bb26;

  $bb26:
    assume !($i22 == 1);
    $i21 := $eq.ref(concat_resume, $p0);
    assume true;
    goto $bb10, $bb25;

  $bb25:
    assume !($i21 == 1);
    $i20 := $eq.ref(concat_sync, $p0);
    assume true;
    goto $bb9, $bb24;

  $bb24:
    assume !($i20 == 1);
    $i19 := $eq.ref(kill_mtd_super, $p0);
    assume true;
    goto $bb8, $bb23;

  $bb23:
    assume !($i19 == 1);
    $i18 := $eq.ref(mtd_erase_callback, $p0);
    assume true;
    goto $bb7, $bb22;

  $bb22:
    assume !($i18 == 1);
    $i17 := $eq.ref(__put_mtd_device, $p0);
    assume {:branchcond $i17} true;
    goto $bb6, $bb21;

  $bb21:
    assume !($i17 == 1);
    $i16 := $eq.ref(put_mtd_device, $p0);
    assume true;
    goto $bb5, $bb20;

  $bb20:
    assume !($i16 == 1);
    $i15 := $eq.ref(register_mtd_user, $p0);
    assume true;
    goto $bb4, $bb19;

  $bb19:
    assume !($i15 == 1);
    $i14 := $eq.ref(part_resume, $p0);
    assume {:branchcond $i14} true;
    goto $bb3, $bb18;

  $bb18:
    assume !($i14 == 1);
    $i13 := $eq.ref(part_sync, $p0);
    assume true;
    goto $bb2, $bb17;

  $bb17:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1755} part_sync($p1);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i14 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1756} part_resume($p2);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1757} register_mtd_user($p3);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1758} put_mtd_device($p4);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i17 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1759} __put_mtd_device($p5);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i18 == 1;
    call {:si_unique_call 1760} mtd_erase_callback(arg);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i19 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1761} kill_mtd_super($p6);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i20 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1762} concat_sync($p7);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i21 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1763} concat_resume($p8);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i22 == 1;
    call {:si_unique_call 1764} concat_erase_callback(arg);
    return;

  $bb12:
    assume $i23 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1765} mtd_concat_destroy($p9);
    return;

  $bb13:
    assume $i24 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1766} register_mtd_parser($p10);
    return;

  $bb14:
    assume $i25 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1767} deregister_mtd_parser($p11);
    return;

  $bb15:
    assume $i26 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1768} mtd_release($p12);
    return;

  $bb16:
    assume $i27 == 1;
    call {:si_unique_call 1769} mtdchar_erase_callback(arg);
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 680048);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32);



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 681080);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 682112);

procedure devirtbounce.18(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: ref) returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(get_mtd_device_nm, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1770} $p2 := get_mtd_device_nm($p1);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    $r := $p2;
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 683144);

procedure devirtbounce.19(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1771} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 684176);

procedure devirtbounce.20(funcPtr: ref, arg: ref, arg1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.20(funcPtr: ref, arg: ref, arg1: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 685208);

procedure devirtbounce.21(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.21(funcPtr: ref, arg: ref) returns ($r: i64)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(mtd_get_device_size, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1772} $i2 := mtd_get_device_size($p1);
    $r := $i2;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.1, $M.132, $M.135, $M.164, $M.165, $M.3, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.128, $M.206, $M.207, $M.208, $M.209, $M.210, $M.211, $M.212, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.219, $M.220, $M.221, $M.222, $M.223, $M.224, $M.225, $M.226, $M.227, $M.228, $M.229, $M.230, $M.231, $M.232, $M.233, $M.234, $M.235, $M.236, $M.127, $M.119, $M.118, $M.112, $M.113, $M.109, $M.124, $M.116, $M.110, $M.105, $M.108, $M.115, $M.114, $M.106, $M.107, $M.121, $M.111, $M.122, $M.117, $M.120, $M.104, $M.123, $M.100, $M.83, $M.86, $M.88, $M.76, $M.79, $M.93, $M.94, $M.101, $M.78, $M.77, $M.87, $M.84, $M.81, $M.97, $M.80, $M.95, $M.85, $M.91, $M.90, $M.103, $M.82, $M.125, $M.89, $M.92, $M.102, $M.96, $M.98, $M.126, $M.99, $M.10, $M.321, $M.322, $M.323, $M.324, $M.325, $M.326, $M.327, $M.328, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1773} __SMACK_static_init();
    call {:si_unique_call 1774} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.75, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.78, $M.79, $M.76, $M.77, $M.80, $M.124, $M.66, $M.1, $M.132, $M.135, $M.164, $M.165, $M.3, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.128, $M.206, $M.207, $M.208, $M.209, $M.210, $M.211, $M.212, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.219, $M.220, $M.221, $M.222, $M.223, $M.224, $M.225, $M.226, $M.227, $M.228, $M.229, $M.230, $M.231, $M.232, $M.233, $M.234, $M.235, $M.236, $M.127, $M.125, $M.126, $M.10, $M.321, $M.322, $M.323, $M.324, $M.325, $M.326, $M.327, $M.328, $CurrAddr, $M.0, $M.22, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.20, $M.15, $M.71, $M.28, $M.29, $M.30, $M.31, $M.32, $M.72, $M.73, $M.33, $M.34;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation add_mtd_device_loop_$bb40(in_$p0: ref, in_$p119: ref, in_$p120: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$p118: ref) returns (out_$p119: ref, out_$p120: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$p118: ref)
{

  entry:
    out_$p119, out_$p120, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p118 := in_$p119, in_$p120, in_$p122, in_$p123, in_$p124, in_$p125, in_$p126, in_$i127, in_$i128, in_$p118;
    goto $bb40, exit;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_194;

  $bb42:
    assume out_$i128 == 1;
    assume {:verifier.code 0} true;
    out_$p118 := out_$p125;
    goto $bb42_dummy;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    out_$i128 := $ne.i64(out_$i127, $p2i.ref.i64(mtd_notifiers));
    goto corral_source_split_204;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    out_$i127 := $p2i.ref.i64(out_$p126);
    goto corral_source_split_203;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(out_$p124, $mul.ref($sub.ref(0, 16), 32)), $mul.ref(16, 1));
    goto corral_source_split_202;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref(out_$p124, $mul.ref($sub.ref(0, 16), 32));
    goto corral_source_split_201;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    out_$p124 := $bitcast.ref.ref(out_$p123);
    goto corral_source_split_200;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.1, out_$p122);
    goto corral_source_split_199;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref($add.ref(out_$p118, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_198;

  SeqInstr_6:
    goto corral_source_split_197;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.1, out_$p119);
    call {:si_unique_call 37} devirtbounce.1(out_$p120, in_$p0);
    goto SeqInstr_5;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(out_$p118, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_196;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb42_dummy:
    call {:si_unique_call 1} out_$p119, out_$p120, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p118 := add_mtd_device_loop_$bb40(in_$p0, out_$p119, out_$p120, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p118);
    return;

  exit:
    return;
}



procedure add_mtd_device_loop_$bb40(in_$p0: ref, in_$p119: ref, in_$p120: ref, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$p118: ref) returns (out_$p119: ref, out_$p120: ref, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$p118: ref);
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation add_mtd_device_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} add_mtd_device_loop_$bb3();
    return;

  exit:
    return;
}



procedure add_mtd_device_loop_$bb3();



implementation del_mtd_device_loop_$bb8(in_$p0: ref, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p15: ref) returns (out_$p16: ref, out_$p17: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p15: ref)
{

  entry:
    out_$p16, out_$p17, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p15 := in_$p16, in_$p17, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p15;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_237;

  $bb10:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$p15 := out_$p22;
    goto $bb10_dummy;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, $p2i.ref.i64(mtd_notifiers));
    goto corral_source_split_247;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_246;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p21, $mul.ref($sub.ref(0, 16), 32)), $mul.ref(16, 1));
    goto corral_source_split_245;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p21, $mul.ref($sub.ref(0, 16), 32));
    goto corral_source_split_244;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_243;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.1, out_$p19);
    goto corral_source_split_242;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 32)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_241;

  SeqInstr_9:
    goto corral_source_split_240;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.1, out_$p16);
    call {:si_unique_call 43} devirtbounce.1(out_$p17, in_$p0);
    goto SeqInstr_8;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_239;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p15 := del_mtd_device_loop_$bb8(in_$p0, out_$p16, out_$p17, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p15);
    return;

  exit:
    return;
}



procedure del_mtd_device_loop_$bb8(in_$p0: ref, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p15: ref) returns (out_$p16: ref, out_$p17: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p15: ref);
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation allocate_partition_loop_$bb153(in_$p0: ref, in_$p5: ref, in_$p452: ref, in_$p456: ref, in_$i457: i64, in_$i458: i64, in_$i459: i32, in_$i460: i1, in_$p463: ref, in_$i464: i32, in_$i465: i32, in_$p468: ref, in_$p469: ref, in_$i470: i64, in_$i471: i64, in_$i472: i32, in_$i473: i1, in_$p476: ref, in_$i477: i32, in_$i478: i32, in_$p481: ref, in_$p483: ref, in_$i484: i32, in_$i485: i64, in_$i486: i64, in_$i487: i64, in_$i488: i1, in_$i455: i64) returns (out_$p456: ref, out_$i457: i64, out_$i458: i64, out_$i459: i32, out_$i460: i1, out_$p463: ref, out_$i464: i32, out_$i465: i32, out_$p468: ref, out_$p469: ref, out_$i470: i64, out_$i471: i64, out_$i472: i32, out_$i473: i1, out_$p476: ref, out_$i477: i32, out_$i478: i32, out_$p481: ref, out_$p483: ref, out_$i484: i32, out_$i485: i64, out_$i486: i64, out_$i487: i64, out_$i488: i1, out_$i455: i64)
{

  entry:
    out_$p456, out_$i457, out_$i458, out_$i459, out_$i460, out_$p463, out_$i464, out_$i465, out_$p468, out_$p469, out_$i470, out_$i471, out_$i472, out_$i473, out_$p476, out_$i477, out_$i478, out_$p481, out_$p483, out_$i484, out_$i485, out_$i486, out_$i487, out_$i488, out_$i455 := in_$p456, in_$i457, in_$i458, in_$i459, in_$i460, in_$p463, in_$i464, in_$i465, in_$p468, in_$p469, in_$i470, in_$i471, in_$i472, in_$i473, in_$p476, in_$i477, in_$i478, in_$p481, in_$p483, in_$i484, in_$i485, in_$i486, in_$i487, in_$i488, in_$i455;
    goto $bb153, exit;

  $bb153:
    assume {:verifier.code 0} true;
    goto corral_source_split_977;

  $bb161:
    assume out_$i488 == 1;
    assume {:verifier.code 0} true;
    out_$i455 := out_$i486;
    goto $bb161_dummy;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    out_$i488 := $ugt.i64(out_$i487, out_$i486);
    goto corral_source_split_1004;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    out_$i487 := $load.i64($M.1, in_$p452);
    goto corral_source_split_1003;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    out_$i486 := $add.i64(out_$i485, out_$i455);
    call {:si_unique_call 121} {:cexpr "offs"} boogie_si_record_i64(out_$i486);
    goto corral_source_split_1002;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    out_$i485 := $zext.i32.i64(out_$i484);
    goto corral_source_split_1001;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    out_$i484 := $load.i32($M.1, out_$p483);
    goto corral_source_split_1000;

  $bb157:
    assume {:verifier.code 0} true;
    out_$p483 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_999;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p468, out_$i465);
    goto corral_source_split_990;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    out_$p468 := $add.ref($add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(360, 1)), $mul.ref(12, 1));
    goto corral_source_split_989;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    out_$i465 := $add.i32(out_$i464, 1);
    goto corral_source_split_988;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    out_$i464 := $load.i32($M.1, out_$p463);
    goto corral_source_split_987;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    out_$p463 := $add.ref($add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(360, 1)), $mul.ref(12, 1));
    goto corral_source_split_986;

  $bb155:
    assume out_$i460 == 1;
    goto corral_source_split_985;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    out_$i460 := $ne.i32(out_$i459, 0);
    goto corral_source_split_983;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} out_$i459 := mtd_block_isreserved(in_$p0, out_$i458);
    call {:si_unique_call 118} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i459);
    goto corral_source_split_982;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    out_$i458 := $add.i64(out_$i457, out_$i455);
    goto corral_source_split_981;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    out_$i457 := $load.i64($M.1, out_$p456);
    goto corral_source_split_980;

  $bb154:
    assume {:verifier.code 0} true;
    out_$p456 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_979;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb159:
    assume !(out_$i473 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p481, out_$i478);
    goto corral_source_split_1011;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    out_$p481 := $add.ref($add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_1010;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    out_$i478 := $add.i32(out_$i477, 1);
    goto corral_source_split_1009;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    out_$i477 := $load.i32($M.1, out_$p476);
    goto corral_source_split_1008;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    out_$p476 := $add.ref($add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_1007;

  $bb158:
    assume out_$i473 == 1;
    goto corral_source_split_1006;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    out_$i473 := $ne.i32(out_$i472, 0);
    goto corral_source_split_997;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} out_$i472 := mtd_block_isbad(in_$p0, out_$i471);
    call {:si_unique_call 120} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i472);
    goto corral_source_split_996;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    out_$i471 := $add.i64(out_$i470, out_$i455);
    goto corral_source_split_995;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    out_$i470 := $load.i64($M.1, out_$p469);
    goto corral_source_split_994;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    out_$p469 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_993;

  $bb156:
    assume !(out_$i460 == 1);
    goto corral_source_split_992;

  $bb161_dummy:
    call {:si_unique_call 1} out_$p456, out_$i457, out_$i458, out_$i459, out_$i460, out_$p463, out_$i464, out_$i465, out_$p468, out_$p469, out_$i470, out_$i471, out_$i472, out_$i473, out_$p476, out_$i477, out_$i478, out_$p481, out_$p483, out_$i484, out_$i485, out_$i486, out_$i487, out_$i488, out_$i455 := allocate_partition_loop_$bb153(in_$p0, in_$p5, in_$p452, out_$p456, out_$i457, out_$i458, out_$i459, out_$i460, out_$p463, out_$i464, out_$i465, out_$p468, out_$p469, out_$i470, out_$i471, out_$i472, out_$i473, out_$p476, out_$i477, out_$i478, out_$p481, out_$p483, out_$i484, out_$i485, out_$i486, out_$i487, out_$i488, out_$i455);
    return;

  exit:
    return;
}



procedure allocate_partition_loop_$bb153(in_$p0: ref, in_$p5: ref, in_$p452: ref, in_$p456: ref, in_$i457: i64, in_$i458: i64, in_$i459: i32, in_$i460: i1, in_$p463: ref, in_$i464: i32, in_$i465: i32, in_$p468: ref, in_$p469: ref, in_$i470: i64, in_$i471: i64, in_$i472: i32, in_$i473: i1, in_$p476: ref, in_$i477: i32, in_$i478: i32, in_$p481: ref, in_$p483: ref, in_$i484: i32, in_$i485: i64, in_$i486: i64, in_$i487: i64, in_$i488: i1, in_$i455: i64) returns (out_$p456: ref, out_$i457: i64, out_$i458: i64, out_$i459: i32, out_$i460: i1, out_$p463: ref, out_$i464: i32, out_$i465: i32, out_$p468: ref, out_$p469: ref, out_$i470: i64, out_$i471: i64, out_$i472: i32, out_$i473: i1, out_$p476: ref, out_$i477: i32, out_$i478: i32, out_$p481: ref, out_$p483: ref, out_$i484: i32, out_$i485: i64, out_$i486: i64, out_$i487: i64, out_$i488: i1, out_$i455: i64);
  modifies $M.1;



implementation allocate_partition_loop_$bb133()
{

  entry:
    goto $bb133, exit;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb133_dummy;

  $bb133_dummy:
    call {:si_unique_call 1} allocate_partition_loop_$bb133();
    return;

  exit:
    return;
}



procedure allocate_partition_loop_$bb133();



implementation allocate_partition_loop_$bb121(in_$p5: ref, in_$i331: i32, in_$i337: i64, in_$p339: ref, in_$p360: ref, in_$i361: i32, in_$i362: i64, in_$p364: ref, in_$i365: i32, in_$i366: i1, in_$i367: i64, in_$p369: ref, in_$i370: i32, in_$p372: ref, in_$i373: i32, in_$i374: i1, in_$i358: i32, in_$i375: i64, in_$p377: ref, in_$i378: i64, in_$i379: i1) returns (out_$p360: ref, out_$i361: i32, out_$i362: i64, out_$p364: ref, out_$i365: i32, out_$i366: i1, out_$i367: i64, out_$p369: ref, out_$i370: i32, out_$p372: ref, out_$i373: i32, out_$i374: i1, out_$i358: i32, out_$i375: i64, out_$p377: ref, out_$i378: i64, out_$i379: i1)
{

  entry:
    out_$p360, out_$i361, out_$i362, out_$p364, out_$i365, out_$i366, out_$i367, out_$p369, out_$i370, out_$p372, out_$i373, out_$i374, out_$i358, out_$i375, out_$p377, out_$i378, out_$i379 := in_$p360, in_$i361, in_$i362, in_$p364, in_$i365, in_$i366, in_$i367, in_$p369, in_$i370, in_$p372, in_$i373, in_$i374, in_$i358, in_$i375, in_$p377, in_$i378, in_$i379;
    goto $bb121, exit;

  $bb121:
    assume {:verifier.code 0} true;
    goto corral_source_split_863;

  $bb126:
    assume out_$i374 == 1;
    assume {:verifier.code 0} true;
    out_$i358 := out_$i373;
    goto $bb126_dummy;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    out_$i374 := $slt.i32(out_$i373, in_$i331);
    goto corral_source_split_887;

  $bb125:
    assume {:verifier.code 0} true;
    out_$i373 := $add.i32(out_$i358, 1);
    call {:si_unique_call 107} {:cexpr "i"} boogie_si_record_i32(out_$i373);
    goto corral_source_split_886;

  $bb124:
    assume !(out_$i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p372, out_$i370);
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    out_$p372 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_883;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    out_$i370 := $load.i32($M.1, out_$p369);
    goto corral_source_split_882;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    out_$p369 := $add.ref($add.ref(in_$p339, $mul.ref(out_$i367, 24)), $mul.ref(8, 1));
    goto corral_source_split_881;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    goto corral_source_split_880;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    out_$i367 := $sext.i32.i64(out_$i358);
    goto corral_source_split_879;

  $bb123:
    assume out_$i366 == 1;
    goto corral_source_split_878;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    out_$i366 := $ult.i32(out_$i361, out_$i365);
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$i365 := $load.i32($M.1, out_$p364);
    goto corral_source_split_875;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    out_$p364 := $add.ref($add.ref(in_$p339, $mul.ref(out_$i362, 24)), $mul.ref(8, 1));
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    goto corral_source_split_873;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    out_$i362 := $sext.i32.i64(out_$i358);
    goto corral_source_split_872;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    out_$i361 := $load.i32($M.1, out_$p360);
    goto corral_source_split_871;

  $bb122:
    assume {:verifier.code 0} true;
    out_$p360 := $add.ref($add.ref($add.ref(in_$p5, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_870;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb128:
    assume out_$i379 == 1;
    goto corral_source_split_891;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    out_$i379 := $ult.i64(out_$i378, in_$i337);
    goto corral_source_split_868;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    out_$i378 := $load.i64($M.1, out_$p377);
    goto corral_source_split_867;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    out_$p377 := $add.ref($add.ref(in_$p339, $mul.ref(out_$i375, 24)), $mul.ref(0, 1));
    goto corral_source_split_866;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    goto corral_source_split_865;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    out_$i375 := $sext.i32.i64(out_$i358);
    goto corral_source_split_864;

  $bb126_dummy:
    call {:si_unique_call 1} out_$p360, out_$i361, out_$i362, out_$p364, out_$i365, out_$i366, out_$i367, out_$p369, out_$i370, out_$p372, out_$i373, out_$i374, out_$i358, out_$i375, out_$p377, out_$i378, out_$i379 := allocate_partition_loop_$bb121(in_$p5, in_$i331, in_$i337, in_$p339, out_$p360, out_$i361, out_$i362, out_$p364, out_$i365, out_$i366, out_$i367, out_$p369, out_$i370, out_$p372, out_$i373, out_$i374, out_$i358, out_$i375, out_$p377, out_$i378, out_$i379);
    return;

  exit:
    return;
}



procedure allocate_partition_loop_$bb121(in_$p5: ref, in_$i331: i32, in_$i337: i64, in_$p339: ref, in_$p360: ref, in_$i361: i32, in_$i362: i64, in_$p364: ref, in_$i365: i32, in_$i366: i1, in_$i367: i64, in_$p369: ref, in_$i370: i32, in_$p372: ref, in_$i373: i32, in_$i374: i1, in_$i358: i32, in_$i375: i64, in_$p377: ref, in_$i378: i64, in_$i379: i1) returns (out_$p360: ref, out_$i361: i32, out_$i362: i64, out_$p364: ref, out_$i365: i32, out_$i366: i1, out_$i367: i64, out_$p369: ref, out_$i370: i32, out_$p372: ref, out_$i373: i32, out_$i374: i1, out_$i358: i32, out_$i375: i64, out_$p377: ref, out_$i378: i64, out_$i379: i1);
  modifies $M.1;



implementation allocate_partition_loop_$bb108(in_$p5: ref, in_$i331: i32, in_$p339: ref, in_$i343: i32, in_$i344: i1, in_$i342: i32, in_$i346: i64, in_$p348: ref, in_$i349: i64, in_$p350: ref, in_$i351: i64, in_$i352: i1, in_$i353: i32, in_$i345: i32) returns (out_$i343: i32, out_$i344: i1, out_$i342: i32, out_$i346: i64, out_$p348: ref, out_$i349: i64, out_$p350: ref, out_$i351: i64, out_$i352: i1, out_$i353: i32, out_$i345: i32)
{

  entry:
    out_$i343, out_$i344, out_$i342, out_$i346, out_$p348, out_$i349, out_$p350, out_$i351, out_$i352, out_$i353, out_$i345 := in_$i343, in_$i344, in_$i342, in_$i346, in_$p348, in_$i349, in_$p350, in_$i351, in_$i352, in_$i353, in_$i345;
    goto $bb108, exit;

  $bb108:
    assume {:verifier.code 0} true;
    goto corral_source_split_835;

  $bb110:
    assume out_$i344 == 1;
    assume {:verifier.code 0} true;
    out_$i342 := out_$i343;
    goto $bb110_dummy;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    out_$i345 := out_$i343;
    assume true;
    goto $bb110;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    out_$i344 := $slt.i32(out_$i343, in_$i331);
    goto corral_source_split_845;

  $bb109:
    assume {:verifier.code 0} true;
    out_$i343 := $add.i32(out_$i342, 1);
    call {:si_unique_call 105} {:cexpr "i"} boogie_si_record_i32(out_$i343);
    goto corral_source_split_844;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb112:
    assume out_$i352 == 1;
    goto corral_source_split_849;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    out_$i353 := out_$i342;
    assume true;
    goto $bb112;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    out_$i352 := $ule.i64(out_$i349, out_$i351);
    goto corral_source_split_842;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    out_$i351 := $load.i64($M.1, out_$p350);
    goto corral_source_split_841;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    out_$p350 := $add.ref($add.ref(in_$p5, $mul.ref(0, 1864)), $mul.ref(1840, 1));
    goto corral_source_split_840;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    out_$i349 := $load.i64($M.1, out_$p348);
    goto corral_source_split_839;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    out_$p348 := $add.ref($add.ref(in_$p339, $mul.ref(out_$i346, 24)), $mul.ref(0, 1));
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    goto corral_source_split_837;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    out_$i346 := $sext.i32.i64(out_$i342);
    goto corral_source_split_836;

  $bb110_dummy:
    call {:si_unique_call 1} out_$i343, out_$i344, out_$i342, out_$i346, out_$p348, out_$i349, out_$p350, out_$i351, out_$i352, out_$i353, out_$i345 := allocate_partition_loop_$bb108(in_$p5, in_$i331, in_$p339, out_$i343, out_$i344, out_$i342, out_$i346, out_$p348, out_$i349, out_$p350, out_$i351, out_$i352, out_$i353, out_$i345);
    return;

  exit:
    return;
}



procedure allocate_partition_loop_$bb108(in_$p5: ref, in_$i331: i32, in_$p339: ref, in_$i343: i32, in_$i344: i1, in_$i342: i32, in_$i346: i64, in_$p348: ref, in_$i349: i64, in_$p350: ref, in_$i351: i64, in_$i352: i1, in_$i353: i32, in_$i345: i32) returns (out_$i343: i32, out_$i344: i1, out_$i342: i32, out_$i346: i64, out_$p348: ref, out_$i349: i64, out_$p350: ref, out_$i351: i64, out_$i352: i1, out_$i353: i32, out_$i345: i32);



implementation del_mtd_partitions_loop_$bb4(in_$p0: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$p25: ref, in_$i24: i32, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$i13: i32, in_$p14: ref, in_$p15: ref, in_$i34: i32) returns (out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$p25: ref, out_$i24: i32, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$i13: i32, out_$p14: ref, out_$p15: ref, out_$i34: i32)
{

  entry:
    out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p25, out_$i24, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i13, out_$p14, out_$p15, out_$i34 := in_$p16, in_$p17, in_$i18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$p25, in_$i24, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$i32, in_$i33, in_$i13, in_$p14, in_$p15, in_$i34;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1768;

  $bb13:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i13, out_$p14, out_$p15 := out_$i24, out_$p15, out_$p30;
    goto $bb13_dummy;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i24;
    assume true;
    goto $bb13;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i64(out_$i32, $p2i.ref.i64(mtd_partitions));
    goto corral_source_split_1790;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(out_$p31);
    goto corral_source_split_1789;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p15, $mul.ref(0, 1864)), $mul.ref(1848, 1));
    goto corral_source_split_1788;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(out_$p29, $mul.ref($sub.ref(0, 1840), 1864));
    goto corral_source_split_1787;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_1786;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.1, out_$p27);
    goto corral_source_split_1785;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 1864)), $mul.ref(1848, 1)), $mul.ref(0, 1));
    goto corral_source_split_1784;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1783;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i13;
    goto $bb10;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i22;
    goto $bb10;

  $bb8:
    assume out_$i23 == 1;
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i22, 0);
    goto corral_source_split_1779;

  SeqInstr_48:
    call {:si_unique_call 306} {:cexpr "ret"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_1778;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} out_$i22 := del_mtd_device(out_$p21);
    goto SeqInstr_47;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p14, $mul.ref(0, 1864)), $mul.ref(0, 1));
    goto corral_source_split_1777;

  $bb6:
    assume out_$i20 == 1;
    goto corral_source_split_1776;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i64(out_$i18, out_$i19);
    goto corral_source_split_1774;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1773;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_1772;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.1, out_$p16);
    goto corral_source_split_1771;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p14, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_1770;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} free_partition(out_$p14);
    goto corral_source_split_1794;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} list_del(out_$p25);
    goto corral_source_split_1793;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p14, $mul.ref(0, 1864)), $mul.ref(1848, 1));
    goto corral_source_split_1792;

  $bb9:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p25, out_$i24, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i13, out_$p14, out_$p15, out_$i34 := del_mtd_partitions_loop_$bb4(in_$p0, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$p25, out_$i24, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i13, out_$p14, out_$p15, out_$i34);
    return;

  exit:
    return;
}



procedure del_mtd_partitions_loop_$bb4(in_$p0: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$p25: ref, in_$i24: i32, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$i13: i32, in_$p14: ref, in_$p15: ref, in_$i34: i32) returns (out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$p25: ref, out_$i24: i32, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$i13: i32, out_$p14: ref, out_$p15: ref, out_$i34: i32);
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation register_mtd_user_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p5: ref) returns (out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p5: ref)
{

  entry:
    out_$p6, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$p5 := in_$p6, in_$p7, in_$p8, in_$i9, in_$i10, in_$p11, in_$i12, in_$i13, in_$p5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1827;

  $bb6:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$p5 := out_$p11;
    goto $bb6_dummy;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i64(out_$i12, 0);
    goto corral_source_split_1836;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_1835;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} out_$p11 := __mtd_next_device(out_$i10);
    goto corral_source_split_1834;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i32(out_$i9, 1);
    goto corral_source_split_1833;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i32($M.1, out_$p8);
    goto corral_source_split_1832;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p5, $mul.ref(0, 1832)), $mul.ref(64, 1));
    goto corral_source_split_1831;

  SeqInstr_51:
    goto corral_source_split_1830;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.1, out_$p6);
    call {:si_unique_call 316} devirtbounce.1(out_$p7, out_$p5);
    goto SeqInstr_50;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1829;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$p5 := register_mtd_user_loop_$bb4(in_$p0, out_$p6, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$i12, out_$i13, out_$p5);
    return;

  exit:
    return;
}



procedure register_mtd_user_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p5: ref) returns (out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p5: ref);
  modifies $M.0, $CurrAddr, $M.1, $M.10, assertsPassed;



implementation unregister_mtd_user_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$i9: i32, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p4: ref) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i32, out_$i9: i32, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p4: ref)
{

  entry:
    out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$p4 := in_$p5, in_$p6, in_$p7, in_$i8, in_$i9, in_$p10, in_$i11, in_$i12, in_$p4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1854;

  $bb6:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$p4 := out_$p10;
    goto $bb6_dummy;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i64(out_$i11, 0);
    goto corral_source_split_1863;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_1862;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} out_$p10 := __mtd_next_device(out_$i9);
    goto corral_source_split_1861;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    out_$i9 := $add.i32(out_$i8, 1);
    goto corral_source_split_1860;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i32($M.1, out_$p7);
    goto corral_source_split_1859;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p4, $mul.ref(0, 1832)), $mul.ref(64, 1));
    goto corral_source_split_1858;

  SeqInstr_57:
    goto corral_source_split_1857;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.1, out_$p5);
    call {:si_unique_call 323} devirtbounce.1(out_$p6, out_$p4);
    goto SeqInstr_56;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1856;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$p4 := unregister_mtd_user_loop_$bb4(in_$p0, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$i11, out_$i12, out_$p4);
    return;

  exit:
    return;
}



procedure unregister_mtd_user_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$i9: i32, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p4: ref) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i32, out_$i9: i32, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p4: ref);
  modifies $M.0, $CurrAddr, $M.1, $M.10, assertsPassed;



implementation get_mtd_device_loop_$bb6(in_$p0: ref, in_$i7: i64, in_$i8: i64, in_$i9: i1, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p6: ref) returns (out_$i7: i64, out_$i8: i64, out_$i9: i1, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p6: ref)
{

  entry:
    out_$i7, out_$i8, out_$i9, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p6 := in_$i7, in_$i8, in_$i9, in_$p11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$p6;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1888;

  $bb12:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$p6 := out_$p14;
    goto $bb12_dummy;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_1903;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_1902;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} out_$p14 := __mtd_next_device(out_$i13);
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i12, 1);
    goto corral_source_split_1900;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.1, out_$p11);
    goto corral_source_split_1899;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p6, $mul.ref(0, 1832)), $mul.ref(64, 1));
    goto corral_source_split_1898;

  $bb9:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i64(out_$i7, out_$i8);
    goto corral_source_split_1892;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1891;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64(out_$p6);
    goto corral_source_split_1890;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i7, out_$i8, out_$i9, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p6 := get_mtd_device_loop_$bb6(in_$p0, out_$i7, out_$i8, out_$i9, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p6);
    return;

  exit:
    return;
}



procedure get_mtd_device_loop_$bb6(in_$p0: ref, in_$i7: i64, in_$i8: i64, in_$i9: i1, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p6: ref) returns (out_$i7: i64, out_$i8: i64, out_$i9: i1, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p6: ref);
  modifies $M.0, $CurrAddr;



implementation get_mtd_device_nm_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$i7: i32, in_$i8: i1, in_$p9: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p4: ref) returns (out_$p5: ref, out_$p6: ref, out_$i7: i32, out_$i8: i1, out_$p9: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p4: ref)
{

  entry:
    out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p4 := in_$p5, in_$p6, in_$i7, in_$i8, in_$p9, in_$p11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$p4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1996;

  $bb10:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$p4 := out_$p14;
    goto $bb10_dummy;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_2014;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_2013;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} out_$p14 := __mtd_next_device(out_$i13);
    goto corral_source_split_2012;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i12, 1);
    goto corral_source_split_2011;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.1, out_$p11);
    goto corral_source_split_2010;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p4, $mul.ref(0, 1832)), $mul.ref(64, 1));
    goto corral_source_split_2009;

  $bb7:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    out_$p9 := out_$p4;
    assume true;
    goto $bb7;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i7, 0);
    goto corral_source_split_2001;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} out_$i7 := strcmp(in_$p0, out_$p6);
    call {:si_unique_call 349} {:cexpr "tmp"} boogie_si_record_i32(out_$i7);
    goto corral_source_split_2000;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.1, out_$p5);
    goto corral_source_split_1999;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(out_$p4, $mul.ref(0, 1832)), $mul.ref(56, 1));
    goto corral_source_split_1998;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p4 := get_mtd_device_nm_loop_$bb4(in_$p0, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p4);
    return;

  exit:
    return;
}



procedure get_mtd_device_nm_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$i7: i32, in_$i8: i1, in_$p9: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p4: ref) returns (out_$p5: ref, out_$p6: ref, out_$i7: i32, out_$i8: i1, out_$p9: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p4: ref);
  modifies $M.0, $CurrAddr;



implementation __put_mtd_device_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} __put_mtd_device_loop_$bb3();
    return;

  exit:
    return;
}



procedure __put_mtd_device_loop_$bb3();



implementation mtd_kmalloc_up_to_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$i6: i64, in_$i12: i64, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$p16: ref, in_$i18: i64, in_$i19: i64, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i64, in_$i29: i64, in_$i30: i64, in_$i31: i64, in_$i32: i1) returns (out_$i12: i64, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$p16: ref, out_$i18: i64, out_$i19: i64, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i64, out_$i29: i64, out_$i30: i64, out_$i31: i64, out_$i32: i1)
{

  entry:
    out_$i12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32 := in_$i12, in_$p13, in_$i14, in_$i15, in_$p16, in_$i18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i32 == 1;
    goto $bb16_dummy;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    out_$i32 := $ugt.i64(out_$i31, in_$i6);
    goto corral_source_split_2583;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i64($M.22, in_$p1);
    goto corral_source_split_2582;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $M.22 := $store.i64($M.22, in_$p1, out_$i30);
    goto corral_source_split_2581;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    out_$i30 := $and.i64(out_$i25, out_$i29);
    goto corral_source_split_2580;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    out_$i29 := $sub.i64(0, out_$i28);
    goto corral_source_split_2579;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i32.i64(out_$i27);
    goto corral_source_split_2578;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.1, out_$p26);
    goto corral_source_split_2577;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1832)), $mul.ref(20, 1));
    goto corral_source_split_2576;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    out_$i25 := $sub.i64(out_$i24, 1);
    goto corral_source_split_2575;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i64(out_$i20, out_$i23);
    goto corral_source_split_2574;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i32.i64(out_$i22);
    goto corral_source_split_2573;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.1, out_$p21);
    goto corral_source_split_2572;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1832)), $mul.ref(20, 1));
    goto corral_source_split_2571;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i64($M.22, in_$p1);
    goto corral_source_split_2570;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $M.22 := $store.i64($M.22, in_$p1, out_$i19);
    goto corral_source_split_2569;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    out_$i19 := $lshr.i64(out_$i18, 1);
    goto corral_source_split_2568;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i64($M.22, in_$p1);
    goto corral_source_split_2567;

  $bb13:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    out_$p16 := out_$p13;
    assume true;
    goto $bb13;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i64(out_$i14, 0);
    goto corral_source_split_2561;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_2560;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} out_$p13 := kmalloc(out_$i12, 4198928);
    goto corral_source_split_2559;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i64($M.22, in_$p1);
    goto corral_source_split_2558;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32 := mtd_kmalloc_up_to_loop_$bb10(in_$p0, in_$p1, in_$i6, out_$i12, out_$p13, out_$i14, out_$i15, out_$p16, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32);
    return;

  exit:
    return;
}



procedure mtd_kmalloc_up_to_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$i6: i64, in_$i12: i64, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$p16: ref, in_$i18: i64, in_$i19: i64, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i64, in_$i29: i64, in_$i30: i64, in_$i31: i64, in_$i32: i1) returns (out_$i12: i64, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$p16: ref, out_$i18: i64, out_$i19: i64, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i64, out_$i29: i64, out_$i30: i64, out_$i31: i64, out_$i32: i1);
  modifies $M.22, $CurrAddr;



implementation concat_read_oob_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p9: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$i35: i64, in_$i36: i64, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$i42: i64, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$i48: i64, in_$i49: i64, in_$p50: ref, in_$i51: i1, in_$i52: i32, in_$i53: i64, in_$i54: i64, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$p63: ref, in_$i65: i32, in_$i66: i1, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$p73: ref, in_$i74: i1, in_$i75: i32, in_$i67: i32, in_$i64: i32, in_$i77: i32, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p82: ref, in_$i83: i64, in_$p84: ref, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$i91: i32, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$i101: i1, in_$p102: ref, in_$i103: i64, in_$p104: ref, in_$i105: i64, in_$i106: i64, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$i110: i1, in_$i111: i32, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$i115: i64, in_$p116: ref, in_$p117: ref, in_$i26: i64, in_$i27: i32, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i12: i32, in_$i13: i64, in_$i14: i32) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$i35: i64, out_$i36: i64, out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$i42: i64, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$i48: i64, out_$i49: i64, out_$p50: ref, out_$i51: i1, out_$i52: i32, out_$i53: i64, out_$i54: i64, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$p63: ref, out_$i65: i32, out_$i66: i1, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$p73: ref, out_$i74: i1, out_$i75: i32, out_$i67: i32, out_$i64: i32, out_$i77: i32, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p82: ref, out_$i83: i64, out_$p84: ref, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$i91: i32, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$i101: i1, out_$p102: ref, out_$i103: i64, out_$p104: ref, out_$i105: i64, out_$i106: i64, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$i110: i1, out_$i111: i32, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$i115: i64, out_$p116: ref, out_$p117: ref, out_$i26: i64, out_$i27: i32, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i12: i32, out_$i13: i64, out_$i14: i32)
{

  entry:
    out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p39, out_$i40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$i60, out_$i61, out_$p63, out_$i65, out_$i66, out_$p69, out_$i70, out_$i71, out_$p73, out_$i74, out_$i75, out_$i67, out_$i64, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$p92, out_$p93, out_$p94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_$i115, out_$p116, out_$p117, out_$i26, out_$i27, out_$i118, out_$i119, out_$i120, out_$i12, out_$i13, out_$i14 := in_$p15, in_$p16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$p28, in_$i29, in_$i30, in_$p31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$p37, in_$i38, in_$p39, in_$i40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$i46, in_$p47, in_$i48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p59, in_$i60, in_$i61, in_$p63, in_$i65, in_$i66, in_$p69, in_$i70, in_$i71, in_$p73, in_$i74, in_$i75, in_$i67, in_$i64, in_$i77, in_$p78, in_$p79, in_$i80, in_$i81, in_$p82, in_$i83, in_$p84, in_$i85, in_$i86, in_$p87, in_$p88, in_$i89, in_$i90, in_$i91, in_$p92, in_$p93, in_$p94, in_$i95, in_$p96, in_$p97, in_$p98, in_$p99, in_$i100, in_$i101, in_$p102, in_$i103, in_$p104, in_$i105, in_$i106, in_$p107, in_$p108, in_$i109, in_$i110, in_$i111, in_$p112, in_$p113, in_$p114, in_$i115, in_$p116, in_$p117, in_$i26, in_$i27, in_$i118, in_$i119, in_$i120, in_$i12, in_$i13, in_$i14;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2708;

  $bb38:
    assume out_$i120 == 1;
    assume {:verifier.code 0} true;
    out_$i12, out_$i13, out_$i14 := out_$i27, out_$i26, out_$i118;
    goto $bb38_dummy;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    out_$i120 := $sgt.i32(out_$i119, out_$i118);
    goto corral_source_split_2727;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    out_$i119 := $load.i32($M.1, in_$p9);
    goto corral_source_split_2726;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    out_$i118 := $add.i32(out_$i14, 1);
    call {:si_unique_call 443} {:cexpr "i"} boogie_si_record_i32(out_$i118);
    goto corral_source_split_2725;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2724;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i26, out_$i27 := 0, out_$i77;
    goto $bb8;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    out_$i26, out_$i27 := out_$i25, out_$i12;
    goto $bb8;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    out_$i25 := $sub.i64(out_$i13, out_$i24);
    call {:si_unique_call 442} {:cexpr "from"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_2722;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.1, out_$p23);
    goto corral_source_split_2721;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p19, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2720;

  $bb6:
    assume out_$i22 == 1;
    goto corral_source_split_2719;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    out_$i22 := $uge.i64(out_$i13, out_$i21);
    goto corral_source_split_2717;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.1, out_$p20);
    goto corral_source_split_2716;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2715;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.1, out_$p18);
    goto corral_source_split_2714;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p16, $mul.ref(out_$i17, 8));
    goto corral_source_split_2713;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i14);
    goto corral_source_split_2712;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.1, out_$p15);
    goto corral_source_split_2711;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p4, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_2710;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb33:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, out_$p117, out_$p116);
    goto corral_source_split_2850;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_2849;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref(out_$p113, $mul.ref(out_$i115, 1));
    goto corral_source_split_2848;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i64($M.15, out_$p114);
    goto corral_source_split_2847;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2846;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    out_$p113 := $load.ref($M.15, out_$p112);
    goto corral_source_split_2845;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_2844;

  $bb35:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    out_$i111 := out_$i77;
    assume true;
    goto $bb35;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i64(out_$i109, 0);
    goto corral_source_split_2840;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    out_$i109 := $load.i64($M.15, out_$p108);
    goto corral_source_split_2839;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2838;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, out_$p107, out_$i106);
    goto corral_source_split_2837;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2836;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    out_$i106 := $sub.i64(out_$i103, out_$i105);
    goto corral_source_split_2835;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i64($M.15, out_$p104);
    goto corral_source_split_2834;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2833;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i64($M.15, out_$p102);
    goto corral_source_split_2832;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2831;

  $bb32:
    assume out_$i101 == 1;
    goto corral_source_split_2830;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i64(out_$i100, 0);
    goto corral_source_split_2828;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    out_$i100 := $p2i.ref.i64(out_$p99);
    goto corral_source_split_2827;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.15, out_$p98);
    goto corral_source_split_2826;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_2825;

  $bb27:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, out_$p97, out_$p96);
    goto corral_source_split_2823;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2822;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref(out_$p93, $mul.ref(out_$i95, 1));
    goto corral_source_split_2821;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i64($M.15, out_$p94);
    goto corral_source_split_2820;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2819;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.15, out_$p92);
    goto corral_source_split_2818;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2817;

  $bb29:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    out_$i91 := out_$i77;
    assume true;
    goto $bb29;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i64(out_$i89, 0);
    goto corral_source_split_2813;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i64($M.15, out_$p88);
    goto corral_source_split_2812;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2811;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, out_$p87, out_$i86);
    goto corral_source_split_2810;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2809;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    out_$i86 := $sub.i64(out_$i83, out_$i85);
    goto corral_source_split_2808;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i64($M.15, out_$p84);
    goto corral_source_split_2807;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2806;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i64($M.15, out_$p82);
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2804;

  $bb26:
    assume out_$i81 == 1;
    goto corral_source_split_2803;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    out_$i81 := $ne.i64(out_$i80, 0);
    goto corral_source_split_2801;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    out_$i80 := $p2i.ref.i64(out_$p79);
    goto corral_source_split_2800;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.15, out_$p78);
    goto corral_source_split_2799;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2798;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2797;

  $bb14:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    out_$i77 := out_$i12;
    goto $bb25;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    out_$i77 := out_$i64;
    goto $bb25;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2779;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i75;
    goto $bb17;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i38;
    goto $bb17;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p63, out_$i61);
    goto corral_source_split_2773;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(4, 1));
    goto corral_source_split_2772;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i60, 1);
    goto corral_source_split_2771;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i32($M.1, out_$p59);
    goto corral_source_split_2770;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(4, 1));
    goto corral_source_split_2769;

  $bb15:
    assume out_$i57 == 1;
    goto corral_source_split_2768;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_2766;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} out_$i56 := mtd_is_eccerr(out_$i38);
    call {:si_unique_call 449} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_2765;

  $bb13:
    assume out_$i55 == 1;
    goto corral_source_split_2764;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, 0);
    goto corral_source_split_2762;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} out_$i54 := ldv__builtin_expect(out_$i53, 0);
    call {:si_unique_call 447} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i54);
    goto corral_source_split_2761;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i32.i64(out_$i52);
    goto corral_source_split_2760;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i1.i32(out_$i51);
    goto corral_source_split_2759;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i38, 0);
    goto corral_source_split_2758;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, out_$p50, out_$i49);
    goto corral_source_split_2757;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2756;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i64(out_$i46, out_$i48);
    goto corral_source_split_2755;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i64($M.15, out_$p47);
    goto corral_source_split_2754;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2753;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i64($M.15, out_$p45);
    goto corral_source_split_2752;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2751;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, out_$p44, out_$i43);
    goto corral_source_split_2750;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2749;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i64(out_$i40, out_$i42);
    goto corral_source_split_2748;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i64($M.15, out_$p41);
    goto corral_source_split_2747;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2746;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i64($M.15, out_$p39);
    goto corral_source_split_2745;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2744;

  SeqInstr_105:
    call {:si_unique_call 445} {:cexpr "err"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_2743;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} out_$i38 := mtd_read_oob(out_$p19, out_$i13, in_$p3);
    goto SeqInstr_104;

  $bb11:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, out_$p37, out_$i36);
    goto corral_source_split_2741;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2740;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    out_$i36 := $sub.i64(out_$i35, out_$i13);
    goto corral_source_split_2739;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i64($M.1, out_$p34);
    goto corral_source_split_2738;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p19, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2737;

  $bb10:
    assume out_$i33 == 1;
    goto corral_source_split_2736;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    out_$i33 := $ugt.i64(out_$i30, out_$i32);
    goto corral_source_split_2734;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.1, out_$p31);
    goto corral_source_split_2733;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p19, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2732;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i64(out_$i29, out_$i13);
    goto corral_source_split_2731;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i64($M.15, out_$p28);
    goto corral_source_split_2730;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2729;

  $bb7:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_2793;

  $bb21:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := out_$i12;
    goto $bb22;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i38;
    goto $bb22;

  $bb20:
    assume out_$i74 == 1;
    goto corral_source_split_2791;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i12, 0);
    goto corral_source_split_2787;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p73, out_$i71);
    goto corral_source_split_2786;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_2785;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i32(out_$i70, 1);
    goto corral_source_split_2784;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.1, out_$p69);
    goto corral_source_split_2783;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_2782;

  $bb18:
    assume out_$i66 == 1;
    goto corral_source_split_2781;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    out_$i67 := out_$i38;
    assume true;
    goto $bb18;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_2777;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} out_$i65 := mtd_is_bitflip(out_$i38);
    call {:si_unique_call 451} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_2776;

  $bb16:
    assume !(out_$i57 == 1);
    goto corral_source_split_2775;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p39, out_$i40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$i60, out_$i61, out_$p63, out_$i65, out_$i66, out_$p69, out_$i70, out_$i71, out_$p73, out_$i74, out_$i75, out_$i67, out_$i64, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$p92, out_$p93, out_$p94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_$i115, out_$p116, out_$p117, out_$i26, out_$i27, out_$i118, out_$i119, out_$i120, out_$i12, out_$i13, out_$i14 := concat_read_oob_loop_$bb4(in_$p0, in_$p2, in_$p3, in_$p4, in_$p9, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p39, out_$i40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p59, out_$i60, out_$i61, out_$p63, out_$i65, out_$i66, out_$p69, out_$i70, out_$i71, out_$p73, out_$i74, out_$i75, out_$i67, out_$i64, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$i91, out_$p92, out_$p93, out_$p94, out_$i95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$i103, out_$p104, out_$i105, out_$i106, out_$p107, out_$p108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_$i115, out_$p116, out_$p117, out_$i26, out_$i27, out_$i118, out_$i119, out_$i120, out_$i12, out_$i13, out_$i14);
    return;

  exit:
    return;
}



procedure concat_read_oob_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p9: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$i35: i64, in_$i36: i64, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$i40: i64, in_$p41: ref, in_$i42: i64, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p47: ref, in_$i48: i64, in_$i49: i64, in_$p50: ref, in_$i51: i1, in_$i52: i32, in_$i53: i64, in_$i54: i64, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$p59: ref, in_$i60: i32, in_$i61: i32, in_$p63: ref, in_$i65: i32, in_$i66: i1, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$p73: ref, in_$i74: i1, in_$i75: i32, in_$i67: i32, in_$i64: i32, in_$i77: i32, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p82: ref, in_$i83: i64, in_$p84: ref, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$i91: i32, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$i101: i1, in_$p102: ref, in_$i103: i64, in_$p104: ref, in_$i105: i64, in_$i106: i64, in_$p107: ref, in_$p108: ref, in_$i109: i64, in_$i110: i1, in_$i111: i32, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$i115: i64, in_$p116: ref, in_$p117: ref, in_$i26: i64, in_$i27: i32, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i12: i32, in_$i13: i64, in_$i14: i32) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$i35: i64, out_$i36: i64, out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$i40: i64, out_$p41: ref, out_$i42: i64, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p47: ref, out_$i48: i64, out_$i49: i64, out_$p50: ref, out_$i51: i1, out_$i52: i32, out_$i53: i64, out_$i54: i64, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$p59: ref, out_$i60: i32, out_$i61: i32, out_$p63: ref, out_$i65: i32, out_$i66: i1, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$p73: ref, out_$i74: i1, out_$i75: i32, out_$i67: i32, out_$i64: i32, out_$i77: i32, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p82: ref, out_$i83: i64, out_$p84: ref, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$i91: i32, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$i101: i1, out_$p102: ref, out_$i103: i64, out_$p104: ref, out_$i105: i64, out_$i106: i64, out_$p107: ref, out_$p108: ref, out_$i109: i64, out_$i110: i1, out_$i111: i32, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$i115: i64, out_$p116: ref, out_$p117: ref, out_$i26: i64, out_$i27: i32, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i12: i32, out_$i13: i64, out_$i14: i32);
  modifies $M.15, $M.1, $M.0, $M.10, $CurrAddr, assertsPassed;



implementation concat_write_oob_loop_$bb8(in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p14: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$i28: i64, in_$i29: i64, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$p37: ref, in_$i38: i64, in_$i39: i64, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$i45: i64, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$i51: i64, in_$i52: i64, in_$p53: ref, in_$i54: i1, in_$i55: i32, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$p60: ref, in_$i61: i64, in_$p62: ref, in_$i63: i64, in_$i64: i64, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i1, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$p79: ref, in_$i80: i64, in_$p81: ref, in_$i82: i64, in_$i83: i64, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$p92: ref, in_$p93: ref, in_$i30: i64, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i17: i32, in_$i18: i64) returns (out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$i28: i64, out_$i29: i64, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$p37: ref, out_$i38: i64, out_$i39: i64, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$i45: i64, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$i51: i64, out_$i52: i64, out_$p53: ref, out_$i54: i1, out_$i55: i32, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$p60: ref, out_$i61: i64, out_$p62: ref, out_$i63: i64, out_$i64: i64, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i1, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$p79: ref, out_$i80: i64, out_$p81: ref, out_$i82: i64, out_$i83: i64, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$p92: ref, out_$p93: ref, out_$i30: i64, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i17: i32, out_$i18: i64)
{

  entry:
    out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$p81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$p90, out_$i91, out_$p92, out_$p93, out_$i30, out_$i94, out_$i95, out_$i96, out_$i17, out_$i18 := in_$p19, in_$p20, in_$i21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i29, in_$p31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$p40, in_$i41, in_$p42, in_$i43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$i49, in_$p50, in_$i51, in_$i52, in_$p53, in_$i54, in_$i55, in_$p56, in_$p57, in_$i58, in_$i59, in_$p60, in_$i61, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$i67, in_$i68, in_$p69, in_$p70, in_$p71, in_$i72, in_$p73, in_$p74, in_$p75, in_$p76, in_$i77, in_$i78, in_$p79, in_$i80, in_$p81, in_$i82, in_$i83, in_$p84, in_$p85, in_$i86, in_$i87, in_$p88, in_$p89, in_$p90, in_$i91, in_$p92, in_$p93, in_$i30, in_$i94, in_$i95, in_$i96, in_$i17, in_$i18;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2878;

  $bb32:
    assume out_$i96 == 1;
    assume {:verifier.code 0} true;
    out_$i17, out_$i18 := out_$i94, out_$i30;
    goto $bb32_dummy;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    out_$i96 := $sgt.i32(out_$i95, out_$i94);
    goto corral_source_split_2897;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i32($M.1, in_$p14);
    goto corral_source_split_2896;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i17, 1);
    call {:si_unique_call 456} {:cexpr "i"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_2895;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2894;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i30 := 0;
    goto $bb12;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i29;
    goto $bb12;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    out_$i29 := $sub.i64(out_$i18, out_$i28);
    call {:si_unique_call 455} {:cexpr "to"} boogie_si_record_i64(out_$i29);
    goto corral_source_split_2892;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.1, out_$p27);
    goto corral_source_split_2891;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p23, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2890;

  $bb10:
    assume out_$i26 == 1;
    goto corral_source_split_2889;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    out_$i26 := $uge.i64(out_$i18, out_$i25);
    goto corral_source_split_2887;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.1, out_$p24);
    goto corral_source_split_2886;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2885;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.1, out_$p22);
    goto corral_source_split_2884;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p20, $mul.ref(out_$i21, 8));
    goto corral_source_split_2883;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i17);
    goto corral_source_split_2882;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.1, out_$p19);
    goto corral_source_split_2881;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p4, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_2880;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb27:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, out_$p93, out_$p92);
    goto corral_source_split_2984;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_2983;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref(out_$p89, $mul.ref(out_$i91, 1));
    goto corral_source_split_2982;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i64($M.15, out_$p90);
    goto corral_source_split_2981;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2980;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    out_$p89 := $load.ref($M.15, out_$p88);
    goto corral_source_split_2979;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_2978;

  $bb29:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i64(out_$i86, 0);
    goto corral_source_split_2974;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i64($M.15, out_$p85);
    goto corral_source_split_2973;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2972;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, out_$p84, out_$i83);
    goto corral_source_split_2971;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2970;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    out_$i83 := $sub.i64(out_$i80, out_$i82);
    goto corral_source_split_2969;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i64($M.15, out_$p81);
    goto corral_source_split_2968;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2967;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i64($M.15, out_$p79);
    goto corral_source_split_2966;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_2965;

  $bb26:
    assume out_$i78 == 1;
    goto corral_source_split_2964;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i64(out_$i77, 0);
    goto corral_source_split_2962;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    out_$i77 := $p2i.ref.i64(out_$p76);
    goto corral_source_split_2961;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.15, out_$p75);
    goto corral_source_split_2960;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_2959;

  $bb21:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, out_$p74, out_$p73);
    goto corral_source_split_2957;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2956;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref(out_$p70, $mul.ref(out_$i72, 1));
    goto corral_source_split_2955;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i64($M.15, out_$p71);
    goto corral_source_split_2954;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2953;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.15, out_$p69);
    goto corral_source_split_2952;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2951;

  $bb23:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i64(out_$i67, 0);
    goto corral_source_split_2947;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i64($M.15, out_$p66);
    goto corral_source_split_2946;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2945;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, out_$p65, out_$i64);
    goto corral_source_split_2944;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2943;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    out_$i64 := $sub.i64(out_$i61, out_$i63);
    goto corral_source_split_2942;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i64($M.15, out_$p62);
    goto corral_source_split_2941;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2940;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i64($M.15, out_$p60);
    goto corral_source_split_2939;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2938;

  $bb20:
    assume out_$i59 == 1;
    goto corral_source_split_2937;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i64(out_$i58, 0);
    goto corral_source_split_2935;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p57);
    goto corral_source_split_2934;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.15, out_$p56);
    goto corral_source_split_2933;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_2932;

  $bb18:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i41;
    assume true;
    goto $bb18;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i41, 0);
    goto corral_source_split_2928;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, out_$p53, out_$i52);
    goto corral_source_split_2927;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2926;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i64(out_$i49, out_$i51);
    goto corral_source_split_2925;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i64($M.15, out_$p50);
    goto corral_source_split_2924;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2923;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i64($M.15, out_$p48);
    goto corral_source_split_2922;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_2921;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, out_$p47, out_$i46);
    goto corral_source_split_2920;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2919;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i64(out_$i43, out_$i45);
    goto corral_source_split_2918;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i64($M.15, out_$p44);
    goto corral_source_split_2917;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2916;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.15, out_$p42);
    goto corral_source_split_2915;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p2, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_2914;

  SeqInstr_108:
    call {:si_unique_call 458} {:cexpr "err"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_2913;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} out_$i41 := mtd_write_oob(out_$p23, out_$i18, in_$p3);
    goto SeqInstr_107;

  $bb15:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, out_$p40, out_$i39);
    goto corral_source_split_2911;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2910;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    out_$i39 := $sub.i64(out_$i38, out_$i18);
    goto corral_source_split_2909;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i64($M.1, out_$p37);
    goto corral_source_split_2908;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p23, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2907;

  $bb14:
    assume out_$i36 == 1;
    goto corral_source_split_2906;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    out_$i36 := $ugt.i64(out_$i33, out_$i35);
    goto corral_source_split_2904;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i64($M.1, out_$p34);
    goto corral_source_split_2903;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p23, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_2902;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i64(out_$i32, out_$i18);
    goto corral_source_split_2901;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.15, out_$p31);
    goto corral_source_split_2900;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p3, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_2899;

  $bb11:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb32_dummy:
    call {:si_unique_call 1} out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$p81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$p90, out_$i91, out_$p92, out_$p93, out_$i30, out_$i94, out_$i95, out_$i96, out_$i17, out_$i18 := concat_write_oob_loop_$bb8(in_$p2, in_$p3, in_$p4, in_$p14, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p79, out_$i80, out_$p81, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$p90, out_$i91, out_$p92, out_$p93, out_$i30, out_$i94, out_$i95, out_$i96, out_$i17, out_$i18);
    return;

  exit:
    return;
}



procedure concat_write_oob_loop_$bb8(in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p14: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$p27: ref, in_$i28: i64, in_$i29: i64, in_$p31: ref, in_$i32: i64, in_$i33: i64, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$p37: ref, in_$i38: i64, in_$i39: i64, in_$p40: ref, in_$i41: i32, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$i45: i64, in_$i46: i64, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$i51: i64, in_$i52: i64, in_$p53: ref, in_$i54: i1, in_$i55: i32, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$p60: ref, in_$i61: i64, in_$p62: ref, in_$i63: i64, in_$i64: i64, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$i68: i1, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$p79: ref, in_$i80: i64, in_$p81: ref, in_$i82: i64, in_$i83: i64, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$i91: i64, in_$p92: ref, in_$p93: ref, in_$i30: i64, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i17: i32, in_$i18: i64) returns (out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$p27: ref, out_$i28: i64, out_$i29: i64, out_$p31: ref, out_$i32: i64, out_$i33: i64, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$p37: ref, out_$i38: i64, out_$i39: i64, out_$p40: ref, out_$i41: i32, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$i45: i64, out_$i46: i64, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$i51: i64, out_$i52: i64, out_$p53: ref, out_$i54: i1, out_$i55: i32, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$p60: ref, out_$i61: i64, out_$p62: ref, out_$i63: i64, out_$i64: i64, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$i68: i1, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$p79: ref, out_$i80: i64, out_$p81: ref, out_$i82: i64, out_$i83: i64, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$i91: i64, out_$p92: ref, out_$p93: ref, out_$i30: i64, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i17: i32, out_$i18: i64);
  modifies $M.15, $M.1, $M.0, $M.10, $CurrAddr, assertsPassed;



implementation concat_block_isbad_loop_$bb8(in_$p2: ref, in_$p9: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$i22: i64, in_$p23: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i12: i64, in_$i13: i32) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$i22: i64, out_$p23: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i12: i64, out_$i13: i32)
{

  entry:
    out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p24, out_$i25, out_$i26, out_$i22, out_$p23, out_$i29, out_$i30, out_$i31, out_$i12, out_$i13 := in_$p14, in_$p15, in_$i16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$p24, in_$i25, in_$i26, in_$i22, in_$p23, in_$i29, in_$i30, in_$i31, in_$i12, in_$i13;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3006;

  $bb15:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i12, out_$i13 := out_$i26, out_$i29;
    goto $bb15_dummy;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    out_$i31 := $sgt.i32(out_$i30, out_$i29);
    goto corral_source_split_3024;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.1, in_$p9);
    goto corral_source_split_3023;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i13, 1);
    call {:si_unique_call 463} {:cexpr "i"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_3022;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    out_$i26 := $sub.i64(out_$i12, out_$i25);
    call {:si_unique_call 462} {:cexpr "ofs"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_3020;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.1, out_$p24);
    goto corral_source_split_3019;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p18, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3018;

  $bb10:
    assume out_$i21 == 1;
    goto corral_source_split_3017;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    out_$i22, out_$p23 := out_$i12, out_$p18;
    assume true;
    goto $bb10;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    out_$i21 := $uge.i64(out_$i12, out_$i20);
    goto corral_source_split_3015;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i64($M.1, out_$p19);
    goto corral_source_split_3014;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3013;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.1, out_$p17);
    goto corral_source_split_3012;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p15, $mul.ref(out_$i16, 8));
    goto corral_source_split_3011;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i13);
    goto corral_source_split_3010;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.1, out_$p14);
    goto corral_source_split_3009;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3008;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p24, out_$i25, out_$i26, out_$i22, out_$p23, out_$i29, out_$i30, out_$i31, out_$i12, out_$i13 := concat_block_isbad_loop_$bb8(in_$p2, in_$p9, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p24, out_$i25, out_$i26, out_$i22, out_$p23, out_$i29, out_$i30, out_$i31, out_$i12, out_$i13);
    return;

  exit:
    return;
}



procedure concat_block_isbad_loop_$bb8(in_$p2: ref, in_$p9: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$i22: i64, in_$p23: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i12: i64, in_$i13: i32) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$i22: i64, out_$p23: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i12: i64, out_$i13: i32);



implementation concat_block_markbad_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$i16: i64, in_$p17: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i6: i64, in_$i7: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$i16: i64, out_$p17: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i6: i64, out_$i7: i32)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p18, out_$i19, out_$i20, out_$i16, out_$p17, out_$i30, out_$i31, out_$i32, out_$i6, out_$i7 := in_$p8, in_$p9, in_$i10, in_$p11, in_$p12, in_$p13, in_$i14, in_$i15, in_$p18, in_$i19, in_$i20, in_$i16, in_$p17, in_$i30, in_$i31, in_$i32, in_$i6, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3040;

  $bb14:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i6, out_$i7 := out_$i20, out_$i30;
    goto $bb14_dummy;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    out_$i32 := $sgt.i32(out_$i31, out_$i30);
    goto corral_source_split_3058;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.1, in_$p3);
    goto corral_source_split_3057;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i7, 1);
    call {:si_unique_call 468} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_3056;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    out_$i20 := $sub.i64(out_$i6, out_$i19);
    call {:si_unique_call 467} {:cexpr "ofs"} boogie_si_record_i64(out_$i20);
    goto corral_source_split_3054;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i64($M.1, out_$p18);
    goto corral_source_split_3053;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p12, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3052;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_3051;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    out_$i16, out_$p17 := out_$i6, out_$p12;
    assume true;
    goto $bb6;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    out_$i15 := $uge.i64(out_$i6, out_$i14);
    goto corral_source_split_3049;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i64($M.1, out_$p13);
    goto corral_source_split_3048;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3047;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.1, out_$p11);
    goto corral_source_split_3046;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref(out_$p9, $mul.ref(out_$i10, 8));
    goto corral_source_split_3045;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i7);
    goto corral_source_split_3044;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.1, out_$p8);
    goto corral_source_split_3043;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3042;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p18, out_$i19, out_$i20, out_$i16, out_$p17, out_$i30, out_$i31, out_$i32, out_$i6, out_$i7 := concat_block_markbad_loop_$bb4(in_$p2, in_$p3, out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$p18, out_$i19, out_$i20, out_$i16, out_$p17, out_$i30, out_$i31, out_$i32, out_$i6, out_$i7);
    return;

  exit:
    return;
}



procedure concat_block_markbad_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$p18: ref, in_$i19: i64, in_$i20: i64, in_$i16: i64, in_$p17: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i6: i64, in_$i7: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$p18: ref, out_$i19: i64, out_$i20: i64, out_$i16: i64, out_$p17: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i6: i64, out_$i7: i32);



implementation concat_erase_loop_$bb74()
{

  entry:
    goto $bb74, exit;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb74_dummy;

  $bb74_dummy:
    call {:si_unique_call 1} concat_erase_loop_$bb74();
    return;

  exit:
    return;
}



procedure concat_erase_loop_$bb74();



implementation concat_erase_loop_$bb65(in_$p2: ref, in_$p96: ref, in_$p150: ref, in_$p151: ref, in_$i152: i64, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$i156: i64, in_$i157: i64, in_$p158: ref, in_$i159: i64, in_$i160: i1, in_$p161: ref, in_$i162: i64, in_$p163: ref, in_$i164: i64, in_$i165: i64, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$i169: i64, in_$i170: i64, in_$i171: i32, in_$i172: i1, in_$i173: i64, in_$i174: i32, in_$p188: ref, in_$p189: ref, in_$i190: i64, in_$i191: i64, in_$i192: i32, in_$i193: i1, in_$i147: i64, in_$i148: i64, in_$i149: i32, in_$i194: i32) returns (out_$p150: ref, out_$p151: ref, out_$i152: i64, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$i156: i64, out_$i157: i64, out_$p158: ref, out_$i159: i64, out_$i160: i1, out_$p161: ref, out_$i162: i64, out_$p163: ref, out_$i164: i64, out_$i165: i64, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$i169: i64, out_$i170: i64, out_$i171: i32, out_$i172: i1, out_$i173: i64, out_$i174: i32, out_$p188: ref, out_$p189: ref, out_$i190: i64, out_$i191: i64, out_$i192: i32, out_$i193: i1, out_$i147: i64, out_$i148: i64, out_$i149: i32, out_$i194: i32)
{

  entry:
    out_$p150, out_$p151, out_$i152, out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$p161, out_$i162, out_$p163, out_$i164, out_$i165, out_$p166, out_$p167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i147, out_$i148, out_$i149, out_$i194 := in_$p150, in_$p151, in_$i152, in_$p153, in_$p154, in_$p155, in_$i156, in_$i157, in_$p158, in_$i159, in_$i160, in_$p161, in_$i162, in_$p163, in_$i164, in_$i165, in_$p166, in_$p167, in_$p168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$p188, in_$p189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i147, in_$i148, in_$i149, in_$i194;
    goto $bb65, exit;

  $bb65:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3260;

  $bb81:
    assume out_$i193 == 1;
    assume {:verifier.code 0} true;
    out_$i147, out_$i148, out_$i149 := out_$i191, out_$i170, out_$i192;
    goto $bb81_dummy;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    out_$i194 := out_$i171;
    assume true;
    goto $bb81;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    out_$i193 := $ne.i64(out_$i170, 0);
    goto corral_source_split_3327;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    out_$i192 := $add.i32(out_$i149, 1);
    call {:si_unique_call 491} {:cexpr "i"} boogie_si_record_i32(out_$i192);
    goto corral_source_split_3326;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    out_$i191 := $add.i64(out_$i190, out_$i147);
    call {:si_unique_call 490} {:cexpr "offset"} boogie_si_record_i64(out_$i191);
    goto corral_source_split_3325;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    out_$i190 := $load.i64($M.1, out_$p189);
    goto corral_source_split_3324;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref(out_$p154, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3323;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p188, 0);
    goto corral_source_split_3322;

  $bb80:
    assume {:verifier.code 0} true;
    out_$p188 := $add.ref($add.ref(in_$p96, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3321;

  $bb71:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    out_$i173, out_$i174 := out_$i147, out_$i171;
    assume true;
    goto $bb71;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    out_$i172 := $ne.i32(out_$i171, 0);
    goto corral_source_split_3290;

  SeqInstr_111:
    call {:si_unique_call 485} {:cexpr "err"} boogie_si_record_i32(out_$i171);
    goto corral_source_split_3289;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} out_$i171 := concat_dev_erase(out_$p154, in_$p96);
    goto SeqInstr_110;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    out_$i170 := $sub.i64(out_$i148, out_$i169);
    call {:si_unique_call 483} {:cexpr "length"} boogie_si_record_i64(out_$i170);
    goto corral_source_split_3288;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    out_$i169 := $load.i64($M.1, out_$p168);
    goto corral_source_split_3287;

  $bb69:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref(in_$p96, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_3286;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p167, out_$i148);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p166, out_$i165);
    goto corral_source_split_3281;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(in_$p96, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_3280;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    out_$i165 := $sub.i64(out_$i162, out_$i164);
    goto corral_source_split_3279;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    out_$i164 := $load.i64($M.1, out_$p163);
    goto corral_source_split_3278;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref(in_$p96, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3277;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    out_$i162 := $load.i64($M.1, out_$p161);
    goto corral_source_split_3276;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(out_$p154, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3275;

  $bb67:
    assume out_$i160 == 1;
    goto corral_source_split_3274;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    out_$i160 := $ugt.i64(out_$i157, out_$i159);
    goto corral_source_split_3272;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    out_$i159 := $load.i64($M.1, out_$p158);
    goto corral_source_split_3271;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(out_$p154, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3270;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    out_$i157 := $add.i64(out_$i156, out_$i148);
    goto corral_source_split_3269;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    out_$i156 := $load.i64($M.1, out_$p155);
    goto corral_source_split_3268;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(in_$p96, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3267;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    out_$p154 := $load.ref($M.1, out_$p153);
    goto corral_source_split_3266;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref(out_$p151, $mul.ref(out_$i152, 8));
    goto corral_source_split_3265;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    out_$i152 := $sext.i32.i64(out_$i149);
    goto corral_source_split_3264;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    out_$p151 := $load.ref($M.1, out_$p150);
    goto corral_source_split_3263;

  $bb66:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3262;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref(in_$p96, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_3284;

  $bb68:
    assume !(out_$i160 == 1);
    goto corral_source_split_3283;

  $bb81_dummy:
    call {:si_unique_call 1} out_$p150, out_$p151, out_$i152, out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$p161, out_$i162, out_$p163, out_$i164, out_$i165, out_$p166, out_$p167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i147, out_$i148, out_$i149, out_$i194 := concat_erase_loop_$bb65(in_$p2, in_$p96, out_$p150, out_$p151, out_$i152, out_$p153, out_$p154, out_$p155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$p161, out_$i162, out_$p163, out_$i164, out_$i165, out_$p166, out_$p167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p188, out_$p189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i147, out_$i148, out_$i149, out_$i194);
    return;

  exit:
    return;
}



procedure concat_erase_loop_$bb65(in_$p2: ref, in_$p96: ref, in_$p150: ref, in_$p151: ref, in_$i152: i64, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$i156: i64, in_$i157: i64, in_$p158: ref, in_$i159: i64, in_$i160: i1, in_$p161: ref, in_$i162: i64, in_$p163: ref, in_$i164: i64, in_$i165: i64, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$i169: i64, in_$i170: i64, in_$i171: i32, in_$i172: i1, in_$i173: i64, in_$i174: i32, in_$p188: ref, in_$p189: ref, in_$i190: i64, in_$i191: i64, in_$i192: i32, in_$i193: i1, in_$i147: i64, in_$i148: i64, in_$i149: i32, in_$i194: i32) returns (out_$p150: ref, out_$p151: ref, out_$i152: i64, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$i156: i64, out_$i157: i64, out_$p158: ref, out_$i159: i64, out_$i160: i1, out_$p161: ref, out_$i162: i64, out_$p163: ref, out_$i164: i64, out_$i165: i64, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$i169: i64, out_$i170: i64, out_$i171: i32, out_$i172: i1, out_$i173: i64, out_$i174: i32, out_$p188: ref, out_$p189: ref, out_$i190: i64, out_$i191: i64, out_$i192: i32, out_$i193: i1, out_$i147: i64, out_$i148: i64, out_$i149: i32, out_$i194: i32);
  modifies $M.1, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr, $M.10, assertsPassed;



implementation concat_erase_loop_$bb60()
{

  entry:
    goto $bb60, exit;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb60_dummy;

  $bb60_dummy:
    call {:si_unique_call 1} concat_erase_loop_$bb60();
    return;

  exit:
    return;
}



procedure concat_erase_loop_$bb60();



implementation concat_erase_loop_$bb49(in_$p2: ref, in_$p96: ref, in_$p103: ref, in_$p110: ref, in_$p111: ref, in_$i112: i64, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$p117: ref, in_$i118: i64, in_$i119: i1, in_$p122: ref, in_$i123: i64, in_$p124: ref, in_$i125: i64, in_$i126: i64, in_$p127: ref, in_$p128: ref, in_$i129: i64, in_$i130: i64, in_$i120: i32, in_$i121: i64, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$i108: i64, in_$i109: i32, in_$i136: i32, in_$i137: i64) returns (out_$p110: ref, out_$p111: ref, out_$i112: i64, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$p117: ref, out_$i118: i64, out_$i119: i1, out_$p122: ref, out_$i123: i64, out_$p124: ref, out_$i125: i64, out_$i126: i64, out_$p127: ref, out_$p128: ref, out_$i129: i64, out_$i130: i64, out_$i120: i32, out_$i121: i64, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$i108: i64, out_$i109: i32, out_$i136: i32, out_$i137: i64)
{

  entry:
    out_$p110, out_$p111, out_$i112, out_$p113, out_$p114, out_$p115, out_$i116, out_$p117, out_$i118, out_$i119, out_$p122, out_$i123, out_$p124, out_$i125, out_$i126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i120, out_$i121, out_$i133, out_$i134, out_$i135, out_$i108, out_$i109, out_$i136, out_$i137 := in_$p110, in_$p111, in_$i112, in_$p113, in_$p114, in_$p115, in_$i116, in_$p117, in_$i118, in_$i119, in_$p122, in_$i123, in_$p124, in_$i125, in_$i126, in_$p127, in_$p128, in_$i129, in_$i130, in_$i120, in_$i121, in_$i133, in_$i134, in_$i135, in_$i108, in_$i109, in_$i136, in_$i137;
    goto $bb49, exit;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3212;

  $bb55:
    assume out_$i135 == 1;
    assume {:verifier.code 0} true;
    out_$i108, out_$i109 := out_$i130, out_$i133;
    goto $bb55_dummy;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    out_$i136, out_$i137 := out_$i133, out_$i130;
    assume true;
    goto $bb55;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    out_$i135 := $sgt.i32(out_$i134, out_$i133);
    goto corral_source_split_3241;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    out_$i134 := $load.i32($M.1, in_$p103);
    goto corral_source_split_3240;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i133 := $add.i32(out_$i109, 1);
    call {:si_unique_call 479} {:cexpr "i"} boogie_si_record_i32(out_$i133);
    goto corral_source_split_3239;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    out_$i130 := $add.i64(out_$i129, out_$i108);
    call {:si_unique_call 478} {:cexpr "offset"} boogie_si_record_i64(out_$i130);
    goto corral_source_split_3235;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    out_$i129 := $load.i64($M.1, out_$p128);
    goto corral_source_split_3234;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(out_$p114, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3233;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, out_$p127, out_$i126);
    goto corral_source_split_3232;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(in_$p96, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3231;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    out_$i126 := $sub.i64(out_$i123, out_$i125);
    goto corral_source_split_3230;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i64($M.1, out_$p124);
    goto corral_source_split_3229;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(out_$p114, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3228;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    out_$i123 := $load.i64($M.1, out_$p122);
    goto corral_source_split_3227;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(in_$p96, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3226;

  $bb51:
    assume out_$i119 == 1;
    goto corral_source_split_3225;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    out_$i120, out_$i121 := out_$i109, out_$i108;
    assume true;
    goto $bb51;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    out_$i119 := $ule.i64(out_$i116, out_$i118);
    goto corral_source_split_3223;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i64($M.1, out_$p117);
    goto corral_source_split_3222;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(in_$p96, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_3221;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i64($M.1, out_$p115);
    goto corral_source_split_3220;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(out_$p114, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3219;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    out_$p114 := $load.ref($M.1, out_$p113);
    goto corral_source_split_3218;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref(out_$p111, $mul.ref(out_$i112, 8));
    goto corral_source_split_3217;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    out_$i112 := $sext.i32.i64(out_$i109);
    goto corral_source_split_3216;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    out_$p111 := $load.ref($M.1, out_$p110);
    goto corral_source_split_3215;

  $bb50:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p2, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3214;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb55_dummy:
    call {:si_unique_call 1} out_$p110, out_$p111, out_$i112, out_$p113, out_$p114, out_$p115, out_$i116, out_$p117, out_$i118, out_$i119, out_$p122, out_$i123, out_$p124, out_$i125, out_$i126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i120, out_$i121, out_$i133, out_$i134, out_$i135, out_$i108, out_$i109, out_$i136, out_$i137 := concat_erase_loop_$bb49(in_$p2, in_$p96, in_$p103, out_$p110, out_$p111, out_$i112, out_$p113, out_$p114, out_$p115, out_$i116, out_$p117, out_$i118, out_$i119, out_$p122, out_$i123, out_$p124, out_$i125, out_$i126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i120, out_$i121, out_$i133, out_$i134, out_$i135, out_$i108, out_$i109, out_$i136, out_$i137);
    return;

  exit:
    return;
}



procedure concat_erase_loop_$bb49(in_$p2: ref, in_$p96: ref, in_$p103: ref, in_$p110: ref, in_$p111: ref, in_$i112: i64, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$p117: ref, in_$i118: i64, in_$i119: i1, in_$p122: ref, in_$i123: i64, in_$p124: ref, in_$i125: i64, in_$i126: i64, in_$p127: ref, in_$p128: ref, in_$i129: i64, in_$i130: i64, in_$i120: i32, in_$i121: i64, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$i108: i64, in_$i109: i32, in_$i136: i32, in_$i137: i64) returns (out_$p110: ref, out_$p111: ref, out_$i112: i64, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$p117: ref, out_$i118: i64, out_$i119: i1, out_$p122: ref, out_$i123: i64, out_$p124: ref, out_$i125: i64, out_$i126: i64, out_$p127: ref, out_$p128: ref, out_$i129: i64, out_$i130: i64, out_$i120: i32, out_$i121: i64, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$i108: i64, out_$i109: i32, out_$i136: i32, out_$i137: i64);
  modifies $M.1;



implementation concat_erase_loop_$bb30(in_$p1: ref, in_$p28: ref, in_$p59: ref, in_$p61: ref, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i65: i32, in_$i70: i64, in_$p71: ref, in_$i72: i64, in_$i73: i64, in_$i74: i64, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$i79: i32, in_$i69: i32) returns (out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i65: i32, out_$i70: i64, out_$p71: ref, out_$i72: i64, out_$i73: i64, out_$i74: i64, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$i79: i32, out_$i69: i32)
{

  entry:
    out_$i66, out_$i67, out_$i68, out_$i65, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$i79, out_$i69 := in_$i66, in_$i67, in_$i68, in_$i65, in_$i70, in_$p71, in_$i72, in_$i73, in_$i74, in_$p76, in_$i77, in_$i78, in_$i79, in_$i69;
    goto $bb30, exit;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_3160;

  $bb32:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i65 := out_$i66;
    goto $bb32_dummy;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    out_$i69 := out_$i66;
    assume true;
    goto $bb32;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    out_$i68 := $sgt.i32(out_$i67, out_$i66);
    goto corral_source_split_3173;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i32($M.1, in_$p61);
    goto corral_source_split_3172;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i66 := $add.i32(out_$i65, 1);
    call {:si_unique_call 474} {:cexpr "i"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_3171;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb34:
    assume out_$i78 == 1;
    goto corral_source_split_3177;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    out_$i79 := out_$i65;
    assume true;
    goto $bb34;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    out_$i78 := $uge.i64(out_$i73, out_$i77);
    goto corral_source_split_3169;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i64($M.1, out_$p76);
    goto corral_source_split_3168;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p28, $mul.ref(out_$i74, 24)), $mul.ref(0, 1));
    goto corral_source_split_3167;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    goto corral_source_split_3166;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i32.i64(out_$i65);
    goto corral_source_split_3165;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i64(out_$i70, out_$i72);
    goto corral_source_split_3164;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    out_$i72 := $load.i64($M.1, out_$p71);
    goto corral_source_split_3163;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p1, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_3162;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i64($M.1, in_$p59);
    goto corral_source_split_3161;

  $bb32_dummy:
    call {:si_unique_call 1} out_$i66, out_$i67, out_$i68, out_$i65, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$i79, out_$i69 := concat_erase_loop_$bb30(in_$p1, in_$p28, in_$p59, in_$p61, out_$i66, out_$i67, out_$i68, out_$i65, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$p76, out_$i77, out_$i78, out_$i79, out_$i69);
    return;

  exit:
    return;
}



procedure concat_erase_loop_$bb30(in_$p1: ref, in_$p28: ref, in_$p59: ref, in_$p61: ref, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i65: i32, in_$i70: i64, in_$p71: ref, in_$i72: i64, in_$i73: i64, in_$i74: i64, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$i79: i32, in_$i69: i32) returns (out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i65: i32, out_$i70: i64, out_$p71: ref, out_$i72: i64, out_$i73: i64, out_$i74: i64, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$i79: i32, out_$i69: i32);



implementation concat_erase_loop_$bb14(in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i35: i32, in_$i40: i64, in_$i41: i64, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$i46: i32, in_$i39: i32) returns (out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i35: i32, out_$i40: i64, out_$i41: i64, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$i46: i32, out_$i39: i32)
{

  entry:
    out_$i36, out_$i37, out_$i38, out_$i35, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$i39 := in_$i36, in_$i37, in_$i38, in_$i35, in_$i40, in_$i41, in_$p43, in_$i44, in_$i45, in_$i46, in_$i39;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3120;

  $bb16:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i35 := out_$i36;
    goto $bb16_dummy;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i36;
    assume true;
    goto $bb16;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    out_$i38 := $sgt.i32(out_$i37, out_$i36);
    goto corral_source_split_3130;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.1, in_$p31);
    goto corral_source_split_3129;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i32(out_$i35, 1);
    call {:si_unique_call 472} {:cexpr "i"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_3128;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb18:
    assume out_$i45 == 1;
    goto corral_source_split_3134;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i35;
    assume true;
    goto $bb18;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    out_$i45 := $uge.i64(out_$i40, out_$i44);
    goto corral_source_split_3126;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i64($M.1, out_$p43);
    goto corral_source_split_3125;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p28, $mul.ref(out_$i41, 24)), $mul.ref(0, 1));
    goto corral_source_split_3124;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    goto corral_source_split_3123;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i35);
    goto corral_source_split_3122;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i64($M.1, in_$p29);
    goto corral_source_split_3121;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i36, out_$i37, out_$i38, out_$i35, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$i39 := concat_erase_loop_$bb14(in_$p28, in_$p29, in_$p31, out_$i36, out_$i37, out_$i38, out_$i35, out_$i40, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$i39);
    return;

  exit:
    return;
}



procedure concat_erase_loop_$bb14(in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i35: i32, in_$i40: i64, in_$i41: i64, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$i46: i32, in_$i39: i32) returns (out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i35: i32, out_$i40: i64, out_$i41: i64, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$i46: i32, out_$i39: i32);



implementation concat_read_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$i35: i64, in_$i36: i64, in_$i37: i64, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i64, in_$i42: i64, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$p47: ref, in_$i48: i32, in_$i49: i32, in_$p51: ref, in_$i53: i32, in_$i54: i1, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$p61: ref, in_$i62: i1, in_$i63: i32, in_$i55: i32, in_$i52: i32, in_$i65: i32, in_$i66: i64, in_$i67: i64, in_$i68: i64, in_$i69: i64, in_$i70: i1, in_$i71: i32, in_$p72: ref, in_$i26: i32, in_$p27: ref, in_$i28: i64, in_$i29: i64, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i10: i64, in_$i11: i64, in_$i12: i32, in_$p13: ref, in_$i14: i32) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$i35: i64, out_$i36: i64, out_$i37: i64, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i64, out_$i42: i64, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$p47: ref, out_$i48: i32, out_$i49: i32, out_$p51: ref, out_$i53: i32, out_$i54: i1, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$p61: ref, out_$i62: i1, out_$i63: i32, out_$i55: i32, out_$i52: i32, out_$i65: i32, out_$i66: i64, out_$i67: i64, out_$i68: i64, out_$i69: i64, out_$i70: i1, out_$i71: i32, out_$p72: ref, out_$i26: i32, out_$p27: ref, out_$i28: i64, out_$i29: i64, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i10: i64, out_$i11: i64, out_$i12: i32, out_$p13: ref, out_$i14: i32)
{

  entry:
    out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$p51, out_$i53, out_$i54, out_$p57, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$i55, out_$i52, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i26, out_$p27, out_$i28, out_$i29, out_$i73, out_$i74, out_$i75, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14 := in_$p15, in_$p16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i30, in_$p31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$p47, in_$i48, in_$i49, in_$p51, in_$i53, in_$i54, in_$p57, in_$i58, in_$i59, in_$p61, in_$i62, in_$i63, in_$i55, in_$i52, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$p72, in_$i26, in_$p27, in_$i28, in_$i29, in_$i73, in_$i74, in_$i75, in_$i10, in_$i11, in_$i12, in_$p13, in_$i14;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3350;

  $bb29:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i10, out_$i11, out_$i12, out_$p13, out_$i14 := out_$i29, out_$i28, out_$i73, out_$p27, out_$i26;
    goto $bb29_dummy;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    out_$i75 := $sgt.i32(out_$i74, out_$i73);
    goto corral_source_split_3369;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.1, in_$p7);
    goto corral_source_split_3368;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i12, 1);
    call {:si_unique_call 497} {:cexpr "i"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_3367;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3366;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    out_$i26, out_$p27, out_$i28, out_$i29 := out_$i65, out_$p72, out_$i69, 0;
    goto $bb8;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    out_$i26, out_$p27, out_$i28, out_$i29 := out_$i14, out_$p13, out_$i11, out_$i25;
    goto $bb8;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    out_$i25 := $sub.i64(out_$i10, out_$i24);
    call {:si_unique_call 496} {:cexpr "from"} boogie_si_record_i64(out_$i25);
    goto corral_source_split_3364;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.1, out_$p23);
    goto corral_source_split_3363;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p19, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3362;

  $bb6:
    assume out_$i22 == 1;
    goto corral_source_split_3361;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    out_$i22 := $uge.i64(out_$i10, out_$i21);
    goto corral_source_split_3359;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.1, out_$p20);
    goto corral_source_split_3358;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3357;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.1, out_$p18);
    goto corral_source_split_3356;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p16, $mul.ref(out_$i17, 8));
    goto corral_source_split_3355;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i12);
    goto corral_source_split_3354;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.1, out_$p15);
    goto corral_source_split_3353;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p6, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3352;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(out_$p13, $mul.ref(out_$i37, 1));
    goto corral_source_split_3432;

  $bb27:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    out_$i71 := out_$i65;
    assume true;
    goto $bb27;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i64(out_$i69, 0);
    goto corral_source_split_3428;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    out_$i69 := $sub.i64(out_$i11, out_$i37);
    call {:si_unique_call 507} {:cexpr "len"} boogie_si_record_i64(out_$i69);
    goto corral_source_split_3427;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, in_$p3, out_$i68);
    goto corral_source_split_3426;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i64(out_$i66, out_$i67);
    goto corral_source_split_3425;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i64($M.20, in_$p5);
    goto corral_source_split_3424;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i64($M.20, in_$p3);
    goto corral_source_split_3423;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_3422;

  $bb14:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i65 := out_$i14;
    goto $bb25;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    out_$i65 := out_$i52;
    goto $bb25;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3404;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i63;
    goto $bb17;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i38;
    goto $bb17;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p51, out_$i49);
    goto corral_source_split_3398;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(4, 1));
    goto corral_source_split_3397;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i48, 1);
    goto corral_source_split_3396;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.1, out_$p47);
    goto corral_source_split_3395;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(4, 1));
    goto corral_source_split_3394;

  $bb15:
    assume out_$i45 == 1;
    goto corral_source_split_3393;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_3391;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} out_$i44 := mtd_is_eccerr(out_$i38);
    call {:si_unique_call 504} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_3390;

  $bb13:
    assume out_$i43 == 1;
    goto corral_source_split_3389;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_3387;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} out_$i42 := ldv__builtin_expect(out_$i41, 0);
    call {:si_unique_call 502} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i42);
    goto corral_source_split_3386;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i40);
    goto corral_source_split_3385;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i1.i32(out_$i39);
    goto corral_source_split_3384;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_3383;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} out_$i38 := mtd_read(out_$p19, out_$i10, out_$i37, in_$p5, out_$p13);
    call {:si_unique_call 500} {:cexpr "err"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_3382;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3381;

  $bb11:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    out_$i37 := out_$i11;
    goto $bb12;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i36;
    goto $bb12;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    out_$i36 := $sub.i64(out_$i35, out_$i10);
    call {:si_unique_call 498} {:cexpr "size"} boogie_si_record_i64(out_$i36);
    goto corral_source_split_3379;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i64($M.1, out_$p34);
    goto corral_source_split_3378;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p19, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3377;

  $bb10:
    assume out_$i33 == 1;
    goto corral_source_split_3376;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    out_$i33 := $ugt.i64(out_$i30, out_$i32);
    goto corral_source_split_3374;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.1, out_$p31);
    goto corral_source_split_3373;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p19, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3372;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i64(out_$i10, out_$i11);
    goto corral_source_split_3371;

  $bb7:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_3418;

  $bb21:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    out_$i63 := out_$i14;
    goto $bb22;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i38;
    goto $bb22;

  $bb20:
    assume out_$i62 == 1;
    goto corral_source_split_3416;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i14, 0);
    goto corral_source_split_3412;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p61, out_$i59);
    goto corral_source_split_3411;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_3410;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    out_$i59 := $add.i32(out_$i58, 1);
    goto corral_source_split_3409;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i32($M.1, out_$p57);
    goto corral_source_split_3408;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1832)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_3407;

  $bb18:
    assume out_$i54 == 1;
    goto corral_source_split_3406;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i38;
    assume true;
    goto $bb18;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i32(out_$i53, 0);
    goto corral_source_split_3402;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} out_$i53 := mtd_is_bitflip(out_$i38);
    call {:si_unique_call 506} {:cexpr "tmp"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_3401;

  $bb16:
    assume !(out_$i45 == 1);
    goto corral_source_split_3400;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$p51, out_$i53, out_$i54, out_$p57, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$i55, out_$i52, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i26, out_$p27, out_$i28, out_$i29, out_$i73, out_$i74, out_$i75, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14 := concat_read_loop_$bb4(in_$p0, in_$p3, in_$p5, in_$p6, in_$p7, out_$p15, out_$p16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i30, out_$p31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$p47, out_$i48, out_$i49, out_$p51, out_$i53, out_$i54, out_$p57, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$i55, out_$i52, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i26, out_$p27, out_$i28, out_$i29, out_$i73, out_$i74, out_$i75, out_$i10, out_$i11, out_$i12, out_$p13, out_$i14);
    return;

  exit:
    return;
}



procedure concat_read_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$i24: i64, in_$i25: i64, in_$i30: i64, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$i35: i64, in_$i36: i64, in_$i37: i64, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i64, in_$i42: i64, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$p47: ref, in_$i48: i32, in_$i49: i32, in_$p51: ref, in_$i53: i32, in_$i54: i1, in_$p57: ref, in_$i58: i32, in_$i59: i32, in_$p61: ref, in_$i62: i1, in_$i63: i32, in_$i55: i32, in_$i52: i32, in_$i65: i32, in_$i66: i64, in_$i67: i64, in_$i68: i64, in_$i69: i64, in_$i70: i1, in_$i71: i32, in_$p72: ref, in_$i26: i32, in_$p27: ref, in_$i28: i64, in_$i29: i64, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i10: i64, in_$i11: i64, in_$i12: i32, in_$p13: ref, in_$i14: i32) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$i24: i64, out_$i25: i64, out_$i30: i64, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$i35: i64, out_$i36: i64, out_$i37: i64, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i64, out_$i42: i64, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$p47: ref, out_$i48: i32, out_$i49: i32, out_$p51: ref, out_$i53: i32, out_$i54: i1, out_$p57: ref, out_$i58: i32, out_$i59: i32, out_$p61: ref, out_$i62: i1, out_$i63: i32, out_$i55: i32, out_$i52: i32, out_$i65: i32, out_$i66: i64, out_$i67: i64, out_$i68: i64, out_$i69: i64, out_$i70: i1, out_$i71: i32, out_$p72: ref, out_$i26: i32, out_$p27: ref, out_$i28: i64, out_$i29: i64, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i10: i64, out_$i11: i64, out_$i12: i32, out_$p13: ref, out_$i14: i32);
  modifies $M.20, $M.1, $CurrAddr;



implementation concat_write_loop_$bb4(in_$p3: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$i31: i64, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$i36: i64, in_$i37: i64, in_$i38: i64, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i43: i64, in_$i44: i64, in_$i45: i64, in_$i46: i64, in_$i47: i1, in_$i48: i32, in_$p49: ref, in_$i27: i32, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i11: i64, in_$i12: i64, in_$i13: i32, in_$p14: ref, in_$i15: i32, in_$i53: i32) returns (out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$i31: i64, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$i36: i64, out_$i37: i64, out_$i38: i64, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i43: i64, out_$i44: i64, out_$i45: i64, out_$i46: i64, out_$i47: i1, out_$i48: i32, out_$p49: ref, out_$i27: i32, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i11: i64, out_$i12: i64, out_$i13: i32, out_$p14: ref, out_$i15: i32, out_$i53: i32)
{

  entry:
    out_$p16, out_$p17, out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i27, out_$p28, out_$i29, out_$i30, out_$i50, out_$i51, out_$i52, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i53 := in_$p16, in_$p17, in_$i18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$p24, in_$i25, in_$i26, in_$i31, in_$p32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$p49, in_$i27, in_$p28, in_$i29, in_$i30, in_$i50, in_$i51, in_$i52, in_$i11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i53;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3444;

  $bb20:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i11, out_$i12, out_$i13, out_$p14, out_$i15 := out_$i30, out_$i29, out_$i50, out_$p28, out_$i27;
    goto $bb20_dummy;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i27;
    assume true;
    goto $bb20;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    out_$i52 := $sgt.i32(out_$i51, out_$i50);
    goto corral_source_split_3463;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.1, in_$p7);
    goto corral_source_split_3462;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i13, 1);
    call {:si_unique_call 512} {:cexpr "i"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_3461;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3460;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    out_$i27, out_$p28, out_$i29, out_$i30 := $sub.i32(0, 22), out_$p49, out_$i46, 0;
    goto $bb8;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    out_$i27, out_$p28, out_$i29, out_$i30 := out_$i15, out_$p14, out_$i12, out_$i26;
    goto $bb8;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    out_$i26 := $sub.i64(out_$i11, out_$i25);
    call {:si_unique_call 511} {:cexpr "to"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_3458;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.1, out_$p24);
    goto corral_source_split_3457;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p20, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3456;

  $bb6:
    assume out_$i23 == 1;
    goto corral_source_split_3455;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    out_$i23 := $uge.i64(out_$i11, out_$i22);
    goto corral_source_split_3453;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i64($M.1, out_$p21);
    goto corral_source_split_3452;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3451;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.1, out_$p19);
    goto corral_source_split_3450;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p17, $mul.ref(out_$i18, 8));
    goto corral_source_split_3449;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i13);
    goto corral_source_split_3448;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.1, out_$p16);
    goto corral_source_split_3447;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p6, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3446;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p14, $mul.ref(out_$i38, 1));
    goto corral_source_split_3492;

  $bb18:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    out_$i48 := out_$i39;
    assume true;
    goto $bb18;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i64(out_$i46, 0);
    goto corral_source_split_3488;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    out_$i46 := $sub.i64(out_$i12, out_$i38);
    call {:si_unique_call 516} {:cexpr "len"} boogie_si_record_i64(out_$i46);
    goto corral_source_split_3487;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, in_$p3, out_$i45);
    goto corral_source_split_3486;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i64(out_$i43, out_$i44);
    goto corral_source_split_3485;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i64($M.20, in_$p5);
    goto corral_source_split_3484;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.20, in_$p3);
    goto corral_source_split_3483;

  $bb14:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i39;
    assume true;
    goto $bb14;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_3477;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} out_$i39 := mtd_write(out_$p20, out_$i11, out_$i38, in_$p5, out_$p14);
    call {:si_unique_call 515} {:cexpr "err"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_3476;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3475;

  $bb11:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i38 := out_$i12;
    goto $bb12;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i37;
    goto $bb12;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    out_$i37 := $sub.i64(out_$i36, out_$i11);
    call {:si_unique_call 513} {:cexpr "size"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_3473;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i64($M.1, out_$p35);
    goto corral_source_split_3472;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p20, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3471;

  $bb10:
    assume out_$i34 == 1;
    goto corral_source_split_3470;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    out_$i34 := $ugt.i64(out_$i31, out_$i33);
    goto corral_source_split_3468;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i64($M.1, out_$p32);
    goto corral_source_split_3467;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p20, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3466;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i64(out_$i11, out_$i12);
    goto corral_source_split_3465;

  $bb7:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i27, out_$p28, out_$i29, out_$i30, out_$i50, out_$i51, out_$i52, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i53 := concat_write_loop_$bb4(in_$p3, in_$p5, in_$p6, in_$p7, out_$p16, out_$p17, out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i27, out_$p28, out_$i29, out_$i30, out_$i50, out_$i51, out_$i52, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i53);
    return;

  exit:
    return;
}



procedure concat_write_loop_$bb4(in_$p3: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$i31: i64, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$i36: i64, in_$i37: i64, in_$i38: i64, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i43: i64, in_$i44: i64, in_$i45: i64, in_$i46: i64, in_$i47: i1, in_$i48: i32, in_$p49: ref, in_$i27: i32, in_$p28: ref, in_$i29: i64, in_$i30: i64, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i11: i64, in_$i12: i64, in_$i13: i32, in_$p14: ref, in_$i15: i32, in_$i53: i32) returns (out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$i31: i64, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$i36: i64, out_$i37: i64, out_$i38: i64, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i43: i64, out_$i44: i64, out_$i45: i64, out_$i46: i64, out_$i47: i1, out_$i48: i32, out_$p49: ref, out_$i27: i32, out_$p28: ref, out_$i29: i64, out_$i30: i64, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i11: i64, out_$i12: i64, out_$i13: i32, out_$p14: ref, out_$i15: i32, out_$i53: i32);
  modifies $M.20, $M.1, $CurrAddr;



implementation concat_sync_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$i5: i32)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i5 := in_$p6, in_$p7, in_$i8, in_$p9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3504;

  $bb6:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i11;
    goto $bb6_dummy;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    out_$i13 := $sgt.i32(out_$i12, out_$i11);
    goto corral_source_split_3514;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.1, in_$p2);
    goto corral_source_split_3513;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i5, 1);
    call {:si_unique_call 518} {:cexpr "i"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_3512;

  SeqInstr_117:
    goto corral_source_split_3511;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} mtd_sync(out_$p10);
    goto SeqInstr_116;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.1, out_$p9);
    goto corral_source_split_3510;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref(out_$p7, $mul.ref(out_$i8, 8));
    goto corral_source_split_3509;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i5);
    goto corral_source_split_3508;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.1, out_$p6);
    goto corral_source_split_3507;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3506;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i5 := concat_sync_loop_$bb4(in_$p1, in_$p2, out_$p6, out_$p7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i5);
    return;

  exit:
    return;
}



procedure concat_sync_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$i5: i32);
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation concat_lock_loop_$bb4(in_$p3: ref, in_$p4: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$i31: i64, in_$i32: i64, in_$i33: i64, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i38: i64, in_$i39: i1, in_$i40: i32, in_$i23: i32, in_$i24: i64, in_$i25: i64, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i8: i64, in_$i9: i64, in_$i10: i32, in_$i11: i32, in_$i44: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$i31: i64, out_$i32: i64, out_$i33: i64, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i38: i64, out_$i39: i1, out_$i40: i32, out_$i23: i32, out_$i24: i64, out_$i25: i64, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i8: i64, out_$i9: i64, out_$i10: i32, out_$i11: i32, out_$i44: i32)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i38, out_$i39, out_$i40, out_$i23, out_$i24, out_$i25, out_$i41, out_$i42, out_$i43, out_$i8, out_$i9, out_$i10, out_$i11, out_$i44 := in_$p12, in_$p13, in_$i14, in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$i26, in_$p27, in_$i28, in_$i29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i38, in_$i39, in_$i40, in_$i23, in_$i24, in_$i25, in_$i41, in_$i42, in_$i43, in_$i8, in_$i9, in_$i10, in_$i11, in_$i44;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3526;

  $bb20:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$i9, out_$i10, out_$i11 := out_$i25, out_$i24, out_$i23, out_$i41;
    goto $bb20_dummy;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i23;
    assume true;
    goto $bb20;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    out_$i43 := $sgt.i32(out_$i42, out_$i41);
    goto corral_source_split_3545;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.1, in_$p4);
    goto corral_source_split_3544;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i11, 1);
    call {:si_unique_call 522} {:cexpr "i"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_3543;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3542;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i23, out_$i24, out_$i25 := $sub.i32(0, 22), out_$i38, 0;
    goto $bb8;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    out_$i23, out_$i24, out_$i25 := out_$i10, out_$i9, out_$i22;
    goto $bb8;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    out_$i22 := $sub.i64(out_$i8, out_$i21);
    call {:si_unique_call 521} {:cexpr "ofs"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_3540;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.1, out_$p20);
    goto corral_source_split_3539;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p16, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3538;

  $bb6:
    assume out_$i19 == 1;
    goto corral_source_split_3537;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    out_$i19 := $uge.i64(out_$i8, out_$i18);
    goto corral_source_split_3535;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i64($M.1, out_$p17);
    goto corral_source_split_3534;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3533;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.1, out_$p15);
    goto corral_source_split_3532;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(out_$p13, $mul.ref(out_$i14, 8));
    goto corral_source_split_3531;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i11);
    goto corral_source_split_3530;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.1, out_$p12);
    goto corral_source_split_3529;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3528;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb18:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i34;
    assume true;
    goto $bb18;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i64(out_$i38, 0);
    goto corral_source_split_3566;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i38 := $sub.i64(out_$i9, out_$i33);
    call {:si_unique_call 526} {:cexpr "len"} boogie_si_record_i64(out_$i38);
    goto corral_source_split_3565;

  $bb14:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i34;
    assume true;
    goto $bb14;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_3559;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} out_$i34 := mtd_lock(out_$p16, out_$i8, out_$i33);
    call {:si_unique_call 525} {:cexpr "err"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_3558;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3557;

  $bb11:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i33 := out_$i9;
    goto $bb12;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i32;
    goto $bb12;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    out_$i32 := $sub.i64(out_$i31, out_$i8);
    call {:si_unique_call 523} {:cexpr "size"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_3555;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i64($M.1, out_$p30);
    goto corral_source_split_3554;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p16, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3553;

  $bb10:
    assume out_$i29 == 1;
    goto corral_source_split_3552;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    out_$i29 := $ugt.i64(out_$i26, out_$i28);
    goto corral_source_split_3550;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.1, out_$p27);
    goto corral_source_split_3549;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p16, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3548;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i64(out_$i8, out_$i9);
    goto corral_source_split_3547;

  $bb7:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i38, out_$i39, out_$i40, out_$i23, out_$i24, out_$i25, out_$i41, out_$i42, out_$i43, out_$i8, out_$i9, out_$i10, out_$i11, out_$i44 := concat_lock_loop_$bb4(in_$p3, in_$p4, out_$p12, out_$p13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i38, out_$i39, out_$i40, out_$i23, out_$i24, out_$i25, out_$i41, out_$i42, out_$i43, out_$i8, out_$i9, out_$i10, out_$i11, out_$i44);
    return;

  exit:
    return;
}



procedure concat_lock_loop_$bb4(in_$p3: ref, in_$p4: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$i31: i64, in_$i32: i64, in_$i33: i64, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i38: i64, in_$i39: i1, in_$i40: i32, in_$i23: i32, in_$i24: i64, in_$i25: i64, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i8: i64, in_$i9: i64, in_$i10: i32, in_$i11: i32, in_$i44: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$i31: i64, out_$i32: i64, out_$i33: i64, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i38: i64, out_$i39: i1, out_$i40: i32, out_$i23: i32, out_$i24: i64, out_$i25: i64, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i8: i64, out_$i9: i64, out_$i10: i32, out_$i11: i32, out_$i44: i32);



implementation concat_unlock_loop_$bb4(in_$p3: ref, in_$p4: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$i31: i64, in_$i32: i64, in_$i33: i64, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i38: i64, in_$i39: i1, in_$i40: i32, in_$i23: i32, in_$i24: i64, in_$i25: i64, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i8: i64, in_$i9: i64, in_$i10: i32, in_$i11: i32, in_$i44: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$i31: i64, out_$i32: i64, out_$i33: i64, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i38: i64, out_$i39: i1, out_$i40: i32, out_$i23: i32, out_$i24: i64, out_$i25: i64, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i8: i64, out_$i9: i64, out_$i10: i32, out_$i11: i32, out_$i44: i32)
{

  entry:
    out_$p12, out_$p13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i38, out_$i39, out_$i40, out_$i23, out_$i24, out_$i25, out_$i41, out_$i42, out_$i43, out_$i8, out_$i9, out_$i10, out_$i11, out_$i44 := in_$p12, in_$p13, in_$i14, in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$i26, in_$p27, in_$i28, in_$i29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i38, in_$i39, in_$i40, in_$i23, in_$i24, in_$i25, in_$i41, in_$i42, in_$i43, in_$i8, in_$i9, in_$i10, in_$i11, in_$i44;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3580;

  $bb20:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$i9, out_$i10, out_$i11 := out_$i25, out_$i24, out_$i23, out_$i41;
    goto $bb20_dummy;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i23;
    assume true;
    goto $bb20;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    out_$i43 := $sgt.i32(out_$i42, out_$i41);
    goto corral_source_split_3599;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.1, in_$p4);
    goto corral_source_split_3598;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i11, 1);
    call {:si_unique_call 530} {:cexpr "i"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_3597;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3596;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i23, out_$i24, out_$i25 := $sub.i32(0, 22), out_$i38, 0;
    goto $bb8;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    out_$i23, out_$i24, out_$i25 := out_$i10, out_$i9, out_$i22;
    goto $bb8;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    out_$i22 := $sub.i64(out_$i8, out_$i21);
    call {:si_unique_call 529} {:cexpr "ofs"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_3594;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i64($M.1, out_$p20);
    goto corral_source_split_3593;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p16, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3592;

  $bb6:
    assume out_$i19 == 1;
    goto corral_source_split_3591;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    out_$i19 := $uge.i64(out_$i8, out_$i18);
    goto corral_source_split_3589;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i64($M.1, out_$p17);
    goto corral_source_split_3588;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3587;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.1, out_$p15);
    goto corral_source_split_3586;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(out_$p13, $mul.ref(out_$i14, 8));
    goto corral_source_split_3585;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i11);
    goto corral_source_split_3584;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.1, out_$p12);
    goto corral_source_split_3583;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p3, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3582;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb18:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i34;
    assume true;
    goto $bb18;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i64(out_$i38, 0);
    goto corral_source_split_3620;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i38 := $sub.i64(out_$i9, out_$i33);
    call {:si_unique_call 534} {:cexpr "len"} boogie_si_record_i64(out_$i38);
    goto corral_source_split_3619;

  $bb14:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i34;
    assume true;
    goto $bb14;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_3613;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} out_$i34 := mtd_unlock(out_$p16, out_$i8, out_$i33);
    call {:si_unique_call 533} {:cexpr "err"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_3612;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3611;

  $bb11:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i33 := out_$i9;
    goto $bb12;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i32;
    goto $bb12;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    out_$i32 := $sub.i64(out_$i31, out_$i8);
    call {:si_unique_call 531} {:cexpr "size"} boogie_si_record_i64(out_$i32);
    goto corral_source_split_3609;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i64($M.1, out_$p30);
    goto corral_source_split_3608;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p16, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3607;

  $bb10:
    assume out_$i29 == 1;
    goto corral_source_split_3606;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    out_$i29 := $ugt.i64(out_$i26, out_$i28);
    goto corral_source_split_3604;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i64($M.1, out_$p27);
    goto corral_source_split_3603;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p16, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_3602;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i64(out_$i8, out_$i9);
    goto corral_source_split_3601;

  $bb7:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i38, out_$i39, out_$i40, out_$i23, out_$i24, out_$i25, out_$i41, out_$i42, out_$i43, out_$i8, out_$i9, out_$i10, out_$i11, out_$i44 := concat_unlock_loop_$bb4(in_$p3, in_$p4, out_$p12, out_$p13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$i26, out_$p27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i38, out_$i39, out_$i40, out_$i23, out_$i24, out_$i25, out_$i41, out_$i42, out_$i43, out_$i8, out_$i9, out_$i10, out_$i11, out_$i44);
    return;

  exit:
    return;
}



procedure concat_unlock_loop_$bb4(in_$p3: ref, in_$p4: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$i21: i64, in_$i22: i64, in_$i26: i64, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$i31: i64, in_$i32: i64, in_$i33: i64, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i38: i64, in_$i39: i1, in_$i40: i32, in_$i23: i32, in_$i24: i64, in_$i25: i64, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i8: i64, in_$i9: i64, in_$i10: i32, in_$i11: i32, in_$i44: i32) returns (out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$i21: i64, out_$i22: i64, out_$i26: i64, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$i31: i64, out_$i32: i64, out_$i33: i64, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i38: i64, out_$i39: i1, out_$i40: i32, out_$i23: i32, out_$i24: i64, out_$i25: i64, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i8: i64, out_$i9: i64, out_$i10: i32, out_$i11: i32, out_$i44: i32);



implementation concat_suspend_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i6: i32, in_$i19: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i6: i32, out_$i19: i32)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i18, out_$i6, out_$i19 := in_$p7, in_$p8, in_$i9, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$i16, in_$i17, in_$i18, in_$i6, in_$i19;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3634;

  $bb10:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i16;
    goto $bb10_dummy;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i12;
    assume true;
    goto $bb10;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    out_$i18 := $sgt.i32(out_$i17, out_$i16);
    goto corral_source_split_3650;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.1, in_$p2);
    goto corral_source_split_3649;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i6, 1);
    call {:si_unique_call 537} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_3648;

  $bb7:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i12;
    assume true;
    goto $bb7;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i12, 0);
    goto corral_source_split_3642;

  SeqInstr_120:
    call {:si_unique_call 536} {:cexpr "rc"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_3641;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} out_$i12 := mtd_suspend(out_$p11);
    goto SeqInstr_119;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.1, out_$p10);
    goto corral_source_split_3640;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref(out_$p8, $mul.ref(out_$i9, 8));
    goto corral_source_split_3639;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i6);
    goto corral_source_split_3638;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.1, out_$p7);
    goto corral_source_split_3637;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3636;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i18, out_$i6, out_$i19 := concat_suspend_loop_$bb4(in_$p1, in_$p2, out_$p7, out_$p8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i18, out_$i6, out_$i19);
    return;

  exit:
    return;
}



procedure concat_suspend_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i6: i32, in_$i19: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i6: i32, out_$i19: i32);
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation concat_resume_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$i5: i32)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i5 := in_$p6, in_$p7, in_$i8, in_$p9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3662;

  $bb6:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i11;
    goto $bb6_dummy;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    out_$i13 := $sgt.i32(out_$i12, out_$i11);
    goto corral_source_split_3672;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.1, in_$p2);
    goto corral_source_split_3671;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i5, 1);
    call {:si_unique_call 539} {:cexpr "i"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_3670;

  SeqInstr_123:
    goto corral_source_split_3669;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} mtd_resume(out_$p10);
    goto SeqInstr_122;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.1, out_$p9);
    goto corral_source_split_3668;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref(out_$p7, $mul.ref(out_$i8, 8));
    goto corral_source_split_3667;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i5);
    goto corral_source_split_3666;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.1, out_$p6);
    goto corral_source_split_3665;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1848)), $mul.ref(1840, 1));
    goto corral_source_split_3664;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i5 := concat_resume_loop_$bb4(in_$p1, in_$p2, out_$p6, out_$p7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i5);
    return;

  exit:
    return;
}



procedure concat_resume_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i1, out_$i5: i32);
  modifies $M.0, $M.1, $M.10, $CurrAddr, assertsPassed;



implementation mtd_del_partition_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p13: ref, in_$p14: ref) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p13: ref, out_$p14: ref)
{

  entry:
    out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p21, out_$i22, out_$i23, out_$p24, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p13, out_$p14 := in_$p15, in_$p16, in_$i17, in_$i18, in_$i19, in_$p21, in_$i22, in_$i23, in_$p24, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p13, in_$p14;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3903;

  $bb16:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$p13, out_$p14 := out_$p37, out_$p13;
    goto $bb16_dummy;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, $p2i.ref.i64(mtd_partitions));
    goto corral_source_split_3938;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_3937;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p13, $mul.ref(0, 1864)), $mul.ref(1848, 1));
    goto corral_source_split_3936;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(out_$p36, $mul.ref($sub.ref(0, 1840), 1864));
    goto corral_source_split_3935;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p35);
    goto corral_source_split_3934;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.1, out_$p34);
    goto corral_source_split_3933;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 1864)), $mul.ref(1848, 1)), $mul.ref(0, 1));
    goto corral_source_split_3932;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i19 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb8;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    out_$p24 := out_$p14;
    assume true;
    goto $bb10;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, in_$i1);
    goto corral_source_split_3914;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.1, out_$p21);
    goto corral_source_split_3913;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p14, $mul.ref(0, 1864)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_3912;

  $bb6:
    assume out_$i19 == 1;
    goto corral_source_split_3911;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i64(out_$i17, out_$i18);
    goto corral_source_split_3909;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_3908;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_3907;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.1, out_$p15);
    goto corral_source_split_3906;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 1864)), $mul.ref(1832, 1));
    goto corral_source_split_3905;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p21, out_$i22, out_$i23, out_$p24, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p13, out_$p14 := mtd_del_partition_loop_$bb4(in_$p0, in_$i1, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p21, out_$i22, out_$i23, out_$p24, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p13, out_$p14);
    return;

  exit:
    return;
}



procedure mtd_del_partition_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$p24: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p13: ref, in_$p14: ref) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$p24: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p13: ref, out_$p14: ref);



implementation mtd_is_partition_loop_$bb4(in_$p0: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p7: ref) returns (out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p7: ref)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$i11, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p7 := in_$p8, in_$i9, in_$i10, in_$i11, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$p7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3967;

  $bb10:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$p7 := out_$p17;
    goto $bb10_dummy;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, $p2i.ref.i64(mtd_partitions));
    goto corral_source_split_3985;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_3984;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p16, $mul.ref($sub.ref(0, 1840), 1864)), $mul.ref(1848, 1));
    goto corral_source_split_3983;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p16, $mul.ref($sub.ref(0, 1840), 1864));
    goto corral_source_split_3982;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_3981;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.1, out_$p14);
    goto corral_source_split_3980;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(out_$p7, $mul.ref(0, 1864)), $mul.ref(1848, 1)), $mul.ref(0, 1));
    goto corral_source_split_3979;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i64(out_$i9, out_$i10);
    goto corral_source_split_3972;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_3971;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_3970;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(out_$p7, $mul.ref(0, 1864)), $mul.ref(0, 1));
    goto corral_source_split_3969;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$i11, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p7 := mtd_is_partition_loop_$bb4(in_$p0, out_$p8, out_$i9, out_$i10, out_$i11, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p7);
    return;

  exit:
    return;
}



procedure mtd_is_partition_loop_$bb4(in_$p0: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p7: ref) returns (out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p7: ref);



implementation mtd_proc_show_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$i8: i32, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p6: ref, in_vslice_dummy_var_76: i32) returns (out_$p7: ref, out_$i8: i32, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$p14: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p6: ref, out_vslice_dummy_var_76: i32)
{

  entry:
    out_$p7, out_$i8, out_$p9, out_$i10, out_$p11, out_$i12, out_$p13, out_$p14, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p6, out_vslice_dummy_var_76 := in_$p7, in_$i8, in_$p9, in_$i10, in_$p11, in_$i12, in_$p13, in_$p14, in_$p16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$p6, in_vslice_dummy_var_76;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4233;

  $bb6:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$p6 := out_$p19;
    goto $bb6_dummy;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i64(out_$i20, 0);
    goto corral_source_split_4249;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_4248;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} out_$p19 := __mtd_next_device(out_$i18);
    goto corral_source_split_4247;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i17, 1);
    goto corral_source_split_4246;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.1, out_$p16);
    goto corral_source_split_4245;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p6, $mul.ref(0, 1832)), $mul.ref(64, 1));
    goto corral_source_split_4244;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} out_vslice_dummy_var_76 := seq_printf.ref.ref.i32.i64.i32.ref(in_$p0, .str.53, out_$i8, out_$i10, out_$i12, out_$p14);
    goto corral_source_split_4243;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.1, out_$p13);
    goto corral_source_split_4242;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p6, $mul.ref(0, 1832)), $mul.ref(56, 1));
    goto corral_source_split_4241;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.1, out_$p11);
    goto corral_source_split_4240;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p6, $mul.ref(0, 1832)), $mul.ref(16, 1));
    goto corral_source_split_4239;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i64($M.1, out_$p9);
    goto corral_source_split_4238;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p6, $mul.ref(0, 1832)), $mul.ref(8, 1));
    goto corral_source_split_4237;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i32($M.1, out_$p7);
    goto corral_source_split_4236;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p6, $mul.ref(0, 1832)), $mul.ref(64, 1));
    goto corral_source_split_4235;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p7, out_$i8, out_$p9, out_$i10, out_$p11, out_$i12, out_$p13, out_$p14, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p6, out_vslice_dummy_var_76 := mtd_proc_show_loop_$bb4(in_$p0, out_$p7, out_$i8, out_$p9, out_$i10, out_$p11, out_$i12, out_$p13, out_$p14, out_$p16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p6, out_vslice_dummy_var_76);
    return;

  exit:
    return;
}



procedure mtd_proc_show_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$i8: i32, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$p14: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p6: ref, in_vslice_dummy_var_76: i32) returns (out_$p7: ref, out_$i8: i32, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$p14: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p6: ref, out_vslice_dummy_var_76: i32);
  modifies $M.0, $CurrAddr;



implementation mtdchar_read_loop_$bb17(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p10: ref, in_$p12: ref, in_$p41: ref, in_$i49: i64, in_$i50: i1, in_$i51: i64, in_$i52: i32, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i64, in_$i60: i64, in_$i61: i32, in_$i63: i64, in_$i64: i64, in_$i65: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p70: ref, in_$i71: i64, in_$i72: i32, in_$p73: ref, in_$i74: i64, in_$i75: i64, in_$i76: i64, in_$i77: i32, in_$i62: i32, in_$i78: i1, in_$i79: i32, in_$i80: i1, in_$i82: i64, in_$i83: i64, in_$i84: i64, in_$i85: i64, in_$i86: i64, in_$i87: i1, in_$i88: i64, in_$i89: i64, in_$i90: i64, in_$i91: i64, in_$i92: i64, in_$p93: ref, in_$i94: i64, in_$i95: i1, in_$i96: i64, in_$i81: i32, in_$i98: i1, in_$p46: ref, in_$i47: i64, in_$i48: i64, in_$i99: i64) returns (out_$i49: i64, out_$i50: i1, out_$i51: i64, out_$i52: i32, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i64, out_$i60: i64, out_$i61: i32, out_$i63: i64, out_$i64: i64, out_$i65: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p70: ref, out_$i71: i64, out_$i72: i32, out_$p73: ref, out_$i74: i64, out_$i75: i64, out_$i76: i64, out_$i77: i32, out_$i62: i32, out_$i78: i1, out_$i79: i32, out_$i80: i1, out_$i82: i64, out_$i83: i64, out_$i84: i64, out_$i85: i64, out_$i86: i64, out_$i87: i1, out_$i88: i64, out_$i89: i64, out_$i90: i64, out_$i91: i64, out_$i92: i64, out_$p93: ref, out_$i94: i64, out_$i95: i1, out_$i96: i64, out_$i81: i32, out_$i98: i1, out_$p46: ref, out_$i47: i64, out_$i48: i64, out_$i99: i64)
{

  entry:
    out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$p70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i62, out_$i78, out_$i79, out_$i80, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i81, out_$i98, out_$p46, out_$i47, out_$i48, out_$i99 := in_$i49, in_$i50, in_$i51, in_$i52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i63, in_$i64, in_$i65, in_$p66, in_$p67, in_$p68, in_$i69, in_$p70, in_$i71, in_$i72, in_$p73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i62, in_$i78, in_$i79, in_$i80, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$p93, in_$i94, in_$i95, in_$i96, in_$i81, in_$i98, in_$p46, in_$i47, in_$i48, in_$i99;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4345;

  $bb48:
    assume out_$i98 == 1;
    assume {:verifier.code 0} true;
    out_$p46, out_$i47, out_$i48 := out_$p93, out_$i96, out_$i89;
    goto $bb48_dummy;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    out_$i99 := out_$i89;
    assume true;
    goto $bb48;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i64(out_$i96, 0);
    goto corral_source_split_4428;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_4426;

  $bb44:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    out_$i96 := out_$i91;
    goto $bb45;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    out_$i96 := 0;
    goto $bb45;

  $bb43:
    assume out_$i95 == 1;
    goto corral_source_split_4424;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i64(out_$i94, 0);
    goto corral_source_split_4422;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i64($M.20, in_$p4);
    goto corral_source_split_4421;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref(out_$p46, $mul.ref(out_$i92, 1));
    goto corral_source_split_4420;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i64($M.20, in_$p4);
    goto corral_source_split_4419;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    out_$i91 := $sub.i64(out_$i47, out_$i90);
    call {:si_unique_call 727} {:cexpr "count"} boogie_si_record_i64(out_$i91);
    goto corral_source_split_4418;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i64($M.20, in_$p4);
    goto corral_source_split_4417;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i64(out_$i48, out_$i88);
    call {:si_unique_call 726} {:cexpr "total_retlen"} boogie_si_record_i64(out_$i89);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i64($M.20, in_$p4);
    goto corral_source_split_4415;

  $bb41:
    assume !(out_$i87 == 1);
    goto corral_source_split_4414;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i64(out_$i86, 0);
    goto corral_source_split_4403;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} out_$i86 := copy_to_user(out_$p46, in_$p41, out_$i85);
    call {:si_unique_call 723} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i86);
    goto corral_source_split_4402;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i64($M.20, in_$p4);
    goto corral_source_split_4401;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, in_$p3, out_$i84);
    goto corral_source_split_4400;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i64(out_$i82, out_$i83);
    goto corral_source_split_4399;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i64($M.20, in_$p4);
    goto corral_source_split_4398;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i64($M.1, in_$p3);
    goto corral_source_split_4397;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i78 == 1;
    goto corral_source_split_4391;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    out_$i78 := $eq.i32(out_$i62, 0);
    goto corral_source_split_4385;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_4384;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i77;
    goto $bb32;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i72;
    goto $bb32;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i65;
    goto $bb32;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i61;
    goto $bb32;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} out_$i61 := mtd_read_fact_prot_reg(in_$p12, out_$i59, out_$i60, in_$p4, in_$p41);
    call {:si_unique_call 717} {:cexpr "ret"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_4382;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i52);
    goto corral_source_split_4381;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i64($M.1, in_$p3);
    goto corral_source_split_4380;

  $bb30:
    assume out_$i58 == 1;
    goto corral_source_split_4379;

  $bb23:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i54, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i32(out_$i54, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.71, out_$p53);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p10, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4356;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    out_$i52 := $trunc.i64.i32(out_$i51);
    call {:si_unique_call 711} {:cexpr "len"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_4355;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_4354;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i49;
    goto $bb21;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i47;
    goto $bb21;

  $bb19:
    assume out_$i50 == 1;
    goto corral_source_split_4350;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    out_$i50 := $ult.i64(out_$i47, out_$i49);
    goto corral_source_split_4348;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i64($M.22, in_$p5);
    call {:si_unique_call 710} {:cexpr "__min2"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_4347;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb20:
    assume !(out_$i50 == 1);
    goto corral_source_split_4352;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} out_$i65 := mtd_read_user_prot_reg(in_$p12, out_$i63, out_$i64, in_$p4, in_$p41);
    call {:si_unique_call 713} {:cexpr "ret"} boogie_si_record_i32(out_$i65);
    goto corral_source_split_4361;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i32.i64(out_$i52);
    goto corral_source_split_4360;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i64($M.1, in_$p3);
    goto corral_source_split_4359;

  $bb25:
    assume out_$i56 == 1;
    goto corral_source_split_4358;

  $bb24:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i54, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, in_$p4, out_$i74);
    goto corral_source_split_4377;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i64($M.15, out_$p73);
    goto corral_source_split_4376;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p7, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_4375;

  SeqInstr_171:
    call {:si_unique_call 715} {:cexpr "ret"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_4374;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} out_$i72 := mtd_read_oob(in_$p12, out_$i71, in_$p7);
    goto SeqInstr_170;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i64($M.1, in_$p3);
    goto corral_source_split_4373;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, out_$p70, out_$i69);
    goto corral_source_split_4372;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p7, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_4371;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i32.i64(out_$i52);
    goto corral_source_split_4370;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, out_$p68, $0.ref);
    goto corral_source_split_4369;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p7, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_4368;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, out_$p67, in_$p41);
    goto corral_source_split_4367;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p7, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_4366;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, out_$p66, 2);
    goto corral_source_split_4365;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p7, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4364;

  $bb27:
    assume out_$i57 == 1;
    goto corral_source_split_4363;

  $bb26:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i54, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} out_$i77 := mtd_read(in_$p12, out_$i75, out_$i76, in_$p4, in_$p41);
    call {:si_unique_call 719} {:cexpr "ret"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_4389;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    out_$i76 := $sext.i32.i64(out_$i52);
    goto corral_source_split_4388;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i64($M.1, in_$p3);
    goto corral_source_split_4387;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i57 == 1);
    goto $bb29;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i58 == 1);
    goto $bb29;

  $bb38:
    assume out_$i80 == 1;
    goto corral_source_split_4405;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    out_$i81 := out_$i62;
    assume true;
    goto $bb38;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, 0);
    goto corral_source_split_4395;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} out_$i79 := mtd_is_bitflip_or_eccerr(out_$i62);
    call {:si_unique_call 721} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_4394;

  $bb36:
    assume !(out_$i78 == 1);
    goto corral_source_split_4393;

  $bb48_dummy:
    call {:si_unique_call 1} out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$p70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i62, out_$i78, out_$i79, out_$i80, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i81, out_$i98, out_$p46, out_$i47, out_$i48, out_$i99 := mtdchar_read_loop_$bb17(in_$p3, in_$p4, in_$p5, in_$p7, in_$p10, in_$p12, in_$p41, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$p68, out_$i69, out_$p70, out_$i71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i62, out_$i78, out_$i79, out_$i80, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i81, out_$i98, out_$p46, out_$i47, out_$i48, out_$i99);
    return;

  exit:
    return;
}



procedure mtdchar_read_loop_$bb17(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p10: ref, in_$p12: ref, in_$p41: ref, in_$i49: i64, in_$i50: i1, in_$i51: i64, in_$i52: i32, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i64, in_$i60: i64, in_$i61: i32, in_$i63: i64, in_$i64: i64, in_$i65: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p70: ref, in_$i71: i64, in_$i72: i32, in_$p73: ref, in_$i74: i64, in_$i75: i64, in_$i76: i64, in_$i77: i32, in_$i62: i32, in_$i78: i1, in_$i79: i32, in_$i80: i1, in_$i82: i64, in_$i83: i64, in_$i84: i64, in_$i85: i64, in_$i86: i64, in_$i87: i1, in_$i88: i64, in_$i89: i64, in_$i90: i64, in_$i91: i64, in_$i92: i64, in_$p93: ref, in_$i94: i64, in_$i95: i1, in_$i96: i64, in_$i81: i32, in_$i98: i1, in_$p46: ref, in_$i47: i64, in_$i48: i64, in_$i99: i64) returns (out_$i49: i64, out_$i50: i1, out_$i51: i64, out_$i52: i32, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i64, out_$i60: i64, out_$i61: i32, out_$i63: i64, out_$i64: i64, out_$i65: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p70: ref, out_$i71: i64, out_$i72: i32, out_$p73: ref, out_$i74: i64, out_$i75: i64, out_$i76: i64, out_$i77: i32, out_$i62: i32, out_$i78: i1, out_$i79: i32, out_$i80: i1, out_$i82: i64, out_$i83: i64, out_$i84: i64, out_$i85: i64, out_$i86: i64, out_$i87: i1, out_$i88: i64, out_$i89: i64, out_$i90: i64, out_$i91: i64, out_$i92: i64, out_$p93: ref, out_$i94: i64, out_$i95: i1, out_$i96: i64, out_$i81: i32, out_$i98: i1, out_$p46: ref, out_$i47: i64, out_$i48: i64, out_$i99: i64);
  modifies $M.1, $M.20, $CurrAddr, $M.15, $M.0, $M.10, assertsPassed;



implementation mtdchar_write_loop_$bb20(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p10: ref, in_$p12: ref, in_$p45: ref, in_$i53: i64, in_$i54: i1, in_$i55: i64, in_$i56: i32, in_$i57: i64, in_$i58: i64, in_$i59: i1, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i67: i64, in_$i68: i64, in_$i69: i32, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$p75: ref, in_$i76: i64, in_$i77: i32, in_$p78: ref, in_$i79: i64, in_$i80: i64, in_$i81: i64, in_$i82: i32, in_$i66: i32, in_$i83: i1, in_$i84: i1, in_$i85: i64, in_$i87: i1, in_$i89: i64, in_$i90: i64, in_$i91: i64, in_$i92: i64, in_$i93: i64, in_$i94: i64, in_$i95: i64, in_$i96: i64, in_$p97: ref, in_$i88: i32, in_$i99: i1, in_$p50: ref, in_$i51: i64, in_$i52: i64, in_$i100: i64) returns (out_$i53: i64, out_$i54: i1, out_$i55: i64, out_$i56: i32, out_$i57: i64, out_$i58: i64, out_$i59: i1, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i67: i64, out_$i68: i64, out_$i69: i32, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$p75: ref, out_$i76: i64, out_$i77: i32, out_$p78: ref, out_$i79: i64, out_$i80: i64, out_$i81: i64, out_$i82: i32, out_$i66: i32, out_$i83: i1, out_$i84: i1, out_$i85: i64, out_$i87: i1, out_$i89: i64, out_$i90: i64, out_$i91: i64, out_$i92: i64, out_$i93: i64, out_$i94: i64, out_$i95: i64, out_$i96: i64, out_$p97: ref, out_$i88: i32, out_$i99: i1, out_$p50: ref, out_$i51: i64, out_$i52: i64, out_$i100: i64)
{

  entry:
    out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$p73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i66, out_$i83, out_$i84, out_$i85, out_$i87, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$p97, out_$i88, out_$i99, out_$p50, out_$i51, out_$i52, out_$i100 := in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i67, in_$i68, in_$i69, in_$p70, in_$p71, in_$p72, in_$p73, in_$i74, in_$p75, in_$i76, in_$i77, in_$p78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i66, in_$i83, in_$i84, in_$i85, in_$i87, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$p97, in_$i88, in_$i99, in_$p50, in_$i51, in_$i52, in_$i100;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4503;

  $bb51:
    assume out_$i99 == 1;
    assume {:verifier.code 0} true;
    out_$p50, out_$i51, out_$i52 := out_$p97, out_$i95, out_$i93;
    goto $bb51_dummy;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i93;
    assume true;
    goto $bb51;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i64(out_$i95, 0);
    goto corral_source_split_4581;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref(out_$p50, $mul.ref(out_$i96, 1));
    goto corral_source_split_4575;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i64($M.20, in_$p5);
    goto corral_source_split_4574;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    out_$i95 := $sub.i64(out_$i51, out_$i94);
    call {:si_unique_call 752} {:cexpr "count"} boogie_si_record_i64(out_$i95);
    goto corral_source_split_4573;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i64($M.20, in_$p5);
    goto corral_source_split_4572;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    out_$i93 := $add.i64(out_$i52, out_$i92);
    call {:si_unique_call 751} {:cexpr "total_retlen"} boogie_si_record_i64(out_$i93);
    goto corral_source_split_4571;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i64($M.20, in_$p5);
    goto corral_source_split_4570;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, in_$p3, out_$i91);
    goto corral_source_split_4569;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i64(out_$i89, out_$i90);
    goto corral_source_split_4568;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i64($M.20, in_$p5);
    goto corral_source_split_4567;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i64($M.1, in_$p3);
    goto corral_source_split_4566;

  $bb48:
    assume out_$i87 == 1;
    goto corral_source_split_4565;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    out_$i88 := out_$i66;
    assume true;
    goto $bb48;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i66, 0);
    goto corral_source_split_4563;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume {:verifier.code 0} true;
    assume !(out_$i83 == 1);
    goto $bb43;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(out_$i84 == 1);
    goto $bb43;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    out_$i85 := out_$i52;
    assume true;
    goto $bb45;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i64(out_$i52, 0);
    goto corral_source_split_4556;

  $bb41:
    assume out_$i83 == 1;
    goto corral_source_split_4555;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i66, $sub.i32(0, 28));
    goto corral_source_split_4549;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_4548;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i82;
    goto $bb38;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i77;
    goto $bb38;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i69;
    goto $bb38;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    out_$i66 := $sub.i32(0, 30);
    goto $bb38;

  $bb36:
    assume out_$i65 == 1;
    goto corral_source_split_4546;

  $bb29:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i61, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i62 := $slt.i32(out_$i61, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.71, out_$p60);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p10, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4521;

  $bb26:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i64(out_$i58, 0);
    goto corral_source_split_4516;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} out_$i58 := copy_from_user(in_$p45, out_$p50, out_$i57);
    call {:si_unique_call 742} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i58);
    goto corral_source_split_4515;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i32.i64(out_$i56);
    goto corral_source_split_4514;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    out_$i56 := $trunc.i64.i32(out_$i55);
    call {:si_unique_call 740} {:cexpr "len"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_4513;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_4512;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i53;
    goto $bb24;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i51;
    goto $bb24;

  $bb22:
    assume out_$i54 == 1;
    goto corral_source_split_4508;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    out_$i54 := $ult.i64(out_$i51, out_$i53);
    goto corral_source_split_4506;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i64($M.22, in_$p4);
    call {:si_unique_call 739} {:cexpr "__min2"} boogie_si_record_i64(out_$i53);
    goto corral_source_split_4505;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb23:
    assume !(out_$i54 == 1);
    goto corral_source_split_4510;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} out_$i69 := mtd_write_user_prot_reg(in_$p12, out_$i67, out_$i68, in_$p5, in_$p45);
    call {:si_unique_call 745} {:cexpr "ret"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_4526;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i56);
    goto corral_source_split_4525;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i64($M.1, in_$p3);
    goto corral_source_split_4524;

  $bb31:
    assume out_$i63 == 1;
    goto corral_source_split_4523;

  $bb30:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    out_$i63 := $slt.i32(out_$i61, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, in_$p5, out_$i79);
    goto corral_source_split_4544;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i64($M.15, out_$p78);
    goto corral_source_split_4543;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p7, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_4542;

  SeqInstr_174:
    call {:si_unique_call 747} {:cexpr "ret"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_4541;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} out_$i77 := mtd_write_oob(in_$p12, out_$i76, in_$p7);
    goto SeqInstr_173;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i64($M.1, in_$p3);
    goto corral_source_split_4540;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $M.15 := $store.i64($M.15, out_$p75, out_$i74);
    goto corral_source_split_4539;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p7, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_4538;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i32.i64(out_$i56);
    goto corral_source_split_4537;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, out_$p73, 0);
    goto corral_source_split_4536;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p7, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_4535;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, out_$p72, $0.ref);
    goto corral_source_split_4534;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p7, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_4533;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, out_$p71, in_$p45);
    goto corral_source_split_4532;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p7, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_4531;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, out_$p70, 2);
    goto corral_source_split_4530;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p7, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4529;

  $bb33:
    assume out_$i64 == 1;
    goto corral_source_split_4528;

  $bb32:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i61, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} out_$i82 := mtd_write(in_$p12, out_$i80, out_$i81, in_$p5, in_$p45);
    call {:si_unique_call 749} {:cexpr "ret"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_4553;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    out_$i81 := $sext.i32.i64(out_$i56);
    goto corral_source_split_4552;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i64($M.1, in_$p3);
    goto corral_source_split_4551;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb35;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i65 == 1);
    goto $bb35;

  $bb51_dummy:
    call {:si_unique_call 1} out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$p73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i66, out_$i83, out_$i84, out_$i85, out_$i87, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$p97, out_$i88, out_$i99, out_$p50, out_$i51, out_$i52, out_$i100 := mtdchar_write_loop_$bb20(in_$p3, in_$p4, in_$p5, in_$p7, in_$p10, in_$p12, in_$p45, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$p72, out_$p73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i66, out_$i83, out_$i84, out_$i85, out_$i87, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$p97, out_$i88, out_$i99, out_$p50, out_$i51, out_$i52, out_$i100);
    return;

  exit:
    return;
}



procedure mtdchar_write_loop_$bb20(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p7: ref, in_$p10: ref, in_$p12: ref, in_$p45: ref, in_$i53: i64, in_$i54: i1, in_$i55: i64, in_$i56: i32, in_$i57: i64, in_$i58: i64, in_$i59: i1, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i67: i64, in_$i68: i64, in_$i69: i32, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$p75: ref, in_$i76: i64, in_$i77: i32, in_$p78: ref, in_$i79: i64, in_$i80: i64, in_$i81: i64, in_$i82: i32, in_$i66: i32, in_$i83: i1, in_$i84: i1, in_$i85: i64, in_$i87: i1, in_$i89: i64, in_$i90: i64, in_$i91: i64, in_$i92: i64, in_$i93: i64, in_$i94: i64, in_$i95: i64, in_$i96: i64, in_$p97: ref, in_$i88: i32, in_$i99: i1, in_$p50: ref, in_$i51: i64, in_$i52: i64, in_$i100: i64) returns (out_$i53: i64, out_$i54: i1, out_$i55: i64, out_$i56: i32, out_$i57: i64, out_$i58: i64, out_$i59: i1, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i67: i64, out_$i68: i64, out_$i69: i32, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$p75: ref, out_$i76: i64, out_$i77: i32, out_$p78: ref, out_$i79: i64, out_$i80: i64, out_$i81: i64, out_$i82: i32, out_$i66: i32, out_$i83: i1, out_$i84: i1, out_$i85: i64, out_$i87: i1, out_$i89: i64, out_$i90: i64, out_$i91: i64, out_$i92: i64, out_$i93: i64, out_$i94: i64, out_$i95: i64, out_$i96: i64, out_$p97: ref, out_$i88: i32, out_$i99: i1, out_$p50: ref, out_$i51: i64, out_$i52: i64, out_$i100: i64);
  modifies $M.1, $M.20, $CurrAddr, $M.15, $M.0, $M.10, assertsPassed;



implementation shrink_ecclayout_loop_$bb14(in_$p0: ref, in_$p1: ref, in_$p13: ref, in_$i17: i64, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i16: i32) returns (out_$i17: i64, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i16: i32)
{

  entry:
    out_$i17, out_$p19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i16 := in_$i17, in_$p19, in_$i20, in_$i21, in_$p23, in_$i24, in_$i25, in_$i26, in_$i16;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6023;

  $bb16:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i24;
    goto $bb16_dummy;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    out_$i26 := $ult.i32(out_$i24, out_$i25);
    goto corral_source_split_6033;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.1, in_$p13);
    goto corral_source_split_6032;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i16, 1);
    call {:si_unique_call 1081} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_6031;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p23, out_$i20);
    goto corral_source_split_6030;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 328)), $mul.ref(4, 1)), $mul.ref(out_$i21, 4));
    goto corral_source_split_6029;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i16);
    goto corral_source_split_6028;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.1, out_$p19);
    goto corral_source_split_6027;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2824)), $mul.ref(4, 1)), $mul.ref(out_$i17, 4));
    goto corral_source_split_6026;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_6025;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i17, out_$p19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i16 := shrink_ecclayout_loop_$bb14(in_$p0, in_$p1, in_$p13, out_$i17, out_$p19, out_$i20, out_$i21, out_$p23, out_$i24, out_$i25, out_$i26, out_$i16);
    return;

  exit:
    return;
}



procedure shrink_ecclayout_loop_$bb14(in_$p0: ref, in_$p1: ref, in_$p13: ref, in_$i17: i64, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i16: i32) returns (out_$i17: i64, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i16: i32);
  modifies $M.1;



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p36: ref, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p44: ref, in_$p46: ref, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$p53: ref, in_$p54: ref, in_$p56: ref, in_$p58: ref, in_$p60: ref, in_$p61: ref, in_$p63: ref, in_$p64: ref, in_$p66: ref, in_$p68: ref, in_$p69: ref, in_$p71: ref, in_$p73: ref, in_$p75: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p82: ref, in_$p83: ref, in_$p85: ref, in_$i94: i32, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$i118: i32, in_$i119: i1, in_$i120: i32, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$i141: i1, in_$i142: i1, in_$i143: i1, in_$i144: i1, in_$i145: i1, in_$i146: i1, in_$i147: i1, in_$i148: i1, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i152: i32, in_$i153: i32, in_$i154: i1, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$i159: i32, in_$i160: i1, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i164: i32, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$i170: i32, in_$i171: i32, in_$i172: i1, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i176: i32, in_$i177: i32, in_$i178: i1, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$i182: i32, in_$i183: i32, in_$i184: i1, in_$i185: i32, in_$i186: i1, in_$i187: i32, in_$i188: i32, in_$i189: i1, in_$i190: i32, in_$i191: i1, in_$i192: i32, in_$i193: i32, in_$i194: i1, in_$i195: i32, in_$i196: i1, in_$i197: i32, in_$i198: i32, in_$i199: i1, in_$i200: i32, in_$i201: i1, in_$i202: i32, in_$i203: i32, in_$i204: i1, in_$i205: i32, in_$i206: i1, in_$i207: i32, in_$i208: i32, in_$i209: i1, in_$i210: i32, in_$i211: i1, in_$i212: i32, in_$i213: i32, in_$i214: i1, in_$i215: i32, in_$i216: i1, in_$i217: i32, in_$i218: i32, in_$i219: i1, in_$i220: i32, in_$i221: i32, in_$i222: i32, in_$i223: i1, in_$i224: i32, in_$i225: i32, in_$i226: i1, in_$i227: i32, in_$i228: i1, in_$i229: i32, in_$i230: i32, in_$i231: i1, in_$i232: i32, in_$i233: i1, in_$i234: i32, in_$i235: i32, in_$i236: i1, in_$i237: i32, in_$i238: i1, in_$i239: i32, in_$i240: i32, in_$i241: i1, in_$i242: i32, in_$i243: i1, in_$i244: i32, in_$i245: i32, in_$i246: i1, in_$i247: i32, in_$i248: i1, in_$i249: i32, in_$i250: i32, in_$i251: i1, in_$i252: i32, in_$i253: i1, in_$i255: i32, in_$i256: i32, in_$i257: i32, in_$i258: i1, in_$i259: i32, in_$i260: i1, in_$i261: i32, in_$i262: i1, in_$i264: i32, in_$i265: i1, in_$i266: i32, in_$i267: i1, in_$i268: i32, in_$i269: i1, in_$i271: i32, in_$i272: i1, in_$i273: i32, in_$i274: i1, in_$i275: i32, in_$i276: i1, in_$i277: i32, in_$i278: i1, in_$i279: i32, in_$i280: i1, in_$i282: i32, in_$i283: i1, in_$i284: i32, in_$i285: i1, in_$i286: i1, in_$i287: i1, in_$i288: i32, in_$i289: i1, in_$i290: i32, in_$i291: i1, in_$i292: i32, in_$i293: i1, in_$i294: i32, in_$i295: i32, in_$i296: i1, in_$i297: i32, in_$i298: i1, in_$i299: i32, in_$i300: i1, in_$i301: i32, in_$i302: i1, in_$i303: i32, in_$i304: i1, in_$i306: i32, in_$i307: i1, in_$i308: i32, in_$i309: i1, in_$i310: i32, in_$i311: i1, in_$i313: i32, in_$i314: i1, in_$i315: i32, in_$i316: i1, in_$i317: i32, in_$i318: i1, in_$i320: i32, in_$i321: i1, in_$i322: i32, in_$i323: i1, in_$i324: i1, in_$i325: i1, in_$i326: i1, in_$i327: i1, in_$i328: i32, in_$i329: i1, in_$p330: ref, in_$p331: ref, in_$i333: i32, in_$i334: i32, in_$i335: i32, in_$i336: i1, in_$p337: ref, in_$i338: i64, in_$i340: i32, in_$i341: i1, in_$p342: ref, in_$i343: i64, in_$i344: i32, in_$i346: i32, in_$i347: i1, in_$p348: ref, in_$p349: ref, in_$i350: i32, in_$i351: i32, in_$i352: i1, in_$i353: i32, in_$i354: i32, in_$i355: i32, in_$i356: i1, in_$i357: i32, in_$i358: i1, in_$i359: i32, in_$i360: i1, in_$i362: i32, in_$i363: i1, in_$i364: i32, in_$i365: i1, in_$i366: i32, in_$i367: i1, in_$i369: i32, in_$i370: i1, in_$i371: i32, in_$i372: i1, in_$i373: i32, in_$i374: i1, in_$i376: i32, in_$i377: i1, in_$i378: i32, in_$i379: i1, in_$i380: i32, in_$i381: i1, in_$i383: i32, in_$i384: i1, in_$i385: i32, in_$i386: i1, in_$i387: i32, in_$i388: i1, in_$i390: i32, in_$i391: i1, in_$i392: i32, in_$i393: i1, in_$i394: i32, in_$i395: i1, in_$i397: i32, in_$i398: i1, in_$i399: i32, in_$i400: i1, in_$i401: i1, in_$i402: i1, in_$i403: i32, in_$i404: i1, in_$i405: i32, in_$i406: i32, in_$i407: i32, in_$i408: i1, in_$i410: i32, in_$i411: i32, in_$i412: i32, in_$i413: i1, in_$i414: i32, in_$i415: i1, in_$i416: i32, in_$i417: i1, in_$i419: i32, in_$i420: i1, in_$i421: i32, in_$i422: i1, in_$i423: i1, in_$i424: i1, in_$i425: i32, in_$i426: i1, in_$p427: ref, in_$p428: ref, in_$i429: i64, in_$i431: i32, in_$i432: i1, in_$p433: ref, in_$p434: ref, in_$i436: i32, in_$i437: i1, in_$i438: i32, in_$i439: i1, in_$i440: i32, in_$i441: i1, in_vslice_dummy_var_82: i64, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i64, in_vslice_dummy_var_85: i64, in_vslice_dummy_var_86: i64, in_vslice_dummy_var_87: i64, in_vslice_dummy_var_88: i64, in_vslice_dummy_var_89: i64, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i64, in_vslice_dummy_var_92: i64, in_vslice_dummy_var_93: i64, in_vslice_dummy_var_94: i64, in_vslice_dummy_var_95: i64, in_vslice_dummy_var_96: i64, in_vslice_dummy_var_97: i64, in_vslice_dummy_var_98: i64, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i64, in_vslice_dummy_var_101: i64, in_vslice_dummy_var_102: i64, in_vslice_dummy_var_103: i64) returns (out_$i94: i32, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$i118: i32, out_$i119: i1, out_$i120: i32, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$i141: i1, out_$i142: i1, out_$i143: i1, out_$i144: i1, out_$i145: i1, out_$i146: i1, out_$i147: i1, out_$i148: i1, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i152: i32, out_$i153: i32, out_$i154: i1, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$i159: i32, out_$i160: i1, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i164: i32, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$i170: i32, out_$i171: i32, out_$i172: i1, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i176: i32, out_$i177: i32, out_$i178: i1, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$i182: i32, out_$i183: i32, out_$i184: i1, out_$i185: i32, out_$i186: i1, out_$i187: i32, out_$i188: i32, out_$i189: i1, out_$i190: i32, out_$i191: i1, out_$i192: i32, out_$i193: i32, out_$i194: i1, out_$i195: i32, out_$i196: i1, out_$i197: i32, out_$i198: i32, out_$i199: i1, out_$i200: i32, out_$i201: i1, out_$i202: i32, out_$i203: i32, out_$i204: i1, out_$i205: i32, out_$i206: i1, out_$i207: i32, out_$i208: i32, out_$i209: i1, out_$i210: i32, out_$i211: i1, out_$i212: i32, out_$i213: i32, out_$i214: i1, out_$i215: i32, out_$i216: i1, out_$i217: i32, out_$i218: i32, out_$i219: i1, out_$i220: i32, out_$i221: i32, out_$i222: i32, out_$i223: i1, out_$i224: i32, out_$i225: i32, out_$i226: i1, out_$i227: i32, out_$i228: i1, out_$i229: i32, out_$i230: i32, out_$i231: i1, out_$i232: i32, out_$i233: i1, out_$i234: i32, out_$i235: i32, out_$i236: i1, out_$i237: i32, out_$i238: i1, out_$i239: i32, out_$i240: i32, out_$i241: i1, out_$i242: i32, out_$i243: i1, out_$i244: i32, out_$i245: i32, out_$i246: i1, out_$i247: i32, out_$i248: i1, out_$i249: i32, out_$i250: i32, out_$i251: i1, out_$i252: i32, out_$i253: i1, out_$i255: i32, out_$i256: i32, out_$i257: i32, out_$i258: i1, out_$i259: i32, out_$i260: i1, out_$i261: i32, out_$i262: i1, out_$i264: i32, out_$i265: i1, out_$i266: i32, out_$i267: i1, out_$i268: i32, out_$i269: i1, out_$i271: i32, out_$i272: i1, out_$i273: i32, out_$i274: i1, out_$i275: i32, out_$i276: i1, out_$i277: i32, out_$i278: i1, out_$i279: i32, out_$i280: i1, out_$i282: i32, out_$i283: i1, out_$i284: i32, out_$i285: i1, out_$i286: i1, out_$i287: i1, out_$i288: i32, out_$i289: i1, out_$i290: i32, out_$i291: i1, out_$i292: i32, out_$i293: i1, out_$i294: i32, out_$i295: i32, out_$i296: i1, out_$i297: i32, out_$i298: i1, out_$i299: i32, out_$i300: i1, out_$i301: i32, out_$i302: i1, out_$i303: i32, out_$i304: i1, out_$i306: i32, out_$i307: i1, out_$i308: i32, out_$i309: i1, out_$i310: i32, out_$i311: i1, out_$i313: i32, out_$i314: i1, out_$i315: i32, out_$i316: i1, out_$i317: i32, out_$i318: i1, out_$i320: i32, out_$i321: i1, out_$i322: i32, out_$i323: i1, out_$i324: i1, out_$i325: i1, out_$i326: i1, out_$i327: i1, out_$i328: i32, out_$i329: i1, out_$p330: ref, out_$p331: ref, out_$i333: i32, out_$i334: i32, out_$i335: i32, out_$i336: i1, out_$p337: ref, out_$i338: i64, out_$i340: i32, out_$i341: i1, out_$p342: ref, out_$i343: i64, out_$i344: i32, out_$i346: i32, out_$i347: i1, out_$p348: ref, out_$p349: ref, out_$i350: i32, out_$i351: i32, out_$i352: i1, out_$i353: i32, out_$i354: i32, out_$i355: i32, out_$i356: i1, out_$i357: i32, out_$i358: i1, out_$i359: i32, out_$i360: i1, out_$i362: i32, out_$i363: i1, out_$i364: i32, out_$i365: i1, out_$i366: i32, out_$i367: i1, out_$i369: i32, out_$i370: i1, out_$i371: i32, out_$i372: i1, out_$i373: i32, out_$i374: i1, out_$i376: i32, out_$i377: i1, out_$i378: i32, out_$i379: i1, out_$i380: i32, out_$i381: i1, out_$i383: i32, out_$i384: i1, out_$i385: i32, out_$i386: i1, out_$i387: i32, out_$i388: i1, out_$i390: i32, out_$i391: i1, out_$i392: i32, out_$i393: i1, out_$i394: i32, out_$i395: i1, out_$i397: i32, out_$i398: i1, out_$i399: i32, out_$i400: i1, out_$i401: i1, out_$i402: i1, out_$i403: i32, out_$i404: i1, out_$i405: i32, out_$i406: i32, out_$i407: i32, out_$i408: i1, out_$i410: i32, out_$i411: i32, out_$i412: i32, out_$i413: i1, out_$i414: i32, out_$i415: i1, out_$i416: i32, out_$i417: i1, out_$i419: i32, out_$i420: i1, out_$i421: i32, out_$i422: i1, out_$i423: i1, out_$i424: i1, out_$i425: i32, out_$i426: i1, out_$p427: ref, out_$p428: ref, out_$i429: i64, out_$i431: i32, out_$i432: i1, out_$p433: ref, out_$p434: ref, out_$i436: i32, out_$i437: i1, out_$i438: i32, out_$i439: i1, out_$i440: i32, out_$i441: i1, out_vslice_dummy_var_82: i64, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i64, out_vslice_dummy_var_85: i64, out_vslice_dummy_var_86: i64, out_vslice_dummy_var_87: i64, out_vslice_dummy_var_88: i64, out_vslice_dummy_var_89: i64, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i64, out_vslice_dummy_var_92: i64, out_vslice_dummy_var_93: i64, out_vslice_dummy_var_94: i64, out_vslice_dummy_var_95: i64, out_vslice_dummy_var_96: i64, out_vslice_dummy_var_97: i64, out_vslice_dummy_var_98: i64, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i64, out_vslice_dummy_var_101: i64, out_vslice_dummy_var_102: i64, out_vslice_dummy_var_103: i64)
{

  entry:
    out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$p330, out_$p331, out_$i333, out_$i334, out_$i335, out_$i336, out_$p337, out_$i338, out_$i340, out_$i341, out_$p342, out_$i343, out_$i344, out_$i346, out_$i347, out_$p348, out_$p349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_$i362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i369, out_$i370, out_$i371, out_$i372, out_$i373, out_$i374, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$p427, out_$p428, out_$i429, out_$i431, out_$i432, out_$p433, out_$p434, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103 := in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$p151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$p157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$p163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$p169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$p175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$p181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$i241, in_$i242, in_$i243, in_$i244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$i253, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i271, in_$i272, in_$i273, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$i279, in_$i280, in_$i282, in_$i283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290, in_$i291, in_$i292, in_$i293, in_$i294, in_$i295, in_$i296, in_$i297, in_$i298, in_$i299, in_$i300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i306, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i313, in_$i314, in_$i315, in_$i316, in_$i317, in_$i318, in_$i320, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$i326, in_$i327, in_$i328, in_$i329, in_$p330, in_$p331, in_$i333, in_$i334, in_$i335, in_$i336, in_$p337, in_$i338, in_$i340, in_$i341, in_$p342, in_$i343, in_$i344, in_$i346, in_$i347, in_$p348, in_$p349, in_$i350, in_$i351, in_$i352, in_$i353, in_$i354, in_$i355, in_$i356, in_$i357, in_$i358, in_$i359, in_$i360, in_$i362, in_$i363, in_$i364, in_$i365, in_$i366, in_$i367, in_$i369, in_$i370, in_$i371, in_$i372, in_$i373, in_$i374, in_$i376, in_$i377, in_$i378, in_$i379, in_$i380, in_$i381, in_$i383, in_$i384, in_$i385, in_$i386, in_$i387, in_$i388, in_$i390, in_$i391, in_$i392, in_$i393, in_$i394, in_$i395, in_$i397, in_$i398, in_$i399, in_$i400, in_$i401, in_$i402, in_$i403, in_$i404, in_$i405, in_$i406, in_$i407, in_$i408, in_$i410, in_$i411, in_$i412, in_$i413, in_$i414, in_$i415, in_$i416, in_$i417, in_$i419, in_$i420, in_$i421, in_$i422, in_$i423, in_$i424, in_$i425, in_$i426, in_$p427, in_$p428, in_$i429, in_$i431, in_$i432, in_$p433, in_$p434, in_$i436, in_$i437, in_$i438, in_$i439, in_$i440, in_$i441, in_vslice_dummy_var_82, in_vslice_dummy_var_83, in_vslice_dummy_var_84, in_vslice_dummy_var_85, in_vslice_dummy_var_86, in_vslice_dummy_var_87, in_vslice_dummy_var_88, in_vslice_dummy_var_89, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1222} out_$i94 := __VERIFIER_nondet_int();
    call {:si_unique_call 1223} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i94);
    call {:si_unique_call 1224} {:cexpr "tmp___49"} boogie_si_record_i32(out_$i94);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb62_dummy;

  $bb508:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb506:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb494:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb474:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb462:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb442:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb430:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb382:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb51:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb56:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1229} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6564;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} out_vslice_dummy_var_82 := mtd_ecc_strength_show(in_$p6, in_$p8, in_$p4);
    goto corral_source_split_6563;

  $bb55:
    assume out_$i123 == 1;
    goto corral_source_split_6562;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i32(out_$i122, 1);
    goto corral_source_split_6560;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    out_$i122 := $M.81;
    goto corral_source_split_6559;

  $bb53:
    assume out_$i121 == 1;
    goto corral_source_split_6558;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i120, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_6556:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1225} out_$i120 := __VERIFIER_nondet_int();
    call {:si_unique_call 1226} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i120);
    call {:si_unique_call 1227} {:cexpr "tmp___50"} boogie_si_record_i32(out_$i120);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb50:
    assume out_$i119 == 1;
    goto corral_source_split_6556;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    out_$i119 := $ne.i32(out_$i118, 0);
    goto corral_source_split_6554;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    out_$i118 := $M.81;
    goto corral_source_split_6553;

  $bb48:
    assume out_$i117 == 1;
    goto corral_source_split_6552;

  $bb46:
    assume out_$i116 == 1;
    assume {:verifier.code 0} true;
    out_$i117 := $eq.i32(out_$i94, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb40:
    assume out_$i113 == 1;
    assume {:verifier.code 0} true;
    out_$i116 := $slt.i32(out_$i94, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb28:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$i113 := $slt.i32(out_$i94, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb3:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$i107 := $slt.i32(out_$i94, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i95 := $slt.i32(out_$i94, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} ldv_stop();
    goto corral_source_split_6566;

  $bb54:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb64:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb110:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb112:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $M.82 := 15;
    call {:si_unique_call 1236} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(15);
    goto corral_source_split_6658;

  $bb111:
    assume out_$i154 == 1;
    goto corral_source_split_6657;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    out_$i154 := $eq.i32(out_$i153, 0);
    goto corral_source_split_6655;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    out_$i153 := $M.104;
    goto corral_source_split_6654;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $M.104 := out_$i152;
    call {:si_unique_call 1235} {:cexpr "ldv_retval_18"} boogie_si_record_i32(out_$i152);
    goto corral_source_split_6653;

  SeqInstr_252:
    goto corral_source_split_6652;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} out_$i152 := mtd_cls_resume(out_$p151);
    goto SeqInstr_251;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    out_$p151 := $M.80;
    goto corral_source_split_6651;

  $bb109:
    assume out_$i150 == 1;
    goto corral_source_split_6650;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    out_$i150 := $eq.i32(out_$i149, 12);
    goto corral_source_split_6648;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    out_$i149 := $M.82;
    goto corral_source_split_6647;

  $bb107:
    assume out_$i148 == 1;
    goto corral_source_split_6646;

  $bb105:
    assume out_$i147 == 1;
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i127, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb99:
    assume out_$i144 == 1;
    assume {:verifier.code 0} true;
    out_$i147 := $slt.i32(out_$i127, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb89:
    assume out_$i139 == 1;
    assume {:verifier.code 0} true;
    out_$i144 := $slt.i32(out_$i127, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb66:
    assume out_$i128 == 1;
    assume {:verifier.code 0} true;
    out_$i139 := $slt.i32(out_$i127, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb65:
    assume {:verifier.code 0} true;
    out_$i128 := $slt.i32(out_$i127, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_6568:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1231} out_$i127 := __VERIFIER_nondet_int();
    call {:si_unique_call 1232} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i127);
    call {:si_unique_call 1233} {:cexpr "tmp___51"} boogie_si_record_i32(out_$i127);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb63:
    assume out_$i126 == 1;
    goto corral_source_split_6568;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    out_$i126 := $ne.i32(out_$i125, 0);
    goto corral_source_split_6550;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    out_$i125 := $M.82;
    goto corral_source_split_6549;

  $bb47:
    assume !(out_$i116 == 1);
    goto corral_source_split_6548;

  $bb117:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb119:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $M.82 := 15;
    call {:si_unique_call 1239} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(15);
    goto corral_source_split_6668;

  $bb118:
    assume out_$i160 == 1;
    goto corral_source_split_6667;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    out_$i160 := $eq.i32(out_$i159, 0);
    goto corral_source_split_6665;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    out_$i159 := $M.105;
    goto corral_source_split_6664;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $M.105 := out_$i158;
    call {:si_unique_call 1238} {:cexpr "ldv_retval_17"} boogie_si_record_i32(out_$i158);
    goto corral_source_split_6663;

  SeqInstr_255:
    goto corral_source_split_6662;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} out_$i158 := mtd_cls_resume(out_$p157);
    goto SeqInstr_254;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    out_$p157 := $M.80;
    goto corral_source_split_6661;

  $bb116:
    assume out_$i156 == 1;
    goto corral_source_split_6660;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i32(out_$i155, 13);
    goto corral_source_split_6644;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    out_$i155 := $M.82;
    goto corral_source_split_6643;

  $bb106:
    assume !(out_$i147 == 1);
    goto corral_source_split_6642;

  $bb123:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb125:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $M.82 := 3;
    call {:si_unique_call 1242} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(3);
    goto corral_source_split_6678;

  $bb124:
    assume out_$i166 == 1;
    goto corral_source_split_6677;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i165, 0);
    goto corral_source_split_6675;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    out_$i165 := $M.106;
    goto corral_source_split_6674;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $M.106 := out_$i164;
    call {:si_unique_call 1241} {:cexpr "ldv_retval_16"} boogie_si_record_i32(out_$i164);
    goto corral_source_split_6673;

  SeqInstr_258:
    goto corral_source_split_6672;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} out_$i164 := mtd_cls_suspend(out_$p163);
    goto SeqInstr_257;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    out_$p163 := $M.80;
    goto corral_source_split_6671;

  $bb122:
    assume out_$i162 == 1;
    goto corral_source_split_6670;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, 2);
    goto corral_source_split_6632;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    out_$i161 := $M.82;
    goto corral_source_split_6631;

  $bb101:
    assume out_$i145 == 1;
    goto corral_source_split_6630;

  $bb100:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    out_$i145 := $slt.i32(out_$i127, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb129:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb131:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $M.82 := 4;
    call {:si_unique_call 1245} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(4);
    goto corral_source_split_6688;

  $bb130:
    assume out_$i172 == 1;
    goto corral_source_split_6687;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    out_$i172 := $eq.i32(out_$i171, 0);
    goto corral_source_split_6685;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    out_$i171 := $M.107;
    goto corral_source_split_6684;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $M.107 := out_$i170;
    call {:si_unique_call 1244} {:cexpr "ldv_retval_15"} boogie_si_record_i32(out_$i170);
    goto corral_source_split_6683;

  SeqInstr_261:
    goto corral_source_split_6682;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} out_$i170 := mtd_cls_suspend(out_$p169);
    goto SeqInstr_260;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    out_$p169 := $M.80;
    goto corral_source_split_6681;

  $bb128:
    assume out_$i168 == 1;
    goto corral_source_split_6680;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 2);
    goto corral_source_split_6636;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    out_$i167 := $M.82;
    goto corral_source_split_6635;

  $bb103:
    assume out_$i146 == 1;
    goto corral_source_split_6634;

  $bb102:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    out_$i146 := $slt.i32(out_$i127, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb135:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb137:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $M.82 := 5;
    call {:si_unique_call 1248} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(5);
    goto corral_source_split_6698;

  $bb136:
    assume out_$i178 == 1;
    goto corral_source_split_6697;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    out_$i178 := $eq.i32(out_$i177, 0);
    goto corral_source_split_6695;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    out_$i177 := $M.108;
    goto corral_source_split_6694;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $M.108 := out_$i176;
    call {:si_unique_call 1247} {:cexpr "ldv_retval_14"} boogie_si_record_i32(out_$i176);
    goto corral_source_split_6693;

  SeqInstr_264:
    goto corral_source_split_6692;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} out_$i176 := mtd_cls_suspend(out_$p175);
    goto SeqInstr_263;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    out_$p175 := $M.80;
    goto corral_source_split_6691;

  $bb134:
    assume out_$i174 == 1;
    goto corral_source_split_6690;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 2);
    goto corral_source_split_6640;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    out_$i173 := $M.82;
    goto corral_source_split_6639;

  $bb104:
    assume !(out_$i146 == 1);
    goto corral_source_split_6638;

  $bb141:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb143:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $M.82 := 15;
    call {:si_unique_call 1251} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(15);
    goto corral_source_split_6708;

  $bb142:
    assume out_$i184 == 1;
    goto corral_source_split_6707;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    out_$i184 := $eq.i32(out_$i183, 0);
    goto corral_source_split_6705;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    out_$i183 := $M.109;
    goto corral_source_split_6704;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $M.109 := out_$i182;
    call {:si_unique_call 1250} {:cexpr "ldv_retval_13"} boogie_si_record_i32(out_$i182);
    goto corral_source_split_6703;

  SeqInstr_267:
    goto corral_source_split_6702;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} out_$i182 := mtd_cls_resume(out_$p181);
    goto SeqInstr_266;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    out_$p181 := $M.80;
    goto corral_source_split_6701;

  $bb140:
    assume out_$i180 == 1;
    goto corral_source_split_6700;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    out_$i180 := $eq.i32(out_$i179, 14);
    goto corral_source_split_6624;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    out_$i179 := $M.82;
    goto corral_source_split_6623;

  $bb97:
    assume out_$i143 == 1;
    goto corral_source_split_6622;

  $bb91:
    assume out_$i140 == 1;
    assume {:verifier.code 0} true;
    out_$i143 := $slt.i32(out_$i127, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb90:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    out_$i140 := $slt.i32(out_$i127, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb147:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb149:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $M.82 := 10;
    call {:si_unique_call 1254} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(10);
    goto corral_source_split_6717;

  $bb148:
    assume out_$i189 == 1;
    goto corral_source_split_6716;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    out_$i189 := $eq.i32(out_$i188, 0);
    goto corral_source_split_6714;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    out_$i188 := $M.110;
    goto corral_source_split_6713;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $M.110 := out_$i187;
    call {:si_unique_call 1253} {:cexpr "ldv_retval_12"} boogie_si_record_i32(out_$i187);
    goto corral_source_split_6712;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} out_$i187 := ldv_suspend_late_21();
    goto corral_source_split_6711;

  $bb146:
    assume out_$i186 == 1;
    goto corral_source_split_6710;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    out_$i186 := $eq.i32(out_$i185, 5);
    goto corral_source_split_6628;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    out_$i185 := $M.82;
    goto corral_source_split_6627;

  $bb98:
    assume !(out_$i143 == 1);
    goto corral_source_split_6626;

  $bb153:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb155:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $M.82 := 12;
    call {:si_unique_call 1257} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(12);
    goto corral_source_split_6726;

  $bb154:
    assume out_$i194 == 1;
    goto corral_source_split_6725;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    out_$i194 := $eq.i32(out_$i193, 0);
    goto corral_source_split_6723;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    out_$i193 := $M.111;
    goto corral_source_split_6722;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $M.111 := out_$i192;
    call {:si_unique_call 1256} {:cexpr "ldv_retval_11"} boogie_si_record_i32(out_$i192);
    goto corral_source_split_6721;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} out_$i192 := ldv_restore_early_21();
    goto corral_source_split_6720;

  $bb152:
    assume out_$i191 == 1;
    goto corral_source_split_6719;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    out_$i191 := $eq.i32(out_$i190, 7);
    goto corral_source_split_6612;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    out_$i190 := $M.82;
    goto corral_source_split_6611;

  $bb93:
    assume out_$i141 == 1;
    goto corral_source_split_6610;

  $bb92:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    out_$i141 := $slt.i32(out_$i127, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb159:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb161:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $M.82 := 14;
    call {:si_unique_call 1260} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(14);
    goto corral_source_split_6735;

  $bb160:
    assume out_$i199 == 1;
    goto corral_source_split_6734;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    out_$i199 := $eq.i32(out_$i198, 0);
    goto corral_source_split_6732;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    out_$i198 := $M.112;
    goto corral_source_split_6731;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $M.112 := out_$i197;
    call {:si_unique_call 1259} {:cexpr "ldv_retval_10"} boogie_si_record_i32(out_$i197);
    goto corral_source_split_6730;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} out_$i197 := ldv_resume_early_21();
    goto corral_source_split_6729;

  $bb158:
    assume out_$i196 == 1;
    goto corral_source_split_6728;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    out_$i196 := $eq.i32(out_$i195, 10);
    goto corral_source_split_6616;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    out_$i195 := $M.82;
    goto corral_source_split_6615;

  $bb95:
    assume out_$i142 == 1;
    goto corral_source_split_6614;

  $bb94:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    out_$i142 := $slt.i32(out_$i127, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb165:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb167:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $M.82 := 13;
    call {:si_unique_call 1263} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(13);
    goto corral_source_split_6744;

  $bb166:
    assume out_$i204 == 1;
    goto corral_source_split_6743;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i203, 0);
    goto corral_source_split_6741;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    out_$i203 := $M.113;
    goto corral_source_split_6740;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $M.113 := out_$i202;
    call {:si_unique_call 1262} {:cexpr "ldv_retval_9"} boogie_si_record_i32(out_$i202);
    goto corral_source_split_6739;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} out_$i202 := ldv_thaw_early_21();
    goto corral_source_split_6738;

  $bb164:
    assume out_$i201 == 1;
    goto corral_source_split_6737;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    out_$i201 := $eq.i32(out_$i200, 9);
    goto corral_source_split_6620;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    out_$i200 := $M.82;
    goto corral_source_split_6619;

  $bb96:
    assume !(out_$i142 == 1);
    goto corral_source_split_6618;

  $bb171:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb173:
    assume !(out_$i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $M.82 := 14;
    call {:si_unique_call 1266} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(14);
    goto corral_source_split_6753;

  $bb172:
    assume out_$i209 == 1;
    goto corral_source_split_6752;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    out_$i209 := $eq.i32(out_$i208, 0);
    goto corral_source_split_6750;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    out_$i208 := $M.114;
    goto corral_source_split_6749;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $M.114 := out_$i207;
    call {:si_unique_call 1265} {:cexpr "ldv_retval_8"} boogie_si_record_i32(out_$i207);
    goto corral_source_split_6748;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} out_$i207 := ldv_resume_noirq_21();
    goto corral_source_split_6747;

  $bb170:
    assume out_$i206 == 1;
    goto corral_source_split_6746;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    out_$i206 := $eq.i32(out_$i205, 11);
    goto corral_source_split_6604;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    out_$i205 := $M.82;
    goto corral_source_split_6603;

  $bb87:
    assume out_$i138 == 1;
    goto corral_source_split_6602;

  $bb81:
    assume out_$i135 == 1;
    assume {:verifier.code 0} true;
    out_$i138 := $slt.i32(out_$i127, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb68:
    assume out_$i129 == 1;
    assume {:verifier.code 0} true;
    out_$i135 := $slt.i32(out_$i127, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb67:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i127, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb177:
    assume !(out_$i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb179:
    assume !(out_$i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $M.82 := 8;
    call {:si_unique_call 1269} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(8);
    goto corral_source_split_6762;

  $bb178:
    assume out_$i214 == 1;
    goto corral_source_split_6761;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    out_$i214 := $eq.i32(out_$i213, 0);
    goto corral_source_split_6759;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    out_$i213 := $M.115;
    goto corral_source_split_6758;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $M.115 := out_$i212;
    call {:si_unique_call 1268} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i212);
    goto corral_source_split_6757;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} out_$i212 := ldv_freeze_noirq_21();
    goto corral_source_split_6756;

  $bb176:
    assume out_$i211 == 1;
    goto corral_source_split_6755;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    out_$i211 := $eq.i32(out_$i210, 4);
    goto corral_source_split_6608;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    out_$i210 := $M.82;
    goto corral_source_split_6607;

  $bb88:
    assume !(out_$i138 == 1);
    goto corral_source_split_6606;

  $bb183:
    assume !(out_$i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb185:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $M.88 := out_$i221;
    call {:si_unique_call 1273} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i221);
    goto corral_source_split_6774;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    out_$i221 := $add.i32(out_$i220, 1);
    goto corral_source_split_6773;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    out_$i220 := $M.88;
    goto corral_source_split_6772;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $M.82 := 2;
    call {:si_unique_call 1272} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(2);
    goto corral_source_split_6771;

  $bb184:
    assume out_$i219 == 1;
    goto corral_source_split_6770;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i218, 0);
    goto corral_source_split_6768;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    out_$i218 := $M.116;
    goto corral_source_split_6767;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $M.116 := out_$i217;
    call {:si_unique_call 1271} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i217);
    goto corral_source_split_6766;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} out_$i217 := ldv_prepare_21();
    goto corral_source_split_6765;

  $bb182:
    assume out_$i216 == 1;
    goto corral_source_split_6764;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i215, 1);
    goto corral_source_split_6592;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    out_$i215 := $M.82;
    goto corral_source_split_6591;

  $bb83:
    assume out_$i136 == 1;
    goto corral_source_split_6590;

  $bb82:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    out_$i136 := $slt.i32(out_$i127, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb189:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb191:
    assume !(out_$i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $M.82 := 9;
    call {:si_unique_call 1276} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(9);
    goto corral_source_split_6783;

  $bb190:
    assume out_$i226 == 1;
    goto corral_source_split_6782;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    out_$i226 := $eq.i32(out_$i225, 0);
    goto corral_source_split_6780;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    out_$i225 := $M.117;
    goto corral_source_split_6779;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $M.117 := out_$i224;
    call {:si_unique_call 1275} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i224);
    goto corral_source_split_6778;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} out_$i224 := ldv_freeze_late_21();
    goto corral_source_split_6777;

  $bb188:
    assume out_$i223 == 1;
    goto corral_source_split_6776;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i222, 4);
    goto corral_source_split_6596;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    out_$i222 := $M.82;
    goto corral_source_split_6595;

  $bb85:
    assume out_$i137 == 1;
    goto corral_source_split_6594;

  $bb84:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    out_$i137 := $slt.i32(out_$i127, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb195:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb197:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $M.82 := 13;
    call {:si_unique_call 1279} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(13);
    goto corral_source_split_6792;

  $bb196:
    assume out_$i231 == 1;
    goto corral_source_split_6791;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    out_$i231 := $eq.i32(out_$i230, 0);
    goto corral_source_split_6789;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    out_$i230 := $M.118;
    goto corral_source_split_6788;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $M.118 := out_$i229;
    call {:si_unique_call 1278} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i229);
    goto corral_source_split_6787;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} out_$i229 := ldv_thaw_noirq_21();
    goto corral_source_split_6786;

  $bb194:
    assume out_$i228 == 1;
    goto corral_source_split_6785;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i227, 8);
    goto corral_source_split_6600;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    out_$i227 := $M.82;
    goto corral_source_split_6599;

  $bb86:
    assume !(out_$i137 == 1);
    goto corral_source_split_6598;

  $bb201:
    assume !(out_$i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb203:
    assume !(out_$i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $M.82 := 6;
    call {:si_unique_call 1282} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(6);
    goto corral_source_split_6801;

  $bb202:
    assume out_$i236 == 1;
    goto corral_source_split_6800;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    out_$i236 := $eq.i32(out_$i235, 0);
    goto corral_source_split_6798;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    out_$i235 := $M.119;
    goto corral_source_split_6797;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $M.119 := out_$i234;
    call {:si_unique_call 1281} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i234);
    goto corral_source_split_6796;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} out_$i234 := ldv_poweroff_noirq_21();
    goto corral_source_split_6795;

  $bb200:
    assume out_$i233 == 1;
    goto corral_source_split_6794;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    out_$i233 := $eq.i32(out_$i232, 3);
    goto corral_source_split_6584;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    out_$i232 := $M.82;
    goto corral_source_split_6583;

  $bb79:
    assume out_$i134 == 1;
    goto corral_source_split_6582;

  $bb70:
    assume out_$i130 == 1;
    assume {:verifier.code 0} true;
    out_$i134 := $slt.i32(out_$i127, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb69:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    out_$i130 := $slt.i32(out_$i127, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb207:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb209:
    assume !(out_$i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $M.82 := 7;
    call {:si_unique_call 1285} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(7);
    goto corral_source_split_6810;

  $bb208:
    assume out_$i241 == 1;
    goto corral_source_split_6809;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    out_$i241 := $eq.i32(out_$i240, 0);
    goto corral_source_split_6807;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    out_$i240 := $M.120;
    goto corral_source_split_6806;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $M.120 := out_$i239;
    call {:si_unique_call 1284} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i239);
    goto corral_source_split_6805;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} out_$i239 := ldv_poweroff_late_21();
    goto corral_source_split_6804;

  $bb206:
    assume out_$i238 == 1;
    goto corral_source_split_6803;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    out_$i238 := $eq.i32(out_$i237, 3);
    goto corral_source_split_6588;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    out_$i237 := $M.82;
    goto corral_source_split_6587;

  $bb80:
    assume !(out_$i134 == 1);
    goto corral_source_split_6586;

  $bb213:
    assume !(out_$i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb215:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $M.82 := 12;
    call {:si_unique_call 1288} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(12);
    goto corral_source_split_6819;

  $bb214:
    assume out_$i246 == 1;
    goto corral_source_split_6818;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i245, 0);
    goto corral_source_split_6816;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    out_$i245 := $M.121;
    goto corral_source_split_6815;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $M.121 := out_$i244;
    call {:si_unique_call 1287} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i244);
    goto corral_source_split_6814;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} out_$i244 := ldv_restore_noirq_21();
    goto corral_source_split_6813;

  $bb212:
    assume out_$i243 == 1;
    goto corral_source_split_6812;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    out_$i243 := $eq.i32(out_$i242, 6);
    goto corral_source_split_6572;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    out_$i242 := $M.82;
    goto corral_source_split_6571;

  $bb72:
    assume out_$i131 == 1;
    goto corral_source_split_6570;

  $bb71:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    out_$i131 := $slt.i32(out_$i127, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb219:
    assume !(out_$i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb221:
    assume !(out_$i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $M.82 := 11;
    call {:si_unique_call 1291} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(11);
    goto corral_source_split_6828;

  $bb220:
    assume out_$i251 == 1;
    goto corral_source_split_6827;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    out_$i251 := $eq.i32(out_$i250, 0);
    goto corral_source_split_6825;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    out_$i250 := $M.122;
    goto corral_source_split_6824;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $M.122 := out_$i249;
    call {:si_unique_call 1290} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i249);
    goto corral_source_split_6823;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} out_$i249 := ldv_suspend_noirq_21();
    goto corral_source_split_6822;

  $bb218:
    assume out_$i248 == 1;
    goto corral_source_split_6821;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    out_$i248 := $eq.i32(out_$i247, 5);
    goto corral_source_split_6576;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    out_$i247 := $M.82;
    goto corral_source_split_6575;

  $bb74:
    assume out_$i132 == 1;
    goto corral_source_split_6574;

  $bb73:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    out_$i132 := $slt.i32(out_$i127, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb225:
    assume !(out_$i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $M.88 := out_$i256;
    call {:si_unique_call 1294} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i256);
    goto corral_source_split_6835;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    out_$i256 := $sub.i32(out_$i255, 1);
    goto corral_source_split_6834;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    out_$i255 := $M.88;
    goto corral_source_split_6833;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1293} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_6832;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} out_vslice_dummy_var_83 := ldv_complete_21();
    goto corral_source_split_6831;

  $bb224:
    assume out_$i253 == 1;
    goto corral_source_split_6830;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    out_$i253 := $eq.i32(out_$i252, 15);
    goto corral_source_split_6580;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    out_$i252 := $M.82;
    goto corral_source_split_6579;

  $bb76:
    assume out_$i133 == 1;
    goto corral_source_split_6578;

  $bb75:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i32(out_$i127, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} ldv_stop();
    goto corral_source_split_6837;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb77:
    assume {:verifier.code 0} true;
    assume !(out_$i133 == 1);
    goto $bb78;

  $bb108:
    assume {:verifier.code 0} true;
    assume !(out_$i148 == 1);
    goto $bb78;

  $bb231:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb236:
    assume !(out_$i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    goto $bb237;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1300} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6847;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} out_vslice_dummy_var_84 := mtd_ecc_stats_errors_show(in_$p11, in_$p13, in_$p9);
    goto corral_source_split_6846;

  $bb235:
    assume out_$i262 == 1;
    goto corral_source_split_6845;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    out_$i262 := $eq.i32(out_$i261, 1);
    goto corral_source_split_6843;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    out_$i261 := $M.83;
    goto corral_source_split_6842;

  $bb233:
    assume out_$i260 == 1;
    goto corral_source_split_6841;

  $bb232:
    assume {:verifier.code 0} true;
    out_$i260 := $eq.i32(out_$i259, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  corral_source_split_6839:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1296} out_$i259 := __VERIFIER_nondet_int();
    call {:si_unique_call 1297} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i259);
    call {:si_unique_call 1298} {:cexpr "tmp___52"} boogie_si_record_i32(out_$i259);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb230:
    assume out_$i258 == 1;
    goto corral_source_split_6839;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    out_$i258 := $ne.i32(out_$i257, 0);
    goto corral_source_split_6538;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    out_$i257 := $M.83;
    goto corral_source_split_6537;

  $bb42:
    assume out_$i114 == 1;
    goto corral_source_split_6536;

  $bb41:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    out_$i114 := $slt.i32(out_$i94, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} ldv_stop();
    goto corral_source_split_6849;

  $bb234:
    assume !(out_$i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb243:
    assume !(out_$i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb248:
    assume !(out_$i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    goto $bb249;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1306} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_6859;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} out_vslice_dummy_var_85 := mtd_erasesize_show(in_$p18, in_$p15, in_$p16);
    goto corral_source_split_6858;

  $bb247:
    assume out_$i269 == 1;
    goto corral_source_split_6857;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i268, 1);
    goto corral_source_split_6855;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    out_$i268 := $M.84;
    goto corral_source_split_6854;

  $bb245:
    assume out_$i267 == 1;
    goto corral_source_split_6853;

  $bb244:
    assume {:verifier.code 0} true;
    out_$i267 := $eq.i32(out_$i266, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_6851:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1302} out_$i266 := __VERIFIER_nondet_int();
    call {:si_unique_call 1303} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i266);
    call {:si_unique_call 1304} {:cexpr "tmp___53"} boogie_si_record_i32(out_$i266);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb242:
    assume out_$i265 == 1;
    goto corral_source_split_6851;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    out_$i265 := $ne.i32(out_$i264, 0);
    goto corral_source_split_6542;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    out_$i264 := $M.84;
    goto corral_source_split_6541;

  $bb44:
    assume out_$i115 == 1;
    goto corral_source_split_6540;

  $bb43:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    out_$i115 := $slt.i32(out_$i94, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} ldv_stop();
    goto corral_source_split_6861;

  $bb246:
    assume !(out_$i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb255:
    assume !(out_$i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} ldv_main_exported_2();
    goto corral_source_split_6864;

  $bb254:
    assume out_$i272 == 1;
    goto corral_source_split_6863;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    out_$i272 := $ne.i32(out_$i271, 0);
    goto corral_source_split_6546;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    out_$i271 := $M.85;
    goto corral_source_split_6545;

  $bb45:
    assume !(out_$i115 == 1);
    goto corral_source_split_6544;

  $bb258:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    goto $bb259;

  SeqInstr_270:
    goto corral_source_split_6867;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} ldv_main_exported_1();
    goto SeqInstr_269;

  $bb257:
    assume out_$i274 == 1;
    goto corral_source_split_6866;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    out_$i274 := $ne.i32(out_$i273, 0);
    goto corral_source_split_6526;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    out_$i273 := $M.86;
    goto corral_source_split_6525;

  $bb36:
    assume out_$i111 == 1;
    goto corral_source_split_6524;

  $bb30:
    assume out_$i108 == 1;
    assume {:verifier.code 0} true;
    out_$i111 := $slt.i32(out_$i94, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb29:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i94, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb261:
    assume !(out_$i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb266:
    assume !(out_$i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    goto $bb267;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1314} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_6877;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} out_vslice_dummy_var_86 := mtd_size_show(in_$p23, in_$p20, in_$p21);
    goto corral_source_split_6876;

  $bb265:
    assume out_$i280 == 1;
    goto corral_source_split_6875;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    out_$i280 := $eq.i32(out_$i279, 1);
    goto corral_source_split_6873;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    out_$i279 := $M.87;
    goto corral_source_split_6872;

  $bb263:
    assume out_$i278 == 1;
    goto corral_source_split_6871;

  $bb262:
    assume {:verifier.code 0} true;
    out_$i278 := $eq.i32(out_$i277, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_6869:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1310} out_$i277 := __VERIFIER_nondet_int();
    call {:si_unique_call 1311} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i277);
    call {:si_unique_call 1312} {:cexpr "tmp___54"} boogie_si_record_i32(out_$i277);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb260:
    assume out_$i276 == 1;
    goto corral_source_split_6869;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    out_$i276 := $ne.i32(out_$i275, 0);
    goto corral_source_split_6530;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    out_$i275 := $M.87;
    goto corral_source_split_6529;

  $bb38:
    assume out_$i112 == 1;
    goto corral_source_split_6528;

  $bb37:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    out_$i112 := $slt.i32(out_$i94, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} ldv_stop();
    goto corral_source_split_6879;

  $bb264:
    assume !(out_$i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb273:
    assume !(out_$i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb283:
    assume {:verifier.code 0} true;
    assume !(out_$i289 == 1);
    goto $bb284;

  $bb286:
    assume {:verifier.code 0} true;
    assume !(out_$i291 == 1);
    goto $bb284;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    out_$i291 := $eq.i32(out_$i290, 0);
    goto corral_source_split_6893;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    out_$i290 := $M.88;
    goto corral_source_split_6892;

  $bb282:
    assume out_$i289 == 1;
    goto corral_source_split_6891;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    out_$i289 := $eq.i32(out_$i288, 2);
    goto corral_source_split_6889;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    out_$i288 := $M.89;
    goto corral_source_split_6888;

  $bb280:
    assume out_$i287 == 1;
    goto corral_source_split_6887;

  $bb275:
    assume out_$i285 == 1;
    assume {:verifier.code 0} true;
    out_$i287 := $eq.i32(out_$i284, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  $bb274:
    assume {:verifier.code 0} true;
    out_$i285 := $slt.i32(out_$i284, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  corral_source_split_6881:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1316} out_$i284 := __VERIFIER_nondet_int();
    call {:si_unique_call 1317} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i284);
    call {:si_unique_call 1318} {:cexpr "tmp___55"} boogie_si_record_i32(out_$i284);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb272:
    assume out_$i283 == 1;
    goto corral_source_split_6881;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    out_$i283 := $ne.i32(out_$i282, 0);
    goto corral_source_split_6534;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    out_$i282 := $M.89;
    goto corral_source_split_6533;

  $bb39:
    assume !(out_$i112 == 1);
    goto corral_source_split_6532;

  $bb291:
    assume !(out_$i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb296:
    assume !(out_$i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    goto $bb297;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 1350} {:cexpr "ldv_state_variable_11"} boogie_si_record_i32(1);
    goto corral_source_split_6939;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} ldv_dev_pm_ops_21();
    goto corral_source_split_6938;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 1348} {:cexpr "ldv_state_variable_21"} boogie_si_record_i32(1);
    goto corral_source_split_6937;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $M.83 := 1;
    call {:si_unique_call 1347} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_6936;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 1346} {:cexpr "ldv_state_variable_17"} boogie_si_record_i32(1);
    goto corral_source_split_6935;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 1345} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_6934;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} ldv_file_operations_1();
    goto corral_source_split_6933;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 1343} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_6932;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1342} {:cexpr "ldv_state_variable_18"} boogie_si_record_i32(1);
    goto corral_source_split_6931;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1341} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_6930;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1340} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6929;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1339} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6928;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} ldv_file_operations_3();
    goto corral_source_split_6927;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 1337} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_6926;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1336} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_6925;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1335} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_6924;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1334} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_6923;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1333} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_6922;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $M.98 := 1;
    call {:si_unique_call 1332} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_6921;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $M.99 := 1;
    call {:si_unique_call 1331} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_6920;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $M.100 := 1;
    call {:si_unique_call 1330} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_6919;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $M.101 := 1;
    call {:si_unique_call 1329} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_6918;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} ldv_initialize_device_attribute_10();
    goto corral_source_split_6917;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 1327} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_6916;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $M.103 := 1;
    call {:si_unique_call 1326} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_6915;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $M.89 := 2;
    call {:si_unique_call 1325} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_6914;

  $bb295:
    assume out_$i298 == 1;
    goto corral_source_split_6913;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    out_$i298 := $eq.i32(out_$i297, 0);
    goto corral_source_split_6911;

  $bb294:
    assume {:verifier.code 0} true;
    out_$i297 := $M.123;
    goto corral_source_split_6910;

  $bb293:
    assume !(out_$i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    out_$i296 := $ne.i32(out_$i295, 0);
    goto corral_source_split_6905;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    out_$i295 := $M.123;
    goto corral_source_split_6904;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $M.123 := out_$i294;
    call {:si_unique_call 1323} {:cexpr "ldv_retval_20"} boogie_si_record_i32(out_$i294);
    goto corral_source_split_6903;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} out_$i294 := init_mtd();
    goto corral_source_split_6902;

  $bb290:
    assume out_$i293 == 1;
    goto corral_source_split_6901;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    out_$i293 := $eq.i32(out_$i292, 1);
    goto corral_source_split_6885;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    out_$i292 := $M.89;
    goto corral_source_split_6884;

  $bb277:
    assume out_$i286 == 1;
    goto corral_source_split_6883;

  $bb276:
    assume !(out_$i285 == 1);
    assume {:verifier.code 0} true;
    out_$i286 := $eq.i32(out_$i284, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} ldv_stop();
    goto corral_source_split_6941;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb278:
    assume {:verifier.code 0} true;
    assume !(out_$i286 == 1);
    goto $bb279;

  $bb281:
    assume {:verifier.code 0} true;
    assume !(out_$i287 == 1);
    goto $bb279;

  $bb303:
    assume !(out_$i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb308:
    assume !(out_$i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    goto $bb309;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1356} {:cexpr "ldv_state_variable_16"} boogie_si_record_i32(1);
    goto corral_source_split_6951;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} out_vslice_dummy_var_87 := mtd_writesize_show(in_$p26, in_$p28, in_$p24);
    goto corral_source_split_6950;

  $bb307:
    assume out_$i304 == 1;
    goto corral_source_split_6949;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    out_$i304 := $eq.i32(out_$i303, 1);
    goto corral_source_split_6947;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    out_$i303 := $M.90;
    goto corral_source_split_6946;

  $bb305:
    assume out_$i302 == 1;
    goto corral_source_split_6945;

  $bb304:
    assume {:verifier.code 0} true;
    out_$i302 := $eq.i32(out_$i301, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  corral_source_split_6943:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1352} out_$i301 := __VERIFIER_nondet_int();
    call {:si_unique_call 1353} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i301);
    call {:si_unique_call 1354} {:cexpr "tmp___56"} boogie_si_record_i32(out_$i301);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb302:
    assume out_$i300 == 1;
    goto corral_source_split_6943;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    out_$i300 := $ne.i32(out_$i299, 0);
    goto corral_source_split_6514;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    out_$i299 := $M.90;
    goto corral_source_split_6513;

  $bb32:
    assume out_$i109 == 1;
    goto corral_source_split_6512;

  $bb31:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    out_$i109 := $slt.i32(out_$i94, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} ldv_stop();
    goto corral_source_split_6953;

  $bb306:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb315:
    assume !(out_$i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb324:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb320:
    assume !(out_$i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    goto $bb321;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1362} {:cexpr "ldv_state_variable_13"} boogie_si_record_i32(1);
    goto corral_source_split_6963;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} out_vslice_dummy_var_88 := mtd_numeraseregions_show(in_$p31, in_$p33, in_$p29);
    goto corral_source_split_6962;

  $bb319:
    assume out_$i311 == 1;
    goto corral_source_split_6961;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    out_$i311 := $eq.i32(out_$i310, 1);
    goto corral_source_split_6959;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    out_$i310 := $M.91;
    goto corral_source_split_6958;

  $bb317:
    assume out_$i309 == 1;
    goto corral_source_split_6957;

  $bb316:
    assume {:verifier.code 0} true;
    out_$i309 := $eq.i32(out_$i308, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  corral_source_split_6955:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1358} out_$i308 := __VERIFIER_nondet_int();
    call {:si_unique_call 1359} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i308);
    call {:si_unique_call 1360} {:cexpr "tmp___57"} boogie_si_record_i32(out_$i308);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb314:
    assume out_$i307 == 1;
    goto corral_source_split_6955;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    out_$i307 := $ne.i32(out_$i306, 0);
    goto corral_source_split_6518;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    out_$i306 := $M.91;
    goto corral_source_split_6517;

  $bb34:
    assume out_$i110 == 1;
    goto corral_source_split_6516;

  $bb33:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    out_$i110 := $slt.i32(out_$i94, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} ldv_stop();
    goto corral_source_split_6965;

  $bb318:
    assume !(out_$i309 == 1);
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb327:
    assume !(out_$i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb336:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb332:
    assume !(out_$i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    goto $bb333;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1368} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_6975;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} out_vslice_dummy_var_89 := mtd_badblocks_show(in_$p38, in_$p36, in_$p34);
    goto corral_source_split_6974;

  $bb331:
    assume out_$i318 == 1;
    goto corral_source_split_6973;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    out_$i318 := $eq.i32(out_$i317, 1);
    goto corral_source_split_6971;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    out_$i317 := $M.92;
    goto corral_source_split_6970;

  $bb329:
    assume out_$i316 == 1;
    goto corral_source_split_6969;

  $bb328:
    assume {:verifier.code 0} true;
    out_$i316 := $eq.i32(out_$i315, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb329, $bb330;

  corral_source_split_6967:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1364} out_$i315 := __VERIFIER_nondet_int();
    call {:si_unique_call 1365} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i315);
    call {:si_unique_call 1366} {:cexpr "tmp___58"} boogie_si_record_i32(out_$i315);
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb326:
    assume out_$i314 == 1;
    goto corral_source_split_6967;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    out_$i314 := $ne.i32(out_$i313, 0);
    goto corral_source_split_6522;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    out_$i313 := $M.92;
    goto corral_source_split_6521;

  $bb35:
    assume !(out_$i110 == 1);
    goto corral_source_split_6520;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} ldv_stop();
    goto corral_source_split_6977;

  $bb330:
    assume !(out_$i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb339:
    assume !(out_$i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb367:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb361:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb354:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb353:
    assume !(out_$i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb354;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    goto $bb354;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $M.88 := out_$i334;
    call {:si_unique_call 1375} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i334);
    goto corral_source_split_7004;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    out_$i334 := $sub.i32(out_$i333, 1);
    goto corral_source_split_7003;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    out_$i333 := $M.88;
    goto corral_source_split_7002;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 1374} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7001;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} out_vslice_dummy_var_90 := single_release(out_$p330, out_$p331);
    goto corral_source_split_7000;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    out_$p331 := $M.77;
    goto corral_source_split_6999;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    out_$p330 := $M.76;
    goto corral_source_split_6998;

  $bb352:
    assume out_$i329 == 1;
    goto corral_source_split_6997;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    out_$i329 := $eq.i32(out_$i328, 2);
    goto corral_source_split_6995;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    out_$i328 := $M.93;
    goto corral_source_split_6994;

  $bb350:
    assume out_$i327 == 1;
    goto corral_source_split_6993;

  $bb348:
    assume out_$i326 == 1;
    assume {:verifier.code 0} true;
    out_$i327 := $eq.i32(out_$i322, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  $bb341:
    assume out_$i323 == 1;
    assume {:verifier.code 0} true;
    out_$i326 := $slt.i32(out_$i322, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  $bb340:
    assume {:verifier.code 0} true;
    out_$i323 := $slt.i32(out_$i322, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  corral_source_split_6979:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1370} out_$i322 := __VERIFIER_nondet_int();
    call {:si_unique_call 1371} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i322);
    call {:si_unique_call 1372} {:cexpr "tmp___59"} boogie_si_record_i32(out_$i322);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb338:
    assume out_$i321 == 1;
    goto corral_source_split_6979;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    out_$i321 := $ne.i32(out_$i320, 0);
    goto corral_source_split_6506;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    out_$i320 := $M.93;
    goto corral_source_split_6505;

  $bb26:
    assume out_$i106 == 1;
    goto corral_source_split_6504;

  $bb20:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i94, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb5:
    assume out_$i96 == 1;
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i94, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb4:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i94, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb357:
    assume !(out_$i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    goto $bb358;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $M.93 := 2;
    call {:si_unique_call 1377} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7010;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} out_vslice_dummy_var_91 := seq_read(out_$p337, in_$p41, out_$i338, in_$p40);
    goto corral_source_split_7009;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    out_$i338 := $load.i64($M.75, in_$p1);
    goto corral_source_split_7008;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    out_$p337 := $M.77;
    goto corral_source_split_7007;

  $bb356:
    assume out_$i336 == 1;
    goto corral_source_split_7006;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb356, $bb357;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    out_$i336 := $eq.i32(out_$i335, 2);
    goto corral_source_split_6991;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    out_$i335 := $M.93;
    goto corral_source_split_6990;

  $bb349:
    assume !(out_$i326 == 1);
    goto corral_source_split_6989;

  $bb360:
    assume !(out_$i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    goto $bb361;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $M.93 := 2;
    call {:si_unique_call 1379} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7017;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} out_vslice_dummy_var_92 := seq_lseek(out_$p342, out_$i343, out_$i344);
    goto corral_source_split_7016;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    out_$i344 := $load.i32($M.75, in_$p0);
    goto corral_source_split_7015;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    out_$i343 := $load.i64($M.75, in_$p2);
    goto corral_source_split_7014;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    out_$p342 := $M.77;
    goto corral_source_split_7013;

  $bb359:
    assume out_$i341 == 1;
    goto corral_source_split_7012;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb359, $bb360;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    out_$i341 := $eq.i32(out_$i340, 2);
    goto corral_source_split_6983;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    out_$i340 := $M.93;
    goto corral_source_split_6982;

  $bb343:
    assume out_$i324 == 1;
    goto corral_source_split_6981;

  $bb342:
    assume !(out_$i323 == 1);
    assume {:verifier.code 0} true;
    out_$i324 := $slt.i32(out_$i322, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb343, $bb344;

  $bb363:
    assume !(out_$i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb365:
    assume !(out_$i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb366;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    goto $bb366;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $M.88 := out_$i354;
    call {:si_unique_call 1383} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i354);
    goto corral_source_split_7031;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    out_$i354 := $add.i32(out_$i353, 1);
    goto corral_source_split_7030;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    out_$i353 := $M.88;
    goto corral_source_split_7029;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $M.93 := 2;
    call {:si_unique_call 1382} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_7028;

  $bb364:
    assume out_$i352 == 1;
    goto corral_source_split_7027;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    out_$i352 := $eq.i32(out_$i351, 0);
    goto corral_source_split_7025;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    out_$i351 := $M.124;
    goto corral_source_split_7024;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $M.124 := out_$i350;
    call {:si_unique_call 1381} {:cexpr "ldv_retval_21"} boogie_si_record_i32(out_$i350);
    goto corral_source_split_7023;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} out_$i350 := mtd_proc_open(out_$p348, out_$p349);
    goto corral_source_split_7022;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    out_$p349 := $M.77;
    goto corral_source_split_7021;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    out_$p348 := $M.76;
    goto corral_source_split_7020;

  $bb362:
    assume out_$i347 == 1;
    goto corral_source_split_7019;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb362, $bb363;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    out_$i347 := $eq.i32(out_$i346, 1);
    goto corral_source_split_6987;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    out_$i346 := $M.93;
    goto corral_source_split_6986;

  $bb345:
    assume out_$i325 == 1;
    goto corral_source_split_6985;

  $bb344:
    assume !(out_$i324 == 1);
    assume {:verifier.code 0} true;
    out_$i325 := $eq.i32(out_$i322, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb345, $bb346;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} ldv_stop();
    goto corral_source_split_7033;

  $bb347:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb346:
    assume {:verifier.code 0} true;
    assume !(out_$i325 == 1);
    goto $bb347;

  $bb351:
    assume {:verifier.code 0} true;
    assume !(out_$i327 == 1);
    goto $bb347;

  $bb372:
    assume !(out_$i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb379:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb377:
    assume !(out_$i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    goto $bb378;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1389} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_7043;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} out_vslice_dummy_var_93 := mtd_ecc_step_size_show(in_$p44, in_$p46, in_$p42);
    goto corral_source_split_7042;

  $bb376:
    assume out_$i360 == 1;
    goto corral_source_split_7041;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    out_$i360 := $eq.i32(out_$i359, 1);
    goto corral_source_split_7039;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    out_$i359 := $M.94;
    goto corral_source_split_7038;

  $bb374:
    assume out_$i358 == 1;
    goto corral_source_split_7037;

  $bb373:
    assume {:verifier.code 0} true;
    out_$i358 := $eq.i32(out_$i357, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb374, $bb375;

  corral_source_split_7035:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1385} out_$i357 := __VERIFIER_nondet_int();
    call {:si_unique_call 1386} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i357);
    call {:si_unique_call 1387} {:cexpr "tmp___60"} boogie_si_record_i32(out_$i357);
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb371:
    assume out_$i356 == 1;
    goto corral_source_split_7035;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    out_$i356 := $ne.i32(out_$i355, 0);
    goto corral_source_split_6510;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    out_$i355 := $M.94;
    goto corral_source_split_6509;

  $bb27:
    assume !(out_$i106 == 1);
    goto corral_source_split_6508;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} ldv_stop();
    goto corral_source_split_7045;

  $bb375:
    assume !(out_$i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb384:
    assume !(out_$i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb391:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb389:
    assume !(out_$i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    goto $bb390;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1395} {:cexpr "ldv_state_variable_12"} boogie_si_record_i32(1);
    goto corral_source_split_7055;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} out_vslice_dummy_var_94 := mtd_name_show(in_$p48, in_$p50, in_$p51);
    goto corral_source_split_7054;

  $bb388:
    assume out_$i367 == 1;
    goto corral_source_split_7053;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb388, $bb389;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    out_$i367 := $eq.i32(out_$i366, 1);
    goto corral_source_split_7051;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    out_$i366 := $M.95;
    goto corral_source_split_7050;

  $bb386:
    assume out_$i365 == 1;
    goto corral_source_split_7049;

  $bb385:
    assume {:verifier.code 0} true;
    out_$i365 := $eq.i32(out_$i364, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  corral_source_split_7047:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1391} out_$i364 := __VERIFIER_nondet_int();
    call {:si_unique_call 1392} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i364);
    call {:si_unique_call 1393} {:cexpr "tmp___61"} boogie_si_record_i32(out_$i364);
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb383:
    assume out_$i363 == 1;
    goto corral_source_split_7047;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    out_$i363 := $ne.i32(out_$i362, 0);
    goto corral_source_split_6494;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    out_$i362 := $M.95;
    goto corral_source_split_6493;

  $bb22:
    assume out_$i104 == 1;
    goto corral_source_split_6492;

  $bb21:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i94, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} ldv_stop();
    goto corral_source_split_7057;

  $bb387:
    assume !(out_$i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb396:
    assume !(out_$i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb403:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb401:
    assume !(out_$i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb402;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    goto $bb402;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1401} {:cexpr "ldv_state_variable_20"} boogie_si_record_i32(1);
    goto corral_source_split_7067;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} out_vslice_dummy_var_95 := mtd_type_show(in_$p53, in_$p56, in_$p54);
    goto corral_source_split_7066;

  $bb400:
    assume out_$i374 == 1;
    goto corral_source_split_7065;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb400, $bb401;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    out_$i374 := $eq.i32(out_$i373, 1);
    goto corral_source_split_7063;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    out_$i373 := $M.96;
    goto corral_source_split_7062;

  $bb398:
    assume out_$i372 == 1;
    goto corral_source_split_7061;

  $bb397:
    assume {:verifier.code 0} true;
    out_$i372 := $eq.i32(out_$i371, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb398, $bb399;

  corral_source_split_7059:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1397} out_$i371 := __VERIFIER_nondet_int();
    call {:si_unique_call 1398} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i371);
    call {:si_unique_call 1399} {:cexpr "tmp___62"} boogie_si_record_i32(out_$i371);
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb395:
    assume out_$i370 == 1;
    goto corral_source_split_7059;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb395, $bb396;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    out_$i370 := $ne.i32(out_$i369, 0);
    goto corral_source_split_6498;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    out_$i369 := $M.96;
    goto corral_source_split_6497;

  $bb24:
    assume out_$i105 == 1;
    goto corral_source_split_6496;

  $bb23:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    out_$i105 := $slt.i32(out_$i94, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} ldv_stop();
    goto corral_source_split_7069;

  $bb399:
    assume !(out_$i372 == 1);
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb408:
    assume !(out_$i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb415:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb414:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb413:
    assume !(out_$i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb414;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    goto $bb414;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $M.97 := 1;
    call {:si_unique_call 1407} {:cexpr "ldv_state_variable_14"} boogie_si_record_i32(1);
    goto corral_source_split_7079;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} out_vslice_dummy_var_96 := mtd_oobsize_show(in_$p58, in_$p60, in_$p61);
    goto corral_source_split_7078;

  $bb412:
    assume out_$i381 == 1;
    goto corral_source_split_7077;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb412, $bb413;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    out_$i381 := $eq.i32(out_$i380, 1);
    goto corral_source_split_7075;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    out_$i380 := $M.97;
    goto corral_source_split_7074;

  $bb410:
    assume out_$i379 == 1;
    goto corral_source_split_7073;

  $bb409:
    assume {:verifier.code 0} true;
    out_$i379 := $eq.i32(out_$i378, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb410, $bb411;

  corral_source_split_7071:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1403} out_$i378 := __VERIFIER_nondet_int();
    call {:si_unique_call 1404} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i378);
    call {:si_unique_call 1405} {:cexpr "tmp___63"} boogie_si_record_i32(out_$i378);
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb407:
    assume out_$i377 == 1;
    goto corral_source_split_7071;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb407, $bb408;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    out_$i377 := $ne.i32(out_$i376, 0);
    goto corral_source_split_6502;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    out_$i376 := $M.97;
    goto corral_source_split_6501;

  $bb25:
    assume !(out_$i105 == 1);
    goto corral_source_split_6500;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} ldv_stop();
    goto corral_source_split_7081;

  $bb411:
    assume !(out_$i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb420:
    assume !(out_$i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb427:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb429:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb426:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb425:
    assume !(out_$i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb426;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    goto $bb426;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $M.98 := 1;
    call {:si_unique_call 1413} {:cexpr "ldv_state_variable_15"} boogie_si_record_i32(1);
    goto corral_source_split_7091;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} out_vslice_dummy_var_97 := mtd_subpagesize_show(in_$p63, in_$p66, in_$p64);
    goto corral_source_split_7090;

  $bb424:
    assume out_$i388 == 1;
    goto corral_source_split_7089;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb424, $bb425;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    out_$i388 := $eq.i32(out_$i387, 1);
    goto corral_source_split_7087;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    out_$i387 := $M.98;
    goto corral_source_split_7086;

  $bb422:
    assume out_$i386 == 1;
    goto corral_source_split_7085;

  $bb421:
    assume {:verifier.code 0} true;
    out_$i386 := $eq.i32(out_$i385, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb422, $bb423;

  corral_source_split_7083:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1409} out_$i385 := __VERIFIER_nondet_int();
    call {:si_unique_call 1410} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i385);
    call {:si_unique_call 1411} {:cexpr "tmp___64"} boogie_si_record_i32(out_$i385);
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb419:
    assume out_$i384 == 1;
    goto corral_source_split_7083;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb419, $bb420;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    out_$i384 := $ne.i32(out_$i383, 0);
    goto corral_source_split_6482;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    out_$i383 := $M.98;
    goto corral_source_split_6481;

  $bb16:
    assume out_$i101 == 1;
    goto corral_source_split_6480;

  $bb7:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i94, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb6:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    out_$i97 := $slt.i32(out_$i94, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} ldv_stop();
    goto corral_source_split_7093;

  $bb423:
    assume !(out_$i386 == 1);
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb432:
    assume !(out_$i391 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb439:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb438:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb437:
    assume !(out_$i395 == 1);
    assume {:verifier.code 0} true;
    goto $bb438;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    goto $bb438;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $M.99 := 1;
    call {:si_unique_call 1419} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_7103;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} out_vslice_dummy_var_98 := mtd_ecc_stats_corrected_show(in_$p68, in_$p71, in_$p69);
    goto corral_source_split_7102;

  $bb436:
    assume out_$i395 == 1;
    goto corral_source_split_7101;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb436, $bb437;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    out_$i395 := $eq.i32(out_$i394, 1);
    goto corral_source_split_7099;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    out_$i394 := $M.99;
    goto corral_source_split_7098;

  $bb434:
    assume out_$i393 == 1;
    goto corral_source_split_7097;

  $bb433:
    assume {:verifier.code 0} true;
    out_$i393 := $eq.i32(out_$i392, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb434, $bb435;

  corral_source_split_7095:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1415} out_$i392 := __VERIFIER_nondet_int();
    call {:si_unique_call 1416} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i392);
    call {:si_unique_call 1417} {:cexpr "tmp___65"} boogie_si_record_i32(out_$i392);
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb431:
    assume out_$i391 == 1;
    goto corral_source_split_7095;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb431, $bb432;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    out_$i391 := $ne.i32(out_$i390, 0);
    goto corral_source_split_6486;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    out_$i390 := $M.99;
    goto corral_source_split_6485;

  $bb18:
    assume out_$i102 == 1;
    goto corral_source_split_6484;

  $bb17:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i94, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} ldv_stop();
    goto corral_source_split_7105;

  $bb435:
    assume !(out_$i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb444:
    assume !(out_$i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb456:
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb461:
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb459:
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb455:
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb454:
    assume !(out_$i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb455;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    goto $bb455;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $M.88 := out_$i406;
    call {:si_unique_call 1426} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i406);
    goto corral_source_split_7122;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    out_$i406 := $sub.i32(out_$i405, 1);
    goto corral_source_split_7121;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    out_$i405 := $M.88;
    goto corral_source_split_7120;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $M.100 := 1;
    call {:si_unique_call 1425} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7119;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} mtd_release(in_$p73);
    goto corral_source_split_7118;

  $bb453:
    assume out_$i404 == 1;
    goto corral_source_split_7117;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    out_$i404 := $eq.i32(out_$i403, 2);
    goto corral_source_split_7115;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    out_$i403 := $M.100;
    goto corral_source_split_7114;

  $bb451:
    assume out_$i402 == 1;
    goto corral_source_split_7113;

  $bb446:
    assume out_$i400 == 1;
    assume {:verifier.code 0} true;
    out_$i402 := $eq.i32(out_$i399, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb451, $bb452;

  $bb445:
    assume {:verifier.code 0} true;
    out_$i400 := $slt.i32(out_$i399, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb446, $bb447;

  corral_source_split_7107:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1421} out_$i399 := __VERIFIER_nondet_int();
    call {:si_unique_call 1422} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i399);
    call {:si_unique_call 1423} {:cexpr "tmp___66"} boogie_si_record_i32(out_$i399);
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb443:
    assume out_$i398 == 1;
    goto corral_source_split_7107;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb443, $bb444;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    out_$i398 := $ne.i32(out_$i397, 0);
    goto corral_source_split_6490;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    out_$i397 := $M.100;
    goto corral_source_split_6489;

  $bb19:
    assume !(out_$i102 == 1);
    goto corral_source_split_6488;

  $bb458:
    assume !(out_$i408 == 1);
    assume {:verifier.code 0} true;
    goto $bb459;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    goto $bb459;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $M.88 := out_$i411;
    call {:si_unique_call 1429} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i411);
    goto corral_source_split_7129;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    out_$i411 := $add.i32(out_$i410, 1);
    goto corral_source_split_7128;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    out_$i410 := $M.88;
    goto corral_source_split_7127;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $M.100 := 2;
    call {:si_unique_call 1428} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_7126;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} out_vslice_dummy_var_99 := ldv_probe_4();
    goto corral_source_split_7125;

  $bb457:
    assume out_$i408 == 1;
    goto corral_source_split_7124;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb457, $bb458;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    out_$i408 := $eq.i32(out_$i407, 1);
    goto corral_source_split_7111;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    out_$i407 := $M.100;
    goto corral_source_split_7110;

  $bb448:
    assume out_$i401 == 1;
    goto corral_source_split_7109;

  $bb447:
    assume !(out_$i400 == 1);
    assume {:verifier.code 0} true;
    out_$i401 := $eq.i32(out_$i399, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb448, $bb449;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} ldv_stop();
    goto corral_source_split_7131;

  $bb450:
    assume {:verifier.code 0} true;
    goto $bb460;

  $bb449:
    assume {:verifier.code 0} true;
    assume !(out_$i401 == 1);
    goto $bb450;

  $bb452:
    assume {:verifier.code 0} true;
    assume !(out_$i402 == 1);
    goto $bb450;

  $bb464:
    assume !(out_$i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb471:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb473:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb470:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb469:
    assume !(out_$i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb470;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    goto $bb470;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $M.101 := 1;
    call {:si_unique_call 1435} {:cexpr "ldv_state_variable_19"} boogie_si_record_i32(1);
    goto corral_source_split_7141;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} out_vslice_dummy_var_100 := mtd_flags_show(in_$p77, in_$p75, in_$p78);
    goto corral_source_split_7140;

  $bb468:
    assume out_$i417 == 1;
    goto corral_source_split_7139;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb468, $bb469;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    out_$i417 := $eq.i32(out_$i416, 1);
    goto corral_source_split_7137;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    out_$i416 := $M.101;
    goto corral_source_split_7136;

  $bb466:
    assume out_$i415 == 1;
    goto corral_source_split_7135;

  $bb465:
    assume {:verifier.code 0} true;
    out_$i415 := $eq.i32(out_$i414, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb466, $bb467;

  corral_source_split_7133:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1431} out_$i414 := __VERIFIER_nondet_int();
    call {:si_unique_call 1432} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i414);
    call {:si_unique_call 1433} {:cexpr "tmp___67"} boogie_si_record_i32(out_$i414);
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb463:
    assume out_$i413 == 1;
    goto corral_source_split_7133;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb463, $bb464;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    out_$i413 := $ne.i32(out_$i412, 0);
    goto corral_source_split_6470;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    out_$i412 := $M.101;
    goto corral_source_split_6469;

  $bb9:
    assume out_$i98 == 1;
    goto corral_source_split_6468;

  $bb8:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(out_$i94, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} ldv_stop();
    goto corral_source_split_7143;

  $bb467:
    assume !(out_$i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb476:
    assume !(out_$i420 == 1);
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb488:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb493:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb491:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb487:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb486:
    assume !(out_$i426 == 1);
    assume {:verifier.code 0} true;
    goto $bb487;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    goto $bb487;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 1441} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7160;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} out_vslice_dummy_var_101 := mtd_bitflip_threshold_store(out_$p427, out_$p428, in_$p79, out_$i429);
    goto corral_source_split_7159;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    out_$i429 := $load.i64($M.75, in_$p3);
    goto corral_source_split_7158;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    out_$p428 := $M.78;
    goto corral_source_split_7157;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    out_$p427 := $M.79;
    goto corral_source_split_7156;

  $bb485:
    assume out_$i426 == 1;
    goto corral_source_split_7155;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb485, $bb486;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    out_$i426 := $eq.i32(out_$i425, 1);
    goto corral_source_split_7153;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    out_$i425 := $M.102;
    goto corral_source_split_7152;

  $bb483:
    assume out_$i424 == 1;
    goto corral_source_split_7151;

  $bb478:
    assume out_$i422 == 1;
    assume {:verifier.code 0} true;
    out_$i424 := $eq.i32(out_$i421, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb483, $bb484;

  $bb477:
    assume {:verifier.code 0} true;
    out_$i422 := $slt.i32(out_$i421, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb478, $bb479;

  corral_source_split_7145:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1437} out_$i421 := __VERIFIER_nondet_int();
    call {:si_unique_call 1438} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i421);
    call {:si_unique_call 1439} {:cexpr "tmp___68"} boogie_si_record_i32(out_$i421);
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb475:
    assume out_$i420 == 1;
    goto corral_source_split_7145;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb475, $bb476;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    out_$i420 := $ne.i32(out_$i419, 0);
    goto corral_source_split_6474;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    out_$i419 := $M.102;
    goto corral_source_split_6473;

  $bb11:
    assume out_$i99 == 1;
    goto corral_source_split_6472;

  $bb10:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    out_$i99 := $slt.i32(out_$i94, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb490:
    assume !(out_$i432 == 1);
    assume {:verifier.code 0} true;
    goto $bb491;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    goto $bb491;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $M.102 := 1;
    call {:si_unique_call 1443} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7166;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} out_vslice_dummy_var_102 := mtd_bitflip_threshold_show(out_$p433, out_$p434, in_$p80);
    goto corral_source_split_7165;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    out_$p434 := $M.78;
    goto corral_source_split_7164;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    out_$p433 := $M.79;
    goto corral_source_split_7163;

  $bb489:
    assume out_$i432 == 1;
    goto corral_source_split_7162;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb489, $bb490;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    out_$i432 := $eq.i32(out_$i431, 1);
    goto corral_source_split_7149;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    out_$i431 := $M.102;
    goto corral_source_split_7148;

  $bb480:
    assume out_$i423 == 1;
    goto corral_source_split_7147;

  $bb479:
    assume !(out_$i422 == 1);
    assume {:verifier.code 0} true;
    out_$i423 := $eq.i32(out_$i421, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480, $bb481;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} ldv_stop();
    goto corral_source_split_7168;

  $bb482:
    assume {:verifier.code 0} true;
    goto $bb492;

  $bb481:
    assume {:verifier.code 0} true;
    assume !(out_$i423 == 1);
    goto $bb482;

  $bb484:
    assume {:verifier.code 0} true;
    assume !(out_$i424 == 1);
    goto $bb482;

  $bb496:
    assume !(out_$i437 == 1);
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb503:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb505:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb502:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb501:
    assume !(out_$i441 == 1);
    assume {:verifier.code 0} true;
    goto $bb502;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    goto $bb502;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $M.103 := 1;
    call {:si_unique_call 1449} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_7178;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} out_vslice_dummy_var_103 := mtd_bbtblocks_show(in_$p82, in_$p85, in_$p83);
    goto corral_source_split_7177;

  $bb500:
    assume out_$i441 == 1;
    goto corral_source_split_7176;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb500, $bb501;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    out_$i441 := $eq.i32(out_$i440, 1);
    goto corral_source_split_7174;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    out_$i440 := $M.103;
    goto corral_source_split_7173;

  $bb498:
    assume out_$i439 == 1;
    goto corral_source_split_7172;

  $bb497:
    assume {:verifier.code 0} true;
    out_$i439 := $eq.i32(out_$i438, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb498, $bb499;

  corral_source_split_7170:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1445} out_$i438 := __VERIFIER_nondet_int();
    call {:si_unique_call 1446} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i438);
    call {:si_unique_call 1447} {:cexpr "tmp___69"} boogie_si_record_i32(out_$i438);
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb495:
    assume out_$i437 == 1;
    goto corral_source_split_7170;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb495, $bb496;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    out_$i437 := $ne.i32(out_$i436, 0);
    goto corral_source_split_6478;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    out_$i436 := $M.103;
    goto corral_source_split_6477;

  $bb13:
    assume out_$i100 == 1;
    goto corral_source_split_6476;

  $bb12:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i94, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} ldv_stop();
    goto corral_source_split_7180;

  $bb499:
    assume !(out_$i439 == 1);
    assume {:verifier.code 0} true;
    goto $bb504;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} ldv_stop();
    goto corral_source_split_7182;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i100 == 1);
    goto $bb15;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(out_$i117 == 1);
    goto $bb15;

  $bb62_dummy:
    call {:si_unique_call 1} out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$p330, out_$p331, out_$i333, out_$i334, out_$i335, out_$i336, out_$p337, out_$i338, out_$i340, out_$i341, out_$p342, out_$i343, out_$i344, out_$i346, out_$i347, out_$p348, out_$p349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_$i362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i369, out_$i370, out_$i371, out_$i372, out_$i373, out_$i374, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$p427, out_$p428, out_$i429, out_$i431, out_$i432, out_$p433, out_$p434, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p6, in_$p8, in_$p9, in_$p11, in_$p13, in_$p15, in_$p16, in_$p18, in_$p20, in_$p21, in_$p23, in_$p24, in_$p26, in_$p28, in_$p29, in_$p31, in_$p33, in_$p34, in_$p36, in_$p38, in_$p40, in_$p41, in_$p42, in_$p44, in_$p46, in_$p48, in_$p50, in_$p51, in_$p53, in_$p54, in_$p56, in_$p58, in_$p60, in_$p61, in_$p63, in_$p64, in_$p66, in_$p68, in_$p69, in_$p71, in_$p73, in_$p75, in_$p77, in_$p78, in_$p79, in_$p80, in_$p82, in_$p83, in_$p85, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$p163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$p330, out_$p331, out_$i333, out_$i334, out_$i335, out_$i336, out_$p337, out_$i338, out_$i340, out_$i341, out_$p342, out_$i343, out_$i344, out_$i346, out_$i347, out_$p348, out_$p349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i359, out_$i360, out_$i362, out_$i363, out_$i364, out_$i365, out_$i366, out_$i367, out_$i369, out_$i370, out_$i371, out_$i372, out_$i373, out_$i374, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$i405, out_$i406, out_$i407, out_$i408, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$p427, out_$p428, out_$i429, out_$i431, out_$i432, out_$p433, out_$p434, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p6: ref, in_$p8: ref, in_$p9: ref, in_$p11: ref, in_$p13: ref, in_$p15: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p21: ref, in_$p23: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$p36: ref, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p44: ref, in_$p46: ref, in_$p48: ref, in_$p50: ref, in_$p51: ref, in_$p53: ref, in_$p54: ref, in_$p56: ref, in_$p58: ref, in_$p60: ref, in_$p61: ref, in_$p63: ref, in_$p64: ref, in_$p66: ref, in_$p68: ref, in_$p69: ref, in_$p71: ref, in_$p73: ref, in_$p75: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p82: ref, in_$p83: ref, in_$p85: ref, in_$i94: i32, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$i118: i32, in_$i119: i1, in_$i120: i32, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$i125: i32, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i1, in_$i141: i1, in_$i142: i1, in_$i143: i1, in_$i144: i1, in_$i145: i1, in_$i146: i1, in_$i147: i1, in_$i148: i1, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i152: i32, in_$i153: i32, in_$i154: i1, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$i159: i32, in_$i160: i1, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i164: i32, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$i170: i32, in_$i171: i32, in_$i172: i1, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$i176: i32, in_$i177: i32, in_$i178: i1, in_$i179: i32, in_$i180: i1, in_$p181: ref, in_$i182: i32, in_$i183: i32, in_$i184: i1, in_$i185: i32, in_$i186: i1, in_$i187: i32, in_$i188: i32, in_$i189: i1, in_$i190: i32, in_$i191: i1, in_$i192: i32, in_$i193: i32, in_$i194: i1, in_$i195: i32, in_$i196: i1, in_$i197: i32, in_$i198: i32, in_$i199: i1, in_$i200: i32, in_$i201: i1, in_$i202: i32, in_$i203: i32, in_$i204: i1, in_$i205: i32, in_$i206: i1, in_$i207: i32, in_$i208: i32, in_$i209: i1, in_$i210: i32, in_$i211: i1, in_$i212: i32, in_$i213: i32, in_$i214: i1, in_$i215: i32, in_$i216: i1, in_$i217: i32, in_$i218: i32, in_$i219: i1, in_$i220: i32, in_$i221: i32, in_$i222: i32, in_$i223: i1, in_$i224: i32, in_$i225: i32, in_$i226: i1, in_$i227: i32, in_$i228: i1, in_$i229: i32, in_$i230: i32, in_$i231: i1, in_$i232: i32, in_$i233: i1, in_$i234: i32, in_$i235: i32, in_$i236: i1, in_$i237: i32, in_$i238: i1, in_$i239: i32, in_$i240: i32, in_$i241: i1, in_$i242: i32, in_$i243: i1, in_$i244: i32, in_$i245: i32, in_$i246: i1, in_$i247: i32, in_$i248: i1, in_$i249: i32, in_$i250: i32, in_$i251: i1, in_$i252: i32, in_$i253: i1, in_$i255: i32, in_$i256: i32, in_$i257: i32, in_$i258: i1, in_$i259: i32, in_$i260: i1, in_$i261: i32, in_$i262: i1, in_$i264: i32, in_$i265: i1, in_$i266: i32, in_$i267: i1, in_$i268: i32, in_$i269: i1, in_$i271: i32, in_$i272: i1, in_$i273: i32, in_$i274: i1, in_$i275: i32, in_$i276: i1, in_$i277: i32, in_$i278: i1, in_$i279: i32, in_$i280: i1, in_$i282: i32, in_$i283: i1, in_$i284: i32, in_$i285: i1, in_$i286: i1, in_$i287: i1, in_$i288: i32, in_$i289: i1, in_$i290: i32, in_$i291: i1, in_$i292: i32, in_$i293: i1, in_$i294: i32, in_$i295: i32, in_$i296: i1, in_$i297: i32, in_$i298: i1, in_$i299: i32, in_$i300: i1, in_$i301: i32, in_$i302: i1, in_$i303: i32, in_$i304: i1, in_$i306: i32, in_$i307: i1, in_$i308: i32, in_$i309: i1, in_$i310: i32, in_$i311: i1, in_$i313: i32, in_$i314: i1, in_$i315: i32, in_$i316: i1, in_$i317: i32, in_$i318: i1, in_$i320: i32, in_$i321: i1, in_$i322: i32, in_$i323: i1, in_$i324: i1, in_$i325: i1, in_$i326: i1, in_$i327: i1, in_$i328: i32, in_$i329: i1, in_$p330: ref, in_$p331: ref, in_$i333: i32, in_$i334: i32, in_$i335: i32, in_$i336: i1, in_$p337: ref, in_$i338: i64, in_$i340: i32, in_$i341: i1, in_$p342: ref, in_$i343: i64, in_$i344: i32, in_$i346: i32, in_$i347: i1, in_$p348: ref, in_$p349: ref, in_$i350: i32, in_$i351: i32, in_$i352: i1, in_$i353: i32, in_$i354: i32, in_$i355: i32, in_$i356: i1, in_$i357: i32, in_$i358: i1, in_$i359: i32, in_$i360: i1, in_$i362: i32, in_$i363: i1, in_$i364: i32, in_$i365: i1, in_$i366: i32, in_$i367: i1, in_$i369: i32, in_$i370: i1, in_$i371: i32, in_$i372: i1, in_$i373: i32, in_$i374: i1, in_$i376: i32, in_$i377: i1, in_$i378: i32, in_$i379: i1, in_$i380: i32, in_$i381: i1, in_$i383: i32, in_$i384: i1, in_$i385: i32, in_$i386: i1, in_$i387: i32, in_$i388: i1, in_$i390: i32, in_$i391: i1, in_$i392: i32, in_$i393: i1, in_$i394: i32, in_$i395: i1, in_$i397: i32, in_$i398: i1, in_$i399: i32, in_$i400: i1, in_$i401: i1, in_$i402: i1, in_$i403: i32, in_$i404: i1, in_$i405: i32, in_$i406: i32, in_$i407: i32, in_$i408: i1, in_$i410: i32, in_$i411: i32, in_$i412: i32, in_$i413: i1, in_$i414: i32, in_$i415: i1, in_$i416: i32, in_$i417: i1, in_$i419: i32, in_$i420: i1, in_$i421: i32, in_$i422: i1, in_$i423: i1, in_$i424: i1, in_$i425: i32, in_$i426: i1, in_$p427: ref, in_$p428: ref, in_$i429: i64, in_$i431: i32, in_$i432: i1, in_$p433: ref, in_$p434: ref, in_$i436: i32, in_$i437: i1, in_$i438: i32, in_$i439: i1, in_$i440: i32, in_$i441: i1, in_vslice_dummy_var_82: i64, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i64, in_vslice_dummy_var_85: i64, in_vslice_dummy_var_86: i64, in_vslice_dummy_var_87: i64, in_vslice_dummy_var_88: i64, in_vslice_dummy_var_89: i64, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i64, in_vslice_dummy_var_92: i64, in_vslice_dummy_var_93: i64, in_vslice_dummy_var_94: i64, in_vslice_dummy_var_95: i64, in_vslice_dummy_var_96: i64, in_vslice_dummy_var_97: i64, in_vslice_dummy_var_98: i64, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i64, in_vslice_dummy_var_101: i64, in_vslice_dummy_var_102: i64, in_vslice_dummy_var_103: i64) returns (out_$i94: i32, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$i118: i32, out_$i119: i1, out_$i120: i32, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$i125: i32, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i1, out_$i141: i1, out_$i142: i1, out_$i143: i1, out_$i144: i1, out_$i145: i1, out_$i146: i1, out_$i147: i1, out_$i148: i1, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i152: i32, out_$i153: i32, out_$i154: i1, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$i159: i32, out_$i160: i1, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i164: i32, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$i170: i32, out_$i171: i32, out_$i172: i1, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$i176: i32, out_$i177: i32, out_$i178: i1, out_$i179: i32, out_$i180: i1, out_$p181: ref, out_$i182: i32, out_$i183: i32, out_$i184: i1, out_$i185: i32, out_$i186: i1, out_$i187: i32, out_$i188: i32, out_$i189: i1, out_$i190: i32, out_$i191: i1, out_$i192: i32, out_$i193: i32, out_$i194: i1, out_$i195: i32, out_$i196: i1, out_$i197: i32, out_$i198: i32, out_$i199: i1, out_$i200: i32, out_$i201: i1, out_$i202: i32, out_$i203: i32, out_$i204: i1, out_$i205: i32, out_$i206: i1, out_$i207: i32, out_$i208: i32, out_$i209: i1, out_$i210: i32, out_$i211: i1, out_$i212: i32, out_$i213: i32, out_$i214: i1, out_$i215: i32, out_$i216: i1, out_$i217: i32, out_$i218: i32, out_$i219: i1, out_$i220: i32, out_$i221: i32, out_$i222: i32, out_$i223: i1, out_$i224: i32, out_$i225: i32, out_$i226: i1, out_$i227: i32, out_$i228: i1, out_$i229: i32, out_$i230: i32, out_$i231: i1, out_$i232: i32, out_$i233: i1, out_$i234: i32, out_$i235: i32, out_$i236: i1, out_$i237: i32, out_$i238: i1, out_$i239: i32, out_$i240: i32, out_$i241: i1, out_$i242: i32, out_$i243: i1, out_$i244: i32, out_$i245: i32, out_$i246: i1, out_$i247: i32, out_$i248: i1, out_$i249: i32, out_$i250: i32, out_$i251: i1, out_$i252: i32, out_$i253: i1, out_$i255: i32, out_$i256: i32, out_$i257: i32, out_$i258: i1, out_$i259: i32, out_$i260: i1, out_$i261: i32, out_$i262: i1, out_$i264: i32, out_$i265: i1, out_$i266: i32, out_$i267: i1, out_$i268: i32, out_$i269: i1, out_$i271: i32, out_$i272: i1, out_$i273: i32, out_$i274: i1, out_$i275: i32, out_$i276: i1, out_$i277: i32, out_$i278: i1, out_$i279: i32, out_$i280: i1, out_$i282: i32, out_$i283: i1, out_$i284: i32, out_$i285: i1, out_$i286: i1, out_$i287: i1, out_$i288: i32, out_$i289: i1, out_$i290: i32, out_$i291: i1, out_$i292: i32, out_$i293: i1, out_$i294: i32, out_$i295: i32, out_$i296: i1, out_$i297: i32, out_$i298: i1, out_$i299: i32, out_$i300: i1, out_$i301: i32, out_$i302: i1, out_$i303: i32, out_$i304: i1, out_$i306: i32, out_$i307: i1, out_$i308: i32, out_$i309: i1, out_$i310: i32, out_$i311: i1, out_$i313: i32, out_$i314: i1, out_$i315: i32, out_$i316: i1, out_$i317: i32, out_$i318: i1, out_$i320: i32, out_$i321: i1, out_$i322: i32, out_$i323: i1, out_$i324: i1, out_$i325: i1, out_$i326: i1, out_$i327: i1, out_$i328: i32, out_$i329: i1, out_$p330: ref, out_$p331: ref, out_$i333: i32, out_$i334: i32, out_$i335: i32, out_$i336: i1, out_$p337: ref, out_$i338: i64, out_$i340: i32, out_$i341: i1, out_$p342: ref, out_$i343: i64, out_$i344: i32, out_$i346: i32, out_$i347: i1, out_$p348: ref, out_$p349: ref, out_$i350: i32, out_$i351: i32, out_$i352: i1, out_$i353: i32, out_$i354: i32, out_$i355: i32, out_$i356: i1, out_$i357: i32, out_$i358: i1, out_$i359: i32, out_$i360: i1, out_$i362: i32, out_$i363: i1, out_$i364: i32, out_$i365: i1, out_$i366: i32, out_$i367: i1, out_$i369: i32, out_$i370: i1, out_$i371: i32, out_$i372: i1, out_$i373: i32, out_$i374: i1, out_$i376: i32, out_$i377: i1, out_$i378: i32, out_$i379: i1, out_$i380: i32, out_$i381: i1, out_$i383: i32, out_$i384: i1, out_$i385: i32, out_$i386: i1, out_$i387: i32, out_$i388: i1, out_$i390: i32, out_$i391: i1, out_$i392: i32, out_$i393: i1, out_$i394: i32, out_$i395: i1, out_$i397: i32, out_$i398: i1, out_$i399: i32, out_$i400: i1, out_$i401: i1, out_$i402: i1, out_$i403: i32, out_$i404: i1, out_$i405: i32, out_$i406: i32, out_$i407: i32, out_$i408: i1, out_$i410: i32, out_$i411: i32, out_$i412: i32, out_$i413: i1, out_$i414: i32, out_$i415: i1, out_$i416: i32, out_$i417: i1, out_$i419: i32, out_$i420: i1, out_$i421: i32, out_$i422: i1, out_$i423: i1, out_$i424: i1, out_$i425: i32, out_$i426: i1, out_$p427: ref, out_$p428: ref, out_$i429: i64, out_$i431: i32, out_$i432: i1, out_$p433: ref, out_$p434: ref, out_$i436: i32, out_$i437: i1, out_$i438: i32, out_$i439: i1, out_$i440: i32, out_$i441: i1, out_vslice_dummy_var_82: i64, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i64, out_vslice_dummy_var_85: i64, out_vslice_dummy_var_86: i64, out_vslice_dummy_var_87: i64, out_vslice_dummy_var_88: i64, out_vslice_dummy_var_89: i64, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i64, out_vslice_dummy_var_92: i64, out_vslice_dummy_var_93: i64, out_vslice_dummy_var_94: i64, out_vslice_dummy_var_95: i64, out_vslice_dummy_var_96: i64, out_vslice_dummy_var_97: i64, out_vslice_dummy_var_98: i64, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i64, out_vslice_dummy_var_101: i64, out_vslice_dummy_var_102: i64, out_vslice_dummy_var_103: i64);
  modifies $M.81, $M.82, $M.104, $M.0, $M.1, $M.10, $CurrAddr, assertsPassed, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.88, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.83, $M.84, $M.85, $M.75, $M.22, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.20, $M.15, $M.86, $M.127, $M.71, $M.28, $M.29, $M.30, $M.31, $M.32, $M.72, $M.73, $M.33, $M.34, $M.87, $M.80, $M.126, $M.125, $M.90, $M.91, $M.92, $M.76, $M.77, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.78, $M.79, $M.102, $M.103, $M.89, $M.123, $M.128, $M.124, $M.66;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


